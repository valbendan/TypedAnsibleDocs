{
  "cisco.ise.aci_bindings_info": {
    "doc": {
      "description": "Get all Aci Bindings.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "filterBy": {
          "aliases": [],
          "description": "FilterBy query parameter.",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "filterValue": {
          "aliases": [],
          "description": "FilterValue query parameter.",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sort": {
          "aliases": [],
          "description": "Sort query parameter. Sort type - asc or desc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sortBy": {
          "aliases": [],
          "description": "SortBy query parameter. Sort column by which objects needs to be sorted.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Aci Bindings",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Aci Bindings\n  cisco.ise.aci_bindings_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n    sort: asc\n    sortBy: string\n    filterBy: []\n    filterValue: []\n  register: result\n\n"
  },
  "cisco.ise.aci_settings": {
    "doc": {
      "description": "Manage operation update of the resource Aci Settings.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "aci50": {
          "aliases": [],
          "description": "Enable 5.0 ACI Version.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "aci51": {
          "aliases": [],
          "description": "Enable 5.1 ACI Version.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "aciipaddress": {
          "aliases": [],
          "description": "ACI Domain manager Ip Address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "acipassword": {
          "aliases": [],
          "description": "ACI Domain manager Password.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "aciuserName": {
          "aliases": [],
          "description": "ACI Domain manager Username.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "adminName": {
          "aliases": [],
          "description": "ACI Cluster Admin name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "adminPassword": {
          "aliases": [],
          "description": "ACI Cluster Admin password.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "allSxpDomain": {
          "aliases": [],
          "description": "AllSxpDomain flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "defaultSgtName": {
          "aliases": [],
          "description": "Aci Settings's defaultSgtName.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "enableAci": {
          "aliases": [],
          "description": "Enable ACI Integration.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "enableDataPlane": {
          "aliases": [],
          "description": "EnableDataPlane flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "enableElementsLimit": {
          "aliases": [],
          "description": "EnableElementsLimit flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Resource UUID value.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipAddressHostName": {
          "aliases": [],
          "description": "ACI Cluster IP Address / Host name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "l3RouteNetwork": {
          "aliases": [],
          "description": "Aci Settings's l3RouteNetwork.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "maxNumIepgFromAci": {
          "aliases": [],
          "description": "Aci Settings's maxNumIepgFromAci.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "maxNumSgtToAci": {
          "aliases": [],
          "description": "Aci Settings's maxNumSgtToAci.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "specificSxpDomain": {
          "aliases": [],
          "description": "SpecificSxpDomain flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "specifixSxpDomainList": {
          "aliases": [],
          "description": "Aci Settings's specifixSxpDomainList.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "suffixToEpg": {
          "aliases": [],
          "description": "Aci Settings's suffixToEpg.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "suffixToSgt": {
          "aliases": [],
          "description": "Aci Settings's suffixToSgt.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tenantName": {
          "aliases": [],
          "description": "Aci Settings's tenantName.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "untaggedPacketIepgName": {
          "aliases": [],
          "description": "Aci Settings's untaggedPacketIepgName.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Aci Settings",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.aci_settings:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    aci50: true\n    aci51: true\n    aciipaddress: string\n    acipassword: string\n    aciuserName: string\n    adminName: string\n    adminPassword: string\n    allSxpDomain: true\n    defaultSgtName: string\n    enableAci: true\n    enableDataPlane: true\n    enableElementsLimit: true\n    id: string\n    ipAddressHostName: string\n    l3RouteNetwork: string\n    maxNumIepgFromAci: 0\n    maxNumSgtToAci: 0\n    specificSxpDomain: true\n    specifixSxpDomainList:\n    - string\n    suffixToEpg: string\n    suffixToSgt: string\n    tenantName: string\n    untaggedPacketIepgName: string\n\n"
  },
  "cisco.ise.aci_settings_info": {
    "doc": {
      "description": "Get all Aci Settings.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Aci Settings",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Aci Settings\n  cisco.ise.aci_settings_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.aci_test_connectivity": {
    "doc": {
      "description": "Manage operation update of the resource Aci Test Connectivity.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Aci Test Connectivity",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update all\n  cisco.ise.aci_test_connectivity:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n\n"
  },
  "cisco.ise.active_directory": {
    "doc": {
      "description": "Manage operations create and delete of the resource Active Directory.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "adAttributes": {
          "aliases": [],
          "description": "Holds list of AD Attributes.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "attributes": {
              "aliases": [],
              "description": "List of Attributes.",
              "type": "list",
              "required": false,
              "suboptions": {
                "defaultValue": {
                  "aliases": [],
                  "description": "Required for each attribute in the attribute list. Can contain an empty string. All characters are allowed except <%\".",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "internalName": {
                  "aliases": [],
                  "description": "Required for each attribute in the attribute list. All characters are allowed except <%\".",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "name": {
                  "aliases": [],
                  "description": "Required for each attribute in the attribute list with no duplication between attributes. All characters are allowed except <%\".",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "type": {
                  "aliases": [],
                  "description": "Required for each group in the group list. Allowed values STRING, IP, BOOLEAN, INT, OCTET_STRING.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        },
        "adScopesNames": {
          "aliases": [],
          "description": "String that contains the names of the scopes that the active directory belongs to. Names are separated by comma. Alphanumeric, underscore (_) characters are allowed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "adgroups": {
          "aliases": [],
          "description": "Holds list of AD Groups.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "groups": {
              "aliases": [],
              "description": "List of Groups.",
              "type": "list",
              "required": false,
              "suboptions": {
                "name": {
                  "aliases": [],
                  "description": "Required for each group in the group list with no duplication between groups. All characters are allowed except %.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "sid": {
                  "aliases": [],
                  "description": "Cisco ISE uses security identifiers (SIDs) for optimization of group membership evaluation. SIDs are useful for efficiency (speed) when the groups are evaluated. All characters are allowed except %.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "type": {
                  "aliases": [],
                  "description": "No character restriction.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        },
        "advancedSettings": {
          "aliases": [],
          "description": "Active Directory's advancedSettings.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "agingTime": {
              "aliases": [],
              "description": "Range 1-8760 hours.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "authProtectionType": {
              "aliases": [],
              "description": "Enable prevent AD account lockout. Allowed values - WIRELESS, - WIRED, - BOTH.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "country": {
              "aliases": [],
              "description": "User info attribute. All characters are allowed except %.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "department": {
              "aliases": [],
              "description": "User info attribute. All characters are allowed except %.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "email": {
              "aliases": [],
              "description": "User info attribute. All characters are allowed except %.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "enableCallbackForDialinClient": {
              "aliases": [],
              "description": "EnableCallbackForDialinClient flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "enableDialinPermissionCheck": {
              "aliases": [],
              "description": "EnableDialinPermissionCheck flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "enableFailedAuthProtection": {
              "aliases": [],
              "description": "Enable prevent AD account lockout due to too many bad password attempts.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "enableMachineAccess": {
              "aliases": [],
              "description": "EnableMachineAccess flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "enableMachineAuth": {
              "aliases": [],
              "description": "EnableMachineAuth flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "enablePassChange": {
              "aliases": [],
              "description": "EnablePassChange flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "enableRewrites": {
              "aliases": [],
              "description": "EnableRewrites flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "failedAuthThreshold": {
              "aliases": [],
              "description": "Number of bad password attempts.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "firstName": {
              "aliases": [],
              "description": "User info attribute. All characters are allowed except %.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "identityNotInAdBehaviour": {
              "aliases": [],
              "description": "Allowed values REJECT, SEARCH_JOINED_FOREST, SEARCH_ALL.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "jobTitle": {
              "aliases": [],
              "description": "User info attribute. All characters are allowed except %.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "lastName": {
              "aliases": [],
              "description": "User info attribute. All characters are allowed except %.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "locality": {
              "aliases": [],
              "description": "User info attribute. All characters are allowed except %.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "organizationalUnit": {
              "aliases": [],
              "description": "User info attribute. All characters are allowed except %.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "plaintextAuth": {
              "aliases": [],
              "description": "PlaintextAuth flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "rewriteRules": {
              "aliases": [],
              "description": "Identity rewrite is an advanced feature that directs Cisco ISE to manipulate the identity before it is passed to the external Active Directory system. You can create rules to change the identity to a desired format that includes or excludes a domain prefix and/or suffix or other additional markup of your choice.",
              "type": "list",
              "required": false,
              "suboptions": {
                "rewriteMatch": {
                  "aliases": [],
                  "description": "Required for each rule in the list with no duplication between rules. All characters are allowed except %\".",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "rewriteResult": {
                  "aliases": [],
                  "description": "Required for each rule in the list. All characters are allowed except %\".",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "rowId": {
                  "aliases": [],
                  "description": "Required for each rule in the list in serial order.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "schema": {
              "aliases": [],
              "description": "Allowed values ACTIVE_DIRECTORY, CUSTOM. Choose ACTIVE_DIRECTORY schema when the AD attributes defined in AD can be copied to relevant attributes in Cisco ISE. If customization is needed, choose CUSTOM schema. All User info attributes are always set to default value if schema is ACTIVE_DIRECTORY. Values can be changed only for CUSTOM schema.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "stateOrProvince": {
              "aliases": [],
              "description": "User info attribute. All characters are allowed except %.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "streetAddress": {
              "aliases": [],
              "description": "User info attribute. All characters are allowed except %.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "telephone": {
              "aliases": [],
              "description": "User info attribute. All characters are allowed except %.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "unreachableDomainsBehaviour": {
              "aliases": [],
              "description": "Allowed values PROCEED, DROP.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "description": {
          "aliases": [],
          "description": "No character restriction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "The AD domain. Alphanumeric, hyphen (-) and dot (.) characters are allowed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "enableDomainWhiteList": {
          "aliases": [],
          "description": "EnableDomainWhiteList flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Resource Name. Maximum 32 characters allowed. Allowed characters are alphanumeric and .-_/\\\\ characters.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Active Directory",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Delete by id\n  cisco.ise.active_directory:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n- name: Create\n  cisco.ise.active_directory:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    adAttributes:\n      attributes:\n      - defaultValue: string\n        internalName: string\n        name: string\n        type: string\n    adScopesNames: string\n    adgroups:\n      groups:\n      - name: string\n        sid: string\n        type: string\n    advancedSettings:\n      agingTime: 0\n      authProtectionType: string\n      country: string\n      department: string\n      email: string\n      enableCallbackForDialinClient: true\n      enableDialinPermissionCheck: true\n      enableFailedAuthProtection: true\n      enableMachineAccess: true\n      enableMachineAuth: true\n      enablePassChange: true\n      enableRewrites: true\n      failedAuthThreshold: 0\n      firstName: string\n      identityNotInAdBehaviour: string\n      jobTitle: string\n      lastName: string\n      locality: string\n      organizationalUnit: string\n      plaintextAuth: true\n      rewriteRules:\n      - rewriteMatch: string\n        rewriteResult: string\n        rowId: 0\n      schema: string\n      stateOrProvince: string\n      streetAddress: string\n      telephone: string\n      unreachableDomainsBehaviour: string\n    description: string\n    domain: string\n    enableDomainWhiteList: true\n    id: string\n    name: string\n\n"
  },
  "cisco.ise.active_directory_add_groups": {
    "doc": {
      "description": "Manage operation update of the resource Active Directory Add Groups.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "adAttributes": {
          "aliases": [],
          "description": "Holds list of AD Attributes.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "attributes": {
              "aliases": [],
              "description": "List of Attributes.",
              "type": "list",
              "required": false,
              "suboptions": {
                "defaultValue": {
                  "aliases": [],
                  "description": "Required for each attribute in the attribute list. Can contain an empty string. All characters are allowed except <%\".",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "internalName": {
                  "aliases": [],
                  "description": "Required for each attribute in the attribute list. All characters are allowed except <%\".",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "name": {
                  "aliases": [],
                  "description": "Required for each attribute in the attribute list with no duplication between attributes. All characters are allowed except <%\".",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "type": {
                  "aliases": [],
                  "description": "Required for each group in the group list. Allowed values STRING, IP, BOOLEAN, INT, OCTET_STRING.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        },
        "adScopesNames": {
          "aliases": [],
          "description": "String that contains the names of the scopes that the active directory belongs to. Names are separated by comma. Alphanumeric, underscore (_) characters are allowed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "adgroups": {
          "aliases": [],
          "description": "Holds list of AD Groups.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "groups": {
              "aliases": [],
              "description": "List of Groups.",
              "type": "list",
              "required": false,
              "suboptions": {
                "name": {
                  "aliases": [],
                  "description": "Required for each group in the group list with no duplication between groups. All characters are allowed except %.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "sid": {
                  "aliases": [],
                  "description": "Cisco ISE uses security identifiers (SIDs) for optimization of group membership evaluation. SIDs are useful for efficiency (speed) when the groups are evaluated. All characters are allowed except %.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "type": {
                  "aliases": [],
                  "description": "No character restriction.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        },
        "advancedSettings": {
          "aliases": [],
          "description": "Active Directory Add Groups's advancedSettings.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "agingTime": {
              "aliases": [],
              "description": "Range 1-8760 hours.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "authProtectionType": {
              "aliases": [],
              "description": "Enable prevent AD account lockout. Allowed values - WIRELESS, - WIRED, - BOTH.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "country": {
              "aliases": [],
              "description": "User info attribute. All characters are allowed except %.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "department": {
              "aliases": [],
              "description": "User info attribute. All characters are allowed except %.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "email": {
              "aliases": [],
              "description": "User info attribute. All characters are allowed except %.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "enableCallbackForDialinClient": {
              "aliases": [],
              "description": "EnableCallbackForDialinClient flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "enableDialinPermissionCheck": {
              "aliases": [],
              "description": "EnableDialinPermissionCheck flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "enableFailedAuthProtection": {
              "aliases": [],
              "description": "Enable prevent AD account lockout due to too many bad password attempts.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "enableMachineAccess": {
              "aliases": [],
              "description": "EnableMachineAccess flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "enableMachineAuth": {
              "aliases": [],
              "description": "EnableMachineAuth flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "enablePassChange": {
              "aliases": [],
              "description": "EnablePassChange flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "enableRewrites": {
              "aliases": [],
              "description": "EnableRewrites flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "failedAuthThreshold": {
              "aliases": [],
              "description": "Number of bad password attempts.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "firstName": {
              "aliases": [],
              "description": "User info attribute. All characters are allowed except %.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "identityNotInAdBehaviour": {
              "aliases": [],
              "description": "Allowed values REJECT, SEARCH_JOINED_FOREST, SEARCH_ALL.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "jobTitle": {
              "aliases": [],
              "description": "User info attribute. All characters are allowed except %.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "lastName": {
              "aliases": [],
              "description": "User info attribute. All characters are allowed except %.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "locality": {
              "aliases": [],
              "description": "User info attribute. All characters are allowed except %.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "organizationalUnit": {
              "aliases": [],
              "description": "User info attribute. All characters are allowed except %.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "plaintextAuth": {
              "aliases": [],
              "description": "PlaintextAuth flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "rewriteRules": {
              "aliases": [],
              "description": "Identity rewrite is an advanced feature that directs Cisco ISE to manipulate the identity before it is passed to the external Active Directory system. You can create rules to change the identity to a desired format that includes or excludes a domain prefix and/or suffix or other additional markup of your choice.",
              "type": "list",
              "required": false,
              "suboptions": {
                "rewriteMatch": {
                  "aliases": [],
                  "description": "Required for each rule in the list with no duplication between rules. All characters are allowed except %\".",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "rewriteResult": {
                  "aliases": [],
                  "description": "Required for each rule in the list. All characters are allowed except %\".",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "rowId": {
                  "aliases": [],
                  "description": "Required for each rule in the list in serial order.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "schema": {
              "aliases": [],
              "description": "Allowed values ACTIVE_DIRECTORY, CUSTOM. Choose ACTIVE_DIRECTORY schema when the AD attributes defined in AD can be copied to relevant attributes in Cisco ISE. If customization is needed, choose CUSTOM schema. All User info attributes are always set to default value if schema is ACTIVE_DIRECTORY. Values can be changed only for CUSTOM schema.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "stateOrProvince": {
              "aliases": [],
              "description": "User info attribute. All characters are allowed except %.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "streetAddress": {
              "aliases": [],
              "description": "User info attribute. All characters are allowed except %.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "telephone": {
              "aliases": [],
              "description": "User info attribute. All characters are allowed except %.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "unreachableDomainsBehaviour": {
              "aliases": [],
              "description": "Allowed values PROCEED, DROP.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "description": {
          "aliases": [],
          "description": "No character restriction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "The AD domain. Alphanumeric, hyphen (-) and dot (.) characters are allowed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "enableDomainWhiteList": {
          "aliases": [],
          "description": "EnableDomainWhiteList flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Resource UUID value.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Resource Name. Maximum 32 characters allowed. Allowed characters are alphanumeric and .-_/\\\\ characters.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Active Directory Add Groups",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update all\n  cisco.ise.active_directory_add_groups:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    adAttributes:\n      attributes:\n      - defaultValue: string\n        internalName: string\n        name: string\n        type: string\n    adScopesNames: string\n    adgroups:\n      groups:\n      - name: string\n        sid: string\n        type: string\n    advancedSettings:\n      agingTime: 0\n      authProtectionType: string\n      country: string\n      department: string\n      email: string\n      enableCallbackForDialinClient: true\n      enableDialinPermissionCheck: true\n      enableFailedAuthProtection: true\n      enableMachineAccess: true\n      enableMachineAuth: true\n      enablePassChange: true\n      enableRewrites: true\n      failedAuthThreshold: 0\n      firstName: string\n      identityNotInAdBehaviour: string\n      jobTitle: string\n      lastName: string\n      locality: string\n      organizationalUnit: string\n      plaintextAuth: true\n      rewriteRules:\n      - rewriteMatch: string\n        rewriteResult: string\n        rowId: 0\n      schema: string\n      stateOrProvince: string\n      streetAddress: string\n      telephone: string\n      unreachableDomainsBehaviour: string\n    description: string\n    domain: string\n    enableDomainWhiteList: true\n    id: string\n    name: string\n\n"
  },
  "cisco.ise.active_directory_groups_by_domain_info": {
    "doc": {
      "description": "Get all Active Directory Groups By Domain.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "additionalData": {
          "aliases": [],
          "description": "Active Directory Get Groups By Domain Info's additionalData.",
          "type": "list",
          "required": false,
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "Active Directory Get Groups By Domain Info's name.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "value": {
              "aliases": [],
              "description": "Active Directory Get Groups By Domain Info's value.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Active Directory Groups By Domain",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Active Directory Groups By Domain\n  cisco.ise.active_directory_groups_by_domain_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n    additionalData:\n    - name: domain\n      value: Required. The domain whose groups we want to fetch\n    - name: filter\n      value: Optional. Exact match filter on group's CN\n    - name: sidFilter\n      value: Optional. Exact match filter on group's SID, optionally specifying the domain\n        as prefix. e.g. S-1-5-33-544 and R1.dom/S-1-5-33-544 are legal\n    - name: typeFilter\n      value: Optional. Can be exactly one of:BUILTIN, DOMAIN LOCAL, GLOBAL, UNIVERSAL\n  register: result\n\n"
  },
  "cisco.ise.active_directory_info": {
    "doc": {
      "description": "Get all Active Directory.\nGet Active Directory by id.\nGet Active Directory by name.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Active Directory",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Active Directory\n  cisco.ise.active_directory_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n  register: result\n\n- name: Get Active Directory by id\n  cisco.ise.active_directory_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n- name: Get Active Directory by name\n  cisco.ise.active_directory_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    name: string\n  register: result\n\n"
  },
  "cisco.ise.active_directory_is_user_member_of_group_info": {
    "doc": {
      "description": "Get all Active Directory Is User Member Of Group.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "additionalData": {
          "aliases": [],
          "description": "Active Directory Is User Member Of Group's additionalData.",
          "type": "list",
          "required": false,
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "Active Directory Is User Member Of Group's name.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "value": {
              "aliases": [],
              "description": "Active Directory Is User Member Of Group's value.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Active Directory Is User Member Of Group",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Active Directory Is User Member Of Group\n  cisco.ise.active_directory_is_user_member_of_group_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n    additionalData:\n    - name: username\n      value: Required. Perform the check on this user\n    - name: groupsids\n      value: Required. Membership is looked for. The result will be a subset of this list\n        of the groups the user is a member of\n  register: result\n\n"
  },
  "cisco.ise.active_directory_join_domain": {
    "doc": {
      "description": "Manage operation update of the resource Active Directory Join Domain.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "additionalData": {
          "aliases": [],
          "description": "Active Directory Join Domain's additionalData.",
          "type": "list",
          "required": false,
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "Active Directory Join Domain's name.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "value": {
              "aliases": [],
              "description": "Active Directory Join Domain's value.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Active Directory Join Domain",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update all\n  cisco.ise.active_directory_join_domain:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    additionalData:\n    - name: username\n      value: Required. The domain user to use\n    - name: password\n      value: Required. The domain user's password\n    - name: node\n      value: Required. The name of the ISE node to join the domain. The node names can\n        be retrieved with the \"Node Details/Get All\" ERS operation\n    - name: orgunit\n      value: Optional. The organizational unit in AD where the machine object for the\n        joined ISE will be stored.\n    id: string\n\n"
  },
  "cisco.ise.active_directory_join_domain_with_all_nodes": {
    "doc": {
      "description": "Manage operation update of the resource Active Directory Join Domain With All Nodes.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "additionalData": {
          "aliases": [],
          "description": "Active Directory Join Domain With All Nodes's additionalData.",
          "type": "list",
          "required": false,
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "Active Directory Join Domain With All Nodes's name.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "value": {
              "aliases": [],
              "description": "Active Directory Join Domain With All Nodes's value.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Active Directory Join Domain With All Nodes",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update all\n  cisco.ise.active_directory_join_domain_with_all_nodes:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    additionalData:\n    - name: username\n      value: Required. The domain user to use\n    - name: password\n      value: Required. The domain user's password\n    id: string\n\n"
  },
  "cisco.ise.active_directory_leave_domain": {
    "doc": {
      "description": "Manage operation update of the resource Active Directory Leave Domain.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "additionalData": {
          "aliases": [],
          "description": "Active Directory Leave Domain's additionalData.",
          "type": "list",
          "required": false,
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "Active Directory Leave Domain's name.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "value": {
              "aliases": [],
              "description": "Active Directory Leave Domain's value.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Active Directory Leave Domain",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update all\n  cisco.ise.active_directory_leave_domain:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    additionalData:\n    - name: username\n      value: Required. The domain user to use\n    - name: password\n      value: Required. The domain user's password\n    - name: node\n      value: Required. The name of the ISE node to leave the domain. The node names can\n        be retrieved with the \"Node Details/Get All\" ERS operation\n    - name: orgunit\n      value: Optional. The organizational unit in AD where the machine object for the\n        joined ISE will be stored\n    id: string\n\n"
  },
  "cisco.ise.active_directory_leave_domain_with_all_nodes": {
    "doc": {
      "description": "Manage operation update of the resource Active Directory Leave Domain With All Nodes.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "additionalData": {
          "aliases": [],
          "description": "Active Directory Leave Domain With All Nodes's additionalData.",
          "type": "list",
          "required": false,
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "Active Directory Leave Domain With All Nodes's name.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "value": {
              "aliases": [],
              "description": "Active Directory Leave Domain With All Nodes's value.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Active Directory Leave Domain With All Nodes",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update all\n  cisco.ise.active_directory_leave_domain_with_all_nodes:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    additionalData:\n    - name: username\n      value: Required. The domain user to use\n    - name: password\n      value: Required. The domain user's password\n    id: string\n\n"
  },
  "cisco.ise.active_directory_trusted_domains_info": {
    "doc": {
      "description": "Get all Active Directory Trusted Domains.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Active Directory Trusted Domains",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Active Directory Trusted Domains\n  cisco.ise.active_directory_trusted_domains_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.active_directory_user_groups_info": {
    "doc": {
      "description": "Get all Active Directory User Groups.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "additionalData": {
          "aliases": [],
          "description": "Active Directory Get User Groups Info's additionalData.",
          "type": "list",
          "required": false,
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "Active Directory Get User Groups Info's name.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "value": {
              "aliases": [],
              "description": "Active Directory Get User Groups Info's value.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Active Directory User Groups",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Active Directory User Groups\n  cisco.ise.active_directory_user_groups_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n    additionalData:\n    - name: username\n      value: Required. The user to get its groups.\n  register: result\n\n"
  },
  "cisco.ise.admin_user_info": {
    "doc": {
      "description": "Get all Admin User.\nGet Admin User by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter query parameter. <br/> **Simple filtering** should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the \"filterType=or\" query string parameter. Each resource Data model description should specify if an attribute is a filtered field. <br/> Operator | Description <br/> ------------|----------------- <br/> EQ | Equals <br/> NEQ | Not Equals <br/> GT | Greater Than <br/> LT | Less Then <br/> STARTSW | Starts With <br/> NSTARTSW | Not Starts With <br/> ENDSW | Ends With <br/> NENDSW | Not Ends With <br/> CONTAINS | Contains <br/> NCONTAINS | Not Contains <br/>.\n",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "filterType": {
          "aliases": [],
          "description": "FilterType query parameter. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sortasc": {
          "aliases": [],
          "description": "Sortasc query parameter. Sort asc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sortdsc": {
          "aliases": [],
          "description": "Sortdsc query parameter. Sort desc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Admin User",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Admin User\n  cisco.ise.admin_user_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n    sortasc: string\n    sortdsc: string\n    filter: []\n    filterType: AND\n  register: result\n\n- name: Get Admin User by id\n  cisco.ise.admin_user_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.allowed_protocols": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Allowed Protocols.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "allowChap": {
          "aliases": [],
          "description": "AllowChap flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "allowEapFast": {
          "aliases": [],
          "description": "AllowEapFast flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "allowEapMd5": {
          "aliases": [],
          "description": "AllowEapMd5 flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "allowEapTls": {
          "aliases": [],
          "description": "AllowEapTls flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "allowEapTtls": {
          "aliases": [],
          "description": "AllowEapTtls flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "allowLeap": {
          "aliases": [],
          "description": "AllowLeap flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "allowMsChapV1": {
          "aliases": [],
          "description": "AllowMsChapV1 flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "allowMsChapV2": {
          "aliases": [],
          "description": "AllowMsChapV2 flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "allowPapAscii": {
          "aliases": [],
          "description": "AllowPapAscii flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "allowPeap": {
          "aliases": [],
          "description": "AllowPeap flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "allowPreferredEapProtocol": {
          "aliases": [],
          "description": "AllowPreferredEapProtocol flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "allowTeap": {
          "aliases": [],
          "description": "AllowTeap flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "allowWeakCiphersForEap": {
          "aliases": [],
          "description": "AllowWeakCiphersForEap flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Allowed Protocols's description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "eapFast": {
          "aliases": [],
          "description": "The eapFast is required only if allowEapFast is true, otherwise it must be ignored. The object eapFast contains the settings for EAP FAST protocol.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "allowEapFastEapGtc": {
              "aliases": [],
              "description": "AllowEapFastEapGtc flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "allowEapFastEapGtcPwdChange": {
              "aliases": [],
              "description": "The allowEapFastEapGtcPwdChange is required only if allowEapFastEapGtc is true, otherwise it must be ignored.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "allowEapFastEapGtcPwdChangeRetries": {
              "aliases": [],
              "description": "The allowEapFastEapGtcPwdChangeRetries is required only if allowEapFastEapGtc is true, otherwise it must be ignored. Valid range is 0-3.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "allowEapFastEapMsChapV2": {
              "aliases": [],
              "description": "AllowEapFastEapMsChapV2 flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "allowEapFastEapMsChapV2PwdChange": {
              "aliases": [],
              "description": "The allowEapFastEapMsChapV2PwdChange is required only if allowEapFastEapMsChapV2 is true, otherwise it must be ignored.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "allowEapFastEapMsChapV2PwdChangeRetries": {
              "aliases": [],
              "description": "The allowEapFastEapMsChapV2PwdChangeRetries is required only if eapTtlsEapMsChapV2 is true, otherwise it must be ignored. Valid range is 0-3.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "allowEapFastEapTls": {
              "aliases": [],
              "description": "AllowEapFastEapTls flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "allowEapFastEapTlsAuthOfExpiredCerts": {
              "aliases": [],
              "description": "The allowEapFastEapTlsAuthOfExpiredCerts is required only if allowEapFastEapTls is true, otherwise it must be ignored.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "eapFastDontUsePacsAcceptClientCert": {
              "aliases": [],
              "description": "The eapFastDontUsePacsAcceptClientCert is required only if eapFastUsePacs is FALSE, otherwise it must be ignored.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "eapFastDontUsePacsAllowMachineAuthentication": {
              "aliases": [],
              "description": "The eapFastDontUsePacsAllowMachineAuthentication is required only if eapFastUsePacs is FALSE, otherwise it must be ignored.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "eapFastEnableEAPChaining": {
              "aliases": [],
              "description": "EapFastEnableEAPChaining flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "eapFastUsePacs": {
              "aliases": [],
              "description": "EapFastUsePacs flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "eapFastUsePacsAcceptClientCert": {
              "aliases": [],
              "description": "The eapFastUsePacsAcceptClientCert is required only if eapFastUsePacsAllowAuthenProvisioning is true, otherwise it must be ignored.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "eapFastUsePacsAllowAnonymProvisioning": {
              "aliases": [],
              "description": "The eapFastUsePacsAllowAnonymProvisioning is required only if eapFastUsePacs is true, otherwise it must be ignored.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "eapFastUsePacsAllowAuthenProvisioning": {
              "aliases": [],
              "description": "The eapFastUsePacsAllowAuthenProvisioning is required only if eapFastUsePacs is true, otherwise it must be ignored.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "eapFastUsePacsAllowMachineAuthentication": {
              "aliases": [],
              "description": "EapFastUsePacsAllowMachineAuthentication flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "eapFastUsePacsAuthorizationPacTtl": {
              "aliases": [],
              "description": "The eapFastUsePacsAuthorizationPacTtl is required only if eapFastUsePacsStatelessSessionResume is true, otherwise it must be ignored.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "eapFastUsePacsAuthorizationPacTtlUnits": {
              "aliases": [],
              "description": "The eapFastUsePacsAuthorizationPacTtlUnits is required only if eapFastUsePacsStatelessSessionResume is true, otherwise it must be ignored. Allowed Values - SECONDS, - MINUTES, - HOURS, - DAYS, - WEEKS.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "eapFastUsePacsMachinePacTtl": {
              "aliases": [],
              "description": "The eapFastUsePacsMachinePacTtl is required only if eapFastUsePacsAllowMachineAuthentication is true, otherwise it must be ignored.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "eapFastUsePacsMachinePacTtlUnits": {
              "aliases": [],
              "description": "The eapFastUsePacsMachinePacTtlUnits is required only if eapFastUsePacsAllowMachineAuthentication is true, otherwise it must be ignored. Allowed Values - SECONDS, - MINUTES, - HOURS, - DAYS, - WEEKS.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "eapFastUsePacsReturnAccessAcceptAfterAuthenticatedProvisioning": {
              "aliases": [],
              "description": "The eapFastUsePacsReturnAccessAcceptAfterAuthenticatedProvisioning is required only if eapFastUsePacsAllowAuthenProvisioning is true, otherwise it must be ignored.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "eapFastUsePacsStatelessSessionResume": {
              "aliases": [],
              "description": "The eapFastUsePacsStatelessSessionResume is required only if eapFastUsePacs is true, otherwise it must be ignored.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "eapFastUsePacsTunnelPacTtl": {
              "aliases": [],
              "description": "The eapFastUsePacsTunnelPacTtl is required only if eapFastUsePacs is true, otherwise it must be ignored.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "eapFastUsePacsTunnelPacTtlUnits": {
              "aliases": [],
              "description": "The eapFastUsePacsTunnelPacTtlUnits is required only if eapFastUsePacs is true, otherwise it must be ignored. Allowed Values - SECONDS, - MINUTES, - HOURS, - DAYS, - WEEKS.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "eapFastUsePacsUseProactivePacUpdatePrecentage": {
              "aliases": [],
              "description": "The eapFastUsePacsUseProactivePacUpdatePrecentage is required only if eapFastUsePacs is true, otherwise it must be ignored.",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "eapTls": {
          "aliases": [],
          "description": "The eapTls is required only if allowEapTls is true, otherwise it must be ignored. The object eapTls contains the settings for EAP TLS protocol.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "allowEapTlsAuthOfExpiredCerts": {
              "aliases": [],
              "description": "AllowEapTlsAuthOfExpiredCerts flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "eapTlsEnableStatelessSessionResume": {
              "aliases": [],
              "description": "EapTlsEnableStatelessSessionResume flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "eapTlsSessionTicketPrecentage": {
              "aliases": [],
              "description": "The eapTlsSessionTicketPrecentage is required only if eapTlsEnableStatelessSessionResume is true, otherwise it must be ignored.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "eapTlsSessionTicketTtl": {
              "aliases": [],
              "description": "Time to live. The eapTlsSessionTicketTtl is required only if eapTlsEnableStatelessSessionResume is true, otherwise it must be ignored.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "eapTlsSessionTicketTtlUnits": {
              "aliases": [],
              "description": "Time to live time units. The eapTlsSessionTicketTtlUnits is required only if eapTlsEnableStatelessSessionResume is true, otherwise it must be ignored. Allowed Values - SECONDS, - MINUTES, - HOURS, - DAYS, - WEEKS.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "eapTlsLBit": {
          "aliases": [],
          "description": "EapTlsLBit flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "eapTtls": {
          "aliases": [],
          "description": "The eapTtls is required only if allowEapTtls is true, otherwise it must be ignored. The object eapTtls contains the settings for EAP TTLS protocol.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "eapTtlsChap": {
              "aliases": [],
              "description": "EapTtlsChap flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "eapTtlsEapMd5": {
              "aliases": [],
              "description": "EapTtlsEapMd5 flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "eapTtlsEapMsChapV2": {
              "aliases": [],
              "description": "EapTtlsEapMsChapV2 flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "eapTtlsEapMsChapV2PwdChange": {
              "aliases": [],
              "description": "The eapTtlsEapMsChapV2PwdChange is required only if eapTtlsEapMsChapV2 is true, otherwise it must be ignored.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "eapTtlsEapMsChapV2PwdChangeRetries": {
              "aliases": [],
              "description": "The eapTtlsEapMsChapV2PwdChangeRetries is required only if eapTtlsEapMsChapV2 is true, otherwise it must be ignored. Valid range is 0-3.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "eapTtlsMsChapV1": {
              "aliases": [],
              "description": "EapTtlsMsChapV1 flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "eapTtlsMsChapV2": {
              "aliases": [],
              "description": "EapTtlsMsChapV2 flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "eapTtlsPapAscii": {
              "aliases": [],
              "description": "EapTtlsPapAscii flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "id": {
          "aliases": [],
          "description": "Resource UUID, Mandatory for update.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Resource Name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "peap": {
          "aliases": [],
          "description": "Allowed Protocols's peap.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "allowPeapEapGtc": {
              "aliases": [],
              "description": "AllowPeapEapGtc flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "allowPeapEapGtcPwdChange": {
              "aliases": [],
              "description": "The allowPeapEapGtcPwdChange is required only if allowPeapEapGtc is true, otherwise it must be ignored.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "allowPeapEapGtcPwdChangeRetries": {
              "aliases": [],
              "description": "The allowPeapEapGtcPwdChangeRetries is required only if allowPeapEapGtc is true, otherwise it must be ignored. Valid range is 0-3.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "allowPeapEapMsChapV2": {
              "aliases": [],
              "description": "AllowPeapEapMsChapV2 flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "allowPeapEapMsChapV2PwdChange": {
              "aliases": [],
              "description": "The allowPeapEapMsChapV2PwdChange is required only if allowPeapEapMsChapV2 is true, otherwise it must be ignored.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "allowPeapEapMsChapV2PwdChangeRetries": {
              "aliases": [],
              "description": "The allowPeapEapMsChapV2PwdChangeRetries is required only if allowPeapEapMsChapV2 is true, otherwise it must be ignored. Valid range is 0-3.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "allowPeapEapTls": {
              "aliases": [],
              "description": "AllowPeapEapTls flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "allowPeapEapTlsAuthOfExpiredCerts": {
              "aliases": [],
              "description": "The allowPeapEapTlsAuthOfExpiredCerts is required only if allowPeapEapTls is true, otherwise it must be ignored.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "allowPeapV0": {
              "aliases": [],
              "description": "AllowPeapV0 flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "requireCryptobinding": {
              "aliases": [],
              "description": "RequireCryptobinding flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "preferredEapProtocol": {
          "aliases": [],
          "description": "The preferredEapProtocol is required only if allowPreferredEapProtocol is true, otherwise it must be ignored. Allowed Values - EAP_FAST, - PEAP, - LEAP, - EAP_MD5, - EAP_TLS, - EAP_TTLS, - TEAP.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "processHostLookup": {
          "aliases": [],
          "description": "ProcessHostLookup flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "requireMessageAuth": {
          "aliases": [],
          "description": "RequireMessageAuth flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "teap": {
          "aliases": [],
          "description": "The teap is required only if allowTeap is true, otherwise it must be ignored. The object teap contains the settings for TEAP protocol.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "acceptClientCertDuringTunnelEst": {
              "aliases": [],
              "description": "AcceptClientCertDuringTunnelEst flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "allowDowngradeMsk": {
              "aliases": [],
              "description": "AllowDowngradeMsk flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "allowTeapEapMsChapV2": {
              "aliases": [],
              "description": "AllowTeapEapMsChapV2 flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "allowTeapEapMsChapV2PwdChange": {
              "aliases": [],
              "description": "The allowTeapEapMsChapV2PwdChange is required only if allowTeapEapMsChapV2 is true, otherwise it must be ignored.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "allowTeapEapMsChapV2PwdChangeRetries": {
              "aliases": [],
              "description": "The allowTeapEapMsChapV2PwdChangeRetries is required only if allowTeapEapMsChapV2 is true, otherwise it must be ignored. Valid range is 0-3.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "allowTeapEapTls": {
              "aliases": [],
              "description": "AllowTeapEapTls flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "allowTeapEapTlsAuthOfExpiredCerts": {
              "aliases": [],
              "description": "The allowTeapEapTlsAuthOfExpiredCerts is required only if allowTeapEapTls is true, otherwise it must be ignored.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "enableEapChaining": {
              "aliases": [],
              "description": "EnableEapChaining flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Allowed Protocols",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.allowed_protocols:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    allowChap: true\n    allowEapFast: true\n    allowEapMd5: true\n    allowEapTls: true\n    allowEapTtls: true\n    allowLeap: true\n    allowMsChapV1: true\n    allowMsChapV2: true\n    allowPapAscii: true\n    allowPeap: true\n    allowPreferredEapProtocol: true\n    allowTeap: true\n    allowWeakCiphersForEap: true\n    description: string\n    eapFast:\n      allowEapFastEapGtc: true\n      allowEapFastEapGtcPwdChange: true\n      allowEapFastEapGtcPwdChangeRetries: 0\n      allowEapFastEapMsChapV2: true\n      allowEapFastEapMsChapV2PwdChange: true\n      allowEapFastEapMsChapV2PwdChangeRetries: 0\n      allowEapFastEapTls: true\n      allowEapFastEapTlsAuthOfExpiredCerts: true\n      eapFastDontUsePacsAcceptClientCert: true\n      eapFastDontUsePacsAllowMachineAuthentication: true\n      eapFastEnableEAPChaining: true\n      eapFastUsePacs: true\n      eapFastUsePacsAcceptClientCert: true\n      eapFastUsePacsAllowAnonymProvisioning: true\n      eapFastUsePacsAllowAuthenProvisioning: true\n      eapFastUsePacsAllowMachineAuthentication: true\n      eapFastUsePacsAuthorizationPacTtl: 0\n      eapFastUsePacsAuthorizationPacTtlUnits: string\n      eapFastUsePacsMachinePacTtl: 0\n      eapFastUsePacsMachinePacTtlUnits: string\n      eapFastUsePacsReturnAccessAcceptAfterAuthenticatedProvisioning: true\n      eapFastUsePacsStatelessSessionResume: true\n      eapFastUsePacsTunnelPacTtl: 0\n      eapFastUsePacsTunnelPacTtlUnits: string\n      eapFastUsePacsUseProactivePacUpdatePrecentage: 0\n    eapTls:\n      allowEapTlsAuthOfExpiredCerts: true\n      eapTlsEnableStatelessSessionResume: true\n      eapTlsSessionTicketPrecentage: 0\n      eapTlsSessionTicketTtl: 0\n      eapTlsSessionTicketTtlUnits: string\n    eapTlsLBit: true\n    eapTtls:\n      eapTtlsChap: true\n      eapTtlsEapMd5: true\n      eapTtlsEapMsChapV2: true\n      eapTtlsEapMsChapV2PwdChange: true\n      eapTtlsEapMsChapV2PwdChangeRetries: 0\n      eapTtlsMsChapV1: true\n      eapTtlsMsChapV2: true\n      eapTtlsPapAscii: true\n    id: string\n    name: string\n    peap:\n      allowPeapEapGtc: true\n      allowPeapEapGtcPwdChange: true\n      allowPeapEapGtcPwdChangeRetries: 0\n      allowPeapEapMsChapV2: true\n      allowPeapEapMsChapV2PwdChange: true\n      allowPeapEapMsChapV2PwdChangeRetries: 0\n      allowPeapEapTls: true\n      allowPeapEapTlsAuthOfExpiredCerts: true\n      allowPeapV0: true\n      requireCryptobinding: true\n    preferredEapProtocol: string\n    processHostLookup: true\n    requireMessageAuth: true\n    teap:\n      acceptClientCertDuringTunnelEst: true\n      allowDowngradeMsk: true\n      allowTeapEapMsChapV2: true\n      allowTeapEapMsChapV2PwdChange: true\n      allowTeapEapMsChapV2PwdChangeRetries: 0\n      allowTeapEapTls: true\n      allowTeapEapTlsAuthOfExpiredCerts: true\n      enableEapChaining: true\n\n- name: Delete by id\n  cisco.ise.allowed_protocols:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n- name: Create\n  cisco.ise.allowed_protocols:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    allowChap: true\n    allowEapFast: true\n    allowEapMd5: true\n    allowEapTls: true\n    allowEapTtls: true\n    allowLeap: true\n    allowMsChapV1: true\n    allowMsChapV2: true\n    allowPapAscii: true\n    allowPeap: true\n    allowPreferredEapProtocol: true\n    allowTeap: true\n    allowWeakCiphersForEap: true\n    description: string\n    eapFast:\n      allowEapFastEapGtc: true\n      allowEapFastEapGtcPwdChange: true\n      allowEapFastEapGtcPwdChangeRetries: 0\n      allowEapFastEapMsChapV2: true\n      allowEapFastEapMsChapV2PwdChange: true\n      allowEapFastEapMsChapV2PwdChangeRetries: 0\n      allowEapFastEapTls: true\n      allowEapFastEapTlsAuthOfExpiredCerts: true\n      eapFastDontUsePacsAcceptClientCert: true\n      eapFastDontUsePacsAllowMachineAuthentication: true\n      eapFastEnableEAPChaining: true\n      eapFastUsePacs: true\n      eapFastUsePacsAcceptClientCert: true\n      eapFastUsePacsAllowAnonymProvisioning: true\n      eapFastUsePacsAllowAuthenProvisioning: true\n      eapFastUsePacsAllowMachineAuthentication: true\n      eapFastUsePacsAuthorizationPacTtl: 0\n      eapFastUsePacsAuthorizationPacTtlUnits: string\n      eapFastUsePacsMachinePacTtl: 0\n      eapFastUsePacsMachinePacTtlUnits: string\n      eapFastUsePacsReturnAccessAcceptAfterAuthenticatedProvisioning: true\n      eapFastUsePacsStatelessSessionResume: true\n      eapFastUsePacsTunnelPacTtl: 0\n      eapFastUsePacsTunnelPacTtlUnits: string\n      eapFastUsePacsUseProactivePacUpdatePrecentage: 0\n    eapTls:\n      allowEapTlsAuthOfExpiredCerts: true\n      eapTlsEnableStatelessSessionResume: true\n      eapTlsSessionTicketPrecentage: 0\n      eapTlsSessionTicketTtl: 0\n      eapTlsSessionTicketTtlUnits: string\n    eapTlsLBit: true\n    eapTtls:\n      eapTtlsChap: true\n      eapTtlsEapMd5: true\n      eapTtlsEapMsChapV2: true\n      eapTtlsEapMsChapV2PwdChange: true\n      eapTtlsEapMsChapV2PwdChangeRetries: 0\n      eapTtlsMsChapV1: true\n      eapTtlsMsChapV2: true\n      eapTtlsPapAscii: true\n    name: string\n    peap:\n      allowPeapEapGtc: true\n      allowPeapEapGtcPwdChange: true\n      allowPeapEapGtcPwdChangeRetries: 0\n      allowPeapEapMsChapV2: true\n      allowPeapEapMsChapV2PwdChange: true\n      allowPeapEapMsChapV2PwdChangeRetries: 0\n      allowPeapEapTls: true\n      allowPeapEapTlsAuthOfExpiredCerts: true\n      allowPeapV0: true\n      requireCryptobinding: true\n    preferredEapProtocol: string\n    processHostLookup: true\n    requireMessageAuth: true\n    teap:\n      acceptClientCertDuringTunnelEst: true\n      allowDowngradeMsk: true\n      allowTeapEapMsChapV2: true\n      allowTeapEapMsChapV2PwdChange: true\n      allowTeapEapMsChapV2PwdChangeRetries: 0\n      allowTeapEapTls: true\n      allowTeapEapTlsAuthOfExpiredCerts: true\n      enableEapChaining: true\n\n"
  },
  "cisco.ise.allowed_protocols_info": {
    "doc": {
      "description": "Get all Allowed Protocols.\nGet Allowed Protocols by id.\nGet Allowed Protocols by name.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Allowed Protocols",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Allowed Protocols\n  cisco.ise.allowed_protocols_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n  register: result\n\n- name: Get Allowed Protocols by id\n  cisco.ise.allowed_protocols_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n- name: Get Allowed Protocols by name\n  cisco.ise.allowed_protocols_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    name: string\n  register: result\n\n"
  },
  "cisco.ise.anc_endpoint_apply": {
    "doc": {
      "description": "Manage operation update of the resource Anc Endpoint Apply.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "additionalData": {
          "aliases": [],
          "description": "Anc Endpoint Apply's additionalData.",
          "type": "list",
          "required": false,
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "Anc Endpoint Apply's name.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "value": {
              "aliases": [],
              "description": "Anc Endpoint Apply's value.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Anc Endpoint Apply",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update all\n  cisco.ise.anc_endpoint_apply:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    additionalData:\n    - name: macAddress\n      value: MAC address\n    - name: ipAddress\n      value: IP address\n    - name: policyName\n      value: Policy Name\n\n"
  },
  "cisco.ise.anc_endpoint_bulk_monitor_status_info": {
    "doc": {
      "description": "Get Anc Endpoint Bulk Monitor Status by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "bulkid": {
          "aliases": [],
          "description": "Bulkid path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Anc Endpoint Bulk Monitor Status",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get Anc Endpoint Bulk Monitor Status by id\n  cisco.ise.anc_endpoint_bulk_monitor_status_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    bulkid: string\n  register: result\n\n"
  },
  "cisco.ise.anc_endpoint_bulk_request": {
    "doc": {
      "description": "Manage operation update of the resource Anc Endpoint Bulk Request.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "operationType": {
          "aliases": [],
          "description": "Anc Endpoint Bulk Request's operationType.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "resourceMediaType": {
          "aliases": [],
          "description": "Anc Endpoint Bulk Request's resourceMediaType.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Anc Endpoint Bulk Request",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update all\n  cisco.ise.anc_endpoint_bulk_request:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    operationType: string\n    resourceMediaType: string\n\n"
  },
  "cisco.ise.anc_endpoint_clear": {
    "doc": {
      "description": "Manage operation update of the resource Anc Endpoint Clear.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "additionalData": {
          "aliases": [],
          "description": "Anc Endpoint Clear's additionalData.",
          "type": "list",
          "required": false,
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "Anc Endpoint Clear's name.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "value": {
              "aliases": [],
              "description": "Anc Endpoint Clear's value.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Anc Endpoint Clear",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update all\n  cisco.ise.anc_endpoint_clear:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    additionalData:\n    - name: macAddress\n      value: MAC address\n    - name: ipAddress\n      value: IP address\n\n"
  },
  "cisco.ise.anc_endpoint_info": {
    "doc": {
      "description": "Get all Anc Endpoint.\nGet Anc Endpoint by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter query parameter. <br/> **Simple filtering** should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the \"filterType=or\" query string parameter. Each resource Data model description should specify if an attribute is a filtered field. <br/> Operator | Description <br/> ------------|----------------- <br/> EQ | Equals <br/> NEQ | Not Equals <br/> GT | Greater Than <br/> LT | Less Then <br/> STARTSW | Starts With <br/> NSTARTSW | Not Starts With <br/> ENDSW | Ends With <br/> NENDSW | Not Ends With <br/> CONTAINS | Contains <br/> NCONTAINS | Not Contains <br/>.\n",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "filterType": {
          "aliases": [],
          "description": "FilterType query parameter. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sortasc": {
          "aliases": [],
          "description": "Sortasc query parameter. Sort asc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sortdsc": {
          "aliases": [],
          "description": "Sortdsc query parameter. Sort desc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Anc Endpoint",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Anc Endpoint\n  cisco.ise.anc_endpoint_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n    sortasc: string\n    sortdsc: string\n    filter: []\n    filterType: AND\n  register: result\n\n- name: Get Anc Endpoint by id\n  cisco.ise.anc_endpoint_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.anc_policy": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Anc Policy.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "actions": {
          "aliases": [],
          "description": "- QUARANTINE Allows you to use Exception policies (authorization policies) to limit or deny an endpoint access to the network. - PORTBOUNCE Resets the port on the network device to which the endpoint is connected. - SHUTDOWN Shuts down the port on the network device to which the endpoint is connected. - RE_AUTHENTICATE Re-authenticates the session from the endpoint.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Anc Policy's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Anc Policy's name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Anc Policy",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.anc_policy:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    actions:\n    - string\n    id: string\n    name: string\n\n- name: Delete by id\n  cisco.ise.anc_policy:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n- name: Create\n  cisco.ise.anc_policy:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    actions:\n    - string\n    name: string\n\n"
  },
  "cisco.ise.anc_policy_bulk_monitor_status_info": {
    "doc": {
      "description": "Get Anc Policy Bulk Monitor Status by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "bulkid": {
          "aliases": [],
          "description": "Bulkid path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Anc Policy Bulk Monitor Status",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get Anc Policy Bulk Monitor Status by id\n  cisco.ise.anc_policy_bulk_monitor_status_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    bulkid: string\n  register: result\n\n"
  },
  "cisco.ise.anc_policy_bulk_request": {
    "doc": {
      "description": "Manage operation update of the resource Anc Policy Bulk Request.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "operationType": {
          "aliases": [],
          "description": "Anc Policy Bulk Request's operationType.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "resourceMediaType": {
          "aliases": [],
          "description": "Anc Policy Bulk Request's resourceMediaType.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Anc Policy Bulk Request",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update all\n  cisco.ise.anc_policy_bulk_request:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    operationType: string\n    resourceMediaType: string\n\n"
  },
  "cisco.ise.anc_policy_info": {
    "doc": {
      "description": "Get all Anc Policy.\nGet Anc Policy by id.\nGet Anc Policy by name.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter query parameter. <br/> **Simple filtering** should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the \"filterType=or\" query string parameter. Each resource Data model description should specify if an attribute is a filtered field. <br/> Operator | Description <br/> ------------|----------------- <br/> EQ | Equals <br/> NEQ | Not Equals <br/> GT | Greater Than <br/> LT | Less Then <br/> STARTSW | Starts With <br/> NSTARTSW | Not Starts With <br/> ENDSW | Ends With <br/> NENDSW | Not Ends With <br/> CONTAINS | Contains <br/> NCONTAINS | Not Contains <br/>.\n",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "filterType": {
          "aliases": [],
          "description": "FilterType query parameter. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sortasc": {
          "aliases": [],
          "description": "Sortasc query parameter. Sort asc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sortdsc": {
          "aliases": [],
          "description": "Sortdsc query parameter. Sort desc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Anc Policy",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Anc Policy\n  cisco.ise.anc_policy_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n    sortasc: string\n    sortdsc: string\n    filter: []\n    filterType: AND\n  register: result\n\n- name: Get Anc Policy by id\n  cisco.ise.anc_policy_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n- name: Get Anc Policy by name\n  cisco.ise.anc_policy_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    name: string\n  register: result\n\n"
  },
  "cisco.ise.authorization_profile": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Authorization Profile.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "accessType": {
          "aliases": [],
          "description": "Allowed Values - ACCESS_ACCEPT, - ACCESS_REJECT.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "acl": {
          "aliases": [],
          "description": "Authorization Profile's acl.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "advancedAttributes": {
          "aliases": [],
          "description": "Authorization Profile's advancedAttributes.",
          "type": "list",
          "required": false,
          "suboptions": {
            "leftHandSideDictionaryAttribue": {
              "aliases": [],
              "description": "Authorization Profile's leftHandSideDictionaryAttribue.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "AdvancedAttributeValueType": {
                  "aliases": [],
                  "description": "Authorization Profile's AdvancedAttributeValueType.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "attributeName": {
                  "aliases": [],
                  "description": "Authorization Profile's attributeName.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "dictionaryName": {
                  "aliases": [],
                  "description": "Authorization Profile's dictionaryName.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "value": {
                  "aliases": [],
                  "description": "Authorization Profile's value.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "rightHandSideAttribueValue": {
              "aliases": [],
              "description": "Attribute value can be of type AttributeValue or AdvancedDictionaryAttribute. For AttributeValue the value is String, For AdvancedDictionaryAttribute the value is dictionaryName and attributeName properties.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "AdvancedAttributeValueType": {
                  "aliases": [],
                  "description": "Authorization Profile's AdvancedAttributeValueType.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "attributeName": {
                  "aliases": [],
                  "description": "Authorization Profile's attributeName.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "dictionaryName": {
                  "aliases": [],
                  "description": "Authorization Profile's dictionaryName.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "value": {
                  "aliases": [],
                  "description": "Authorization Profile's value.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        },
        "agentlessPosture": {
          "aliases": [],
          "description": "AgentlessPosture flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "airespaceACL": {
          "aliases": [],
          "description": "Authorization Profile's airespaceACL.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "airespaceIPv6ACL": {
          "aliases": [],
          "description": "Authorization Profile's airespaceIPv6ACL.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "asaVpn": {
          "aliases": [],
          "description": "Authorization Profile's asaVpn.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "authzProfileType": {
          "aliases": [],
          "description": "Allowed Values - SWITCH, - TRUSTSEC, - TACACS SWITCH is used for Standard Authorization Profiles.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "autoSmartPort": {
          "aliases": [],
          "description": "Authorization Profile's autoSmartPort.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "avcProfile": {
          "aliases": [],
          "description": "Authorization Profile's avcProfile.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "daclName": {
          "aliases": [],
          "description": "Authorization Profile's daclName.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Authorization Profile's description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "easywiredSessionCandidate": {
          "aliases": [],
          "description": "EasywiredSessionCandidate flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Resource UUID value.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interfaceTemplate": {
          "aliases": [],
          "description": "Authorization Profile's interfaceTemplate.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipv6ACLFilter": {
          "aliases": [],
          "description": "Authorization Profile's ipv6ACLFilter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipv6DaclName": {
          "aliases": [],
          "description": "Authorization Profile's ipv6DaclName.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "macSecPolicy": {
          "aliases": [],
          "description": "Allowed Values - MUST_SECURE, - MUST_NOT_SECURE, - SHOULD_SECURE.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Resource Name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "neat": {
          "aliases": [],
          "description": "Neat flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "profileName": {
          "aliases": [],
          "description": "Authorization Profile's profileName.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "reauth": {
          "aliases": [],
          "description": "Authorization Profile's reauth.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "connectivity": {
              "aliases": [],
              "description": "Allowed Values - DEFAULT, - RADIUS_REQUEST.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "timer": {
              "aliases": [],
              "description": "Valid range is 1-65535.",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "serviceTemplate": {
          "aliases": [],
          "description": "ServiceTemplate flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "trackMovement": {
          "aliases": [],
          "description": "TrackMovement flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vlan": {
          "aliases": [],
          "description": "Authorization Profile's vlan.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "nameID": {
              "aliases": [],
              "description": "Authorization Profile's nameID.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "tagID": {
              "aliases": [],
              "description": "Valid range is 0-31.",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "voiceDomainPermission": {
          "aliases": [],
          "description": "VoiceDomainPermission flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "webAuth": {
          "aliases": [],
          "description": "WebAuth flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "webRedirection": {
          "aliases": [],
          "description": "Authorization Profile's webRedirection.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "WebRedirectionType": {
              "aliases": [],
              "description": "Value MUST be one of the following CentralizedWebAuth, HotSpot, NativeSupplicanProvisioning, ClientProvisioning. The WebRedirectionType must fit the portalName.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "acl": {
              "aliases": [],
              "description": "Authorization Profile's acl.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "displayCertificatesRenewalMessages": {
              "aliases": [],
              "description": "The displayCertificatesRenewalMessages is mandatory when 'WebRedirectionType' value is 'CentralizedWebAuth'. For all other 'WebRedirectionType' values the field must be ignored.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "portalName": {
              "aliases": [],
              "description": "A portal that exist in the DB and fits the WebRedirectionType.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "staticIPHostNameFQDN": {
              "aliases": [],
              "description": "Authorization Profile's staticIPHostNameFQDN.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Authorization Profile",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.authorization_profile:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    accessType: string\n    acl: string\n    advancedAttributes:\n    - leftHandSideDictionaryAttribue:\n        AdvancedAttributeValueType: string\n        attributeName: string\n        dictionaryName: string\n        value: string\n      rightHandSideAttribueValue:\n        AdvancedAttributeValueType: string\n        attributeName: string\n        dictionaryName: string\n        value: string\n    agentlessPosture: true\n    airespaceACL: string\n    airespaceIPv6ACL: string\n    asaVpn: string\n    authzProfileType: string\n    autoSmartPort: string\n    avcProfile: string\n    daclName: string\n    description: string\n    easywiredSessionCandidate: true\n    id: string\n    interfaceTemplate: string\n    ipv6ACLFilter: string\n    ipv6DaclName: string\n    macSecPolicy: string\n    name: string\n    neat: true\n    profileName: string\n    reauth:\n      connectivity: string\n      timer: 0\n    serviceTemplate: true\n    trackMovement: true\n    vlan:\n      nameID: string\n      tagID: 0\n    voiceDomainPermission: true\n    webAuth: true\n    webRedirection:\n      WebRedirectionType: string\n      acl: string\n      displayCertificatesRenewalMessages: true\n      portalName: string\n      staticIPHostNameFQDN: string\n\n- name: Delete by id\n  cisco.ise.authorization_profile:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n- name: Create\n  cisco.ise.authorization_profile:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    accessType: string\n    acl: string\n    advancedAttributes:\n    - leftHandSideDictionaryAttribue:\n        AdvancedAttributeValueType: string\n        attributeName: string\n        dictionaryName: string\n        value: string\n      rightHandSideAttribueValue:\n        AdvancedAttributeValueType: string\n        attributeName: string\n        dictionaryName: string\n        value: string\n    agentlessPosture: true\n    airespaceACL: string\n    airespaceIPv6ACL: string\n    asaVpn: string\n    authzProfileType: string\n    autoSmartPort: string\n    avcProfile: string\n    daclName: string\n    description: string\n    easywiredSessionCandidate: true\n    id: string\n    interfaceTemplate: string\n    ipv6ACLFilter: string\n    ipv6DaclName: string\n    macSecPolicy: string\n    name: string\n    neat: true\n    profileName: string\n    reauth:\n      connectivity: string\n      timer: 0\n    serviceTemplate: true\n    trackMovement: true\n    vlan:\n      nameID: string\n      tagID: 0\n    voiceDomainPermission: true\n    webAuth: true\n    webRedirection:\n      WebRedirectionType: string\n      acl: string\n      displayCertificatesRenewalMessages: true\n      portalName: string\n      staticIPHostNameFQDN: string\n\n"
  },
  "cisco.ise.authorization_profile_info": {
    "doc": {
      "description": "Get all Authorization Profile.\nGet Authorization Profile by id.\nGet Authorization Profile by name.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Authorization Profile",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Authorization Profile\n  cisco.ise.authorization_profile_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n  register: result\n\n- name: Get Authorization Profile by id\n  cisco.ise.authorization_profile_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n- name: Get Authorization Profile by name\n  cisco.ise.authorization_profile_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    name: string\n  register: result\n\n"
  },
  "cisco.ise.backup_cancel": {
    "doc": {
      "description": "Manage operation create of the resource Backup Cancel.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Backup Cancel",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.backup_cancel:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n\n"
  },
  "cisco.ise.backup_config": {
    "doc": {
      "description": "Manage operation create of the resource Backup Config.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "backupEncryptionKey": {
          "aliases": [],
          "description": "The encyption key for the backed up file. Encryption key must satisfy the following criteria - Contains at least one uppercase letter A-Z, Contains at least one lowercase letter a-z, Contains at least one digit 0-9, Contain only A-Za-z0-9_#, Has at least 8 characters, Has not more than 15 characters, Must not contain 'CcIiSsCco', Must not begin with.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "backupName": {
          "aliases": [],
          "description": "The backup file will get saved with this name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "repositoryName": {
          "aliases": [],
          "description": "Name of the configured repository where the generated backup file will get copied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Backup Config",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.backup_config:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    backupEncryptionKey: string\n    backupName: string\n    repositoryName: string\n\n"
  },
  "cisco.ise.backup_last_status_info": {
    "doc": {
      "description": "Get all Backup Last Status.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Backup Last Status",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Backup Last Status\n  cisco.ise.backup_last_status_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.backup_restore": {
    "doc": {
      "description": "Manage operation create of the resource Backup Restore.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "backupEncryptionKey": {
          "aliases": [],
          "description": "The encryption key which was provided at the time of taking backup.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "repositoryName": {
          "aliases": [],
          "description": "Name of the configred repository where the backup file exists.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "restoreFile": {
          "aliases": [],
          "description": "Name of the backup file to be restored on ISE node.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "restoreIncludeAdeos": {
          "aliases": [],
          "description": "Determines whether the ADE-OS configure is restored. Possible values true, false.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Backup Restore",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.backup_restore:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    backupEncryptionKey: string\n    repositoryName: string\n    restoreFile: string\n    restoreIncludeAdeos: string\n\n"
  },
  "cisco.ise.backup_schedule_config": {
    "doc": {
      "description": "Manage operation update of the resource Backup Schedule Config.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "backupDescription": {
          "aliases": [],
          "description": "Description of the backup.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "backupEncryptionKey": {
          "aliases": [],
          "description": "The encyption key for the backed up file. Encryption key must satisfy the following criteria - Contains at least one uppercase letter A-Z, Contains at least one lowercase letter a-z, Contains at least one digit 0-9, Contain only A-Za-z0-9_#, Has at least 8 characters, Has not more than 15 characters, Must not contain 'CcIiSsCco', Must not begin with.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "backupName": {
          "aliases": [],
          "description": "The backup file will get saved with this name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "endDate": {
          "aliases": [],
          "description": "End date of the scheduled backup job. Allowed format MM/DD/YYYY. End date is not required in case of ONE_TIME frequency.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "frequency": {
          "aliases": [],
          "description": "Frequency with which the backup will get scheduled in the ISE node. Allowed values - ONCE, DAILY, WEEKLY, MONTHLY.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "monthDay": {
          "aliases": [],
          "description": "Day of month you want backup to be performed on when scheduled frequency is MONTHLY. Allowed values - from 1 to 28.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "repositoryName": {
          "aliases": [],
          "description": "Name of the configured repository where the generated backup file will get copied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "startDate": {
          "aliases": [],
          "description": "Start date for scheduling the backup job. Allowed format MM/DD/YYYY.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "status": {
          "aliases": [],
          "description": "Enable or disable scheduled backup.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "time": {
          "aliases": [],
          "description": "Time at which backup job get scheduled. Example- 12 00 AM.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "weekDay": {
          "aliases": [],
          "description": "Day of week you want backup to be performed on when scheduled frequency is WEEKLY. Allowed values - MON, TUE, WED, THU, FRI, SAT, SUN.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Backup Schedule Config",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update all\n  cisco.ise.backup_schedule_config:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    backupDescription: string\n    backupEncryptionKey: string\n    backupName: string\n    endDate: string\n    frequency: string\n    monthDay: string\n    repositoryName: string\n    startDate: string\n    status: string\n    time: string\n    weekDay: string\n\n- name: Create\n  cisco.ise.backup_schedule_config:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    backupDescription: string\n    backupEncryptionKey: string\n    backupName: string\n    endDate: string\n    frequency: string\n    monthDay: string\n    repositoryName: string\n    startDate: string\n    status: string\n    time: string\n    weekDay: string\n\n"
  },
  "cisco.ise.bind_signed_certificate": {
    "doc": {
      "description": "Manage operation create of the resource Bind Signed Certificate.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "admin": {
          "aliases": [],
          "description": "Use certificate to authenticate the ISE Admin Portal.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "allowExtendedValidity": {
          "aliases": [],
          "description": "Allow import of certificates with validity greater than 398 days.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "allowOutOfDateCert": {
          "aliases": [],
          "description": "Allow out of date certificates (required).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "allowReplacementOfCertificates": {
          "aliases": [],
          "description": "Allow Replacement of certificates (required).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "allowReplacementOfPortalGroupTag": {
          "aliases": [],
          "description": "Allow Replacement of Portal Group Tag (required).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Signed Certificate in escaped format.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "eap": {
          "aliases": [],
          "description": "Use certificate for EAP protocols that use SSL/TLS tunneling.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "hostName": {
          "aliases": [],
          "description": "Name of Host whose CSR ID has been provided.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "ID of the generated CSR.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ims": {
          "aliases": [],
          "description": "Use certificate for the ISE Messaging Service.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Friendly Name of the certificate.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "portal": {
          "aliases": [],
          "description": "Use for portal.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "portalGroupTag": {
          "aliases": [],
          "description": "Set Group tag.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pxgrid": {
          "aliases": [],
          "description": "Use certificate for the pxGrid Controller.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "radius": {
          "aliases": [],
          "description": "Use certificate for the RADSec server.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "saml": {
          "aliases": [],
          "description": "Use certificate for SAML Signing.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validateCertificateExtensions": {
          "aliases": [],
          "description": "Validate Certificate Extensions.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Bind Signed Certificate",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.bind_signed_certificate:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    admin: true\n    allowExtendedValidity: true\n    allowOutOfDateCert: true\n    allowReplacementOfCertificates: true\n    allowReplacementOfPortalGroupTag: true\n    data: string\n    eap: true\n    hostName: string\n    id: string\n    ims: true\n    name: string\n    portal: true\n    portalGroupTag: string\n    pxgrid: true\n    radius: true\n    saml: true\n    validateCertificateExtensions: true\n\n"
  },
  "cisco.ise.byod_portal": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Byod Portal.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "customizations": {
          "aliases": [],
          "description": "Defines all of the Portal Customizations available for a BYOD.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "globalCustomizations": {
              "aliases": [],
              "description": "Represent the portal Global customizations.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "backgroundImage": {
                  "aliases": [],
                  "description": "Byod Portal's backgroundImage.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "data": {
                      "aliases": [],
                      "description": "Represented as base 64 encoded string of the image byte array.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "bannerImage": {
                  "aliases": [],
                  "description": "Byod Portal's bannerImage.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "data": {
                      "aliases": [],
                      "description": "Represented as base 64 encoded string of the image byte array.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "bannerTitle": {
                  "aliases": [],
                  "description": "Byod Portal's bannerTitle.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "contactText": {
                  "aliases": [],
                  "description": "Byod Portal's contactText.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "desktopLogoImage": {
                  "aliases": [],
                  "description": "Byod Portal's desktopLogoImage.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "data": {
                      "aliases": [],
                      "description": "Represented as base 64 encoded string of the image byte array.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "footerElement": {
                  "aliases": [],
                  "description": "Byod Portal's footerElement.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "mobileLogoImage": {
                  "aliases": [],
                  "description": "Byod Portal's mobileLogoImage.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "data": {
                      "aliases": [],
                      "description": "Represented as base 64 encoded string of the image byte array.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                }
              }
            },
            "language": {
              "aliases": [],
              "description": "This property is supported only for Read operation and it allows to show the customizations in English. Other languages are not supported.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "viewLanguage": {
                  "aliases": [],
                  "description": "Byod Portal's viewLanguage.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "pageCustomizations": {
              "aliases": [],
              "description": "Represent the entire page customization as a giant dictionary.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "data": {
                  "aliases": [],
                  "description": "The Dictionary will be exposed here as key value pair.",
                  "type": "list",
                  "required": false,
                  "suboptions": {
                    "key": {
                      "aliases": [],
                      "description": "Byod Portal's key.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "value": {
                      "aliases": [],
                      "description": "Byod Portal's value.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                }
              }
            },
            "portalTheme": {
              "aliases": [],
              "description": "Defines the configuration for portal theme.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "id": {
                  "aliases": [],
                  "description": "The unique internal identifier of the portal theme.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "name": {
                  "aliases": [],
                  "description": "The system- or user-assigned name of the portal theme.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "themeData": {
                  "aliases": [],
                  "description": "A CSS file, represented as a Base64-encoded byte array.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "portalTweakSettings": {
              "aliases": [],
              "description": "The Tweak Settings are a customization of the Portal Theme that has been selected for the portal. When the Portal Theme selection is changed, the Tweak Settings are overwritten to match the values in the theme. The Tweak Settings can subsequently be changed by the user.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "bannerColor": {
                  "aliases": [],
                  "description": "Hex value of color.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "bannerTextColor": {
                  "aliases": [],
                  "description": "Byod Portal's bannerTextColor.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "pageBackgroundColor": {
                  "aliases": [],
                  "description": "Byod Portal's pageBackgroundColor.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "pageLabelAndTextColor": {
                  "aliases": [],
                  "description": "Byod Portal's pageLabelAndTextColor.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        },
        "description": {
          "aliases": [],
          "description": "Byod Portal's description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Resource UUID, mandatory for update.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Resource Name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "portalTestUrl": {
          "aliases": [],
          "description": "URL to bring up a test page for this portal.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "portalType": {
          "aliases": [],
          "description": "Allowed values - BYOD, - HOTSPOTGUEST, - MYDEVICE, - SELFREGGUEST, - SPONSOR, - SPONSOREDGUEST.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "settings": {
          "aliases": [],
          "description": "Defines all of the settings groups available for a BYOD.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "byodSettings": {
              "aliases": [],
              "description": "Configuration of BYOD Device Welcome, Registration and Success steps.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "byodRegistrationSettings": {
                  "aliases": [],
                  "description": "Byod Portal's byodRegistrationSettings.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "endPointIdentityGroupId": {
                      "aliases": [],
                      "description": "Byod Portal's endPointIdentityGroupId.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "showDeviceID": {
                      "aliases": [],
                      "description": "ShowDeviceID flag.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "byodRegistrationSuccessSettings": {
                  "aliases": [],
                  "description": "Byod Portal's byodRegistrationSuccessSettings.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "redirectUrl": {
                      "aliases": [],
                      "description": "Target URL for redirection, used when successRedirect = URL.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "successRedirect": {
                      "aliases": [],
                      "description": "After an Authentication Success where should device be redirected. Allowed values.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "byodWelcomeSettings": {
                  "aliases": [],
                  "description": "Configuration of BYOD endpoint welcome step configuration.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "aupDisplay": {
                      "aliases": [],
                      "description": "How the AUP should be displayed, either on page or as a link. Only valid if includeAup = true. Allowed values - ONPAGE, - ASLINK.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "enableBYOD": {
                      "aliases": [],
                      "description": "EnableBYOD flag.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "enableGuestAccess": {
                      "aliases": [],
                      "description": "EnableGuestAccess flag.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "includeAup": {
                      "aliases": [],
                      "description": "IncludeAup flag.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "requireAupAcceptance": {
                      "aliases": [],
                      "description": "RequireAupAcceptance flag.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "requireMDM": {
                      "aliases": [],
                      "description": "RequireMDM flag.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "requireScrolling": {
                      "aliases": [],
                      "description": "Require BYOD devices to scroll down to the bottom of the AUP, Only valid if includeAup = true.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                }
              }
            },
            "portalSettings": {
              "aliases": [],
              "description": "The port, interface, certificate, and other basic settings of a portal.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "allowedInterfaces": {
                  "aliases": [],
                  "description": "Interfaces that the portal will be reachable on. Allowed values - eth0, - eth1, - eth2, - eth3, - eth4, - eth5, - bond0, - bond1, - bond2.",
                  "type": "list",
                  "required": false,
                  "elements": "str",
                  "suboptions": {}
                },
                "alwaysUsedLanguage": {
                  "aliases": [],
                  "description": "Used when displayLang = ALWAYSUSE.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "certificateGroupTag": {
                  "aliases": [],
                  "description": "Logical name of the x.509 server certificate that will be used for the portal.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "displayLang": {
                  "aliases": [],
                  "description": "Allowed values - USEBROWSERLOCALE, - ALWAYSUSE.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "endpointIdentityGroup": {
                  "aliases": [],
                  "description": "Unique Id of the endpoint identity group where user's devices will be added. Used only in Hotspot Portal.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "fallbackLanguage": {
                  "aliases": [],
                  "description": "Used when displayLang = USEBROWSERLOCALE.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "httpsPort": {
                  "aliases": [],
                  "description": "The port number that the allowed interfaces will listen on. Range from 8000 to 8999.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "supportInfoSettings": {
              "aliases": [],
              "description": "Byod Portal's supportInfoSettings.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "defaultEmptyFieldValue": {
                  "aliases": [],
                  "description": "The default value displayed for an empty field. Only valid when emptyFieldDisplay = DISPLAYWITHDEFAULTVALUE.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "emptyFieldDisplay": {
                  "aliases": [],
                  "description": "Specifies how empty fields are handled on the Support Information Page. Allowed values - HIDE, - DISPLAYWITHNOVALUE, - DISPLAYWITHDEFAULTVALUE.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "includeBrowserUserAgent": {
                  "aliases": [],
                  "description": "IncludeBrowserUserAgent flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "includeFailureCode": {
                  "aliases": [],
                  "description": "IncludeFailureCode flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "includeIpAddress": {
                  "aliases": [],
                  "description": "IncludeIpAddress flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "includeMacAddr": {
                  "aliases": [],
                  "description": "IncludeMacAddr flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "includePolicyServer": {
                  "aliases": [],
                  "description": "IncludePolicyServer flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "includeSupportInfoPage": {
                  "aliases": [],
                  "description": "IncludeSupportInfoPage flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Byod Portal",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.byod_portal:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    customizations:\n      globalCustomizations:\n        backgroundImage:\n          data: string\n        bannerImage:\n          data: string\n        bannerTitle: string\n        contactText: string\n        desktopLogoImage:\n          data: string\n        footerElement: string\n        mobileLogoImage:\n          data: string\n      language:\n        viewLanguage: string\n      pageCustomizations:\n        data:\n        - key: string\n          value: string\n      portalTheme:\n        id: string\n        name: string\n        themeData: string\n      portalTweakSettings:\n        bannerColor: string\n        bannerTextColor: string\n        pageBackgroundColor: string\n        pageLabelAndTextColor: string\n    description: string\n    id: string\n    name: string\n    portalTestUrl: string\n    portalType: string\n    settings:\n      byodSettings:\n        byodRegistrationSettings:\n          endPointIdentityGroupId: string\n          showDeviceID: true\n        byodRegistrationSuccessSettings:\n          redirectUrl: string\n          successRedirect: string\n        byodWelcomeSettings:\n          aupDisplay: string\n          enableBYOD: true\n          enableGuestAccess: true\n          includeAup: true\n          requireAupAcceptance: true\n          requireMDM: true\n          requireScrolling: true\n      portalSettings:\n        allowedInterfaces:\n        - string\n        alwaysUsedLanguage: string\n        certificateGroupTag: string\n        displayLang: string\n        endpointIdentityGroup: string\n        fallbackLanguage: string\n        httpsPort: 0\n      supportInfoSettings:\n        defaultEmptyFieldValue: string\n        emptyFieldDisplay: string\n        includeBrowserUserAgent: true\n        includeFailureCode: true\n        includeIpAddress: true\n        includeMacAddr: true\n        includePolicyServer: true\n        includeSupportInfoPage: true\n\n- name: Delete by id\n  cisco.ise.byod_portal:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n- name: Create\n  cisco.ise.byod_portal:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    customizations:\n      globalCustomizations:\n        backgroundImage:\n          data: string\n        bannerImage:\n          data: string\n        bannerTitle: string\n        contactText: string\n        desktopLogoImage:\n          data: string\n        footerElement: string\n        mobileLogoImage:\n          data: string\n      language:\n        viewLanguage: string\n      pageCustomizations:\n        data:\n        - key: string\n          value: string\n      portalTheme:\n        id: string\n        name: string\n        themeData: string\n      portalTweakSettings:\n        bannerColor: string\n        bannerTextColor: string\n        pageBackgroundColor: string\n        pageLabelAndTextColor: string\n    description: string\n    id: string\n    name: string\n    portalTestUrl: string\n    portalType: string\n    settings:\n      byodSettings:\n        byodRegistrationSettings:\n          endPointIdentityGroupId: string\n          showDeviceID: true\n        byodRegistrationSuccessSettings:\n          redirectUrl: string\n          successRedirect: string\n        byodWelcomeSettings:\n          aupDisplay: string\n          enableBYOD: true\n          enableGuestAccess: true\n          includeAup: true\n          requireAupAcceptance: true\n          requireMDM: true\n          requireScrolling: true\n      portalSettings:\n        allowedInterfaces:\n        - string\n        alwaysUsedLanguage: string\n        certificateGroupTag: string\n        displayLang: string\n        endpointIdentityGroup: string\n        fallbackLanguage: string\n        httpsPort: 0\n      supportInfoSettings:\n        defaultEmptyFieldValue: string\n        emptyFieldDisplay: string\n        includeBrowserUserAgent: true\n        includeFailureCode: true\n        includeIpAddress: true\n        includeMacAddr: true\n        includePolicyServer: true\n        includeSupportInfoPage: true\n\n"
  },
  "cisco.ise.byod_portal_info": {
    "doc": {
      "description": "Get all Byod Portal.\nGet Byod Portal by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter query parameter. <br/> **Simple filtering** should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the \"filterType=or\" query string parameter. Each resource Data model description should specify if an attribute is a filtered field. <br/> Operator | Description <br/> ------------|----------------- <br/> EQ | Equals <br/> NEQ | Not Equals <br/> GT | Greater Than <br/> LT | Less Then <br/> STARTSW | Starts With <br/> NSTARTSW | Not Starts With <br/> ENDSW | Ends With <br/> NENDSW | Not Ends With <br/> CONTAINS | Contains <br/> NCONTAINS | Not Contains <br/>.\n",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "filterType": {
          "aliases": [],
          "description": "FilterType query parameter. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter. Portal id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sortasc": {
          "aliases": [],
          "description": "Sortasc query parameter. Sort asc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sortdsc": {
          "aliases": [],
          "description": "Sortdsc query parameter. Sort desc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Byod Portal",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Byod Portal\n  cisco.ise.byod_portal_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n    sortasc: string\n    sortdsc: string\n    filter: []\n    filterType: AND\n  register: result\n\n- name: Get Byod Portal by id\n  cisco.ise.byod_portal_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.certificate_profile": {
    "doc": {
      "description": "Manage operations create and update of the resource Certificate Profile.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "allowedAsUserName": {
          "aliases": [],
          "description": "AllowedAsUserName flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "certificateAttributeName": {
          "aliases": [],
          "description": "Attribute name of the Certificate Profile - used only when CERTIFICATE is chosen in usernameFrom. Allowed values - SUBJECT_COMMON_NAME - SUBJECT_ALTERNATIVE_NAME - SUBJECT_SERIAL_NUMBER - SUBJECT - SUBJECT_ALTERNATIVE_NAME_OTHER_NAME - SUBJECT_ALTERNATIVE_NAME_EMAIL - SUBJECT_ALTERNATIVE_NAME_DNS. - Additional internal value ALL_SUBJECT_AND_ALTERNATIVE_NAMES is used automatically when usernameFrom=UPN.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Certificate Profile's description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "externalIdentityStoreName": {
          "aliases": [],
          "description": "Referred IDStore name for the Certificate Profile or not applicable in case no identity store is chosen.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Certificate Profile's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "matchMode": {
          "aliases": [],
          "description": "Match mode of the Certificate Profile. Allowed values - NEVER - RESOLVE_IDENTITY_AMBIGUITY - BINARY_COMPARISON.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Certificate Profile's name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "usernameFrom": {
          "aliases": [],
          "description": "The attribute in the certificate where the user name should be taken from. Allowed values - CERTIFICATE (for a specific attribute as defined in certificateAttributeName) - UPN (for using any Subject or Alternative Name Attributes in the Certificate - an option only in AD).",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Certificate Profile",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.certificate_profile:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    allowedAsUserName: true\n    certificateAttributeName: string\n    description: string\n    externalIdentityStoreName: string\n    id: string\n    matchMode: string\n    name: string\n    usernameFrom: string\n\n- name: Create\n  cisco.ise.certificate_profile:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    allowedAsUserName: true\n    certificateAttributeName: string\n    description: string\n    externalIdentityStoreName: string\n    id: string\n    matchMode: string\n    name: string\n    usernameFrom: string\n\n"
  },
  "cisco.ise.certificate_profile_info": {
    "doc": {
      "description": "Get all Certificate Profile.\nGet Certificate Profile by id.\nGet Certificate Profile by name.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Certificate Profile",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Certificate Profile\n  cisco.ise.certificate_profile_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n  register: result\n\n- name: Get Certificate Profile by id\n  cisco.ise.certificate_profile_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n- name: Get Certificate Profile by name\n  cisco.ise.certificate_profile_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    name: string\n  register: result\n\n"
  },
  "cisco.ise.certificate_template_info": {
    "doc": {
      "description": "Get all Certificate Template.\nGet Certificate Template by id.\nGet Certificate Template by name.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Certificate Template",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Certificate Template\n  cisco.ise.certificate_template_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n  register: result\n\n- name: Get Certificate Template by id\n  cisco.ise.certificate_template_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n- name: Get Certificate Template by name\n  cisco.ise.certificate_template_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    name: string\n  register: result\n\n"
  },
  "cisco.ise.csr_delete": {
    "doc": {
      "description": "Manage operation delete of the resource Csr Delete.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "hostName": {
          "aliases": [],
          "description": "HostName path parameter. Name of the host of which CSR's should be deleted.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter. The ID of the Certificate Signing Request to be deleted.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Csr Delete",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Delete by id\n  cisco.ise.csr_delete:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    hostName: string\n    id: string\n\n"
  },
  "cisco.ise.csr_export_info": {
    "doc": {
      "description": "Get Csr Export by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "dirPath": {
          "aliases": [],
          "description": "Directory absolute path. Defaults to the current working directory.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "Hostname path parameter. The hostname to which the CSR belongs.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter. The ID of the CSR to be exported.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "saveFile": {
          "aliases": [],
          "description": "Enable or disable automatic file creation of raw response.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Csr Export",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get Csr Export by id\n  cisco.ise.csr_export_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    hostname: string\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.csr_generate": {
    "doc": {
      "description": "Manage operation create of the resource Csr Generate.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "allowWildCardCert": {
          "aliases": [],
          "description": "AllowWildCardCert flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "certificatePolicies": {
          "aliases": [],
          "description": "Csr Generate's certificatePolicies.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "digestType": {
          "aliases": [],
          "description": "Csr Generate's digestType.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostnames": {
          "aliases": [],
          "description": "Csr Generate's hostnames.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "keyLength": {
          "aliases": [],
          "description": "Csr Generate's keyLength.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "keyType": {
          "aliases": [],
          "description": "Csr Generate's keyType.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "portalGroupTag": {
          "aliases": [],
          "description": "Csr Generate's portalGroupTag.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sanDNS": {
          "aliases": [],
          "description": "Csr Generate's sanDNS.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "sanDir": {
          "aliases": [],
          "description": "Csr Generate's sanDir.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "sanIP": {
          "aliases": [],
          "description": "Csr Generate's sanIP.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "sanURI": {
          "aliases": [],
          "description": "Csr Generate's sanURI.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "subjectCity": {
          "aliases": [],
          "description": "Csr Generate's subjectCity.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "subjectCommonName": {
          "aliases": [],
          "description": "Csr Generate's subjectCommonName.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "subjectCountry": {
          "aliases": [],
          "description": "Csr Generate's subjectCountry.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "subjectOrg": {
          "aliases": [],
          "description": "Csr Generate's subjectOrg.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "subjectOrgUnit": {
          "aliases": [],
          "description": "Csr Generate's subjectOrgUnit.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "subjectState": {
          "aliases": [],
          "description": "Csr Generate's subjectState.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "usedFor": {
          "aliases": [],
          "description": "Csr Generate's usedFor.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Csr Generate",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.csr_generate:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    allowWildCardCert: true\n    certificatePolicies: string\n    digestType: string\n    hostnames:\n    - string\n    keyLength: string\n    keyType: string\n    portalGroupTag: string\n    sanDNS:\n    - string\n    sanDir:\n    - string\n    sanIP:\n    - string\n    sanURI:\n    - string\n    subjectCity: string\n    subjectCommonName: string\n    subjectCountry: string\n    subjectOrg: string\n    subjectOrgUnit: string\n    subjectState: string\n    usedFor: string\n\n"
  },
  "cisco.ise.csr_generate_intermediate_ca": {
    "doc": {
      "description": "Manage operation create of the resource Csr Generate Intermediate Ca.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Csr Generate Intermediate Ca",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.csr_generate_intermediate_ca:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n\n"
  },
  "cisco.ise.csr_info": {
    "doc": {
      "description": "Get all Csr.\nGet Csr by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter query parameter. <div> <style type=\"text/css\" scoped> .apiServiceTable td, .apiServiceTable th { padding 5px 10px !important; text-align left; } </style> <span> <b>Simple filtering</b> should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the <i>\"filterType=or\"</i> query string parameter. Each resource Data model description should specify if an attribute is a filtered field. </span> <br /> <table class=\"apiServiceTable\"> <thead> <tr> <th>OPERATOR</th> <th>DESCRIPTION</th> </tr> </thead> <tbody> <tr> <td>EQ</td> <td>Equals</td> </tr> <tr> <td>NEQ</td> <td>Not Equals</td> </tr> <tr> <td>GT</td> <td>Greater Than</td> </tr> <tr> <td>LT</td> <td>Less Then</td> </tr> <tr> <td>STARTSW</td> <td>Starts With</td> </tr> <tr> <td>NSTARTSW</td> <td>Not Starts With</td> </tr> <tr> <td>ENDSW</td> <td>Ends With</td> </tr> <tr> <td>NENDSW</td> <td>Not Ends With</td> </tr> <tr> <td>CONTAINS</td> <td>Contains</td> </tr> <tr> <td>NCONTAINS</td> <td>Not Contains</td> </tr> </tbody> </table> </div>.\n",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "filterType": {
          "aliases": [],
          "description": "FilterType query parameter. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostName": {
          "aliases": [],
          "description": "HostName path parameter. Name of the host of which CSR's should be returned.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter. The ID of the Certificate Signing Request returned.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sort": {
          "aliases": [],
          "description": "Sort query parameter. Sort type - asc or desc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sortBy": {
          "aliases": [],
          "description": "SortBy query parameter. Sort column by which objects needs to be sorted.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Csr",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Csr\n  cisco.ise.csr_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n    sort: asc\n    sortBy: string\n    filter: []\n    filterType: AND\n  register: result\n\n- name: Get Csr by id\n  cisco.ise.csr_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    hostName: string\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.deployment_info": {
    "doc": {
      "description": "Get all Deployment.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long to wait for the server to send data before giving up.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Deployment",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Deployment\n  cisco.ise.deployment_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.device_administration_authentication_reset_hitcount": {
    "doc": {
      "description": "Manage operation create of the resource Device Administration Authentication Reset Hitcount.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Device Administration Authentication Reset Hitcount",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.device_administration_authentication_reset_hitcount:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n\n"
  },
  "cisco.ise.device_administration_authentication_rules": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Device Administration Authentication Rules.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "id": {
          "aliases": [],
          "description": "Id path parameter. Rule id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identitySourceId": {
          "aliases": [],
          "description": "Identity source id from the identity stores.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identitySourceName": {
          "aliases": [],
          "description": "Identity source name from the identity stores.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ifAuthFail": {
          "aliases": [],
          "description": "Action to perform when authentication fails such as Bad credentials, disabled user and so on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ifProcessFail": {
          "aliases": [],
          "description": "Action to perform when ISE is uanble to access the identity database.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ifUserNotFound": {
          "aliases": [],
          "description": "Action to perform when user is not found in any of identity stores.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "link": {
          "aliases": [],
          "description": "Device Administration Authentication Rules's link.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "href": {
              "aliases": [],
              "description": "Device Administration Authentication Rules's href.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "rel": {
              "aliases": [],
              "description": "Device Administration Authentication Rules's rel.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "Device Administration Authentication Rules's type.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "policyId": {
          "aliases": [],
          "description": "PolicyId path parameter. Policy id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "rule": {
          "aliases": [],
          "description": "Common attributes in rule authentication/authorization.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "condition": {
              "aliases": [],
              "description": "Device Administration Authentication Rules's condition.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "attributeId": {
                  "aliases": [],
                  "description": "Dictionary attribute id (Optional), used for additional verification.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "attributeName": {
                  "aliases": [],
                  "description": "Dictionary attribute name.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "attributeValue": {
                  "aliases": [],
                  "description": "<ul><li>Attribute value for condition</li> <li>Value type is specified in dictionary object</li> <li>if multiple values allowed is specified in dictionary object</li></ul>.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "children": {
                  "aliases": [],
                  "description": "In case type is andBlock or orBlock addtional conditions will be aggregated under this logical (OR/AND) condition.",
                  "type": "list",
                  "required": false,
                  "suboptions": {
                    "conditionType": {
                      "aliases": [],
                      "description": "<ul><li>Inidicates whether the record is the condition itself(data) or a logical(or,and) aggregation</li> <li>Data type enum(reference,single) indicates than \"conditonId\" OR \"ConditionAttrs\" fields should contain condition data but not both</li> <li>Logical aggreation(and,or) enum indicates that additional conditions are present under the children field</li></ul>.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "isNegate": {
                      "aliases": [],
                      "description": "Indicates whereas this condition is in negate mode.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "link": {
                      "aliases": [],
                      "description": "Device Administration Authentication Rules's link.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "href": {
                          "aliases": [],
                          "description": "Device Administration Authentication Rules's href.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        },
                        "rel": {
                          "aliases": [],
                          "description": "Device Administration Authentication Rules's rel.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        },
                        "type": {
                          "aliases": [],
                          "description": "Device Administration Authentication Rules's type.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    }
                  }
                },
                "conditionType": {
                  "aliases": [],
                  "description": "<ul><li>Inidicates whether the record is the condition itself(data) or a logical(or,and) aggregation</li> <li>Data type enum(reference,single) indicates than \"conditonId\" OR \"ConditionAttrs\" fields should contain condition data but not both</li> <li>Logical aggreation(and,or) enum indicates that additional conditions are present under the children field</li></ul>.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "datesRange": {
                  "aliases": [],
                  "description": "<p>Defines for which date/s TimeAndDate condition will be matched or NOT matched if used in exceptionDates prooperty<br> Options are - Date range, for specific date, the same date should be used for start/end date <br> Default - no specific dates<br> In order to reset the dates to have no specific dates Date format - yyyy-mm-dd (MM = month, dd = day, yyyy = year)</p>.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "endDate": {
                      "aliases": [],
                      "description": "Device Administration Authentication Rules's endDate.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "startDate": {
                      "aliases": [],
                      "description": "Device Administration Authentication Rules's startDate.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "datesRangeException": {
                  "aliases": [],
                  "description": "<p>Defines for which date/s TimeAndDate condition will be matched or NOT matched if used in exceptionDates prooperty<br> Options are - Date range, for specific date, the same date should be used for start/end date <br> Default - no specific dates<br> In order to reset the dates to have no specific dates Date format - yyyy-mm-dd (MM = month, dd = day, yyyy = year)</p>.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "endDate": {
                      "aliases": [],
                      "description": "Device Administration Authentication Rules's endDate.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "startDate": {
                      "aliases": [],
                      "description": "Device Administration Authentication Rules's startDate.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "description": {
                  "aliases": [],
                  "description": "Condition description.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "dictionaryName": {
                  "aliases": [],
                  "description": "Dictionary name.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "dictionaryValue": {
                  "aliases": [],
                  "description": "Dictionary value.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "hoursRange": {
                  "aliases": [],
                  "description": "<p>Defines for which hours a TimeAndDate condition will be matched or not matched if used in exceptionHours property<br> Time foramt - hh mm ( h = hour , mm = minutes ) <br> Default - All Day </p>.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "endTime": {
                      "aliases": [],
                      "description": "Device Administration Authentication Rules's endTime.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "startTime": {
                      "aliases": [],
                      "description": "Device Administration Authentication Rules's startTime.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "hoursRangeException": {
                  "aliases": [],
                  "description": "<p>Defines for which hours a TimeAndDate condition will be matched or not matched if used in exceptionHours property<br> Time foramt - hh mm ( h = hour , mm = minutes ) <br> Default - All Day </p>.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "endTime": {
                      "aliases": [],
                      "description": "Device Administration Authentication Rules's endTime.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "startTime": {
                      "aliases": [],
                      "description": "Device Administration Authentication Rules's startTime.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "id": {
                  "aliases": [],
                  "description": "Device Administration Authentication Rules's id.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "isNegate": {
                  "aliases": [],
                  "description": "Indicates whereas this condition is in negate mode.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "link": {
                  "aliases": [],
                  "description": "Device Administration Authentication Rules's link.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "href": {
                      "aliases": [],
                      "description": "Device Administration Authentication Rules's href.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "rel": {
                      "aliases": [],
                      "description": "Device Administration Authentication Rules's rel.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "type": {
                      "aliases": [],
                      "description": "Device Administration Authentication Rules's type.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "name": {
                  "aliases": [],
                  "description": "Condition name.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "operator": {
                  "aliases": [],
                  "description": "Equality operator.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "weekDays": {
                  "aliases": [],
                  "description": "<p>Defines for which days this condition will be matched<br> Days format - Arrays of WeekDay enums <br> Default - List of All week days</p>.",
                  "type": "list",
                  "required": false,
                  "elements": "str",
                  "suboptions": {}
                },
                "weekDaysException": {
                  "aliases": [],
                  "description": "<p>Defines for which days this condition will NOT be matched<br> Days format - Arrays of WeekDay enums <br> Default - Not enabled</p>.",
                  "type": "list",
                  "required": false,
                  "elements": "str",
                  "suboptions": {}
                }
              }
            },
            "default": {
              "aliases": [],
              "description": "Indicates if this rule is the default one.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "hitCounts": {
              "aliases": [],
              "description": "The amount of times the rule was matched.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "id": {
              "aliases": [],
              "description": "The identifier of the rule.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Rule name, Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "rank": {
              "aliases": [],
              "description": "The rank(priority) in relation to other rules. Lower rank is higher priority.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "state": {
              "aliases": [],
              "description": "The state that the rule is in. A disabled rule cannot be matched.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Device Administration Authentication Rules",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.device_administration_authentication_rules:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    identitySourceId: string\n    identitySourceName: string\n    ifAuthFail: string\n    ifProcessFail: string\n    ifUserNotFound: string\n    link:\n      href: string\n      rel: string\n      type: string\n    rule:\n      condition:\n        attributeId: string\n        attributeName: string\n        attributeValue: string\n        children:\n        - conditionType: string\n          isNegate: true\n          link:\n            href: string\n            rel: string\n            type: string\n        conditionType: string\n        datesRange:\n          endDate: string\n          startDate: string\n        datesRangeException:\n          endDate: string\n          startDate: string\n        description: string\n        dictionaryName: string\n        dictionaryValue: string\n        hoursRange:\n          endTime: string\n          startTime: string\n        hoursRangeException:\n          endTime: string\n          startTime: string\n        id: string\n        isNegate: true\n        link:\n          href: string\n          rel: string\n          type: string\n        name: string\n        operator: string\n        weekDays:\n        - string\n        weekDaysException:\n        - string\n      default: true\n      hitCounts: 0\n      id: string\n      name: string\n      rank: 0\n      state: string\n\n- name: Update by id\n  cisco.ise.device_administration_authentication_rules:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    id: string\n    identitySourceId: string\n    identitySourceName: string\n    ifAuthFail: string\n    ifProcessFail: string\n    ifUserNotFound: string\n    link:\n      href: string\n      rel: string\n      type: string\n    policyId: string\n    rule:\n      condition:\n        attributeId: string\n        attributeName: string\n        attributeValue: string\n        children:\n        - conditionType: string\n          isNegate: true\n          link:\n            href: string\n            rel: string\n            type: string\n        conditionType: string\n        datesRange:\n          endDate: string\n          startDate: string\n        datesRangeException:\n          endDate: string\n          startDate: string\n        description: string\n        dictionaryName: string\n        dictionaryValue: string\n        hoursRange:\n          endTime: string\n          startTime: string\n        hoursRangeException:\n          endTime: string\n          startTime: string\n        id: string\n        isNegate: true\n        link:\n          href: string\n          rel: string\n          type: string\n        name: string\n        operator: string\n        weekDays:\n        - string\n        weekDaysException:\n        - string\n      default: true\n      hitCounts: 0\n      id: string\n      name: string\n      rank: 0\n      state: string\n\n- name: Delete by id\n  cisco.ise.device_administration_authentication_rules:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n    policyId: string\n\n"
  },
  "cisco.ise.device_administration_authentication_rules_info": {
    "doc": {
      "description": "Get all Device Administration Authentication Rules.\nGet Device Administration Authentication Rules by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "id": {
          "aliases": [],
          "description": "Id path parameter. Rule id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "policyId": {
          "aliases": [],
          "description": "PolicyId path parameter. Policy id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Device Administration Authentication Rules",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Device Administration Authentication Rules\n  cisco.ise.device_administration_authentication_rules_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    policyId: string\n  register: result\n\n- name: Get Device Administration Authentication Rules by id\n  cisco.ise.device_administration_authentication_rules_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    policyId: string\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.device_administration_authorization_reset_hitcount": {
    "doc": {
      "description": "Manage operation create of the resource Device Administration Authorization Reset Hitcount.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Device Administration Authorization Reset Hitcount",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.device_administration_authorization_reset_hitcount:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n\n"
  },
  "cisco.ise.device_administration_authorization_rules": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Device Administration Authorization Rules.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "commands": {
          "aliases": [],
          "description": "Command sets enforce the specified list of commands that can be executed by a device administrator.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter. Rule id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "link": {
          "aliases": [],
          "description": "Device Administration Authorization Rules's link.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "href": {
              "aliases": [],
              "description": "Device Administration Authorization Rules's href.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "rel": {
              "aliases": [],
              "description": "Device Administration Authorization Rules's rel.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "Device Administration Authorization Rules's type.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "policyId": {
          "aliases": [],
          "description": "PolicyId path parameter. Policy id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "profile": {
          "aliases": [],
          "description": "Device admin profiles control the initial login session of the device administrator.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "rule": {
          "aliases": [],
          "description": "Common attributes in rule authentication/authorization.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "condition": {
              "aliases": [],
              "description": "Device Administration Authorization Rules's condition.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "attributeId": {
                  "aliases": [],
                  "description": "Dictionary attribute id (Optional), used for additional verification.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "attributeName": {
                  "aliases": [],
                  "description": "Dictionary attribute name.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "attributeValue": {
                  "aliases": [],
                  "description": "<ul><li>Attribute value for condition</li> <li>Value type is specified in dictionary object</li> <li>if multiple values allowed is specified in dictionary object</li></ul>.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "children": {
                  "aliases": [],
                  "description": "In case type is andBlock or orBlock addtional conditions will be aggregated under this logical (OR/AND) condition.",
                  "type": "list",
                  "required": false,
                  "suboptions": {
                    "conditionType": {
                      "aliases": [],
                      "description": "<ul><li>Inidicates whether the record is the condition itself(data) or a logical(or,and) aggregation</li> <li>Data type enum(reference,single) indicates than \"conditonId\" OR \"ConditionAttrs\" fields should contain condition data but not both</li> <li>Logical aggreation(and,or) enum indicates that additional conditions are present under the children field</li></ul>.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "isNegate": {
                      "aliases": [],
                      "description": "Indicates whereas this condition is in negate mode.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "link": {
                      "aliases": [],
                      "description": "Device Administration Authorization Rules's link.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "href": {
                          "aliases": [],
                          "description": "Device Administration Authorization Rules's href.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        },
                        "rel": {
                          "aliases": [],
                          "description": "Device Administration Authorization Rules's rel.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        },
                        "type": {
                          "aliases": [],
                          "description": "Device Administration Authorization Rules's type.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    }
                  }
                },
                "conditionType": {
                  "aliases": [],
                  "description": "<ul><li>Inidicates whether the record is the condition itself(data) or a logical(or,and) aggregation</li> <li>Data type enum(reference,single) indicates than \"conditonId\" OR \"ConditionAttrs\" fields should contain condition data but not both</li> <li>Logical aggreation(and,or) enum indicates that additional conditions are present under the children field</li></ul>.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "datesRange": {
                  "aliases": [],
                  "description": "<p>Defines for which date/s TimeAndDate condition will be matched or NOT matched if used in exceptionDates prooperty<br> Options are - Date range, for specific date, the same date should be used for start/end date <br> Default - no specific dates<br> In order to reset the dates to have no specific dates Date format - yyyy-mm-dd (MM = month, dd = day, yyyy = year)</p>.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "endDate": {
                      "aliases": [],
                      "description": "Device Administration Authorization Rules's endDate.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "startDate": {
                      "aliases": [],
                      "description": "Device Administration Authorization Rules's startDate.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "datesRangeException": {
                  "aliases": [],
                  "description": "<p>Defines for which date/s TimeAndDate condition will be matched or NOT matched if used in exceptionDates prooperty<br> Options are - Date range, for specific date, the same date should be used for start/end date <br> Default - no specific dates<br> In order to reset the dates to have no specific dates Date format - yyyy-mm-dd (MM = month, dd = day, yyyy = year)</p>.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "endDate": {
                      "aliases": [],
                      "description": "Device Administration Authorization Rules's endDate.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "startDate": {
                      "aliases": [],
                      "description": "Device Administration Authorization Rules's startDate.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "description": {
                  "aliases": [],
                  "description": "Condition description.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "dictionaryName": {
                  "aliases": [],
                  "description": "Dictionary name.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "dictionaryValue": {
                  "aliases": [],
                  "description": "Dictionary value.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "hoursRange": {
                  "aliases": [],
                  "description": "<p>Defines for which hours a TimeAndDate condition will be matched or not matched if used in exceptionHours property<br> Time foramt - hh mm ( h = hour , mm = minutes ) <br> Default - All Day </p>.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "endTime": {
                      "aliases": [],
                      "description": "Device Administration Authorization Rules's endTime.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "startTime": {
                      "aliases": [],
                      "description": "Device Administration Authorization Rules's startTime.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "hoursRangeException": {
                  "aliases": [],
                  "description": "<p>Defines for which hours a TimeAndDate condition will be matched or not matched if used in exceptionHours property<br> Time foramt - hh mm ( h = hour , mm = minutes ) <br> Default - All Day </p>.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "endTime": {
                      "aliases": [],
                      "description": "Device Administration Authorization Rules's endTime.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "startTime": {
                      "aliases": [],
                      "description": "Device Administration Authorization Rules's startTime.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "id": {
                  "aliases": [],
                  "description": "Device Administration Authorization Rules's id.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "isNegate": {
                  "aliases": [],
                  "description": "Indicates whereas this condition is in negate mode.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "link": {
                  "aliases": [],
                  "description": "Device Administration Authorization Rules's link.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "href": {
                      "aliases": [],
                      "description": "Device Administration Authorization Rules's href.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "rel": {
                      "aliases": [],
                      "description": "Device Administration Authorization Rules's rel.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "type": {
                      "aliases": [],
                      "description": "Device Administration Authorization Rules's type.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "name": {
                  "aliases": [],
                  "description": "Condition name.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "operator": {
                  "aliases": [],
                  "description": "Equality operator.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "weekDays": {
                  "aliases": [],
                  "description": "<p>Defines for which days this condition will be matched<br> Days format - Arrays of WeekDay enums <br> Default - List of All week days</p>.",
                  "type": "list",
                  "required": false,
                  "elements": "str",
                  "suboptions": {}
                },
                "weekDaysException": {
                  "aliases": [],
                  "description": "<p>Defines for which days this condition will NOT be matched<br> Days format - Arrays of WeekDay enums <br> Default - Not enabled</p>.",
                  "type": "list",
                  "required": false,
                  "elements": "str",
                  "suboptions": {}
                }
              }
            },
            "default": {
              "aliases": [],
              "description": "Indicates if this rule is the default one.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "hitCounts": {
              "aliases": [],
              "description": "The amount of times the rule was matched.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "id": {
              "aliases": [],
              "description": "The identifier of the rule.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Rule name, Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "rank": {
              "aliases": [],
              "description": "The rank(priority) in relation to other rules. Lower rank is higher priority.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "state": {
              "aliases": [],
              "description": "The state that the rule is in. A disabled rule cannot be matched.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Device Administration Authorization Rules",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.device_administration_authorization_rules:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    commands:\n    - string\n    link:\n      href: string\n      rel: string\n      type: string\n    profile: string\n    rule:\n      condition:\n        attributeId: string\n        attributeName: string\n        attributeValue: string\n        children:\n        - conditionType: string\n          isNegate: true\n          link:\n            href: string\n            rel: string\n            type: string\n        conditionType: string\n        datesRange:\n          endDate: string\n          startDate: string\n        datesRangeException:\n          endDate: string\n          startDate: string\n        description: string\n        dictionaryName: string\n        dictionaryValue: string\n        hoursRange:\n          endTime: string\n          startTime: string\n        hoursRangeException:\n          endTime: string\n          startTime: string\n        id: string\n        isNegate: true\n        link:\n          href: string\n          rel: string\n          type: string\n        name: string\n        operator: string\n        weekDays:\n        - string\n        weekDaysException:\n        - string\n      default: true\n      hitCounts: 0\n      id: string\n      name: string\n      rank: 0\n      state: string\n\n- name: Update by id\n  cisco.ise.device_administration_authorization_rules:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    commands:\n    - string\n    id: string\n    link:\n      href: string\n      rel: string\n      type: string\n    policyId: string\n    profile: string\n    rule:\n      condition:\n        attributeId: string\n        attributeName: string\n        attributeValue: string\n        children:\n        - conditionType: string\n          isNegate: true\n          link:\n            href: string\n            rel: string\n            type: string\n        conditionType: string\n        datesRange:\n          endDate: string\n          startDate: string\n        datesRangeException:\n          endDate: string\n          startDate: string\n        description: string\n        dictionaryName: string\n        dictionaryValue: string\n        hoursRange:\n          endTime: string\n          startTime: string\n        hoursRangeException:\n          endTime: string\n          startTime: string\n        id: string\n        isNegate: true\n        link:\n          href: string\n          rel: string\n          type: string\n        name: string\n        operator: string\n        weekDays:\n        - string\n        weekDaysException:\n        - string\n      default: true\n      hitCounts: 0\n      id: string\n      name: string\n      rank: 0\n      state: string\n\n- name: Delete by id\n  cisco.ise.device_administration_authorization_rules:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n    policyId: string\n\n"
  },
  "cisco.ise.device_administration_authorization_rules_info": {
    "doc": {
      "description": "Get all Device Administration Authorization Rules.\nGet Device Administration Authorization Rules by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "id": {
          "aliases": [],
          "description": "Id path parameter. Rule id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "policyId": {
          "aliases": [],
          "description": "PolicyId path parameter. Policy id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Device Administration Authorization Rules",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Device Administration Authorization Rules\n  cisco.ise.device_administration_authorization_rules_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    policyId: string\n  register: result\n\n- name: Get Device Administration Authorization Rules by id\n  cisco.ise.device_administration_authorization_rules_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    policyId: string\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.device_administration_command_set_info": {
    "doc": {
      "description": "Get all Device Administration Command Set.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Device Administration Command Set",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Device Administration Command Set\n  cisco.ise.device_administration_command_set_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.device_administration_conditions": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Device Administration Conditions.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "attributeId": {
          "aliases": [],
          "description": "Dictionary attribute id (Optional), used for additional verification.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "attributeName": {
          "aliases": [],
          "description": "Dictionary attribute name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "attributeValue": {
          "aliases": [],
          "description": "<ul><li>Attribute value for condition</li> <li>Value type is specified in dictionary object</li> <li>if multiple values allowed is specified in dictionary object</li></ul>.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "children": {
          "aliases": [],
          "description": "In case type is andBlock or orBlock addtional conditions will be aggregated under this logical (OR/AND) condition.",
          "type": "list",
          "required": false,
          "suboptions": {
            "conditionType": {
              "aliases": [],
              "description": "<ul><li>Inidicates whether the record is the condition itself(data) or a logical(or,and) aggregation</li> <li>Data type enum(reference,single) indicates than \"conditonId\" OR \"ConditionAttrs\" fields should contain condition data but not both</li> <li>Logical aggreation(and,or) enum indicates that additional conditions are present under the children field</li></ul>.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "isNegate": {
              "aliases": [],
              "description": "Indicates whereas this condition is in negate mode.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "link": {
              "aliases": [],
              "description": "Device Administration Conditions's link.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "href": {
                  "aliases": [],
                  "description": "Device Administration Conditions's href.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "rel": {
                  "aliases": [],
                  "description": "Device Administration Conditions's rel.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "type": {
                  "aliases": [],
                  "description": "Device Administration Conditions's type.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        },
        "conditionType": {
          "aliases": [],
          "description": "<ul><li>Inidicates whether the record is the condition itself(data) or a logical(or,and) aggregation</li> <li>Data type enum(reference,single) indicates than \"conditonId\" OR \"ConditionAttrs\" fields should contain condition data but not both</li> <li>Logical aggreation(and,or) enum indicates that additional conditions are present under the children field</li></ul>.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "datesRange": {
          "aliases": [],
          "description": "<p>Defines for which date/s TimeAndDate condition will be matched or NOT matched if used in exceptionDates prooperty<br> Options are - Date range, for specific date, the same date should be used for start/end date <br> Default - no specific dates<br> In order to reset the dates to have no specific dates Date format - yyyy-mm-dd (MM = month, dd = day, yyyy = year)</p>.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "endDate": {
              "aliases": [],
              "description": "Device Administration Conditions's endDate.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "startDate": {
              "aliases": [],
              "description": "Device Administration Conditions's startDate.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "datesRangeException": {
          "aliases": [],
          "description": "<p>Defines for which date/s TimeAndDate condition will be matched or NOT matched if used in exceptionDates prooperty<br> Options are - Date range, for specific date, the same date should be used for start/end date <br> Default - no specific dates<br> In order to reset the dates to have no specific dates Date format - yyyy-mm-dd (MM = month, dd = day, yyyy = year)</p>.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "endDate": {
              "aliases": [],
              "description": "Device Administration Conditions's endDate.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "startDate": {
              "aliases": [],
              "description": "Device Administration Conditions's startDate.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "description": {
          "aliases": [],
          "description": "Condition description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dictionaryName": {
          "aliases": [],
          "description": "Dictionary name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dictionaryValue": {
          "aliases": [],
          "description": "Dictionary value.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hoursRange": {
          "aliases": [],
          "description": "<p>Defines for which hours a TimeAndDate condition will be matched or not matched if used in exceptionHours property<br> Time foramt - hh mm ( h = hour , mm = minutes ) <br> Default - All Day </p>.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "endTime": {
              "aliases": [],
              "description": "Device Administration Conditions's endTime.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "startTime": {
              "aliases": [],
              "description": "Device Administration Conditions's startTime.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "hoursRangeException": {
          "aliases": [],
          "description": "<p>Defines for which hours a TimeAndDate condition will be matched or not matched if used in exceptionHours property<br> Time foramt - hh mm ( h = hour , mm = minutes ) <br> Default - All Day </p>.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "endTime": {
              "aliases": [],
              "description": "Device Administration Conditions's endTime.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "startTime": {
              "aliases": [],
              "description": "Device Administration Conditions's startTime.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "id": {
          "aliases": [],
          "description": "Device Administration Conditions's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "isNegate": {
          "aliases": [],
          "description": "Indicates whereas this condition is in negate mode.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "link": {
          "aliases": [],
          "description": "Device Administration Conditions's link.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "href": {
              "aliases": [],
              "description": "Device Administration Conditions's href.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "rel": {
              "aliases": [],
              "description": "Device Administration Conditions's rel.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "Device Administration Conditions's type.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "Condition name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "operator": {
          "aliases": [],
          "description": "Equality operator.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "weekDays": {
          "aliases": [],
          "description": "<p>Defines for which days this condition will be matched<br> Days format - Arrays of WeekDay enums <br> Default - List of All week days</p>.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "weekDaysException": {
          "aliases": [],
          "description": "<p>Defines for which days this condition will NOT be matched<br> Days format - Arrays of WeekDay enums <br> Default - Not enabled</p>.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Device Administration Conditions",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.device_administration_conditions:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    attributeId: string\n    attributeName: string\n    attributeValue: string\n    children:\n    - conditionType: string\n      isNegate: true\n      link:\n        href: string\n        rel: string\n        type: string\n    conditionType: string\n    datesRange:\n      endDate: string\n      startDate: string\n    datesRangeException:\n      endDate: string\n      startDate: string\n    description: string\n    dictionaryName: string\n    dictionaryValue: string\n    hoursRange:\n      endTime: string\n      startTime: string\n    hoursRangeException:\n      endTime: string\n      startTime: string\n    id: string\n    isNegate: true\n    link:\n      href: string\n      rel: string\n      type: string\n    name: string\n    operator: string\n    weekDays:\n    - string\n    weekDaysException:\n    - string\n\n- name: Update by name\n  cisco.ise.device_administration_conditions:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    attributeId: string\n    attributeName: string\n    attributeValue: string\n    children:\n    - conditionType: string\n      isNegate: true\n      link:\n        href: string\n        rel: string\n        type: string\n    conditionType: string\n    datesRange:\n      endDate: string\n      startDate: string\n    datesRangeException:\n      endDate: string\n      startDate: string\n    description: string\n    dictionaryName: string\n    dictionaryValue: string\n    hoursRange:\n      endTime: string\n      startTime: string\n    hoursRangeException:\n      endTime: string\n      startTime: string\n    id: string\n    isNegate: true\n    link:\n      href: string\n      rel: string\n      type: string\n    name: string\n    operator: string\n    weekDays:\n    - string\n    weekDaysException:\n    - string\n\n- name: Delete by name\n  cisco.ise.device_administration_conditions:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    name: string\n\n- name: Update by id\n  cisco.ise.device_administration_conditions:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    attributeId: string\n    attributeName: string\n    attributeValue: string\n    children:\n    - conditionType: string\n      isNegate: true\n      link:\n        href: string\n        rel: string\n        type: string\n    conditionType: string\n    datesRange:\n      endDate: string\n      startDate: string\n    datesRangeException:\n      endDate: string\n      startDate: string\n    description: string\n    dictionaryName: string\n    dictionaryValue: string\n    hoursRange:\n      endTime: string\n      startTime: string\n    hoursRangeException:\n      endTime: string\n      startTime: string\n    id: string\n    isNegate: true\n    link:\n      href: string\n      rel: string\n      type: string\n    name: string\n    operator: string\n    weekDays:\n    - string\n    weekDaysException:\n    - string\n\n- name: Delete by id\n  cisco.ise.device_administration_conditions:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n"
  },
  "cisco.ise.device_administration_conditions_for_authentication_rule_info": {
    "doc": {
      "description": "Get all Device Administration Conditions For Authentication Rule.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Device Administration Conditions For Authentication Rule",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Device Administration Conditions For Authentication Rule\n  cisco.ise.device_administration_conditions_for_authentication_rule_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.device_administration_conditions_for_authorization_rule_info": {
    "doc": {
      "description": "Get all Device Administration Conditions For Authorization Rule.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Device Administration Conditions For Authorization Rule",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Device Administration Conditions For Authorization Rule\n  cisco.ise.device_administration_conditions_for_authorization_rule_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.device_administration_conditions_for_policy_set_info": {
    "doc": {
      "description": "Get all Device Administration Conditions For Policy Set.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Device Administration Conditions For Policy Set",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Device Administration Conditions For Policy Set\n  cisco.ise.device_administration_conditions_for_policy_set_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.device_administration_conditions_info": {
    "doc": {
      "description": "Get all Device Administration Conditions.\nGet Device Administration Conditions by id.\nGet Device Administration Conditions by name.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "id": {
          "aliases": [],
          "description": "Id path parameter. Condition id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name path parameter. Condition name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Device Administration Conditions",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Device Administration Conditions\n  cisco.ise.device_administration_conditions_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n- name: Get Device Administration Conditions by id\n  cisco.ise.device_administration_conditions_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n- name: Get Device Administration Conditions by name\n  cisco.ise.device_administration_conditions_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    name: string\n  register: result\n\n"
  },
  "cisco.ise.device_administration_dictionary_attributes_authentication_info": {
    "doc": {
      "description": "Get all Device Administration Dictionary Attributes Authentication.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Device Administration Dictionary Attributes Authentication",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Device Administration Dictionary Attributes Authentication\n  cisco.ise.device_administration_dictionary_attributes_authentication_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.device_administration_dictionary_attributes_authorization_info": {
    "doc": {
      "description": "Get all Device Administration Dictionary Attributes Authorization.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Device Administration Dictionary Attributes Authorization",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Device Administration Dictionary Attributes Authorization\n  cisco.ise.device_administration_dictionary_attributes_authorization_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.device_administration_dictionary_attributes_policy_set_info": {
    "doc": {
      "description": "Get all Device Administration Dictionary Attributes Policy Set.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Device Administration Dictionary Attributes Policy Set",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Device Administration Dictionary Attributes Policy Set\n  cisco.ise.device_administration_dictionary_attributes_policy_set_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.device_administration_global_exception_rules": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Device Administration Global Exception Rules.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "commands": {
          "aliases": [],
          "description": "Command sets enforce the specified list of commands that can be executed by a device administrator.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter. Rule id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "link": {
          "aliases": [],
          "description": "Device Administration Global Exception Rules's link.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "href": {
              "aliases": [],
              "description": "Device Administration Global Exception Rules's href.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "rel": {
              "aliases": [],
              "description": "Device Administration Global Exception Rules's rel.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "Device Administration Global Exception Rules's type.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "profile": {
          "aliases": [],
          "description": "Device admin profiles control the initial login session of the device administrator.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "rule": {
          "aliases": [],
          "description": "Common attributes in rule authentication/authorization.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "condition": {
              "aliases": [],
              "description": "Device Administration Global Exception Rules's condition.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "attributeId": {
                  "aliases": [],
                  "description": "Dictionary attribute id (Optional), used for additional verification.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "attributeName": {
                  "aliases": [],
                  "description": "Dictionary attribute name.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "attributeValue": {
                  "aliases": [],
                  "description": "<ul><li>Attribute value for condition</li> <li>Value type is specified in dictionary object</li> <li>if multiple values allowed is specified in dictionary object</li></ul>.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "children": {
                  "aliases": [],
                  "description": "In case type is andBlock or orBlock addtional conditions will be aggregated under this logical (OR/AND) condition.",
                  "type": "list",
                  "required": false,
                  "suboptions": {
                    "conditionType": {
                      "aliases": [],
                      "description": "<ul><li>Inidicates whether the record is the condition itself(data) or a logical(or,and) aggregation</li> <li>Data type enum(reference,single) indicates than \"conditonId\" OR \"ConditionAttrs\" fields should contain condition data but not both</li> <li>Logical aggreation(and,or) enum indicates that additional conditions are present under the children field</li></ul>.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "isNegate": {
                      "aliases": [],
                      "description": "Indicates whereas this condition is in negate mode.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "link": {
                      "aliases": [],
                      "description": "Device Administration Global Exception Rules's link.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "href": {
                          "aliases": [],
                          "description": "Device Administration Global Exception Rules's href.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        },
                        "rel": {
                          "aliases": [],
                          "description": "Device Administration Global Exception Rules's rel.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        },
                        "type": {
                          "aliases": [],
                          "description": "Device Administration Global Exception Rules's type.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    }
                  }
                },
                "conditionType": {
                  "aliases": [],
                  "description": "<ul><li>Inidicates whether the record is the condition itself(data) or a logical(or,and) aggregation</li> <li>Data type enum(reference,single) indicates than \"conditonId\" OR \"ConditionAttrs\" fields should contain condition data but not both</li> <li>Logical aggreation(and,or) enum indicates that additional conditions are present under the children field</li></ul>.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "datesRange": {
                  "aliases": [],
                  "description": "<p>Defines for which date/s TimeAndDate condition will be matched or NOT matched if used in exceptionDates prooperty<br> Options are - Date range, for specific date, the same date should be used for start/end date <br> Default - no specific dates<br> In order to reset the dates to have no specific dates Date format - yyyy-mm-dd (MM = month, dd = day, yyyy = year)</p>.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "endDate": {
                      "aliases": [],
                      "description": "Device Administration Global Exception Rules's endDate.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "startDate": {
                      "aliases": [],
                      "description": "Device Administration Global Exception Rules's startDate.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "datesRangeException": {
                  "aliases": [],
                  "description": "<p>Defines for which date/s TimeAndDate condition will be matched or NOT matched if used in exceptionDates prooperty<br> Options are - Date range, for specific date, the same date should be used for start/end date <br> Default - no specific dates<br> In order to reset the dates to have no specific dates Date format - yyyy-mm-dd (MM = month, dd = day, yyyy = year)</p>.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "endDate": {
                      "aliases": [],
                      "description": "Device Administration Global Exception Rules's endDate.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "startDate": {
                      "aliases": [],
                      "description": "Device Administration Global Exception Rules's startDate.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "description": {
                  "aliases": [],
                  "description": "Condition description.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "dictionaryName": {
                  "aliases": [],
                  "description": "Dictionary name.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "dictionaryValue": {
                  "aliases": [],
                  "description": "Dictionary value.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "hoursRange": {
                  "aliases": [],
                  "description": "<p>Defines for which hours a TimeAndDate condition will be matched or not matched if used in exceptionHours property<br> Time foramt - hh mm ( h = hour , mm = minutes ) <br> Default - All Day </p>.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "endTime": {
                      "aliases": [],
                      "description": "Device Administration Global Exception Rules's endTime.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "startTime": {
                      "aliases": [],
                      "description": "Device Administration Global Exception Rules's startTime.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "hoursRangeException": {
                  "aliases": [],
                  "description": "<p>Defines for which hours a TimeAndDate condition will be matched or not matched if used in exceptionHours property<br> Time foramt - hh mm ( h = hour , mm = minutes ) <br> Default - All Day </p>.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "endTime": {
                      "aliases": [],
                      "description": "Device Administration Global Exception Rules's endTime.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "startTime": {
                      "aliases": [],
                      "description": "Device Administration Global Exception Rules's startTime.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "id": {
                  "aliases": [],
                  "description": "Device Administration Global Exception Rules's id.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "isNegate": {
                  "aliases": [],
                  "description": "Indicates whereas this condition is in negate mode.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "link": {
                  "aliases": [],
                  "description": "Device Administration Global Exception Rules's link.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "href": {
                      "aliases": [],
                      "description": "Device Administration Global Exception Rules's href.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "rel": {
                      "aliases": [],
                      "description": "Device Administration Global Exception Rules's rel.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "type": {
                      "aliases": [],
                      "description": "Device Administration Global Exception Rules's type.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "name": {
                  "aliases": [],
                  "description": "Condition name.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "operator": {
                  "aliases": [],
                  "description": "Equality operator.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "weekDays": {
                  "aliases": [],
                  "description": "<p>Defines for which days this condition will be matched<br> Days format - Arrays of WeekDay enums <br> Default - List of All week days</p>.",
                  "type": "list",
                  "required": false,
                  "elements": "str",
                  "suboptions": {}
                },
                "weekDaysException": {
                  "aliases": [],
                  "description": "<p>Defines for which days this condition will NOT be matched<br> Days format - Arrays of WeekDay enums <br> Default - Not enabled</p>.",
                  "type": "list",
                  "required": false,
                  "elements": "str",
                  "suboptions": {}
                }
              }
            },
            "default": {
              "aliases": [],
              "description": "Indicates if this rule is the default one.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "hitCounts": {
              "aliases": [],
              "description": "The amount of times the rule was matched.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "id": {
              "aliases": [],
              "description": "The identifier of the rule.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Rule name, Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "rank": {
              "aliases": [],
              "description": "The rank(priority) in relation to other rules. Lower rank is higher priority.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "state": {
              "aliases": [],
              "description": "The state that the rule is in. A disabled rule cannot be matched.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Device Administration Global Exception Rules",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.device_administration_global_exception_rules:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    commands:\n    - string\n    link:\n      href: string\n      rel: string\n      type: string\n    profile: string\n    rule:\n      condition:\n        attributeId: string\n        attributeName: string\n        attributeValue: string\n        children:\n        - conditionType: string\n          isNegate: true\n          link:\n            href: string\n            rel: string\n            type: string\n        conditionType: string\n        datesRange:\n          endDate: string\n          startDate: string\n        datesRangeException:\n          endDate: string\n          startDate: string\n        description: string\n        dictionaryName: string\n        dictionaryValue: string\n        hoursRange:\n          endTime: string\n          startTime: string\n        hoursRangeException:\n          endTime: string\n          startTime: string\n        id: string\n        isNegate: true\n        link:\n          href: string\n          rel: string\n          type: string\n        name: string\n        operator: string\n        weekDays:\n        - string\n        weekDaysException:\n        - string\n      default: true\n      hitCounts: 0\n      id: string\n      name: string\n      rank: 0\n      state: string\n\n- name: Update by id\n  cisco.ise.device_administration_global_exception_rules:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    commands:\n    - string\n    id: string\n    link:\n      href: string\n      rel: string\n      type: string\n    profile: string\n    rule:\n      condition:\n        attributeId: string\n        attributeName: string\n        attributeValue: string\n        children:\n        - conditionType: string\n          isNegate: true\n          link:\n            href: string\n            rel: string\n            type: string\n        conditionType: string\n        datesRange:\n          endDate: string\n          startDate: string\n        datesRangeException:\n          endDate: string\n          startDate: string\n        description: string\n        dictionaryName: string\n        dictionaryValue: string\n        hoursRange:\n          endTime: string\n          startTime: string\n        hoursRangeException:\n          endTime: string\n          startTime: string\n        id: string\n        isNegate: true\n        link:\n          href: string\n          rel: string\n          type: string\n        name: string\n        operator: string\n        weekDays:\n        - string\n        weekDaysException:\n        - string\n      default: true\n      hitCounts: 0\n      id: string\n      name: string\n      rank: 0\n      state: string\n\n- name: Delete by id\n  cisco.ise.device_administration_global_exception_rules:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n"
  },
  "cisco.ise.device_administration_global_exception_rules_info": {
    "doc": {
      "description": "Get all Device Administration Global Exception Rules.\nGet Device Administration Global Exception Rules by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "id": {
          "aliases": [],
          "description": "Id path parameter. Rule id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Device Administration Global Exception Rules",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Device Administration Global Exception Rules\n  cisco.ise.device_administration_global_exception_rules_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n- name: Get Device Administration Global Exception Rules by id\n  cisco.ise.device_administration_global_exception_rules_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.device_administration_global_exception_rules_reset_hitcount": {
    "doc": {
      "description": "Manage operation create of the resource Device Administration Global Exception Rules Reset Hitcount.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Device Administration Global Exception Rules Reset Hitcount",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.device_administration_global_exception_rules_reset_hitcount:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n\n"
  },
  "cisco.ise.device_administration_identity_stores_info": {
    "doc": {
      "description": "Get all Device Administration Identity Stores.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Device Administration Identity Stores",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Device Administration Identity Stores\n  cisco.ise.device_administration_identity_stores_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.device_administration_local_exception_rules": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Device Administration Local Exception Rules.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "commands": {
          "aliases": [],
          "description": "Command sets enforce the specified list of commands that can be executed by a device administrator.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter. Rule id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "link": {
          "aliases": [],
          "description": "Device Administration Local Exception Rules's link.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "href": {
              "aliases": [],
              "description": "Device Administration Local Exception Rules's href.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "rel": {
              "aliases": [],
              "description": "Device Administration Local Exception Rules's rel.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "Device Administration Local Exception Rules's type.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "policyId": {
          "aliases": [],
          "description": "PolicyId path parameter. Policy id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "profile": {
          "aliases": [],
          "description": "Device admin profiles control the initial login session of the device administrator.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "rule": {
          "aliases": [],
          "description": "Common attributes in rule authentication/authorization.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "condition": {
              "aliases": [],
              "description": "Device Administration Local Exception Rules's condition.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "attributeId": {
                  "aliases": [],
                  "description": "Dictionary attribute id (Optional), used for additional verification.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "attributeName": {
                  "aliases": [],
                  "description": "Dictionary attribute name.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "attributeValue": {
                  "aliases": [],
                  "description": "<ul><li>Attribute value for condition</li> <li>Value type is specified in dictionary object</li> <li>if multiple values allowed is specified in dictionary object</li></ul>.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "children": {
                  "aliases": [],
                  "description": "In case type is andBlock or orBlock addtional conditions will be aggregated under this logical (OR/AND) condition.",
                  "type": "list",
                  "required": false,
                  "suboptions": {
                    "conditionType": {
                      "aliases": [],
                      "description": "<ul><li>Inidicates whether the record is the condition itself(data) or a logical(or,and) aggregation</li> <li>Data type enum(reference,single) indicates than \"conditonId\" OR \"ConditionAttrs\" fields should contain condition data but not both</li> <li>Logical aggreation(and,or) enum indicates that additional conditions are present under the children field</li></ul>.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "isNegate": {
                      "aliases": [],
                      "description": "Indicates whereas this condition is in negate mode.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "link": {
                      "aliases": [],
                      "description": "Device Administration Local Exception Rules's link.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "href": {
                          "aliases": [],
                          "description": "Device Administration Local Exception Rules's href.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        },
                        "rel": {
                          "aliases": [],
                          "description": "Device Administration Local Exception Rules's rel.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        },
                        "type": {
                          "aliases": [],
                          "description": "Device Administration Local Exception Rules's type.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    }
                  }
                },
                "conditionType": {
                  "aliases": [],
                  "description": "<ul><li>Inidicates whether the record is the condition itself(data) or a logical(or,and) aggregation</li> <li>Data type enum(reference,single) indicates than \"conditonId\" OR \"ConditionAttrs\" fields should contain condition data but not both</li> <li>Logical aggreation(and,or) enum indicates that additional conditions are present under the children field</li></ul>.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "datesRange": {
                  "aliases": [],
                  "description": "<p>Defines for which date/s TimeAndDate condition will be matched or NOT matched if used in exceptionDates prooperty<br> Options are - Date range, for specific date, the same date should be used for start/end date <br> Default - no specific dates<br> In order to reset the dates to have no specific dates Date format - yyyy-mm-dd (MM = month, dd = day, yyyy = year)</p>.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "endDate": {
                      "aliases": [],
                      "description": "Device Administration Local Exception Rules's endDate.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "startDate": {
                      "aliases": [],
                      "description": "Device Administration Local Exception Rules's startDate.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "datesRangeException": {
                  "aliases": [],
                  "description": "<p>Defines for which date/s TimeAndDate condition will be matched or NOT matched if used in exceptionDates prooperty<br> Options are - Date range, for specific date, the same date should be used for start/end date <br> Default - no specific dates<br> In order to reset the dates to have no specific dates Date format - yyyy-mm-dd (MM = month, dd = day, yyyy = year)</p>.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "endDate": {
                      "aliases": [],
                      "description": "Device Administration Local Exception Rules's endDate.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "startDate": {
                      "aliases": [],
                      "description": "Device Administration Local Exception Rules's startDate.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "description": {
                  "aliases": [],
                  "description": "Condition description.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "dictionaryName": {
                  "aliases": [],
                  "description": "Dictionary name.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "dictionaryValue": {
                  "aliases": [],
                  "description": "Dictionary value.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "hoursRange": {
                  "aliases": [],
                  "description": "<p>Defines for which hours a TimeAndDate condition will be matched or not matched if used in exceptionHours property<br> Time foramt - hh mm ( h = hour , mm = minutes ) <br> Default - All Day </p>.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "endTime": {
                      "aliases": [],
                      "description": "Device Administration Local Exception Rules's endTime.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "startTime": {
                      "aliases": [],
                      "description": "Device Administration Local Exception Rules's startTime.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "hoursRangeException": {
                  "aliases": [],
                  "description": "<p>Defines for which hours a TimeAndDate condition will be matched or not matched if used in exceptionHours property<br> Time foramt - hh mm ( h = hour , mm = minutes ) <br> Default - All Day </p>.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "endTime": {
                      "aliases": [],
                      "description": "Device Administration Local Exception Rules's endTime.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "startTime": {
                      "aliases": [],
                      "description": "Device Administration Local Exception Rules's startTime.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "id": {
                  "aliases": [],
                  "description": "Device Administration Local Exception Rules's id.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "isNegate": {
                  "aliases": [],
                  "description": "Indicates whereas this condition is in negate mode.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "link": {
                  "aliases": [],
                  "description": "Device Administration Local Exception Rules's link.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "href": {
                      "aliases": [],
                      "description": "Device Administration Local Exception Rules's href.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "rel": {
                      "aliases": [],
                      "description": "Device Administration Local Exception Rules's rel.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "type": {
                      "aliases": [],
                      "description": "Device Administration Local Exception Rules's type.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "name": {
                  "aliases": [],
                  "description": "Condition name.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "operator": {
                  "aliases": [],
                  "description": "Equality operator.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "weekDays": {
                  "aliases": [],
                  "description": "<p>Defines for which days this condition will be matched<br> Days format - Arrays of WeekDay enums <br> Default - List of All week days</p>.",
                  "type": "list",
                  "required": false,
                  "elements": "str",
                  "suboptions": {}
                },
                "weekDaysException": {
                  "aliases": [],
                  "description": "<p>Defines for which days this condition will NOT be matched<br> Days format - Arrays of WeekDay enums <br> Default - Not enabled</p>.",
                  "type": "list",
                  "required": false,
                  "elements": "str",
                  "suboptions": {}
                }
              }
            },
            "default": {
              "aliases": [],
              "description": "Indicates if this rule is the default one.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "hitCounts": {
              "aliases": [],
              "description": "The amount of times the rule was matched.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "id": {
              "aliases": [],
              "description": "The identifier of the rule.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Rule name, Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "rank": {
              "aliases": [],
              "description": "The rank(priority) in relation to other rules. Lower rank is higher priority.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "state": {
              "aliases": [],
              "description": "The state that the rule is in. A disabled rule cannot be matched.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Device Administration Local Exception Rules",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.device_administration_local_exception_rules:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    commands:\n    - string\n    link:\n      href: string\n      rel: string\n      type: string\n    profile: string\n    rule:\n      condition:\n        attributeId: string\n        attributeName: string\n        attributeValue: string\n        children:\n        - conditionType: string\n          isNegate: true\n          link:\n            href: string\n            rel: string\n            type: string\n        conditionType: string\n        datesRange:\n          endDate: string\n          startDate: string\n        datesRangeException:\n          endDate: string\n          startDate: string\n        description: string\n        dictionaryName: string\n        dictionaryValue: string\n        hoursRange:\n          endTime: string\n          startTime: string\n        hoursRangeException:\n          endTime: string\n          startTime: string\n        id: string\n        isNegate: true\n        link:\n          href: string\n          rel: string\n          type: string\n        name: string\n        operator: string\n        weekDays:\n        - string\n        weekDaysException:\n        - string\n      default: true\n      hitCounts: 0\n      id: string\n      name: string\n      rank: 0\n      state: string\n\n- name: Update by id\n  cisco.ise.device_administration_local_exception_rules:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    commands:\n    - string\n    id: string\n    link:\n      href: string\n      rel: string\n      type: string\n    policyId: string\n    profile: string\n    rule:\n      condition:\n        attributeId: string\n        attributeName: string\n        attributeValue: string\n        children:\n        - conditionType: string\n          isNegate: true\n          link:\n            href: string\n            rel: string\n            type: string\n        conditionType: string\n        datesRange:\n          endDate: string\n          startDate: string\n        datesRangeException:\n          endDate: string\n          startDate: string\n        description: string\n        dictionaryName: string\n        dictionaryValue: string\n        hoursRange:\n          endTime: string\n          startTime: string\n        hoursRangeException:\n          endTime: string\n          startTime: string\n        id: string\n        isNegate: true\n        link:\n          href: string\n          rel: string\n          type: string\n        name: string\n        operator: string\n        weekDays:\n        - string\n        weekDaysException:\n        - string\n      default: true\n      hitCounts: 0\n      id: string\n      name: string\n      rank: 0\n      state: string\n\n- name: Delete by id\n  cisco.ise.device_administration_local_exception_rules:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n    policyId: string\n\n"
  },
  "cisco.ise.device_administration_local_exception_rules_info": {
    "doc": {
      "description": "Get all Device Administration Local Exception Rules.\nGet Device Administration Local Exception Rules by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "id": {
          "aliases": [],
          "description": "Id path parameter. Rule id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "policyId": {
          "aliases": [],
          "description": "PolicyId path parameter. Policy id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Device Administration Local Exception Rules",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Device Administration Local Exception Rules\n  cisco.ise.device_administration_local_exception_rules_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    policyId: string\n  register: result\n\n- name: Get Device Administration Local Exception Rules by id\n  cisco.ise.device_administration_local_exception_rules_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    policyId: string\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.device_administration_local_exception_rules_reset_hitcount": {
    "doc": {
      "description": "Manage operation create of the resource Device Administration Local Exception Rules Reset Hitcount.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Device Administration Local Exception Rules Reset Hitcount",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.device_administration_local_exception_rules_reset_hitcount:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n\n"
  },
  "cisco.ise.device_administration_network_conditions": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Device Administration Network Conditions.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "conditionType": {
          "aliases": [],
          "description": "This field determines the content of the conditions field.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "conditions": {
          "aliases": [],
          "description": "Device Administration Network Conditions's conditions.",
          "type": "list",
          "required": false,
          "suboptions": {
            "cliDnisList": {
              "aliases": [],
              "description": "<p>This field should contain a Caller ID (CLI), comma, and Called ID (DNIS).<br> Line format - Caller ID (CLI), Called ID (DNIS)</p>.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "deviceGroupList": {
              "aliases": [],
              "description": "<p>This field should contain a tuple with NDG Root, comma, and an NDG (that it under the root).<br> Line format - NDG Root Name, NDG, Port</p>.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "deviceList": {
              "aliases": [],
              "description": "<p>This field should contain Device-Name,port-number. The device name must be the same as the name field in a Network Device object.<br> Line format - Device Name,Port</p>.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "ipAddrList": {
              "aliases": [],
              "description": "<p>This field should contain IP-address-or-subnet,port number<br> IP address can be IPV4 format (n.n.n.n) or IPV6 format (n n n n n n n n).<br> IP subnet can be IPV4 format (n.n.n.n/m) or IPV6 format (n n n n n n n n/m).<br> Line format - IP Address or subnet,Port</p>.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "macAddrList": {
              "aliases": [],
              "description": "<p>This field should contain Endstation MAC address, comma, and Destination MAC addresses.<br> Each Max address must include twelve hexadecimal digits using formats nn nn nn nn nn nn or nn-nn-nn-nn-nn-nn or nnnn.nnnn.nnnn or nnnnnnnnnnnn.<br> Line format - Endstation MAC,Destination MAC </p>.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            }
          }
        },
        "description": {
          "aliases": [],
          "description": "Device Administration Network Conditions's description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Device Administration Network Conditions's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "link": {
          "aliases": [],
          "description": "Device Administration Network Conditions's link.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "href": {
              "aliases": [],
              "description": "Device Administration Network Conditions's href.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "rel": {
              "aliases": [],
              "description": "Device Administration Network Conditions's rel.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "Device Administration Network Conditions's type.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "Network Condition name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Device Administration Network Conditions",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.device_administration_network_conditions:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    conditionType: string\n    conditions:\n    - cliDnisList:\n      - string\n      deviceGroupList:\n      - string\n      deviceList:\n      - string\n      ipAddrList:\n      - string\n      macAddrList:\n      - string\n    description: string\n    id: string\n    link:\n      href: string\n      rel: string\n      type: string\n    name: string\n\n- name: Update by id\n  cisco.ise.device_administration_network_conditions:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    conditionType: string\n    conditions:\n    - cliDnisList:\n      - string\n      deviceGroupList:\n      - string\n      deviceList:\n      - string\n      ipAddrList:\n      - string\n      macAddrList:\n      - string\n    description: string\n    id: string\n    link:\n      href: string\n      rel: string\n      type: string\n    name: string\n\n- name: Delete by id\n  cisco.ise.device_administration_network_conditions:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n"
  },
  "cisco.ise.device_administration_network_conditions_info": {
    "doc": {
      "description": "Get all Device Administration Network Conditions.\nGet Device Administration Network Conditions by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "id": {
          "aliases": [],
          "description": "Id path parameter. Condition id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Device Administration Network Conditions",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Device Administration Network Conditions\n  cisco.ise.device_administration_network_conditions_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n- name: Get Device Administration Network Conditions by id\n  cisco.ise.device_administration_network_conditions_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.device_administration_policy_set": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Device Administration Policy Set.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "condition": {
          "aliases": [],
          "description": "Device Administration Policy Set's condition.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "attributeId": {
              "aliases": [],
              "description": "Dictionary attribute id (Optional), used for additional verification.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "attributeName": {
              "aliases": [],
              "description": "Dictionary attribute name.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "attributeValue": {
              "aliases": [],
              "description": "<ul><li>Attribute value for condition</li> <li>Value type is specified in dictionary object</li> <li>if multiple values allowed is specified in dictionary object</li></ul>.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "children": {
              "aliases": [],
              "description": "In case type is andBlock or orBlock addtional conditions will be aggregated under this logical (OR/AND) condition.",
              "type": "list",
              "required": false,
              "suboptions": {
                "conditionType": {
                  "aliases": [],
                  "description": "<ul><li>Inidicates whether the record is the condition itself(data) or a logical(or,and) aggregation</li> <li>Data type enum(reference,single) indicates than \"conditonId\" OR \"ConditionAttrs\" fields should contain condition data but not both</li> <li>Logical aggreation(and,or) enum indicates that additional conditions are present under the children field</li></ul>.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "isNegate": {
                  "aliases": [],
                  "description": "Indicates whereas this condition is in negate mode.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "link": {
                  "aliases": [],
                  "description": "Device Administration Policy Set's link.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "href": {
                      "aliases": [],
                      "description": "Device Administration Policy Set's href.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "rel": {
                      "aliases": [],
                      "description": "Device Administration Policy Set's rel.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "type": {
                      "aliases": [],
                      "description": "Device Administration Policy Set's type.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                }
              }
            },
            "conditionType": {
              "aliases": [],
              "description": "<ul><li>Inidicates whether the record is the condition itself(data) or a logical(or,and) aggregation</li> <li>Data type enum(reference,single) indicates than \"conditonId\" OR \"ConditionAttrs\" fields should contain condition data but not both</li> <li>Logical aggreation(and,or) enum indicates that additional conditions are present under the children field</li></ul>.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "datesRange": {
              "aliases": [],
              "description": "<p>Defines for which date/s TimeAndDate condition will be matched or NOT matched if used in exceptionDates prooperty<br> Options are - Date range, for specific date, the same date should be used for start/end date <br> Default - no specific dates<br> In order to reset the dates to have no specific dates Date format - yyyy-mm-dd (MM = month, dd = day, yyyy = year)</p>.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "endDate": {
                  "aliases": [],
                  "description": "Device Administration Policy Set's endDate.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "startDate": {
                  "aliases": [],
                  "description": "Device Administration Policy Set's startDate.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "datesRangeException": {
              "aliases": [],
              "description": "<p>Defines for which date/s TimeAndDate condition will be matched or NOT matched if used in exceptionDates prooperty<br> Options are - Date range, for specific date, the same date should be used for start/end date <br> Default - no specific dates<br> In order to reset the dates to have no specific dates Date format - yyyy-mm-dd (MM = month, dd = day, yyyy = year)</p>.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "endDate": {
                  "aliases": [],
                  "description": "Device Administration Policy Set's endDate.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "startDate": {
                  "aliases": [],
                  "description": "Device Administration Policy Set's startDate.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "description": {
              "aliases": [],
              "description": "Condition description.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "dictionaryName": {
              "aliases": [],
              "description": "Dictionary name.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "dictionaryValue": {
              "aliases": [],
              "description": "Dictionary value.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "hoursRange": {
              "aliases": [],
              "description": "<p>Defines for which hours a TimeAndDate condition will be matched or not matched if used in exceptionHours property<br> Time foramt - hh mm ( h = hour , mm = minutes ) <br> Default - All Day </p>.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "endTime": {
                  "aliases": [],
                  "description": "Device Administration Policy Set's endTime.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "startTime": {
                  "aliases": [],
                  "description": "Device Administration Policy Set's startTime.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "hoursRangeException": {
              "aliases": [],
              "description": "<p>Defines for which hours a TimeAndDate condition will be matched or not matched if used in exceptionHours property<br> Time foramt - hh mm ( h = hour , mm = minutes ) <br> Default - All Day </p>.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "endTime": {
                  "aliases": [],
                  "description": "Device Administration Policy Set's endTime.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "startTime": {
                  "aliases": [],
                  "description": "Device Administration Policy Set's startTime.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "id": {
              "aliases": [],
              "description": "Device Administration Policy Set's id.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "isNegate": {
              "aliases": [],
              "description": "Indicates whereas this condition is in negate mode.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "link": {
              "aliases": [],
              "description": "Device Administration Policy Set's link.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "href": {
                  "aliases": [],
                  "description": "Device Administration Policy Set's href.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "rel": {
                  "aliases": [],
                  "description": "Device Administration Policy Set's rel.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "type": {
                  "aliases": [],
                  "description": "Device Administration Policy Set's type.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "name": {
              "aliases": [],
              "description": "Condition name.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "operator": {
              "aliases": [],
              "description": "Equality operator.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "weekDays": {
              "aliases": [],
              "description": "<p>Defines for which days this condition will be matched<br> Days format - Arrays of WeekDay enums <br> Default - List of All week days</p>.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "weekDaysException": {
              "aliases": [],
              "description": "<p>Defines for which days this condition will NOT be matched<br> Days format - Arrays of WeekDay enums <br> Default - Not enabled</p>.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            }
          }
        },
        "default": {
          "aliases": [],
          "description": "Flag which indicates if this policy set is the default one.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "The description for the policy set.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hitCounts": {
          "aliases": [],
          "description": "The amount of times the policy was matched.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Identifier for the policy set.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "isProxy": {
          "aliases": [],
          "description": "Flag which indicates if the policy set service is of type 'Proxy Sequence' or 'Allowed Protocols'.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "link": {
          "aliases": [],
          "description": "Device Administration Policy Set's link.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "href": {
              "aliases": [],
              "description": "Device Administration Policy Set's href.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "rel": {
              "aliases": [],
              "description": "Device Administration Policy Set's rel.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "Device Administration Policy Set's type.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "Given name for the policy set, Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "rank": {
          "aliases": [],
          "description": "The rank(priority) in relation to other policy set. Lower rank is higher priority.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "serviceName": {
          "aliases": [],
          "description": "Policy set service identifier - Allowed Protocols,Server Sequence..",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state_": {
          "aliases": [],
          "description": "The state that the policy set is in. A disabled policy set cannot be matched.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Device Administration Policy Set",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.device_administration_policy_set:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    condition:\n      attributeId: string\n      attributeName: string\n      attributeValue: string\n      children:\n      - conditionType: string\n        isNegate: true\n        link:\n          href: string\n          rel: string\n          type: string\n      conditionType: string\n      datesRange:\n        endDate: string\n        startDate: string\n      datesRangeException:\n        endDate: string\n        startDate: string\n      description: string\n      dictionaryName: string\n      dictionaryValue: string\n      hoursRange:\n        endTime: string\n        startTime: string\n      hoursRangeException:\n        endTime: string\n        startTime: string\n      id: string\n      isNegate: true\n      link:\n        href: string\n        rel: string\n        type: string\n      name: string\n      operator: string\n      weekDays:\n      - string\n      weekDaysException:\n      - string\n    default: true\n    description: string\n    hitCounts: 0\n    id: string\n    isProxy: true\n    link:\n      href: string\n      rel: string\n      type: string\n    name: string\n    rank: 0\n    serviceName: string\n    state_: string\n\n- name: Update by id\n  cisco.ise.device_administration_policy_set:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    condition:\n      attributeId: string\n      attributeName: string\n      attributeValue: string\n      children:\n      - conditionType: string\n        isNegate: true\n        link:\n          href: string\n          rel: string\n          type: string\n      conditionType: string\n      datesRange:\n        endDate: string\n        startDate: string\n      datesRangeException:\n        endDate: string\n        startDate: string\n      description: string\n      dictionaryName: string\n      dictionaryValue: string\n      hoursRange:\n        endTime: string\n        startTime: string\n      hoursRangeException:\n        endTime: string\n        startTime: string\n      id: string\n      isNegate: true\n      link:\n        href: string\n        rel: string\n        type: string\n      name: string\n      operator: string\n      weekDays:\n      - string\n      weekDaysException:\n      - string\n    default: true\n    description: string\n    hitCounts: 0\n    id: string\n    isProxy: true\n    link:\n      href: string\n      rel: string\n      type: string\n    name: string\n    rank: 0\n    serviceName: string\n    state_: string\n\n- name: Delete by id\n  cisco.ise.device_administration_policy_set:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n"
  },
  "cisco.ise.device_administration_policy_set_info": {
    "doc": {
      "description": "Get all Device Administration Policy Set.\nGet Device Administration Policy Set by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "id": {
          "aliases": [],
          "description": "Id path parameter. Policy id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Device Administration Policy Set",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Device Administration Policy Set\n  cisco.ise.device_administration_policy_set_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n- name: Get Device Administration Policy Set by id\n  cisco.ise.device_administration_policy_set_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.device_administration_policy_set_reset_hitcount": {
    "doc": {
      "description": "Manage operation create of the resource Device Administration Policy Set Reset Hitcount.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Device Administration Policy Set Reset Hitcount",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.device_administration_policy_set_reset_hitcount:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n\n"
  },
  "cisco.ise.device_administration_profiles_info": {
    "doc": {
      "description": "Get all Device Administration Profiles.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Device Administration Profiles",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Device Administration Profiles\n  cisco.ise.device_administration_profiles_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.device_administration_service_names_info": {
    "doc": {
      "description": "Get all Device Administration Service Names.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Device Administration Service Names",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Device Administration Service Names\n  cisco.ise.device_administration_service_names_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.device_administration_time_date_conditions": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Device Administration Time Date Conditions.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "attributeId": {
          "aliases": [],
          "description": "Dictionary attribute id (Optional), used for additional verification.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "attributeName": {
          "aliases": [],
          "description": "Dictionary attribute name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "attributeValue": {
          "aliases": [],
          "description": "<ul><li>Attribute value for condition</li> <li>Value type is specified in dictionary object</li> <li>if multiple values allowed is specified in dictionary object</li></ul>.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "children": {
          "aliases": [],
          "description": "In case type is andBlock or orBlock addtional conditions will be aggregated under this logical (OR/AND) condition.",
          "type": "list",
          "required": false,
          "suboptions": {
            "conditionType": {
              "aliases": [],
              "description": "<ul><li>Inidicates whether the record is the condition itself(data) or a logical(or,and) aggregation</li> <li>Data type enum(reference,single) indicates than \"conditonId\" OR \"ConditionAttrs\" fields should contain condition data but not both</li> <li>Logical aggreation(and,or) enum indicates that additional conditions are present under the children field</li></ul>.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "isNegate": {
              "aliases": [],
              "description": "Indicates whereas this condition is in negate mode.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "link": {
              "aliases": [],
              "description": "Device Administration Time Date Conditions's link.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "href": {
                  "aliases": [],
                  "description": "Device Administration Time Date Conditions's href.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "rel": {
                  "aliases": [],
                  "description": "Device Administration Time Date Conditions's rel.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "type": {
                  "aliases": [],
                  "description": "Device Administration Time Date Conditions's type.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        },
        "conditionType": {
          "aliases": [],
          "description": "<ul><li>Inidicates whether the record is the condition itself(data) or a logical(or,and) aggregation</li> <li>Data type enum(reference,single) indicates than \"conditonId\" OR \"ConditionAttrs\" fields should contain condition data but not both</li> <li>Logical aggreation(and,or) enum indicates that additional conditions are present under the children field</li></ul>.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "datesRange": {
          "aliases": [],
          "description": "<p>Defines for which date/s TimeAndDate condition will be matched or NOT matched if used in exceptionDates prooperty<br> Options are - Date range, for specific date, the same date should be used for start/end date <br> Default - no specific dates<br> In order to reset the dates to have no specific dates Date format - yyyy-mm-dd (MM = month, dd = day, yyyy = year)</p>.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "endDate": {
              "aliases": [],
              "description": "Device Administration Time Date Conditions's endDate.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "startDate": {
              "aliases": [],
              "description": "Device Administration Time Date Conditions's startDate.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "datesRangeException": {
          "aliases": [],
          "description": "<p>Defines for which date/s TimeAndDate condition will be matched or NOT matched if used in exceptionDates prooperty<br> Options are - Date range, for specific date, the same date should be used for start/end date <br> Default - no specific dates<br> In order to reset the dates to have no specific dates Date format - yyyy-mm-dd (MM = month, dd = day, yyyy = year)</p>.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "endDate": {
              "aliases": [],
              "description": "Device Administration Time Date Conditions's endDate.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "startDate": {
              "aliases": [],
              "description": "Device Administration Time Date Conditions's startDate.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "description": {
          "aliases": [],
          "description": "Condition description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dictionaryName": {
          "aliases": [],
          "description": "Dictionary name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dictionaryValue": {
          "aliases": [],
          "description": "Dictionary value.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hoursRange": {
          "aliases": [],
          "description": "<p>Defines for which hours a TimeAndDate condition will be matched or not matched if used in exceptionHours property<br> Time foramt - hh mm ( h = hour , mm = minutes ) <br> Default - All Day </p>.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "endTime": {
              "aliases": [],
              "description": "Device Administration Time Date Conditions's endTime.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "startTime": {
              "aliases": [],
              "description": "Device Administration Time Date Conditions's startTime.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "hoursRangeException": {
          "aliases": [],
          "description": "<p>Defines for which hours a TimeAndDate condition will be matched or not matched if used in exceptionHours property<br> Time foramt - hh mm ( h = hour , mm = minutes ) <br> Default - All Day </p>.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "endTime": {
              "aliases": [],
              "description": "Device Administration Time Date Conditions's endTime.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "startTime": {
              "aliases": [],
              "description": "Device Administration Time Date Conditions's startTime.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "id": {
          "aliases": [],
          "description": "Device Administration Time Date Conditions's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "isNegate": {
          "aliases": [],
          "description": "Indicates whereas this condition is in negate mode.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "link": {
          "aliases": [],
          "description": "Device Administration Time Date Conditions's link.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "href": {
              "aliases": [],
              "description": "Device Administration Time Date Conditions's href.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "rel": {
              "aliases": [],
              "description": "Device Administration Time Date Conditions's rel.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "Device Administration Time Date Conditions's type.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "Condition name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "operator": {
          "aliases": [],
          "description": "Equality operator.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "weekDays": {
          "aliases": [],
          "description": "<p>Defines for which days this condition will be matched<br> Days format - Arrays of WeekDay enums <br> Default - List of All week days</p>.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "weekDaysException": {
          "aliases": [],
          "description": "<p>Defines for which days this condition will NOT be matched<br> Days format - Arrays of WeekDay enums <br> Default - Not enabled</p>.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Device Administration Time Date Conditions",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.device_administration_time_date_conditions:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    attributeId: string\n    attributeName: string\n    attributeValue: string\n    children:\n    - conditionType: string\n      isNegate: true\n      link:\n        href: string\n        rel: string\n        type: string\n    conditionType: string\n    datesRange:\n      endDate: string\n      startDate: string\n    datesRangeException:\n      endDate: string\n      startDate: string\n    description: string\n    dictionaryName: string\n    dictionaryValue: string\n    hoursRange:\n      endTime: string\n      startTime: string\n    hoursRangeException:\n      endTime: string\n      startTime: string\n    id: string\n    isNegate: true\n    link:\n      href: string\n      rel: string\n      type: string\n    name: string\n    operator: string\n    weekDays:\n    - string\n    weekDaysException:\n    - string\n\n- name: Update by id\n  cisco.ise.device_administration_time_date_conditions:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    attributeId: string\n    attributeName: string\n    attributeValue: string\n    children:\n    - conditionType: string\n      isNegate: true\n      link:\n        href: string\n        rel: string\n        type: string\n    conditionType: string\n    datesRange:\n      endDate: string\n      startDate: string\n    datesRangeException:\n      endDate: string\n      startDate: string\n    description: string\n    dictionaryName: string\n    dictionaryValue: string\n    hoursRange:\n      endTime: string\n      startTime: string\n    hoursRangeException:\n      endTime: string\n      startTime: string\n    id: string\n    isNegate: true\n    link:\n      href: string\n      rel: string\n      type: string\n    name: string\n    operator: string\n    weekDays:\n    - string\n    weekDaysException:\n    - string\n\n- name: Delete by id\n  cisco.ise.device_administration_time_date_conditions:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n"
  },
  "cisco.ise.device_administration_time_date_conditions_info": {
    "doc": {
      "description": "Get all Device Administration Time Date Conditions.\nGet Device Administration Time Date Conditions by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "id": {
          "aliases": [],
          "description": "Id path parameter. Condition id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Device Administration Time Date Conditions",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Device Administration Time Date Conditions\n  cisco.ise.device_administration_time_date_conditions_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n- name: Get Device Administration Time Date Conditions by id\n  cisco.ise.device_administration_time_date_conditions_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.downloadable_acl": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Downloadable Acl.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "dacl": {
          "aliases": [],
          "description": "The DACL Content. Use the string \\\\n for a newline.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "daclType": {
          "aliases": [],
          "description": "Allowed values - IPV4, - IPV6, - IP_AGNOSTIC.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Use the string \\\\n for a newline.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Downloadable Acl's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Resource Name. Name may contain alphanumeric or any of the following characters _.-.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Downloadable Acl",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.downloadable_acl:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    dacl: string\n    daclType: string\n    description: string\n    id: string\n    name: string\n\n- name: Delete by id\n  cisco.ise.downloadable_acl:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n- name: Create\n  cisco.ise.downloadable_acl:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    dacl: string\n    daclType: string\n    description: string\n    name: string\n\n"
  },
  "cisco.ise.downloadable_acl_info": {
    "doc": {
      "description": "Get all Downloadable Acl.\nGet Downloadable Acl by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Downloadable Acl",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Downloadable Acl\n  cisco.ise.downloadable_acl_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n  register: result\n\n- name: Get Downloadable Acl by id\n  cisco.ise.downloadable_acl_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.egress_matrix_cell": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Egress Matrix Cell.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "defaultRule": {
          "aliases": [],
          "description": "Allowed values - NONE, - DENY_IP, - PERMIT_IP.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Egress Matrix Cell's description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "destinationSgtId": {
          "aliases": [],
          "description": "Egress Matrix Cell's destinationSgtId.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Egress Matrix Cell's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "matrixCellStatus": {
          "aliases": [],
          "description": "Allowed values - DISABLED, - ENABLED, - MONITOR.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Egress Matrix Cell's name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sgacls": {
          "aliases": [],
          "description": "Egress Matrix Cell's sgacls.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "sourceSgtId": {
          "aliases": [],
          "description": "Egress Matrix Cell's sourceSgtId.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Egress Matrix Cell",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.egress_matrix_cell:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    defaultRule: string\n    description: string\n    destinationSgtId: string\n    id: string\n    matrixCellStatus: string\n    name: string\n    sgacls:\n    - string\n    sourceSgtId: string\n\n- name: Delete by id\n  cisco.ise.egress_matrix_cell:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n- name: Create\n  cisco.ise.egress_matrix_cell:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    defaultRule: string\n    description: string\n    destinationSgtId: string\n    matrixCellStatus: string\n    name: string\n    sgacls:\n    - string\n    sourceSgtId: string\n\n"
  },
  "cisco.ise.egress_matrix_cell_bulk_monitor_status_info": {
    "doc": {
      "description": "Get Egress Matrix Cell Bulk Monitor Status by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "bulkid": {
          "aliases": [],
          "description": "Bulkid path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Egress Matrix Cell Bulk Monitor Status",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get Egress Matrix Cell Bulk Monitor Status by id\n  cisco.ise.egress_matrix_cell_bulk_monitor_status_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    bulkid: string\n  register: result\n\n"
  },
  "cisco.ise.egress_matrix_cell_bulk_request": {
    "doc": {
      "description": "Manage operation update of the resource Egress Matrix Cell Bulk Request.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "operationType": {
          "aliases": [],
          "description": "Egress Matrix Cell Bulk Request's operationType.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "resourceMediaType": {
          "aliases": [],
          "description": "Egress Matrix Cell Bulk Request's resourceMediaType.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Egress Matrix Cell Bulk Request",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update all\n  cisco.ise.egress_matrix_cell_bulk_request:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    operationType: string\n    resourceMediaType: string\n\n"
  },
  "cisco.ise.egress_matrix_cell_clear_all": {
    "doc": {
      "description": "Manage operation update of the resource Egress Matrix Cell Clear All.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Egress Matrix Cell Clear All",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update all\n  cisco.ise.egress_matrix_cell_clear_all:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n\n"
  },
  "cisco.ise.egress_matrix_cell_clone": {
    "doc": {
      "description": "Manage operation update of the resource Egress Matrix Cell Clone.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Egress Matrix Cell Clone",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.egress_matrix_cell_clone:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    dstSgtId: string\n    id: string\n    srcSgtId: string\n\n"
  },
  "cisco.ise.egress_matrix_cell_info": {
    "doc": {
      "description": "Get all Egress Matrix Cell.\nGet Egress Matrix Cell by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter query parameter. <br/> **Simple filtering** should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the \"filterType=or\" query string parameter. Each resource Data model description should specify if an attribute is a filtered field. <br/> Operator | Description <br/> ------------|----------------- <br/> EQ | Equals <br/> NEQ | Not Equals <br/> GT | Greater Than <br/> LT | Less Then <br/> STARTSW | Starts With <br/> NSTARTSW | Not Starts With <br/> ENDSW | Ends With <br/> NENDSW | Not Ends With <br/> CONTAINS | Contains <br/> NCONTAINS | Not Contains <br/>.\n",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "filterType": {
          "aliases": [],
          "description": "FilterType query parameter. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sortasc": {
          "aliases": [],
          "description": "Sortasc query parameter. Sort asc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sortdsc": {
          "aliases": [],
          "description": "Sortdsc query parameter. Sort desc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Egress Matrix Cell",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Egress Matrix Cell\n  cisco.ise.egress_matrix_cell_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n    sortasc: string\n    sortdsc: string\n    filter: []\n    filterType: AND\n  register: result\n\n- name: Get Egress Matrix Cell by id\n  cisco.ise.egress_matrix_cell_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.egress_matrix_cell_set_all_status": {
    "doc": {
      "description": "Manage operation update of the resource Egress Matrix Cell Set All Status.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Egress Matrix Cell Set All Status",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.egress_matrix_cell_set_all_status:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    status: string\n\n"
  },
  "cisco.ise.endpoint": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Endpoint.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "customAttributes": {
          "aliases": [],
          "description": "Endpoint's customAttributes.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "customAttributes": {
              "aliases": [],
              "description": "Key value map.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "description": {
          "aliases": [],
          "description": "Endpoint's description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "groupId": {
          "aliases": [],
          "description": "Endpoint's groupId.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Endpoint's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identityStore": {
          "aliases": [],
          "description": "Endpoint's identityStore.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identityStoreId": {
          "aliases": [],
          "description": "Endpoint's identityStoreId.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "mac": {
          "aliases": [],
          "description": "Endpoint's mac.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mdmAttributes": {
          "aliases": [],
          "description": "Endpoint's mdmAttributes.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "mdmComplianceStatus": {
              "aliases": [],
              "description": "MdmComplianceStatus flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "mdmEncrypted": {
              "aliases": [],
              "description": "MdmEncrypted flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "mdmEnrolled": {
              "aliases": [],
              "description": "MdmEnrolled flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "mdmIMEI": {
              "aliases": [],
              "description": "Endpoint's mdmIMEI.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "mdmJailBroken": {
              "aliases": [],
              "description": "MdmJailBroken flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "mdmManufacturer": {
              "aliases": [],
              "description": "Endpoint's mdmManufacturer.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "mdmModel": {
              "aliases": [],
              "description": "Endpoint's mdmModel.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "mdmOS": {
              "aliases": [],
              "description": "Endpoint's mdmOS.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "mdmPhoneNumber": {
              "aliases": [],
              "description": "Endpoint's mdmPhoneNumber.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "mdmPinlock": {
              "aliases": [],
              "description": "MdmPinlock flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "mdmReachable": {
              "aliases": [],
              "description": "MdmReachable flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "mdmSerial": {
              "aliases": [],
              "description": "Endpoint's mdmSerial.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "mdmServerName": {
              "aliases": [],
              "description": "Endpoint's mdmServerName.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "Endpoint's name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "portalUser": {
          "aliases": [],
          "description": "Endpoint's portalUser.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "profileId": {
          "aliases": [],
          "description": "Endpoint's profileId.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "staticGroupAssignment": {
          "aliases": [],
          "description": "StaticGroupAssignment flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "staticProfileAssignment": {
          "aliases": [],
          "description": "StaticProfileAssignment flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Endpoint",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.endpoint:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    customAttributes:\n      customAttributes: {}\n    description: string\n    groupId: string\n    id: string\n    identityStore: string\n    identityStoreId: string\n    mac: string\n    mdmAttributes:\n      mdmComplianceStatus: true\n      mdmEncrypted: true\n      mdmEnrolled: true\n      mdmIMEI: string\n      mdmJailBroken: true\n      mdmManufacturer: string\n      mdmModel: string\n      mdmOS: string\n      mdmPhoneNumber: string\n      mdmPinlock: true\n      mdmReachable: true\n      mdmSerial: string\n      mdmServerName: string\n    name: string\n    portalUser: string\n    profileId: string\n    staticGroupAssignment: true\n    staticProfileAssignment: true\n\n- name: Delete by id\n  cisco.ise.endpoint:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n- name: Create\n  cisco.ise.endpoint:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    customAttributes:\n      customAttributes: {}\n    description: string\n    groupId: string\n    identityStore: string\n    identityStoreId: string\n    mac: string\n    mdmAttributes:\n      mdmComplianceStatus: true\n      mdmEncrypted: true\n      mdmEnrolled: true\n      mdmIMEI: string\n      mdmJailBroken: true\n      mdmManufacturer: string\n      mdmModel: string\n      mdmOS: string\n      mdmPhoneNumber: string\n      mdmPinlock: true\n      mdmReachable: true\n      mdmSerial: string\n      mdmServerName: string\n    name: string\n    portalUser: string\n    profileId: string\n    staticGroupAssignment: true\n    staticProfileAssignment: true\n\n"
  },
  "cisco.ise.endpoint_bulk_monitor_status_info": {
    "doc": {
      "description": "Get Endpoint Bulk Monitor Status by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "bulkid": {
          "aliases": [],
          "description": "Bulkid path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Endpoint Bulk Monitor Status",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get Endpoint Bulk Monitor Status by id\n  cisco.ise.endpoint_bulk_monitor_status_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    bulkid: string\n  register: result\n\n"
  },
  "cisco.ise.endpoint_bulk_request": {
    "doc": {
      "description": "Manage operation update of the resource Endpoint Bulk Request.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "operationType": {
          "aliases": [],
          "description": "Endpoint Bulk Request's operationType.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "resourceMediaType": {
          "aliases": [],
          "description": "Endpoint Bulk Request's resourceMediaType.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Endpoint Bulk Request",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update all\n  cisco.ise.endpoint_bulk_request:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    operationType: string\n    resourceMediaType: string\n\n"
  },
  "cisco.ise.endpoint_certificate": {
    "doc": {
      "description": "Manage operation update of the resource Endpoint Certificate.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "certTemplateName": {
          "aliases": [],
          "description": "Name of an Internal CA template.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "certificateRequest": {
          "aliases": [],
          "description": "Key value map. Must have CN and SAN entries.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "cn": {
              "aliases": [],
              "description": "Matches the requester's User Name, unless the Requester is an ERS Admin. ERS Admins are allowed to create requests for any CN.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "san": {
              "aliases": [],
              "description": "Valid MAC Address, delimited by '-'.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "dirPath": {
          "aliases": [],
          "description": "Directory absolute path. Defaults to the current working directory.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "format": {
          "aliases": [],
          "description": "Allowed values - PKCS12, - PKCS12_CHAIN, - PKCS8, - PKCS8_CHAIN.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Protects the private key. Must have more than 8 characters, less than 15 characters, at least one upper case letter, at least one lower case letter, at least one digit, and can only contain A-Za-z0-9_#.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "saveFile": {
          "aliases": [],
          "description": "Enable or disable automatic file creation of raw response.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Endpoint Certificate",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.endpoint_certificate:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    certTemplateName: string\n    certificateRequest:\n      cn: string\n      san: string\n    dirPath: /tmp/downloads/\n    format: string\n    password: string\n    saveFile: true\n\n"
  },
  "cisco.ise.endpoint_deregister": {
    "doc": {
      "description": "Manage operation update of the resource Endpoint Deregister.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Endpoint Deregister",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update all\n  cisco.ise.endpoint_deregister:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n\n"
  },
  "cisco.ise.endpoint_get_rejected_endpoints_info": {
    "doc": {
      "description": "Get all Endpoint Get Rejected Endpoints.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Endpoint Get Rejected Endpoints",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Endpoint Get Rejected Endpoints\n  cisco.ise.endpoint_get_rejected_endpoints_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.endpoint_group": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Endpoint Group.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "description": {
          "aliases": [],
          "description": "Endpoint Group's description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Endpoint Group's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Endpoint Group's name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "systemDefined": {
          "aliases": [],
          "description": "SystemDefined flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Endpoint Group",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.endpoint_group:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    description: string\n    id: string\n    name: string\n    systemDefined: true\n\n- name: Delete by id\n  cisco.ise.endpoint_group:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n- name: Create\n  cisco.ise.endpoint_group:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    description: string\n    name: string\n    systemDefined: true\n\n"
  },
  "cisco.ise.endpoint_group_info": {
    "doc": {
      "description": "Get all Endpoint Group.\nGet Endpoint Group by id.\nGet Endpoint Group by name.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter query parameter. <br/> **Simple filtering** should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the \"filterType=or\" query string parameter. Each resource Data model description should specify if an attribute is a filtered field. <br/> Operator | Description <br/> ------------|----------------- <br/> EQ | Equals <br/> NEQ | Not Equals <br/> GT | Greater Than <br/> LT | Less Then <br/> STARTSW | Starts With <br/> NSTARTSW | Not Starts With <br/> ENDSW | Ends With <br/> NENDSW | Not Ends With <br/> CONTAINS | Contains <br/> NCONTAINS | Not Contains <br/>.\n",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "filterType": {
          "aliases": [],
          "description": "FilterType query parameter. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sortasc": {
          "aliases": [],
          "description": "Sortasc query parameter. Sort asc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sortdsc": {
          "aliases": [],
          "description": "Sortdsc query parameter. Sort desc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Endpoint Group",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Endpoint Group\n  cisco.ise.endpoint_group_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n    sortasc: string\n    sortdsc: string\n    filter: []\n    filterType: AND\n  register: result\n\n- name: Get Endpoint Group by id\n  cisco.ise.endpoint_group_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n- name: Get Endpoint Group by name\n  cisco.ise.endpoint_group_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    name: string\n  register: result\n\n"
  },
  "cisco.ise.endpoint_info": {
    "doc": {
      "description": "Get all Endpoint.\nGet Endpoint by id.\nGet Endpoint by name.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter query parameter. <br/> **Simple filtering** should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the \"filterType=or\" query string parameter. Each resource Data model description should specify if an attribute is a filtered field. <br/> Operator | Description <br/> ------------|----------------- <br/> EQ | Equals <br/> NEQ | Not Equals <br/> GT | Greater Than <br/> LT | Less Then <br/> STARTSW | Starts With <br/> NSTARTSW | Not Starts With <br/> ENDSW | Ends With <br/> NENDSW | Not Ends With <br/> CONTAINS | Contains <br/> NCONTAINS | Not Contains <br/>.\n",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "filterType": {
          "aliases": [],
          "description": "FilterType query parameter. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sortasc": {
          "aliases": [],
          "description": "Sortasc query parameter. Sort asc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sortdsc": {
          "aliases": [],
          "description": "Sortdsc query parameter. Sort desc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Endpoint",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Endpoint\n  cisco.ise.endpoint_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n    sortasc: string\n    sortdsc: string\n    filter: []\n    filterType: AND\n  register: result\n\n- name: Get Endpoint by id\n  cisco.ise.endpoint_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n- name: Get Endpoint by name\n  cisco.ise.endpoint_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    name: string\n  register: result\n\n"
  },
  "cisco.ise.endpoint_register": {
    "doc": {
      "description": "Manage operation update of the resource Endpoint Register.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "customAttributes": {
          "aliases": [],
          "description": "Endpoint Register's customAttributes.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "customAttributes": {
              "aliases": [],
              "description": "Key value map.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "description": {
          "aliases": [],
          "description": "Endpoint Register's description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "groupId": {
          "aliases": [],
          "description": "Endpoint Register's groupId.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Endpoint Register's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identityStore": {
          "aliases": [],
          "description": "Endpoint Register's identityStore.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identityStoreId": {
          "aliases": [],
          "description": "Endpoint Register's identityStoreId.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "mac": {
          "aliases": [],
          "description": "Endpoint Register's mac.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mdmAttributes": {
          "aliases": [],
          "description": "Endpoint Register's mdmAttributes.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "mdmComplianceStatus": {
              "aliases": [],
              "description": "MdmComplianceStatus flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "mdmEncrypted": {
              "aliases": [],
              "description": "MdmEncrypted flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "mdmEnrolled": {
              "aliases": [],
              "description": "MdmEnrolled flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "mdmIMEI": {
              "aliases": [],
              "description": "Endpoint Register's mdmIMEI.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "mdmJailBroken": {
              "aliases": [],
              "description": "MdmJailBroken flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "mdmManufacturer": {
              "aliases": [],
              "description": "Endpoint Register's mdmManufacturer.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "mdmModel": {
              "aliases": [],
              "description": "Endpoint Register's mdmModel.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "mdmOS": {
              "aliases": [],
              "description": "Endpoint Register's mdmOS.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "mdmPhoneNumber": {
              "aliases": [],
              "description": "Endpoint Register's mdmPhoneNumber.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "mdmPinlock": {
              "aliases": [],
              "description": "MdmPinlock flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "mdmReachable": {
              "aliases": [],
              "description": "MdmReachable flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "mdmSerial": {
              "aliases": [],
              "description": "Endpoint Register's mdmSerial.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "mdmServerName": {
              "aliases": [],
              "description": "Endpoint Register's mdmServerName.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "Endpoint Register's name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "portalUser": {
          "aliases": [],
          "description": "Endpoint Register's portalUser.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "profileId": {
          "aliases": [],
          "description": "Endpoint Register's profileId.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "staticGroupAssignment": {
          "aliases": [],
          "description": "StaticGroupAssignment flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "staticProfileAssignment": {
          "aliases": [],
          "description": "StaticProfileAssignment flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Endpoint Register",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update all\n  cisco.ise.endpoint_register:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    customAttributes:\n      customAttributes: {}\n    description: string\n    groupId: string\n    id: string\n    identityStore: string\n    identityStoreId: string\n    mac: string\n    mdmAttributes:\n      mdmComplianceStatus: true\n      mdmEncrypted: true\n      mdmEnrolled: true\n      mdmIMEI: string\n      mdmJailBroken: true\n      mdmManufacturer: string\n      mdmModel: string\n      mdmOS: string\n      mdmPhoneNumber: string\n      mdmPinlock: true\n      mdmReachable: true\n      mdmSerial: string\n      mdmServerName: string\n    name: string\n    portalUser: string\n    profileId: string\n    staticGroupAssignment: true\n    staticProfileAssignment: true\n\n"
  },
  "cisco.ise.endpoint_release_rejected_endpoint": {
    "doc": {
      "description": "Manage operation update of the resource Endpoint Release Rejected Endpoint.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Endpoint Release Rejected Endpoint",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update all\n  cisco.ise.endpoint_release_rejected_endpoint:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n\n"
  },
  "cisco.ise.external_radius_server": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource External Radius Server.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "accountingPort": {
          "aliases": [],
          "description": "Valid Range 1 to 65535.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "authenticationPort": {
          "aliases": [],
          "description": "Valid Range 1 to 65535.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "authenticatorKey": {
          "aliases": [],
          "description": "The authenticatorKey is required only if enableKeyWrap is true, otherwise it must be ignored or empty. The maximum length is 20 ASCII characters or 40 HEXADECIMAL characters (depend on selection in field 'keyInputFormat').",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "External Radius Server's description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "enableKeyWrap": {
          "aliases": [],
          "description": "KeyWrap may only be enabled if it is supported on the device. When running in FIPS mode this option should be enabled for such devices.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "encryptionKey": {
          "aliases": [],
          "description": "The encryptionKey is required only if enableKeyWrap is true, otherwise it must be ignored or empty. The maximum length is 16 ASCII characters or 32 HEXADECIMAL characters (depend on selection in field 'keyInputFormat').",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostIP": {
          "aliases": [],
          "description": "The IP of the host - must be a valid IPV4 address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "External Radius Server's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "keyInputFormat": {
          "aliases": [],
          "description": "Specifies the format of the input for fields 'encryptionKey' and 'authenticatorKey'. Allowed Values - ASCII - HEXADECIMAL.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Resource Name. Allowed charactera are alphanumeric and _ (underscore).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxyTimeout": {
          "aliases": [],
          "description": "Valid Range 1 to 600.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "retries": {
          "aliases": [],
          "description": "Valid Range 1 to 9.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sharedSecret": {
          "aliases": [],
          "description": "Shared secret maximum length is 128 characters.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Valid Range 1 to 120.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for External Radius Server",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.external_radius_server:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    accountingPort: 0\n    authenticationPort: 0\n    authenticatorKey: string\n    description: string\n    enableKeyWrap: true\n    encryptionKey: string\n    hostIP: string\n    id: string\n    keyInputFormat: string\n    name: string\n    proxyTimeout: 0\n    retries: 0\n    sharedSecret: string\n    timeout: 0\n\n- name: Delete by id\n  cisco.ise.external_radius_server:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n- name: Create\n  cisco.ise.external_radius_server:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    accountingPort: 0\n    authenticationPort: 0\n    authenticatorKey: string\n    description: string\n    enableKeyWrap: true\n    encryptionKey: string\n    hostIP: string\n    keyInputFormat: string\n    name: string\n    proxyTimeout: 0\n    retries: 0\n    sharedSecret: string\n    timeout: 0\n\n"
  },
  "cisco.ise.external_radius_server_info": {
    "doc": {
      "description": "Get all External Radius Server.\nGet External Radius Server by id.\nGet External Radius Server by name.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for External Radius Server",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all External Radius Server\n  cisco.ise.external_radius_server_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n  register: result\n\n- name: Get External Radius Server by id\n  cisco.ise.external_radius_server_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n- name: Get External Radius Server by name\n  cisco.ise.external_radius_server_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    name: string\n  register: result\n\n"
  },
  "cisco.ise.filter_policy": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Filter Policy.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "domains": {
          "aliases": [],
          "description": "List of SXP Domains, separated with comma.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "sgt": {
          "aliases": [],
          "description": "SGT name or ID. At least one of subnet or sgt or vn should be defined.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "subnet": {
          "aliases": [],
          "description": "Subnet for filter policy (hostname is not supported). At least one of subnet or sgt or vn should be defined.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vn": {
          "aliases": [],
          "description": "Virtual Network. At least one of subnet or sgt or vn should be defined.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Filter Policy",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.filter_policy:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    domains: string\n    id: string\n    sgt: string\n    subnet: string\n    vn: string\n\n- name: Delete by id\n  cisco.ise.filter_policy:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n- name: Create\n  cisco.ise.filter_policy:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    domains: string\n    sgt: string\n    subnet: string\n    vn: string\n\n"
  },
  "cisco.ise.filter_policy_info": {
    "doc": {
      "description": "Get all Filter Policy.\nGet Filter Policy by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Filter Policy",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Filter Policy\n  cisco.ise.filter_policy_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n  register: result\n\n- name: Get Filter Policy by id\n  cisco.ise.filter_policy_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.guest_location_info": {
    "doc": {
      "description": "Get all Guest Location.\nGet Guest Location by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter query parameter. <br/> **Simple filtering** should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the \"filterType=or\" query string parameter. Each resource Data model description should specify if an attribute is a filtered field. <br/> Operator | Description <br/> ------------|----------------- <br/> EQ | Equals <br/> NEQ | Not Equals <br/> GT | Greater Than <br/> LT | Less Then <br/> STARTSW | Starts With <br/> NSTARTSW | Not Starts With <br/> ENDSW | Ends With <br/> NENDSW | Not Ends With <br/> CONTAINS | Contains <br/> NCONTAINS | Not Contains <br/>.\n",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "filterType": {
          "aliases": [],
          "description": "FilterType query parameter. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sortasc": {
          "aliases": [],
          "description": "Sortasc query parameter. Sort asc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sortdsc": {
          "aliases": [],
          "description": "Sortdsc query parameter. Sort desc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Guest Location",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Guest Location\n  cisco.ise.guest_location_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n    sortasc: string\n    sortdsc: string\n    filter: []\n    filterType: AND\n  register: result\n\n- name: Get Guest Location by id\n  cisco.ise.guest_location_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.guest_smtp_notification_settings": {
    "doc": {
      "description": "Manage operations create and update of the resource Guest Smtp Notification Settings.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "connectionTimeout": {
          "aliases": [],
          "description": "Interval in seconds for all the SMTP client connections.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "defaultFromAddress": {
          "aliases": [],
          "description": "The default from email address to be used to send emails from.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Guest Smtp Notification Settings's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "notificationEnabled": {
          "aliases": [],
          "description": "Indicates if the email notification service is to be enabled.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of Secure SMTP server.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "smtpPort": {
          "aliases": [],
          "description": "Port at which SMTP Secure Server is listening.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "smtpServer": {
          "aliases": [],
          "description": "The SMTP server ip address or fqdn such as outbound.mycompany.com.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "useDefaultFromAddress": {
          "aliases": [],
          "description": "If the default from address should be used rather than using a sponsor user email address.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "usePasswordAuthentication": {
          "aliases": [],
          "description": "If configured to true, SMTP server authentication will happen using username/password.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "useTLSorSSLEncryption": {
          "aliases": [],
          "description": "If configured to true, SMTP server authentication will happen using TLS/SSL.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "userName": {
          "aliases": [],
          "description": "Username of Secure SMTP server.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Guest Smtp Notification Settings",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.guest_smtp_notification_settings:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    connectionTimeout: string\n    defaultFromAddress: string\n    id: string\n    notificationEnabled: true\n    password: string\n    smtpPort: string\n    smtpServer: string\n    useDefaultFromAddress: true\n    usePasswordAuthentication: true\n    useTLSorSSLEncryption: true\n    userName: string\n\n- name: Create\n  cisco.ise.guest_smtp_notification_settings:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    connectionTimeout: string\n    defaultFromAddress: string\n    notificationEnabled: true\n    password: string\n    smtpPort: string\n    smtpServer: string\n    useDefaultFromAddress: true\n    usePasswordAuthentication: true\n    useTLSorSSLEncryption: true\n    userName: string\n\n"
  },
  "cisco.ise.guest_smtp_notification_settings_info": {
    "doc": {
      "description": "Get all Guest Smtp Notification Settings.\nGet Guest Smtp Notification Settings by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter query parameter. <br/> **Simple filtering** should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the \"filterType=or\" query string parameter. Each resource Data model description should specify if an attribute is a filtered field. <br/> Operator | Description <br/> ------------|----------------- <br/> EQ | Equals <br/> NEQ | Not Equals <br/> GT | Greater Than <br/> LT | Less Then <br/> STARTSW | Starts With <br/> NSTARTSW | Not Starts With <br/> ENDSW | Ends With <br/> NENDSW | Not Ends With <br/> CONTAINS | Contains <br/> NCONTAINS | Not Contains <br/>.\n",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "filterType": {
          "aliases": [],
          "description": "FilterType query parameter. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sortasc": {
          "aliases": [],
          "description": "Sortasc query parameter. Sort asc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sortdsc": {
          "aliases": [],
          "description": "Sortdsc query parameter. Sort desc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Guest Smtp Notification Settings",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Guest Smtp Notification Settings\n  cisco.ise.guest_smtp_notification_settings_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n    sortasc: string\n    sortdsc: string\n    filter: []\n    filterType: AND\n  register: result\n\n- name: Get Guest Smtp Notification Settings by id\n  cisco.ise.guest_smtp_notification_settings_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.guest_ssid": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Guest Ssid.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "id": {
          "aliases": [],
          "description": "Guest Ssid's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Resource Name. Name may contain alphanumeric or any of the following characters _.-.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Guest Ssid",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.guest_ssid:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    id: string\n    name: string\n\n- name: Delete by id\n  cisco.ise.guest_ssid:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n- name: Create\n  cisco.ise.guest_ssid:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    name: string\n\n"
  },
  "cisco.ise.guest_ssid_info": {
    "doc": {
      "description": "Get all Guest Ssid.\nGet Guest Ssid by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter query parameter. <br/> **Simple filtering** should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the \"filterType=or\" query string parameter. Each resource Data model description should specify if an attribute is a filtered field. <br/> Operator | Description <br/> ------------|----------------- <br/> EQ | Equals <br/> NEQ | Not Equals <br/> GT | Greater Than <br/> LT | Less Then <br/> STARTSW | Starts With <br/> NSTARTSW | Not Starts With <br/> ENDSW | Ends With <br/> NENDSW | Not Ends With <br/> CONTAINS | Contains <br/> NCONTAINS | Not Contains <br/>.\n",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "filterType": {
          "aliases": [],
          "description": "FilterType query parameter. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sortasc": {
          "aliases": [],
          "description": "Sortasc query parameter. Sort asc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sortdsc": {
          "aliases": [],
          "description": "Sortdsc query parameter. Sort desc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Guest Ssid",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Guest Ssid\n  cisco.ise.guest_ssid_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n    sortasc: string\n    sortdsc: string\n    filter: []\n    filterType: AND\n  register: result\n\n- name: Get Guest Ssid by id\n  cisco.ise.guest_ssid_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.guest_type": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Guest Type.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "accessTime": {
          "aliases": [],
          "description": "Guest Type's accessTime.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "allowAccessOnSpecificDaysTimes": {
              "aliases": [],
              "description": "AllowAccessOnSpecificDaysTimes flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "dayTimeLimits": {
              "aliases": [],
              "description": "List of Time Ranges for account access.",
              "type": "list",
              "required": false,
              "suboptions": {
                "days": {
                  "aliases": [],
                  "description": "List of Days Values should be one of Week day. Allowed values are - Sunday, - Monday, - Tuesday, - Wednesday, - Thursday, - Friday, - Saturday.",
                  "type": "list",
                  "required": false,
                  "elements": "str",
                  "suboptions": {}
                },
                "endTime": {
                  "aliases": [],
                  "description": "End time in HH mm format.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "startTime": {
                  "aliases": [],
                  "description": "Start time in HH mm format.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "defaultDuration": {
              "aliases": [],
              "description": "Guest Type's defaultDuration.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "durationTimeUnit": {
              "aliases": [],
              "description": "Allowed values are - DAYS, - HOURS, - MINUTES.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "fromFirstLogin": {
              "aliases": [],
              "description": "When Account Duration starts from first login or specified date.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "maxAccountDuration": {
              "aliases": [],
              "description": "Maximum value of Account Duration.",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "description": {
          "aliases": [],
          "description": "Guest Type's description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "expirationNotification": {
          "aliases": [],
          "description": "Expiration Notification Settings.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "advanceNotificationDuration": {
              "aliases": [],
              "description": "Send Account Expiration Notification Duration before ( Days, Hours, Minutes ).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "advanceNotificationUnits": {
              "aliases": [],
              "description": "Allowed values are - DAYS, - HOURS, - MINUTES.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "emailText": {
              "aliases": [],
              "description": "Guest Type's emailText.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "enableNotification": {
              "aliases": [],
              "description": "Enable Notification settings.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "sendEmailNotification": {
              "aliases": [],
              "description": "Enable Email Notification.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "sendSmsNotification": {
              "aliases": [],
              "description": "Maximum devices guests can register.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "smsText": {
              "aliases": [],
              "description": "Guest Type's smsText.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "id": {
          "aliases": [],
          "description": "Guest Type's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "isDefaultType": {
          "aliases": [],
          "description": "IsDefaultType flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "loginOptions": {
          "aliases": [],
          "description": "Guest Type's loginOptions.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "allowGuestPortalBypass": {
              "aliases": [],
              "description": "AllowGuestPortalBypass flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "failureAction": {
              "aliases": [],
              "description": "When Guest Exceeds limit this action will be invoked. Allowed values are - Disconnect_Oldest_Connection, - Disconnect_Newest_Connection.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "identityGroupId": {
              "aliases": [],
              "description": "Guest Type's identityGroupId.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "limitSimultaneousLogins": {
              "aliases": [],
              "description": "Enable Simultaneous Logins.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "maxRegisteredDevices": {
              "aliases": [],
              "description": "Maximum devices guests can register.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "maxSimultaneousLogins": {
              "aliases": [],
              "description": "Number of Simultaneous Logins.",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "Guest Type's name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sponsorGroups": {
          "aliases": [],
          "description": "Guest Type's sponsorGroups.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Guest Type",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.guest_type:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    accessTime:\n      allowAccessOnSpecificDaysTimes: true\n      dayTimeLimits:\n      - days:\n        - string\n        endTime: string\n        startTime: string\n      defaultDuration: 0\n      durationTimeUnit: string\n      fromFirstLogin: true\n      maxAccountDuration: 0\n    description: string\n    expirationNotification:\n      advanceNotificationDuration: 0\n      advanceNotificationUnits: string\n      emailText: string\n      enableNotification: true\n      sendEmailNotification: true\n      sendSmsNotification: true\n      smsText: string\n    id: string\n    isDefaultType: true\n    loginOptions:\n      allowGuestPortalBypass: true\n      failureAction: string\n      identityGroupId: string\n      limitSimultaneousLogins: true\n      maxRegisteredDevices: 0\n      maxSimultaneousLogins: 0\n    name: string\n    sponsorGroups:\n    - string\n\n- name: Delete by id\n  cisco.ise.guest_type:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n- name: Create\n  cisco.ise.guest_type:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    accessTime:\n      allowAccessOnSpecificDaysTimes: true\n      dayTimeLimits:\n      - days:\n        - string\n        endTime: string\n        startTime: string\n      defaultDuration: 0\n      durationTimeUnit: string\n      fromFirstLogin: true\n      maxAccountDuration: 0\n    description: string\n    expirationNotification:\n      advanceNotificationDuration: 0\n      advanceNotificationUnits: string\n      emailText: string\n      enableNotification: true\n      sendEmailNotification: true\n      sendSmsNotification: true\n      smsText: string\n    isDefaultType: true\n    loginOptions:\n      allowGuestPortalBypass: true\n      failureAction: string\n      identityGroupId: string\n      limitSimultaneousLogins: true\n      maxRegisteredDevices: 0\n      maxSimultaneousLogins: 0\n    name: string\n    sponsorGroups:\n    - string\n\n"
  },
  "cisco.ise.guest_type_email": {
    "doc": {
      "description": "Manage operation update of the resource Guest Type Email.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "additionalData": {
          "aliases": [],
          "description": "Guest Type Email's additionalData.",
          "type": "list",
          "required": false,
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "Guest Type Email's name.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "value": {
              "aliases": [],
              "description": "Guest Type Email's value.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Guest Type Email",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.guest_type_email:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    additionalData:\n    - name: emailAddress\n      value: emailAddress\n    id: string\n\n"
  },
  "cisco.ise.guest_type_info": {
    "doc": {
      "description": "Get all Guest Type.\nGet Guest Type by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter query parameter. <br/> **Simple filtering** should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the \"filterType=or\" query string parameter. Each resource Data model description should specify if an attribute is a filtered field. <br/> Operator | Description <br/> ------------|----------------- <br/> EQ | Equals <br/> NEQ | Not Equals <br/> GT | Greater Than <br/> LT | Less Then <br/> STARTSW | Starts With <br/> NSTARTSW | Not Starts With <br/> ENDSW | Ends With <br/> NENDSW | Not Ends With <br/> CONTAINS | Contains <br/> NCONTAINS | Not Contains <br/>.\n",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "filterType": {
          "aliases": [],
          "description": "FilterType query parameter. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sortasc": {
          "aliases": [],
          "description": "Sortasc query parameter. Sort asc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sortdsc": {
          "aliases": [],
          "description": "Sortdsc query parameter. Sort desc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Guest Type",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Guest Type\n  cisco.ise.guest_type_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n    sortasc: string\n    sortdsc: string\n    filter: []\n    filterType: AND\n  register: result\n\n- name: Get Guest Type by id\n  cisco.ise.guest_type_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.guest_type_sms": {
    "doc": {
      "description": "Manage operation update of the resource Guest Type Sms.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "additionalData": {
          "aliases": [],
          "description": "Guest Type Sms's additionalData.",
          "type": "list",
          "required": false,
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "Guest Type Sms's name.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "value": {
              "aliases": [],
              "description": "Guest Type Sms's value.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Guest Type Sms",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.guest_type_sms:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    additionalData:\n    - name: phoneNumber\n      value: phoneNumber\n    - name: serviceProvider\n      value: serviceProvider\n    id: string\n\n"
  },
  "cisco.ise.guest_user": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Guest User.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "customFields": {
          "aliases": [],
          "description": "Key value map.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Guest User's description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "guestAccessInfo": {
          "aliases": [],
          "description": "Guest User's guestAccessInfo.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "fromDate": {
              "aliases": [],
              "description": "Guest User's fromDate.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "groupTag": {
              "aliases": [],
              "description": "Guest User's groupTag.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "location": {
              "aliases": [],
              "description": "Guest User's location.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "ssid": {
              "aliases": [],
              "description": "Guest User's ssid.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "toDate": {
              "aliases": [],
              "description": "Guest User's toDate.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validDays": {
              "aliases": [],
              "description": "Guest User's validDays.",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "guestInfo": {
          "aliases": [],
          "description": "Guest User's guestInfo.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "company": {
              "aliases": [],
              "description": "Guest User's company.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "creationTime": {
              "aliases": [],
              "description": "Guest User's creationTime.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "emailAddress": {
              "aliases": [],
              "description": "Guest User's emailAddress.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "enabled": {
              "aliases": [],
              "description": "This field is only for Get operation not applicable for Create, Update operations.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "firstName": {
              "aliases": [],
              "description": "Guest User's firstName.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "lastName": {
              "aliases": [],
              "description": "Guest User's lastName.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "notificationLanguage": {
              "aliases": [],
              "description": "Guest User's notificationLanguage.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Guest User's password.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "phoneNumber": {
              "aliases": [],
              "description": "Phone number should be E.164 format.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "smsServiceProvider": {
              "aliases": [],
              "description": "Guest User's smsServiceProvider.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "userName": {
              "aliases": [],
              "description": "If account needs be created with mobile number, please provide mobile number here.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "guestType": {
          "aliases": [],
          "description": "Guest User's guestType.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Guest User's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Guest User's name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "portalId": {
          "aliases": [],
          "description": "Guest User's portalId.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "reasonForVisit": {
          "aliases": [],
          "description": "Guest User's reasonForVisit.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sponsorUserId": {
          "aliases": [],
          "description": "Guest User's sponsorUserId.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sponsorUserName": {
          "aliases": [],
          "description": "Guest User's sponsorUserName.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "status": {
          "aliases": [],
          "description": "Guest User's status.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "statusReason": {
          "aliases": [],
          "description": "Guest User's statusReason.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Guest User",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by name\n  cisco.ise.guest_user:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    customFields: {}\n    description: string\n    guestAccessInfo:\n      fromDate: string\n      groupTag: string\n      location: string\n      ssid: string\n      toDate: string\n      validDays: 0\n    guestInfo:\n      company: string\n      creationTime: string\n      emailAddress: string\n      enabled: true\n      firstName: string\n      lastName: string\n      notificationLanguage: string\n      password: string\n      phoneNumber: string\n      smsServiceProvider: string\n      userName: string\n    guestType: string\n    id: string\n    name: string\n    portalId: string\n    reasonForVisit: string\n    sponsorUserId: string\n    sponsorUserName: string\n    status: string\n    statusReason: string\n\n- name: Delete by name\n  cisco.ise.guest_user:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    name: string\n\n- name: Update by id\n  cisco.ise.guest_user:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    customFields: {}\n    description: string\n    guestAccessInfo:\n      fromDate: string\n      groupTag: string\n      location: string\n      ssid: string\n      toDate: string\n      validDays: 0\n    guestInfo:\n      company: string\n      creationTime: string\n      emailAddress: string\n      enabled: true\n      firstName: string\n      lastName: string\n      notificationLanguage: string\n      password: string\n      phoneNumber: string\n      smsServiceProvider: string\n      userName: string\n    guestType: string\n    id: string\n    name: string\n    portalId: string\n    reasonForVisit: string\n    sponsorUserId: string\n    sponsorUserName: string\n    status: string\n    statusReason: string\n\n- name: Delete by id\n  cisco.ise.guest_user:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n- name: Create\n  cisco.ise.guest_user:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    customFields: {}\n    description: string\n    guestAccessInfo:\n      fromDate: string\n      groupTag: string\n      location: string\n      ssid: string\n      toDate: string\n      validDays: 0\n    guestInfo:\n      company: string\n      creationTime: string\n      emailAddress: string\n      enabled: true\n      firstName: string\n      lastName: string\n      notificationLanguage: string\n      password: string\n      phoneNumber: string\n      smsServiceProvider: string\n      userName: string\n    guestType: string\n    name: string\n    portalId: string\n    reasonForVisit: string\n    sponsorUserId: string\n    sponsorUserName: string\n    status: string\n    statusReason: string\n\n"
  },
  "cisco.ise.guest_user_approve": {
    "doc": {
      "description": "Manage operation update of the resource Guest User Approve.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Guest User Approve",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.guest_user_approve:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n\n"
  },
  "cisco.ise.guest_user_bulk_monitor_status_info": {
    "doc": {
      "description": "Get Guest User Bulk Monitor Status by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "bulkid": {
          "aliases": [],
          "description": "Bulkid path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Guest User Bulk Monitor Status",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get Guest User Bulk Monitor Status by id\n  cisco.ise.guest_user_bulk_monitor_status_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    bulkid: string\n  register: result\n\n"
  },
  "cisco.ise.guest_user_bulk_request": {
    "doc": {
      "description": "Manage operation update of the resource Guest User Bulk Request.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "operationType": {
          "aliases": [],
          "description": "Guest User Bulk Request's operationType.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "resourceMediaType": {
          "aliases": [],
          "description": "Guest User Bulk Request's resourceMediaType.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Guest User Bulk Request",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update all\n  cisco.ise.guest_user_bulk_request:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    operationType: string\n    resourceMediaType: string\n\n"
  },
  "cisco.ise.guest_user_change_sponsor_password": {
    "doc": {
      "description": "Manage operation update of the resource Guest User Change Sponsor Password.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "additionalData": {
          "aliases": [],
          "description": "Guest User Change Sponsor Password's additionalData.",
          "type": "list",
          "required": false,
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "Guest User Change Sponsor Password's name.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "value": {
              "aliases": [],
              "description": "Guest User Change Sponsor Password's value.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Guest User Change Sponsor Password",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.guest_user_change_sponsor_password:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    additionalData:\n    - name: currentPassword\n      value: password\n    - name: newPassword\n      value: password\n    portalId: string\n\n"
  },
  "cisco.ise.guest_user_deny": {
    "doc": {
      "description": "Manage operation update of the resource Guest User Deny.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Guest User Deny",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.guest_user_deny:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n\n"
  },
  "cisco.ise.guest_user_email": {
    "doc": {
      "description": "Manage operation update of the resource Guest User Email.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "additionalData": {
          "aliases": [],
          "description": "Guest User Email's additionalData.",
          "type": "list",
          "required": false,
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "Guest User Email's name.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "value": {
              "aliases": [],
              "description": "Guest User Email's value.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Guest User Email",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.guest_user_email:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    additionalData:\n    - name: senderEmail\n      value: senderEmail\n    id: string\n    portalId: string\n\n"
  },
  "cisco.ise.guest_user_info": {
    "doc": {
      "description": "Get all Guest User.\nGet Guest User by id.\nGet Guest User by name.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter query parameter. <br/> **Simple filtering** should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the \"filterType=or\" query string parameter. Each resource Data model description should specify if an attribute is a filtered field. <br/> Operator | Description <br/> ------------|----------------- <br/> EQ | Equals <br/> NEQ | Not Equals <br/> GT | Greater Than <br/> LT | Less Then <br/> STARTSW | Starts With <br/> NSTARTSW | Not Starts With <br/> ENDSW | Ends With <br/> NENDSW | Not Ends With <br/> CONTAINS | Contains <br/> NCONTAINS | Not Contains <br/>.\n",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "filterType": {
          "aliases": [],
          "description": "FilterType query parameter. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sortasc": {
          "aliases": [],
          "description": "Sortasc query parameter. Sort asc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sortdsc": {
          "aliases": [],
          "description": "Sortdsc query parameter. Sort desc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Guest User",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Guest User\n  cisco.ise.guest_user_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n    sortasc: string\n    sortdsc: string\n    filter: []\n    filterType: AND\n  register: result\n\n- name: Get Guest User by id\n  cisco.ise.guest_user_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n- name: Get Guest User by name\n  cisco.ise.guest_user_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    name: string\n  register: result\n\n"
  },
  "cisco.ise.guest_user_reinstate": {
    "doc": {
      "description": "Manage operation update of the resource Guest User Reinstate.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Guest User Reinstate",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by name\n  cisco.ise.guest_user_reinstate:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    name: string\n\n- name: Update by id\n  cisco.ise.guest_user_reinstate:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n\n"
  },
  "cisco.ise.guest_user_reset_password": {
    "doc": {
      "description": "Manage operation update of the resource Guest User Reset Password.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Guest User Reset Password",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.guest_user_reset_password:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n\n"
  },
  "cisco.ise.guest_user_sms": {
    "doc": {
      "description": "Manage operation update of the resource Guest User Sms.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Guest User Sms",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.guest_user_sms:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n    portalId: string\n\n"
  },
  "cisco.ise.guest_user_suspend": {
    "doc": {
      "description": "Manage operation update of the resource Guest User Suspend.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "additionalData": {
          "aliases": [],
          "description": "Guest User Suspend's additionalData.",
          "type": "list",
          "required": false,
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "Guest User Suspend's name.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "value": {
              "aliases": [],
              "description": "Guest User Suspend's value.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Guest User Suspend",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by name\n  cisco.ise.guest_user_suspend:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    name: string\n\n- name: Update by id\n  cisco.ise.guest_user_suspend:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    additionalData:\n    - name: reason\n      value: reason\n    id: string\n\n"
  },
  "cisco.ise.hotspot_portal": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Hotspot Portal.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "customizations": {
          "aliases": [],
          "description": "Defines all of the Portal Customizations available.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "globalCustomizations": {
              "aliases": [],
              "description": "Hotspot Portal's globalCustomizations.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "backgroundImage": {
                  "aliases": [],
                  "description": "Hotspot Portal's backgroundImage.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "data": {
                      "aliases": [],
                      "description": "Represented as base 64 encoded string of the image byte array.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "bannerImage": {
                  "aliases": [],
                  "description": "Hotspot Portal's bannerImage.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "data": {
                      "aliases": [],
                      "description": "Represented as base 64 encoded string of the image byte array.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "bannerTitle": {
                  "aliases": [],
                  "description": "Hotspot Portal's bannerTitle.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "contactText": {
                  "aliases": [],
                  "description": "Hotspot Portal's contactText.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "desktopLogoImage": {
                  "aliases": [],
                  "description": "Hotspot Portal's desktopLogoImage.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "data": {
                      "aliases": [],
                      "description": "Represented as base 64 encoded string of the image byte array.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "footerElement": {
                  "aliases": [],
                  "description": "Hotspot Portal's footerElement.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "mobileLogoImage": {
                  "aliases": [],
                  "description": "Hotspot Portal's mobileLogoImage.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "data": {
                      "aliases": [],
                      "description": "Represented as base 64 encoded string of the image byte array.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                }
              }
            },
            "language": {
              "aliases": [],
              "description": "This property is supported only for Read operation and it allows to show the customizations in English. Other languages are not supported.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "viewLanguage": {
                  "aliases": [],
                  "description": "Hotspot Portal's viewLanguage.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "pageCustomizations": {
              "aliases": [],
              "description": "Hotspot Portal's pageCustomizations.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "data": {
                  "aliases": [],
                  "description": "Hotspot Portal's data.",
                  "type": "list",
                  "required": false,
                  "suboptions": {
                    "key": {
                      "aliases": [],
                      "description": "Hotspot Portal's key.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "value": {
                      "aliases": [],
                      "description": "Hotspot Portal's value.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                }
              }
            },
            "portalTheme": {
              "aliases": [],
              "description": "Defines the configuration for portal theme.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "id": {
                  "aliases": [],
                  "description": "The unique internal identifier of the portal theme.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "name": {
                  "aliases": [],
                  "description": "The system- or user-assigned name of the portal theme.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "themeData": {
                  "aliases": [],
                  "description": "A CSS file, represented as a Base64-encoded byte array.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "portalTweakSettings": {
              "aliases": [],
              "description": "The Tweak Settings are a customization of the Portal Theme that has been selected for the portal. When the Portal Theme selection is changed, the Tweak Settings are overwritten to match the values in the theme. The Tweak Settings can subsequently be changed by the user.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "bannerColor": {
                  "aliases": [],
                  "description": "Hex value of color.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "bannerTextColor": {
                  "aliases": [],
                  "description": "Hotspot Portal's bannerTextColor.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "pageBackgroundColor": {
                  "aliases": [],
                  "description": "Hotspot Portal's pageBackgroundColor.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "pageLabelAndTextColor": {
                  "aliases": [],
                  "description": "Hotspot Portal's pageLabelAndTextColor.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        },
        "description": {
          "aliases": [],
          "description": "Hotspot Portal's description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Hotspot Portal's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Hotspot Portal's name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "portalTestUrl": {
          "aliases": [],
          "description": "URL to bring up a test page for this portal.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "portalType": {
          "aliases": [],
          "description": "Allowed values - BYOD, - HOTSPOTGUEST, - MYDEVICE, - SELFREGGUEST, - SPONSOR, - SPONSOREDGUEST.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "settings": {
          "aliases": [],
          "description": "Defines all of the settings groups available for a BYOD.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "aupSettings": {
              "aliases": [],
              "description": "Configuration of the Acceptable Use Policy (AUP) for a portal.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "accessCode": {
                  "aliases": [],
                  "description": "Access code that must be entered by the portal user (only valid if requireAccessCode = true).",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "includeAup": {
                  "aliases": [],
                  "description": "Require the portal user to read and accept an AUP.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "requireAccessCode": {
                  "aliases": [],
                  "description": "Require the portal user to enter an access code. Only used in Hotspot portal.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "requireScrolling": {
                  "aliases": [],
                  "description": "Require the portal user to scroll to the end of the AUP. Only valid if requireAupAcceptance = true.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "authSuccessSettings": {
              "aliases": [],
              "description": "Hotspot Portal's authSuccessSettings.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "redirectUrl": {
                  "aliases": [],
                  "description": "Target URL for redirection, used when successRedirect = URL.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "successRedirect": {
                  "aliases": [],
                  "description": "After an Authentication Success where should device be redirected. Allowed values - AUTHSUCCESSPAGE, - ORIGINATINGURL, - URL.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "portalSettings": {
              "aliases": [],
              "description": "The port, interface, certificate, and other basic settings of a portal.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "allowedInterfaces": {
                  "aliases": [],
                  "description": "Interfaces that the portal will be reachable on. Allowed values - eth0 - eth1 - eth2 - eth3 - eth4 - eth5 - bond0 - bond1 - bond2.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "alwaysUsedLanguage": {
                  "aliases": [],
                  "description": "Used when displayLang = ALWAYSUSE.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "certificateGroupTag": {
                  "aliases": [],
                  "description": "Logical name of the x.509 server certificate that will be used for the portal.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "coaType": {
                  "aliases": [],
                  "description": "Allowed Values - COAREAUTHENTICATE, - COATERMINATE.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "displayLang": {
                  "aliases": [],
                  "description": "Allowed values - USEBROWSERLOCALE, - ALWAYSUSE.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "endpointIdentityGroup": {
                  "aliases": [],
                  "description": "Unique Id of the endpoint identity group where user's devices will be added. Used only in Hotspot Portal.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "fallbackLanguage": {
                  "aliases": [],
                  "description": "Used when displayLang = USEBROWSERLOCALE.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "httpsPort": {
                  "aliases": [],
                  "description": "The port number that the allowed interfaces will listen on. Range from 8000 to 8999.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "postAccessBannerSettings": {
              "aliases": [],
              "description": "Hotspot Portal's postAccessBannerSettings.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "includePostAccessBanner": {
                  "aliases": [],
                  "description": "IncludePostAccessBanner flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "postLoginBannerSettings": {
              "aliases": [],
              "description": "Hotspot Portal's postLoginBannerSettings.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "includePostAccessBanner": {
                  "aliases": [],
                  "description": "Include a Post-Login Banner page.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "supportInfoSettings": {
              "aliases": [],
              "description": "Portal Support Information Settings.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "defaultEmptyFieldValue": {
                  "aliases": [],
                  "description": "The default value displayed for an empty field. Only valid when emptyFieldDisplay = DISPLAYWITHDEFAULTVALUE.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "emptyFieldDisplay": {
                  "aliases": [],
                  "description": "Specifies how empty fields are handled on the Support Information Page. Allowed values - HIDE, - DISPLAYWITHNOVALUE, - DISPLAYWITHDEFAULTVALUE.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "includeBrowserUserAgent": {
                  "aliases": [],
                  "description": "IncludeBrowserUserAgent flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "includeFailureCode": {
                  "aliases": [],
                  "description": "IncludeFailureCode flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "includeIpAddress": {
                  "aliases": [],
                  "description": "IncludeIpAddress flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "includeMacAddr": {
                  "aliases": [],
                  "description": "IncludeMacAddr flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "includePolicyServer": {
                  "aliases": [],
                  "description": "IncludePolicyServer flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "includeSupportInfoPage": {
                  "aliases": [],
                  "description": "IncludeSupportInfoPage flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Hotspot Portal",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.hotspot_portal:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    customizations:\n      globalCustomizations:\n        backgroundImage:\n          data: string\n        bannerImage:\n          data: string\n        bannerTitle: string\n        contactText: string\n        desktopLogoImage:\n          data: string\n        footerElement: string\n        mobileLogoImage:\n          data: string\n      language:\n        viewLanguage: string\n      pageCustomizations:\n        data:\n        - key: string\n          value: string\n      portalTheme:\n        id: string\n        name: string\n        themeData: string\n      portalTweakSettings:\n        bannerColor: string\n        bannerTextColor: string\n        pageBackgroundColor: string\n        pageLabelAndTextColor: string\n    description: string\n    id: string\n    name: string\n    portalTestUrl: string\n    portalType: string\n    settings:\n      aupSettings:\n        accessCode: string\n        includeAup: true\n        requireAccessCode: true\n        requireScrolling: true\n      authSuccessSettings:\n        redirectUrl: string\n        successRedirect: string\n      portalSettings:\n        allowedInterfaces: string\n        alwaysUsedLanguage: string\n        certificateGroupTag: string\n        coaType: string\n        displayLang: string\n        endpointIdentityGroup: string\n        fallbackLanguage: string\n        httpsPort: 0\n      postAccessBannerSettings:\n        includePostAccessBanner: true\n      postLoginBannerSettings:\n        includePostAccessBanner: true\n      supportInfoSettings:\n        defaultEmptyFieldValue: string\n        emptyFieldDisplay: string\n        includeBrowserUserAgent: true\n        includeFailureCode: true\n        includeIpAddress: true\n        includeMacAddr: true\n        includePolicyServer: true\n        includeSupportInfoPage: true\n\n- name: Delete by id\n  cisco.ise.hotspot_portal:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n- name: Create\n  cisco.ise.hotspot_portal:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    customizations:\n      globalCustomizations:\n        backgroundImage:\n          data: string\n        bannerImage:\n          data: string\n        bannerTitle: string\n        contactText: string\n        desktopLogoImage:\n          data: string\n        footerElement: string\n        mobileLogoImage:\n          data: string\n      language:\n        viewLanguage: string\n      pageCustomizations:\n        data:\n        - key: string\n          value: string\n      portalTheme:\n        id: string\n        name: string\n        themeData: string\n      portalTweakSettings:\n        bannerColor: string\n        bannerTextColor: string\n        pageBackgroundColor: string\n        pageLabelAndTextColor: string\n    description: string\n    name: string\n    portalTestUrl: string\n    portalType: string\n    settings:\n      aupSettings:\n        accessCode: string\n        includeAup: true\n        requireAccessCode: true\n        requireScrolling: true\n      authSuccessSettings:\n        redirectUrl: string\n        successRedirect: string\n      portalSettings:\n        allowedInterfaces: string\n        alwaysUsedLanguage: string\n        certificateGroupTag: string\n        coaType: string\n        displayLang: string\n        endpointIdentityGroup: string\n        fallbackLanguage: string\n        httpsPort: 0\n      postAccessBannerSettings:\n        includePostAccessBanner: true\n      postLoginBannerSettings:\n        includePostAccessBanner: true\n      supportInfoSettings:\n        defaultEmptyFieldValue: string\n        emptyFieldDisplay: string\n        includeBrowserUserAgent: true\n        includeFailureCode: true\n        includeIpAddress: true\n        includeMacAddr: true\n        includePolicyServer: true\n        includeSupportInfoPage: true\n\n"
  },
  "cisco.ise.hotspot_portal_info": {
    "doc": {
      "description": "Get all Hotspot Portal.\nGet Hotspot Portal by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter query parameter. <br/> **Simple filtering** should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the \"filterType=or\" query string parameter. Each resource Data model description should specify if an attribute is a filtered field. <br/> Operator | Description <br/> ------------|----------------- <br/> EQ | Equals <br/> NEQ | Not Equals <br/> GT | Greater Than <br/> LT | Less Then <br/> STARTSW | Starts With <br/> NSTARTSW | Not Starts With <br/> ENDSW | Ends With <br/> NENDSW | Not Ends With <br/> CONTAINS | Contains <br/> NCONTAINS | Not Contains <br/>.\n",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "filterType": {
          "aliases": [],
          "description": "FilterType query parameter. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sortasc": {
          "aliases": [],
          "description": "Sortasc query parameter. Sort asc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sortdsc": {
          "aliases": [],
          "description": "Sortdsc query parameter. Sort desc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Hotspot Portal",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Hotspot Portal\n  cisco.ise.hotspot_portal_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n    sortasc: string\n    sortdsc: string\n    filter: []\n    filterType: AND\n  register: result\n\n- name: Get Hotspot Portal by id\n  cisco.ise.hotspot_portal_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.id_store_sequence": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Id Store Sequence.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "breakOnStoreFail": {
          "aliases": [],
          "description": "BreakOnStoreFail flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "certificateAuthenticationProfile": {
          "aliases": [],
          "description": "Id Store Sequence's certificateAuthenticationProfile.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Id Store Sequence's description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id Store Sequence's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "idSeqItem": {
          "aliases": [],
          "description": "Id Store Sequence's idSeqItem.",
          "type": "list",
          "required": false,
          "suboptions": {
            "idstore": {
              "aliases": [],
              "description": "Id Store Sequence's idstore.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "order": {
              "aliases": [],
              "description": "Id Store Sequence's order.",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Id Store Sequence's name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "parent": {
          "aliases": [],
          "description": "Id Store Sequence's parent.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Id Store Sequence",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.id_store_sequence:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    breakOnStoreFail: true\n    certificateAuthenticationProfile: string\n    description: string\n    id: string\n    idSeqItem:\n    - idstore: string\n      order: 0\n    name: string\n    parent: string\n\n- name: Delete by id\n  cisco.ise.id_store_sequence:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n- name: Create\n  cisco.ise.id_store_sequence:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    breakOnStoreFail: true\n    certificateAuthenticationProfile: string\n    description: string\n    idSeqItem:\n    - idstore: string\n      order: 0\n    name: string\n    parent: string\n\n"
  },
  "cisco.ise.id_store_sequence_info": {
    "doc": {
      "description": "Get all Id Store Sequence.\nGet Id Store Sequence by id.\nGet Id Store Sequence by name.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Id Store Sequence",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Id Store Sequence\n  cisco.ise.id_store_sequence_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n  register: result\n\n- name: Get Id Store Sequence by id\n  cisco.ise.id_store_sequence_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n- name: Get Id Store Sequence by name\n  cisco.ise.id_store_sequence_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    name: string\n  register: result\n\n"
  },
  "cisco.ise.identity_group": {
    "doc": {
      "description": "Manage operations create and update of the resource Identity Group.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "description": {
          "aliases": [],
          "description": "Identity Group's description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Identity Group's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Identity Group's name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "parent": {
          "aliases": [],
          "description": "Identity Group's parent.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Identity Group",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.identity_group:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    description: string\n    id: string\n    name: string\n    parent: string\n\n- name: Create\n  cisco.ise.identity_group:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    description: string\n    name: string\n    parent: string\n\n"
  },
  "cisco.ise.identity_group_info": {
    "doc": {
      "description": "Get all Identity Group.\nGet Identity Group by id.\nGet Identity Group by name.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter query parameter. <br/> **Simple filtering** should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the \"filterType=or\" query string parameter. Each resource Data model description should specify if an attribute is a filtered field. <br/> Operator | Description <br/> ------------|----------------- <br/> EQ | Equals <br/> NEQ | Not Equals <br/> GT | Greater Than <br/> LT | Less Then <br/> STARTSW | Starts With <br/> NSTARTSW | Not Starts With <br/> ENDSW | Ends With <br/> NENDSW | Not Ends With <br/> CONTAINS | Contains <br/> NCONTAINS | Not Contains <br/>.\n",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "filterType": {
          "aliases": [],
          "description": "FilterType query parameter. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sortasc": {
          "aliases": [],
          "description": "Sortasc query parameter. Sort asc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sortdsc": {
          "aliases": [],
          "description": "Sortdsc query parameter. Sort desc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Identity Group",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Identity Group\n  cisco.ise.identity_group_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n    sortasc: string\n    sortdsc: string\n    filter: []\n    filterType: AND\n  register: result\n\n- name: Get Identity Group by id\n  cisco.ise.identity_group_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n- name: Get Identity Group by name\n  cisco.ise.identity_group_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    name: string\n  register: result\n\n"
  },
  "cisco.ise.internal_user": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Internal User.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "changePassword": {
          "aliases": [],
          "description": "ChangePassword flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "customAttributes": {
          "aliases": [],
          "description": "Key value map.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Internal User's description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "email": {
          "aliases": [],
          "description": "Internal User's email.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "enablePassword": {
          "aliases": [],
          "description": "Internal User's enablePassword.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "Whether the user is enabled/disabled. To use it as filter, the values should be 'Enabled' or 'Disabled'. The values are case sensitive. For example, 'ERSObjectURL?filter=enabled.EQ.Enabled'.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "expiryDate": {
          "aliases": [],
          "description": "To store the internal user's expiry date information. It's format is = 'YYYY-MM-DD'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "expiryDateEnabled": {
          "aliases": [],
          "description": "ExpiryDateEnabled flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "firstName": {
          "aliases": [],
          "description": "Internal User's firstName.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Internal User's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identityGroups": {
          "aliases": [],
          "description": "CSV of identity group IDs.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "lastName": {
          "aliases": [],
          "description": "Internal User's lastName.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Internal User's name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Internal User's password.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "passwordIDStore": {
          "aliases": [],
          "description": "The id store where the internal user's password is kept.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Internal User",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by name\n  cisco.ise.internal_user:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    changePassword: true\n    customAttributes: {}\n    description: string\n    email: string\n    enablePassword: string\n    enabled: true\n    expiryDate: string\n    expiryDateEnabled: true\n    firstName: string\n    id: string\n    identityGroups: string\n    lastName: string\n    name: string\n    password: string\n    passwordIDStore: string\n\n- name: Delete by name\n  cisco.ise.internal_user:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    name: string\n\n- name: Update by id\n  cisco.ise.internal_user:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    changePassword: true\n    customAttributes: {}\n    description: string\n    email: string\n    enablePassword: string\n    enabled: true\n    expiryDate: string\n    expiryDateEnabled: true\n    firstName: string\n    id: string\n    identityGroups: string\n    lastName: string\n    name: string\n    password: string\n    passwordIDStore: string\n\n- name: Delete by id\n  cisco.ise.internal_user:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n- name: Create\n  cisco.ise.internal_user:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    changePassword: true\n    customAttributes: {}\n    description: string\n    email: string\n    enablePassword: string\n    enabled: true\n    expiryDate: string\n    expiryDateEnabled: true\n    firstName: string\n    identityGroups: string\n    lastName: string\n    name: string\n    password: string\n    passwordIDStore: string\n\n"
  },
  "cisco.ise.internal_user_info": {
    "doc": {
      "description": "Get all Internal User.\nGet Internal User by id.\nGet Internal User by name.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter query parameter. <br/> **Simple filtering** should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the \"filterType=or\" query string parameter. Each resource Data model description should specify if an attribute is a filtered field. <br/> Operator | Description <br/> ------------|----------------- <br/> EQ | Equals <br/> NEQ | Not Equals <br/> GT | Greater Than <br/> LT | Less Then <br/> STARTSW | Starts With <br/> NSTARTSW | Not Starts With <br/> ENDSW | Ends With <br/> NENDSW | Not Ends With <br/> CONTAINS | Contains <br/> NCONTAINS | Not Contains <br/>.\n",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "filterType": {
          "aliases": [],
          "description": "FilterType query parameter. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sortasc": {
          "aliases": [],
          "description": "Sortasc query parameter. Sort asc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sortdsc": {
          "aliases": [],
          "description": "Sortdsc query parameter. Sort desc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Internal User",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Internal User\n  cisco.ise.internal_user_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n    sortasc: string\n    sortdsc: string\n    filter: []\n    filterType: AND\n  register: result\n\n- name: Get Internal User by id\n  cisco.ise.internal_user_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n- name: Get Internal User by name\n  cisco.ise.internal_user_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    name: string\n  register: result\n\n"
  },
  "cisco.ise.ise_root_ca_regenerate": {
    "doc": {
      "description": "Manage operation create of the resource Ise Root Ca Regenerate.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "removeExistingISEIntermediateCSR": {
          "aliases": [],
          "description": "Setting this attribute to true will remove existing ISE Intermediate CSR.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Ise Root Ca Regenerate",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.ise_root_ca_regenerate:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    removeExistingISEIntermediateCSR: true\n\n"
  },
  "cisco.ise.mnt_account_status_info": {
    "doc": {
      "description": "Get Mnt Account Status by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "duration": {
          "aliases": [],
          "description": "Duration path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "mac": {
          "aliases": [],
          "description": "Mac path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Mnt Account Status",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get Mnt Account Status by id\n  cisco.ise.mnt_account_status_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    mac: string\n    duration: string\n  register: result\n\n"
  },
  "cisco.ise.mnt_athentication_status_info": {
    "doc": {
      "description": "Get all Mnt Athentication Status.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "MAC": {
          "aliases": [],
          "description": "MAC path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "RECORDS": {
          "aliases": [],
          "description": "RECORDS path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "SECONDS": {
          "aliases": [],
          "description": "SECONDS path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Mnt Athentication Status",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Mnt Athentication Status\n  cisco.ise.mnt_athentication_status_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    MAC: string\n    SECONDS: string\n    RECORDS: string\n  register: result\n\n"
  },
  "cisco.ise.mnt_authentication_status_info": {
    "doc": {
      "description": "Get all Mnt Authentication Status.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "MAC": {
          "aliases": [],
          "description": "MAC path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "RECORDS": {
          "aliases": [],
          "description": "RECORDS path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "SECONDS": {
          "aliases": [],
          "description": "SECONDS path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Mnt Authentication Status",
      "version_added": "1.1.0"
    },
    "examples": "\n- name: Get all Mnt Authentication Status\n  cisco.ise.mnt_authentication_status_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    MAC: string\n    SECONDS: string\n    RECORDS: string\n  register: result\n\n"
  },
  "cisco.ise.mnt_failure_reasons_info": {
    "doc": {
      "description": "Get all Mnt Failure Reasons.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Mnt Failure Reasons",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Mnt Failure Reasons\n  cisco.ise.mnt_failure_reasons_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.mnt_session_active_count_info": {
    "doc": {
      "description": "Get all Mnt Session Active Count.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Mnt Session Active Count",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Mnt Session Active Count\n  cisco.ise.mnt_session_active_count_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.mnt_session_active_list_info": {
    "doc": {
      "description": "Get all Mnt Session Active List.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Mnt Session Active List",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Mnt Session Active List\n  cisco.ise.mnt_session_active_list_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.mnt_session_auth_list_info": {
    "doc": {
      "description": "Get all Mnt Session Auth List.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Mnt Session Auth List",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Mnt Session Auth List\n  cisco.ise.mnt_session_auth_list_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.mnt_session_by_ip_info": {
    "doc": {
      "description": "Get Mnt Session By Ip by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "endpoint_ipv4": {
          "aliases": [],
          "description": "Endpoint_ipv4 path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Mnt Session By Ip",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get Mnt Session By Ip by id\n  cisco.ise.mnt_session_by_ip_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    endpoint_ipv4: string\n  register: result\n\n"
  },
  "cisco.ise.mnt_session_by_mac_info": {
    "doc": {
      "description": "Get Mnt Session By Mac by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "mac": {
          "aliases": [],
          "description": "Mac path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Mnt Session By Mac",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get Mnt Session By Mac by id\n  cisco.ise.mnt_session_by_mac_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    mac: string\n  register: result\n\n"
  },
  "cisco.ise.mnt_session_by_nas_ip_info": {
    "doc": {
      "description": "Get Mnt Session By Nas Ip by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "nas_ipv4": {
          "aliases": [],
          "description": "Nas_ipv4 path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Mnt Session By Nas Ip",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get Mnt Session By Nas Ip by id\n  cisco.ise.mnt_session_by_nas_ip_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    nas_ipv4: string\n  register: result\n\n"
  },
  "cisco.ise.mnt_session_by_username_info": {
    "doc": {
      "description": "Get Mnt Session By Username by name.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Mnt Session By Username",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get Mnt Session By Username by name\n  cisco.ise.mnt_session_by_username_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    username: string\n  register: result\n\n"
  },
  "cisco.ise.mnt_session_delete_all": {
    "doc": {
      "description": "Manage operation delete of the resource Mnt Session Delete All.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Mnt Session Delete All",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Delete all\n  cisco.ise.mnt_session_delete_all:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n\n"
  },
  "cisco.ise.mnt_session_disconnect_info": {
    "doc": {
      "description": "Get Mnt Session Disconnect by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "DISCONNECT_TYPE": {
          "aliases": [],
          "description": "DISCONNECT_TYPE path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ENDPOINT_IP": {
          "aliases": [],
          "description": "ENDPOINT_IP path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "MAC": {
          "aliases": [],
          "description": "MAC path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "NAS_IPV4": {
          "aliases": [],
          "description": "NAS_IPV4 path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "PSN_NAME": {
          "aliases": [],
          "description": "PSN_NAME path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Mnt Session Disconnect",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get Mnt Session Disconnect by id\n  cisco.ise.mnt_session_disconnect_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    ENDPOINT_IP: string\n    PSN_NAME: string\n    MAC: string\n    DISCONNECT_TYPE: string\n    NAS_IPV4: string\n  register: result\n\n"
  },
  "cisco.ise.mnt_session_posture_count_info": {
    "doc": {
      "description": "Get all Mnt Session Posture Count.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Mnt Session Posture Count",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Mnt Session Posture Count\n  cisco.ise.mnt_session_posture_count_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.mnt_session_profiler_count_info": {
    "doc": {
      "description": "Get all Mnt Session Profiler Count.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Mnt Session Profiler Count",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Mnt Session Profiler Count\n  cisco.ise.mnt_session_profiler_count_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.mnt_session_reauthentication_info": {
    "doc": {
      "description": "Get Mnt Session Reauthentication by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ENDPOINT_MAC": {
          "aliases": [],
          "description": "ENDPOINT_MAC path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "PSN_NAME": {
          "aliases": [],
          "description": "PSN_NAME path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "REAUTH_TYPE": {
          "aliases": [],
          "description": "REAUTH_TYPE path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Mnt Session Reauthentication",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get Mnt Session Reauthentication by id\n  cisco.ise.mnt_session_reauthentication_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    PSN_NAME: string\n    ENDPOINT_MAC: string\n    REAUTH_TYPE: string\n  register: result\n\n"
  },
  "cisco.ise.mnt_sessions_by_session_id_info": {
    "doc": {
      "description": "Get all Mnt Sessions By Session Id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "session_id": {
          "aliases": [],
          "description": "Session_id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Mnt Sessions By Session Id",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Mnt Sessions By Session Id\n  cisco.ise.mnt_sessions_by_session_id_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    session_id: string\n  register: result\n\n"
  },
  "cisco.ise.mnt_version_info": {
    "doc": {
      "description": "Get all Mnt Version.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Mnt Version",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Mnt Version\n  cisco.ise.mnt_version_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.my_device_portal": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource My Device Portal.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "customizations": {
          "aliases": [],
          "description": "Defines all of the Portal Customizations available.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "globalCustomizations": {
              "aliases": [],
              "description": "My Device Portal's globalCustomizations.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "backgroundImage": {
                  "aliases": [],
                  "description": "My Device Portal's backgroundImage.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "data": {
                      "aliases": [],
                      "description": "Represented as base 64 encoded string of the image byte array.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "bannerImage": {
                  "aliases": [],
                  "description": "My Device Portal's bannerImage.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "data": {
                      "aliases": [],
                      "description": "Represented as base 64 encoded string of the image byte array.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "bannerTitle": {
                  "aliases": [],
                  "description": "My Device Portal's bannerTitle.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "contactText": {
                  "aliases": [],
                  "description": "My Device Portal's contactText.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "desktopLogoImage": {
                  "aliases": [],
                  "description": "My Device Portal's desktopLogoImage.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "data": {
                      "aliases": [],
                      "description": "Represented as base 64 encoded string of the image byte array.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "footerElement": {
                  "aliases": [],
                  "description": "My Device Portal's footerElement.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "mobileLogoImage": {
                  "aliases": [],
                  "description": "My Device Portal's mobileLogoImage.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "data": {
                      "aliases": [],
                      "description": "Represented as base 64 encoded string of the image byte array.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                }
              }
            },
            "language": {
              "aliases": [],
              "description": "This property is supported only for Read operation and it allows to show the customizations in English. Other languages are not supported.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "viewLanguage": {
                  "aliases": [],
                  "description": "My Device Portal's viewLanguage.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "pageCustomizations": {
              "aliases": [],
              "description": "Represent the entire page customization as a giant dictionary.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "data": {
                  "aliases": [],
                  "description": "The Dictionary will be exposed here as key value pair.",
                  "type": "list",
                  "required": false,
                  "suboptions": {
                    "key": {
                      "aliases": [],
                      "description": "My Device Portal's key.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "value": {
                      "aliases": [],
                      "description": "My Device Portal's value.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                }
              }
            },
            "portalTheme": {
              "aliases": [],
              "description": "My Device Portal's portalTheme.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "id": {
                  "aliases": [],
                  "description": "My Device Portal's id.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "name": {
                  "aliases": [],
                  "description": "The system- or user-assigned name of the portal theme.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "themeData": {
                  "aliases": [],
                  "description": "A CSS file, represented as a Base64-encoded byte array.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "portalTweakSettings": {
              "aliases": [],
              "description": "The Tweak Settings are a customization of the Portal Theme that has been selected for the portal. When the Portal Theme selection is changed, the Tweak Settings are overwritten to match the values in the theme. The Tweak Settings can subsequently be changed by the user.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "bannerColor": {
                  "aliases": [],
                  "description": "Hex value of color.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "bannerTextColor": {
                  "aliases": [],
                  "description": "My Device Portal's bannerTextColor.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "pageBackgroundColor": {
                  "aliases": [],
                  "description": "My Device Portal's pageBackgroundColor.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "pageLabelAndTextColor": {
                  "aliases": [],
                  "description": "My Device Portal's pageLabelAndTextColor.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        },
        "description": {
          "aliases": [],
          "description": "My Device Portal's description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "My Device Portal's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "My Device Portal's name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "portalTestUrl": {
          "aliases": [],
          "description": "URL to bring up a test page for this portal.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "portalType": {
          "aliases": [],
          "description": "Allowed values - BYOD, - HOTSPOTGUEST, - MYDEVICE, - SELFREGGUEST, - SPONSOR, - SPONSOREDGUEST.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "settings": {
          "aliases": [],
          "description": "Defines all of the settings groups available for a Mydevice portal.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "aupSettings": {
              "aliases": [],
              "description": "Configuration of the Acceptable Use Policy (AUP) for a portal.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "displayFrequency": {
                  "aliases": [],
                  "description": "How the AUP should be displayed, either on page or as a link. Only valid if includeAup = true. Allowed Values - FIRSTLOGIN, - EVERYLOGIN, - RECURRING.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "displayFrequencyIntervalDays": {
                  "aliases": [],
                  "description": "Number of days between AUP confirmations (when displayFrequency = recurring).",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "includeAup": {
                  "aliases": [],
                  "description": "Require the portal user to read and accept an AUP.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "requireScrolling": {
                  "aliases": [],
                  "description": "Require the portal user to scroll to the end of the AUP. Only valid if requireAupAcceptance = true.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "employeeChangePasswordSettings": {
              "aliases": [],
              "description": "My Device Portal's employeeChangePasswordSettings.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "allowEmployeeToChangePwd": {
                  "aliases": [],
                  "description": "AllowEmployeeToChangePwd flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "loginPageSettings": {
              "aliases": [],
              "description": "My Device Portal's loginPageSettings.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "aupDisplay": {
                  "aliases": [],
                  "description": "How the AUP should be displayed, either on page or as a link. Only valid if includeAup = true. Allowed values - ONPAGE, - ASLINK.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "includeAup": {
                  "aliases": [],
                  "description": "Include an Acceptable Use Policy (AUP) that should be displayed during login.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "maxFailedAttemptsBeforeRateLimit": {
                  "aliases": [],
                  "description": "Maximum failed login attempts before rate limiting.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "requireAupAcceptance": {
                  "aliases": [],
                  "description": "Require the portal user to accept the AUP. Only valid if includeAup = true.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "requireScrolling": {
                  "aliases": [],
                  "description": "Require the portal user to scroll to the end of the AUP. Only valid if requireAupAcceptance = true.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "socialConfigs": {
                  "aliases": [],
                  "description": "My Device Portal's socialConfigs.",
                  "type": "list",
                  "required": false,
                  "elements": "dict",
                  "suboptions": {}
                },
                "timeBetweenLoginsDuringRateLimit": {
                  "aliases": [],
                  "description": "Time between login attempts when rate limiting.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "portalSettings": {
              "aliases": [],
              "description": "The port, interface, certificate, and other basic settings of a portal.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "allowedInterfaces": {
                  "aliases": [],
                  "description": "Interfaces that the portal will be reachable on. Allowed values - eth0, - eth1, - eth2, - eth3, - eth4, - eth5, - bond0, - bond1, - bond2.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "alwaysUsedLanguage": {
                  "aliases": [],
                  "description": "My Device Portal's alwaysUsedLanguage.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "certificateGroupTag": {
                  "aliases": [],
                  "description": "Logical name of the x.509 server certificate that will be used for the portal.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "displayLang": {
                  "aliases": [],
                  "description": "Allowed values - USEBROWSERLOCALE, - ALWAYSUSE.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "endpointIdentityGroup": {
                  "aliases": [],
                  "description": "Unique Id of the endpoint identity group where user's devices will be added. Used only in Hotspot Portal.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "fallbackLanguage": {
                  "aliases": [],
                  "description": "Used when displayLang = USEBROWSERLOCALE.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "httpsPort": {
                  "aliases": [],
                  "description": "The port number that the allowed interfaces will listen on. Range from 8000 to 8999.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "postAccessBannerSettings": {
              "aliases": [],
              "description": "My Device Portal's postAccessBannerSettings.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "includePostAccessBanner": {
                  "aliases": [],
                  "description": "IncludePostAccessBanner flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "postLoginBannerSettings": {
              "aliases": [],
              "description": "My Device Portal's postLoginBannerSettings.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "includePostAccessBanner": {
                  "aliases": [],
                  "description": "Include a Post-Login Banner page.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "supportInfoSettings": {
              "aliases": [],
              "description": "My Device Portal's supportInfoSettings.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "defaultEmptyFieldValue": {
                  "aliases": [],
                  "description": "The default value displayed for an empty field. Only valid when emptyFieldDisplay = DISPLAYWITHDEFAULTVALUE.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "emptyFieldDisplay": {
                  "aliases": [],
                  "description": "Specifies how empty fields are handled on the Support Information Page. Allowed values - HIDE, - DISPLAYWITHNOVALUE, - DISPLAYWITHDEFAULTVALUE.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "includeBrowserUserAgent": {
                  "aliases": [],
                  "description": "IncludeBrowserUserAgent flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "includeFailureCode": {
                  "aliases": [],
                  "description": "IncludeFailureCode flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "includeIpAddress": {
                  "aliases": [],
                  "description": "IncludeIpAddress flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "includeMacAddr": {
                  "aliases": [],
                  "description": "IncludeMacAddr flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "includePolicyServer": {
                  "aliases": [],
                  "description": "IncludePolicyServer flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "includeSupportInfoPage": {
                  "aliases": [],
                  "description": "IncludeSupportInfoPage flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for My Device Portal",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.my_device_portal:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    customizations:\n      globalCustomizations:\n        backgroundImage:\n          data: string\n        bannerImage:\n          data: string\n        bannerTitle: string\n        contactText: string\n        desktopLogoImage:\n          data: string\n        footerElement: string\n        mobileLogoImage:\n          data: string\n      language:\n        viewLanguage: string\n      pageCustomizations:\n        data:\n        - key: string\n          value: string\n      portalTheme:\n        id: string\n        name: string\n        themeData: string\n      portalTweakSettings:\n        bannerColor: string\n        bannerTextColor: string\n        pageBackgroundColor: string\n        pageLabelAndTextColor: string\n    description: string\n    id: string\n    name: string\n    portalTestUrl: string\n    portalType: string\n    settings:\n      aupSettings:\n        displayFrequency: string\n        displayFrequencyIntervalDays: 0\n        includeAup: true\n        requireScrolling: true\n      employeeChangePasswordSettings:\n        allowEmployeeToChangePwd: true\n      loginPageSettings:\n        aupDisplay: string\n        includeAup: true\n        maxFailedAttemptsBeforeRateLimit: 0\n        requireAupAcceptance: true\n        requireScrolling: true\n        socialConfigs:\n        - {}\n        timeBetweenLoginsDuringRateLimit: 0\n      portalSettings:\n        allowedInterfaces: string\n        alwaysUsedLanguage: string\n        certificateGroupTag: string\n        displayLang: string\n        endpointIdentityGroup: string\n        fallbackLanguage: string\n        httpsPort: 0\n      postAccessBannerSettings:\n        includePostAccessBanner: true\n      postLoginBannerSettings:\n        includePostAccessBanner: true\n      supportInfoSettings:\n        defaultEmptyFieldValue: string\n        emptyFieldDisplay: string\n        includeBrowserUserAgent: true\n        includeFailureCode: true\n        includeIpAddress: true\n        includeMacAddr: true\n        includePolicyServer: true\n        includeSupportInfoPage: true\n\n- name: Delete by id\n  cisco.ise.my_device_portal:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n- name: Create\n  cisco.ise.my_device_portal:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    customizations:\n      globalCustomizations:\n        backgroundImage:\n          data: string\n        bannerImage:\n          data: string\n        bannerTitle: string\n        contactText: string\n        desktopLogoImage:\n          data: string\n        footerElement: string\n        mobileLogoImage:\n          data: string\n      language:\n        viewLanguage: string\n      pageCustomizations:\n        data:\n        - key: string\n          value: string\n      portalTheme:\n        id: string\n        name: string\n        themeData: string\n      portalTweakSettings:\n        bannerColor: string\n        bannerTextColor: string\n        pageBackgroundColor: string\n        pageLabelAndTextColor: string\n    description: string\n    name: string\n    portalTestUrl: string\n    portalType: string\n    settings:\n      aupSettings:\n        displayFrequency: string\n        displayFrequencyIntervalDays: 0\n        includeAup: true\n        requireScrolling: true\n      employeeChangePasswordSettings:\n        allowEmployeeToChangePwd: true\n      loginPageSettings:\n        aupDisplay: string\n        includeAup: true\n        maxFailedAttemptsBeforeRateLimit: 0\n        requireAupAcceptance: true\n        requireScrolling: true\n        socialConfigs:\n        - {}\n        timeBetweenLoginsDuringRateLimit: 0\n      portalSettings:\n        allowedInterfaces: string\n        alwaysUsedLanguage: string\n        certificateGroupTag: string\n        displayLang: string\n        endpointIdentityGroup: string\n        fallbackLanguage: string\n        httpsPort: 0\n      postAccessBannerSettings:\n        includePostAccessBanner: true\n      postLoginBannerSettings:\n        includePostAccessBanner: true\n      supportInfoSettings:\n        defaultEmptyFieldValue: string\n        emptyFieldDisplay: string\n        includeBrowserUserAgent: true\n        includeFailureCode: true\n        includeIpAddress: true\n        includeMacAddr: true\n        includePolicyServer: true\n        includeSupportInfoPage: true\n\n"
  },
  "cisco.ise.my_device_portal_info": {
    "doc": {
      "description": "Get all My Device Portal.\nGet My Device Portal by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter query parameter. <br/> **Simple filtering** should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the \"filterType=or\" query string parameter. Each resource Data model description should specify if an attribute is a filtered field. <br/> Operator | Description <br/> ------------|----------------- <br/> EQ | Equals <br/> NEQ | Not Equals <br/> GT | Greater Than <br/> LT | Less Then <br/> STARTSW | Starts With <br/> NSTARTSW | Not Starts With <br/> ENDSW | Ends With <br/> NENDSW | Not Ends With <br/> CONTAINS | Contains <br/> NCONTAINS | Not Contains <br/>.\n",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "filterType": {
          "aliases": [],
          "description": "FilterType query parameter. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sortasc": {
          "aliases": [],
          "description": "Sortasc query parameter. Sort asc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sortdsc": {
          "aliases": [],
          "description": "Sortdsc query parameter. Sort desc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for My Device Portal",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all My Device Portal\n  cisco.ise.my_device_portal_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n    sortasc: string\n    sortdsc: string\n    filter: []\n    filterType: AND\n  register: result\n\n- name: Get My Device Portal by id\n  cisco.ise.my_device_portal_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.native_supplicant_profile": {
    "doc": {
      "description": "Manage operations update and delete of the resource Native Supplicant Profile.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "description": {
          "aliases": [],
          "description": "Native Supplicant Profile's description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Native Supplicant Profile's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Native Supplicant Profile's name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "wirelessProfiles": {
          "aliases": [],
          "description": "Native Supplicant Profile's wirelessProfiles.",
          "type": "list",
          "required": false,
          "suboptions": {
            "actionType": {
              "aliases": [],
              "description": "Action type for WifiProfile. Allowed values - ADD, - UPDATE, - DELETE (required for updating existing WirelessProfile).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "allowedProtocol": {
              "aliases": [],
              "description": "Native Supplicant Profile's allowedProtocol.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "certificateTemplateId": {
              "aliases": [],
              "description": "Native Supplicant Profile's certificateTemplateId.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "previousSsid": {
              "aliases": [],
              "description": "Previous ssid for WifiProfile (required for updating existing WirelessProfile).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "ssid": {
              "aliases": [],
              "description": "Native Supplicant Profile's ssid.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Native Supplicant Profile",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.native_supplicant_profile:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    description: string\n    id: string\n    name: string\n    wirelessProfiles:\n    - actionType: string\n      allowedProtocol: string\n      certificateTemplateId: string\n      previousSsid: string\n      ssid: string\n\n- name: Delete by id\n  cisco.ise.native_supplicant_profile:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n"
  },
  "cisco.ise.native_supplicant_profile_info": {
    "doc": {
      "description": "Get all Native Supplicant Profile.\nGet Native Supplicant Profile by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Native Supplicant Profile",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Native Supplicant Profile\n  cisco.ise.native_supplicant_profile_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n  register: result\n\n- name: Get Native Supplicant Profile by id\n  cisco.ise.native_supplicant_profile_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.network_access_authentication_rules": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Network Access Authentication Rules.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "id": {
          "aliases": [],
          "description": "Id path parameter. Rule id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identitySourceId": {
          "aliases": [],
          "description": "Identity source id from the identity stores.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "identitySourceName": {
          "aliases": [],
          "description": "Identity source name from the identity stores.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ifAuthFail": {
          "aliases": [],
          "description": "Action to perform when authentication fails such as Bad credentials, disabled user and so on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ifProcessFail": {
          "aliases": [],
          "description": "Action to perform when ISE is uanble to access the identity database.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ifUserNotFound": {
          "aliases": [],
          "description": "Action to perform when user is not found in any of identity stores.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "link": {
          "aliases": [],
          "description": "Network Access Authentication Rules's link.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "href": {
              "aliases": [],
              "description": "Network Access Authentication Rules's href.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "rel": {
              "aliases": [],
              "description": "Network Access Authentication Rules's rel.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "Network Access Authentication Rules's type.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "policyId": {
          "aliases": [],
          "description": "PolicyId path parameter. Policy id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "rule": {
          "aliases": [],
          "description": "Common attributes in rule authentication/authorization.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "condition": {
              "aliases": [],
              "description": "Network Access Authentication Rules's condition.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "attributeId": {
                  "aliases": [],
                  "description": "Dictionary attribute id (Optional), used for additional verification.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "attributeName": {
                  "aliases": [],
                  "description": "Dictionary attribute name.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "attributeValue": {
                  "aliases": [],
                  "description": "<ul><li>Attribute value for condition</li> <li>Value type is specified in dictionary object</li> <li>if multiple values allowed is specified in dictionary object</li></ul>.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "children": {
                  "aliases": [],
                  "description": "In case type is andBlock or orBlock addtional conditions will be aggregated under this logical (OR/AND) condition.",
                  "type": "list",
                  "required": false,
                  "suboptions": {
                    "conditionType": {
                      "aliases": [],
                      "description": "<ul><li>Inidicates whether the record is the condition itself(data) or a logical(or,and) aggregation</li> <li>Data type enum(reference,single) indicates than \"conditonId\" OR \"ConditionAttrs\" fields should contain condition data but not both</li> <li>Logical aggreation(and,or) enum indicates that additional conditions are present under the children field</li></ul>.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "isNegate": {
                      "aliases": [],
                      "description": "Indicates whereas this condition is in negate mode.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "link": {
                      "aliases": [],
                      "description": "Network Access Authentication Rules's link.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "href": {
                          "aliases": [],
                          "description": "Network Access Authentication Rules's href.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        },
                        "rel": {
                          "aliases": [],
                          "description": "Network Access Authentication Rules's rel.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        },
                        "type": {
                          "aliases": [],
                          "description": "Network Access Authentication Rules's type.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    }
                  }
                },
                "conditionType": {
                  "aliases": [],
                  "description": "<ul><li>Inidicates whether the record is the condition itself(data) or a logical(or,and) aggregation</li> <li>Data type enum(reference,single) indicates than \"conditonId\" OR \"ConditionAttrs\" fields should contain condition data but not both</li> <li>Logical aggreation(and,or) enum indicates that additional conditions are present under the children field</li></ul>.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "datesRange": {
                  "aliases": [],
                  "description": "<p>Defines for which date/s TimeAndDate condition will be matched or NOT matched if used in exceptionDates prooperty<br> Options are - Date range, for specific date, the same date should be used for start/end date <br> Default - no specific dates<br> In order to reset the dates to have no specific dates Date format - yyyy-mm-dd (MM = month, dd = day, yyyy = year)</p>.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "endDate": {
                      "aliases": [],
                      "description": "Network Access Authentication Rules's endDate.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "startDate": {
                      "aliases": [],
                      "description": "Network Access Authentication Rules's startDate.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "datesRangeException": {
                  "aliases": [],
                  "description": "<p>Defines for which date/s TimeAndDate condition will be matched or NOT matched if used in exceptionDates prooperty<br> Options are - Date range, for specific date, the same date should be used for start/end date <br> Default - no specific dates<br> In order to reset the dates to have no specific dates Date format - yyyy-mm-dd (MM = month, dd = day, yyyy = year)</p>.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "endDate": {
                      "aliases": [],
                      "description": "Network Access Authentication Rules's endDate.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "startDate": {
                      "aliases": [],
                      "description": "Network Access Authentication Rules's startDate.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "description": {
                  "aliases": [],
                  "description": "Condition description.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "dictionaryName": {
                  "aliases": [],
                  "description": "Dictionary name.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "dictionaryValue": {
                  "aliases": [],
                  "description": "Dictionary value.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "hoursRange": {
                  "aliases": [],
                  "description": "<p>Defines for which hours a TimeAndDate condition will be matched or not matched if used in exceptionHours property<br> Time foramt - hh mm ( h = hour , mm = minutes ) <br> Default - All Day </p>.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "endTime": {
                      "aliases": [],
                      "description": "Network Access Authentication Rules's endTime.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "startTime": {
                      "aliases": [],
                      "description": "Network Access Authentication Rules's startTime.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "hoursRangeException": {
                  "aliases": [],
                  "description": "<p>Defines for which hours a TimeAndDate condition will be matched or not matched if used in exceptionHours property<br> Time foramt - hh mm ( h = hour , mm = minutes ) <br> Default - All Day </p>.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "endTime": {
                      "aliases": [],
                      "description": "Network Access Authentication Rules's endTime.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "startTime": {
                      "aliases": [],
                      "description": "Network Access Authentication Rules's startTime.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "id": {
                  "aliases": [],
                  "description": "Network Access Authentication Rules's id.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "isNegate": {
                  "aliases": [],
                  "description": "Indicates whereas this condition is in negate mode.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "link": {
                  "aliases": [],
                  "description": "Network Access Authentication Rules's link.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "href": {
                      "aliases": [],
                      "description": "Network Access Authentication Rules's href.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "rel": {
                      "aliases": [],
                      "description": "Network Access Authentication Rules's rel.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "type": {
                      "aliases": [],
                      "description": "Network Access Authentication Rules's type.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "name": {
                  "aliases": [],
                  "description": "Condition name.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "operator": {
                  "aliases": [],
                  "description": "Equality operator.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "weekDays": {
                  "aliases": [],
                  "description": "<p>Defines for which days this condition will be matched<br> Days format - Arrays of WeekDay enums <br> Default - List of All week days</p>.",
                  "type": "list",
                  "required": false,
                  "elements": "str",
                  "suboptions": {}
                },
                "weekDaysException": {
                  "aliases": [],
                  "description": "<p>Defines for which days this condition will NOT be matched<br> Days format - Arrays of WeekDay enums <br> Default - Not enabled</p>.",
                  "type": "list",
                  "required": false,
                  "elements": "str",
                  "suboptions": {}
                }
              }
            },
            "default": {
              "aliases": [],
              "description": "Indicates if this rule is the default one.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "hitCounts": {
              "aliases": [],
              "description": "The amount of times the rule was matched.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "id": {
              "aliases": [],
              "description": "The identifier of the rule.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Rule name, Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "rank": {
              "aliases": [],
              "description": "The rank(priority) in relation to other rules. Lower rank is higher priority.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "state": {
              "aliases": [],
              "description": "The state that the rule is in. A disabled rule cannot be matched.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Network Access Authentication Rules",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.network_access_authentication_rules:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    identitySourceId: string\n    identitySourceName: string\n    ifAuthFail: string\n    ifProcessFail: string\n    ifUserNotFound: string\n    link:\n      href: string\n      rel: string\n      type: string\n    rule:\n      condition:\n        attributeId: string\n        attributeName: string\n        attributeValue: string\n        children:\n        - conditionType: string\n          isNegate: true\n          link:\n            href: string\n            rel: string\n            type: string\n        conditionType: string\n        datesRange:\n          endDate: string\n          startDate: string\n        datesRangeException:\n          endDate: string\n          startDate: string\n        description: string\n        dictionaryName: string\n        dictionaryValue: string\n        hoursRange:\n          endTime: string\n          startTime: string\n        hoursRangeException:\n          endTime: string\n          startTime: string\n        id: string\n        isNegate: true\n        link:\n          href: string\n          rel: string\n          type: string\n        name: string\n        operator: string\n        weekDays:\n        - string\n        weekDaysException:\n        - string\n      default: true\n      hitCounts: 0\n      id: string\n      name: string\n      rank: 0\n      state: string\n\n- name: Update by id\n  cisco.ise.network_access_authentication_rules:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    id: string\n    identitySourceId: string\n    identitySourceName: string\n    ifAuthFail: string\n    ifProcessFail: string\n    ifUserNotFound: string\n    link:\n      href: string\n      rel: string\n      type: string\n    policyId: string\n    rule:\n      condition:\n        attributeId: string\n        attributeName: string\n        attributeValue: string\n        children:\n        - conditionType: string\n          isNegate: true\n          link:\n            href: string\n            rel: string\n            type: string\n        conditionType: string\n        datesRange:\n          endDate: string\n          startDate: string\n        datesRangeException:\n          endDate: string\n          startDate: string\n        description: string\n        dictionaryName: string\n        dictionaryValue: string\n        hoursRange:\n          endTime: string\n          startTime: string\n        hoursRangeException:\n          endTime: string\n          startTime: string\n        id: string\n        isNegate: true\n        link:\n          href: string\n          rel: string\n          type: string\n        name: string\n        operator: string\n        weekDays:\n        - string\n        weekDaysException:\n        - string\n      default: true\n      hitCounts: 0\n      id: string\n      name: string\n      rank: 0\n      state: string\n\n- name: Delete by id\n  cisco.ise.network_access_authentication_rules:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n    policyId: string\n\n"
  },
  "cisco.ise.network_access_authentication_rules_info": {
    "doc": {
      "description": "Get all Network Access Authentication Rules.\nGet Network Access Authentication Rules by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "id": {
          "aliases": [],
          "description": "Id path parameter. Rule id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "policyId": {
          "aliases": [],
          "description": "PolicyId path parameter. Policy id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Network Access Authentication Rules",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Network Access Authentication Rules\n  cisco.ise.network_access_authentication_rules_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    policyId: string\n  register: result\n\n- name: Get Network Access Authentication Rules by id\n  cisco.ise.network_access_authentication_rules_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    policyId: string\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.network_access_authentication_rules_reset_hitcount": {
    "doc": {
      "description": "Manage operation create of the resource Network Access Authentication Rules Reset Hitcount.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Network Access Authentication Rules Reset Hitcount",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.network_access_authentication_rules_reset_hitcount:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n\n"
  },
  "cisco.ise.network_access_authorization_rules": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Network Access Authorization Rules.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "id": {
          "aliases": [],
          "description": "Id path parameter. Rule id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "link": {
          "aliases": [],
          "description": "Network Access Authorization Rules's link.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "href": {
              "aliases": [],
              "description": "Network Access Authorization Rules's href.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "rel": {
              "aliases": [],
              "description": "Network Access Authorization Rules's rel.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "Network Access Authorization Rules's type.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "policyId": {
          "aliases": [],
          "description": "PolicyId path parameter. Policy id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "profile": {
          "aliases": [],
          "description": "The authorization profile/s.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "rule": {
          "aliases": [],
          "description": "Common attributes in rule authentication/authorization.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "condition": {
              "aliases": [],
              "description": "Network Access Authorization Rules's condition.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "attributeId": {
                  "aliases": [],
                  "description": "Dictionary attribute id (Optional), used for additional verification.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "attributeName": {
                  "aliases": [],
                  "description": "Dictionary attribute name.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "attributeValue": {
                  "aliases": [],
                  "description": "<ul><li>Attribute value for condition</li> <li>Value type is specified in dictionary object</li> <li>if multiple values allowed is specified in dictionary object</li></ul>.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "children": {
                  "aliases": [],
                  "description": "In case type is andBlock or orBlock addtional conditions will be aggregated under this logical (OR/AND) condition.",
                  "type": "list",
                  "required": false,
                  "suboptions": {
                    "conditionType": {
                      "aliases": [],
                      "description": "<ul><li>Inidicates whether the record is the condition itself(data) or a logical(or,and) aggregation</li> <li>Data type enum(reference,single) indicates than \"conditonId\" OR \"ConditionAttrs\" fields should contain condition data but not both</li> <li>Logical aggreation(and,or) enum indicates that additional conditions are present under the children field</li></ul>.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "isNegate": {
                      "aliases": [],
                      "description": "Indicates whereas this condition is in negate mode.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "link": {
                      "aliases": [],
                      "description": "Network Access Authorization Rules's link.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "href": {
                          "aliases": [],
                          "description": "Network Access Authorization Rules's href.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        },
                        "rel": {
                          "aliases": [],
                          "description": "Network Access Authorization Rules's rel.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        },
                        "type": {
                          "aliases": [],
                          "description": "Network Access Authorization Rules's type.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    }
                  }
                },
                "conditionType": {
                  "aliases": [],
                  "description": "<ul><li>Inidicates whether the record is the condition itself(data) or a logical(or,and) aggregation</li> <li>Data type enum(reference,single) indicates than \"conditonId\" OR \"ConditionAttrs\" fields should contain condition data but not both</li> <li>Logical aggreation(and,or) enum indicates that additional conditions are present under the children field</li></ul>.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "datesRange": {
                  "aliases": [],
                  "description": "<p>Defines for which date/s TimeAndDate condition will be matched or NOT matched if used in exceptionDates prooperty<br> Options are - Date range, for specific date, the same date should be used for start/end date <br> Default - no specific dates<br> In order to reset the dates to have no specific dates Date format - yyyy-mm-dd (MM = month, dd = day, yyyy = year)</p>.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "endDate": {
                      "aliases": [],
                      "description": "Network Access Authorization Rules's endDate.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "startDate": {
                      "aliases": [],
                      "description": "Network Access Authorization Rules's startDate.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "datesRangeException": {
                  "aliases": [],
                  "description": "<p>Defines for which date/s TimeAndDate condition will be matched or NOT matched if used in exceptionDates prooperty<br> Options are - Date range, for specific date, the same date should be used for start/end date <br> Default - no specific dates<br> In order to reset the dates to have no specific dates Date format - yyyy-mm-dd (MM = month, dd = day, yyyy = year)</p>.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "endDate": {
                      "aliases": [],
                      "description": "Network Access Authorization Rules's endDate.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "startDate": {
                      "aliases": [],
                      "description": "Network Access Authorization Rules's startDate.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "description": {
                  "aliases": [],
                  "description": "Condition description.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "dictionaryName": {
                  "aliases": [],
                  "description": "Dictionary name.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "dictionaryValue": {
                  "aliases": [],
                  "description": "Dictionary value.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "hoursRange": {
                  "aliases": [],
                  "description": "<p>Defines for which hours a TimeAndDate condition will be matched or not matched if used in exceptionHours property<br> Time foramt - hh mm ( h = hour , mm = minutes ) <br> Default - All Day </p>.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "endTime": {
                      "aliases": [],
                      "description": "Network Access Authorization Rules's endTime.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "startTime": {
                      "aliases": [],
                      "description": "Network Access Authorization Rules's startTime.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "hoursRangeException": {
                  "aliases": [],
                  "description": "<p>Defines for which hours a TimeAndDate condition will be matched or not matched if used in exceptionHours property<br> Time foramt - hh mm ( h = hour , mm = minutes ) <br> Default - All Day </p>.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "endTime": {
                      "aliases": [],
                      "description": "Network Access Authorization Rules's endTime.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "startTime": {
                      "aliases": [],
                      "description": "Network Access Authorization Rules's startTime.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "id": {
                  "aliases": [],
                  "description": "Network Access Authorization Rules's id.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "isNegate": {
                  "aliases": [],
                  "description": "Indicates whereas this condition is in negate mode.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "link": {
                  "aliases": [],
                  "description": "Network Access Authorization Rules's link.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "href": {
                      "aliases": [],
                      "description": "Network Access Authorization Rules's href.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "rel": {
                      "aliases": [],
                      "description": "Network Access Authorization Rules's rel.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "type": {
                      "aliases": [],
                      "description": "Network Access Authorization Rules's type.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "name": {
                  "aliases": [],
                  "description": "Condition name.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "operator": {
                  "aliases": [],
                  "description": "Equality operator.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "weekDays": {
                  "aliases": [],
                  "description": "<p>Defines for which days this condition will be matched<br> Days format - Arrays of WeekDay enums <br> Default - List of All week days</p>.",
                  "type": "list",
                  "required": false,
                  "elements": "str",
                  "suboptions": {}
                },
                "weekDaysException": {
                  "aliases": [],
                  "description": "<p>Defines for which days this condition will NOT be matched<br> Days format - Arrays of WeekDay enums <br> Default - Not enabled</p>.",
                  "type": "list",
                  "required": false,
                  "elements": "str",
                  "suboptions": {}
                }
              }
            },
            "default": {
              "aliases": [],
              "description": "Indicates if this rule is the default one.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "hitCounts": {
              "aliases": [],
              "description": "The amount of times the rule was matched.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "id": {
              "aliases": [],
              "description": "The identifier of the rule.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Rule name, Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "rank": {
              "aliases": [],
              "description": "The rank(priority) in relation to other rules. Lower rank is higher priority.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "state": {
              "aliases": [],
              "description": "The state that the rule is in. A disabled rule cannot be matched.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "securityGroup": {
          "aliases": [],
          "description": "Security group used in authorization policies.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Network Access Authorization Rules",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.network_access_authorization_rules:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    link:\n      href: string\n      rel: string\n      type: string\n    profile:\n    - string\n    rule:\n      condition:\n        attributeId: string\n        attributeName: string\n        attributeValue: string\n        children:\n        - conditionType: string\n          isNegate: true\n          link:\n            href: string\n            rel: string\n            type: string\n        conditionType: string\n        datesRange:\n          endDate: string\n          startDate: string\n        datesRangeException:\n          endDate: string\n          startDate: string\n        description: string\n        dictionaryName: string\n        dictionaryValue: string\n        hoursRange:\n          endTime: string\n          startTime: string\n        hoursRangeException:\n          endTime: string\n          startTime: string\n        id: string\n        isNegate: true\n        link:\n          href: string\n          rel: string\n          type: string\n        name: string\n        operator: string\n        weekDays:\n        - string\n        weekDaysException:\n        - string\n      default: true\n      hitCounts: 0\n      id: string\n      name: string\n      rank: 0\n      state: string\n    securityGroup: string\n\n- name: Update by id\n  cisco.ise.network_access_authorization_rules:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    id: string\n    link:\n      href: string\n      rel: string\n      type: string\n    policyId: string\n    profile:\n    - string\n    rule:\n      condition:\n        attributeId: string\n        attributeName: string\n        attributeValue: string\n        children:\n        - conditionType: string\n          isNegate: true\n          link:\n            href: string\n            rel: string\n            type: string\n        conditionType: string\n        datesRange:\n          endDate: string\n          startDate: string\n        datesRangeException:\n          endDate: string\n          startDate: string\n        description: string\n        dictionaryName: string\n        dictionaryValue: string\n        hoursRange:\n          endTime: string\n          startTime: string\n        hoursRangeException:\n          endTime: string\n          startTime: string\n        id: string\n        isNegate: true\n        link:\n          href: string\n          rel: string\n          type: string\n        name: string\n        operator: string\n        weekDays:\n        - string\n        weekDaysException:\n        - string\n      default: true\n      hitCounts: 0\n      id: string\n      name: string\n      rank: 0\n      state: string\n    securityGroup: string\n\n- name: Delete by id\n  cisco.ise.network_access_authorization_rules:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n    policyId: string\n\n"
  },
  "cisco.ise.network_access_authorization_rules_info": {
    "doc": {
      "description": "Get all Network Access Authorization Rules.\nGet Network Access Authorization Rules by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "id": {
          "aliases": [],
          "description": "Id path parameter. Rule id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "policyId": {
          "aliases": [],
          "description": "PolicyId path parameter. Policy id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Network Access Authorization Rules",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Network Access Authorization Rules\n  cisco.ise.network_access_authorization_rules_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    policyId: string\n  register: result\n\n- name: Get Network Access Authorization Rules by id\n  cisco.ise.network_access_authorization_rules_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    policyId: string\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.network_access_authorization_rules_reset_hitcount": {
    "doc": {
      "description": "Manage operation create of the resource Network Access Authorization Rules Reset Hitcount.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Network Access Authorization Rules Reset Hitcount",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.network_access_authorization_rules_reset_hitcount:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n\n"
  },
  "cisco.ise.network_access_conditions": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Network Access Conditions.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "attributeId": {
          "aliases": [],
          "description": "Dictionary attribute id (Optional), used for additional verification.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "attributeName": {
          "aliases": [],
          "description": "Dictionary attribute name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "attributeValue": {
          "aliases": [],
          "description": "<ul><li>Attribute value for condition</li> <li>Value type is specified in dictionary object</li> <li>if multiple values allowed is specified in dictionary object</li></ul>.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "children": {
          "aliases": [],
          "description": "In case type is andBlock or orBlock addtional conditions will be aggregated under this logical (OR/AND) condition.",
          "type": "list",
          "required": false,
          "suboptions": {
            "conditionType": {
              "aliases": [],
              "description": "<ul><li>Inidicates whether the record is the condition itself(data) or a logical(or,and) aggregation</li> <li>Data type enum(reference,single) indicates than \"conditonId\" OR \"ConditionAttrs\" fields should contain condition data but not both</li> <li>Logical aggreation(and,or) enum indicates that additional conditions are present under the children field</li></ul>.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "isNegate": {
              "aliases": [],
              "description": "Indicates whereas this condition is in negate mode.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "link": {
              "aliases": [],
              "description": "Network Access Conditions's link.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "href": {
                  "aliases": [],
                  "description": "Network Access Conditions's href.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "rel": {
                  "aliases": [],
                  "description": "Network Access Conditions's rel.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "type": {
                  "aliases": [],
                  "description": "Network Access Conditions's type.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        },
        "conditionType": {
          "aliases": [],
          "description": "<ul><li>Inidicates whether the record is the condition itself(data) or a logical(or,and) aggregation</li> <li>Data type enum(reference,single) indicates than \"conditonId\" OR \"ConditionAttrs\" fields should contain condition data but not both</li> <li>Logical aggreation(and,or) enum indicates that additional conditions are present under the children field</li></ul>.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "datesRange": {
          "aliases": [],
          "description": "<p>Defines for which date/s TimeAndDate condition will be matched or NOT matched if used in exceptionDates prooperty<br> Options are - Date range, for specific date, the same date should be used for start/end date <br> Default - no specific dates<br> In order to reset the dates to have no specific dates Date format - yyyy-mm-dd (MM = month, dd = day, yyyy = year)</p>.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "endDate": {
              "aliases": [],
              "description": "Network Access Conditions's endDate.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "startDate": {
              "aliases": [],
              "description": "Network Access Conditions's startDate.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "datesRangeException": {
          "aliases": [],
          "description": "<p>Defines for which date/s TimeAndDate condition will be matched or NOT matched if used in exceptionDates prooperty<br> Options are - Date range, for specific date, the same date should be used for start/end date <br> Default - no specific dates<br> In order to reset the dates to have no specific dates Date format - yyyy-mm-dd (MM = month, dd = day, yyyy = year)</p>.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "endDate": {
              "aliases": [],
              "description": "Network Access Conditions's endDate.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "startDate": {
              "aliases": [],
              "description": "Network Access Conditions's startDate.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "description": {
          "aliases": [],
          "description": "Condition description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dictionaryName": {
          "aliases": [],
          "description": "Dictionary name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dictionaryValue": {
          "aliases": [],
          "description": "Dictionary value.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hoursRange": {
          "aliases": [],
          "description": "<p>Defines for which hours a TimeAndDate condition will be matched or not matched if used in exceptionHours property<br> Time foramt - hh mm ( h = hour , mm = minutes ) <br> Default - All Day </p>.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "endTime": {
              "aliases": [],
              "description": "Network Access Conditions's endTime.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "startTime": {
              "aliases": [],
              "description": "Network Access Conditions's startTime.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "hoursRangeException": {
          "aliases": [],
          "description": "<p>Defines for which hours a TimeAndDate condition will be matched or not matched if used in exceptionHours property<br> Time foramt - hh mm ( h = hour , mm = minutes ) <br> Default - All Day </p>.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "endTime": {
              "aliases": [],
              "description": "Network Access Conditions's endTime.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "startTime": {
              "aliases": [],
              "description": "Network Access Conditions's startTime.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "id": {
          "aliases": [],
          "description": "Network Access Conditions's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "isNegate": {
          "aliases": [],
          "description": "Indicates whereas this condition is in negate mode.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "link": {
          "aliases": [],
          "description": "Network Access Conditions's link.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "href": {
              "aliases": [],
              "description": "Network Access Conditions's href.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "rel": {
              "aliases": [],
              "description": "Network Access Conditions's rel.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "Network Access Conditions's type.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "Condition name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "operator": {
          "aliases": [],
          "description": "Equality operator.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "weekDays": {
          "aliases": [],
          "description": "<p>Defines for which days this condition will be matched<br> Days format - Arrays of WeekDay enums <br> Default - List of All week days</p>.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "weekDaysException": {
          "aliases": [],
          "description": "<p>Defines for which days this condition will NOT be matched<br> Days format - Arrays of WeekDay enums <br> Default - Not enabled</p>.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Network Access Conditions",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.network_access_conditions:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    attributeId: string\n    attributeName: string\n    attributeValue: string\n    children:\n    - conditionType: string\n      isNegate: true\n      link:\n        href: string\n        rel: string\n        type: string\n    conditionType: string\n    datesRange:\n      endDate: string\n      startDate: string\n    datesRangeException:\n      endDate: string\n      startDate: string\n    description: string\n    dictionaryName: string\n    dictionaryValue: string\n    hoursRange:\n      endTime: string\n      startTime: string\n    hoursRangeException:\n      endTime: string\n      startTime: string\n    id: string\n    isNegate: true\n    link:\n      href: string\n      rel: string\n      type: string\n    name: string\n    operator: string\n    weekDays:\n    - string\n    weekDaysException:\n    - string\n\n- name: Update by name\n  cisco.ise.network_access_conditions:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    attributeId: string\n    attributeName: string\n    attributeValue: string\n    children:\n    - conditionType: string\n      isNegate: true\n      link:\n        href: string\n        rel: string\n        type: string\n    conditionType: string\n    datesRange:\n      endDate: string\n      startDate: string\n    datesRangeException:\n      endDate: string\n      startDate: string\n    description: string\n    dictionaryName: string\n    dictionaryValue: string\n    hoursRange:\n      endTime: string\n      startTime: string\n    hoursRangeException:\n      endTime: string\n      startTime: string\n    id: string\n    isNegate: true\n    link:\n      href: string\n      rel: string\n      type: string\n    name: string\n    operator: string\n    weekDays:\n    - string\n    weekDaysException:\n    - string\n\n- name: Delete by name\n  cisco.ise.network_access_conditions:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    name: string\n\n- name: Update by id\n  cisco.ise.network_access_conditions:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    attributeId: string\n    attributeName: string\n    attributeValue: string\n    children:\n    - conditionType: string\n      isNegate: true\n      link:\n        href: string\n        rel: string\n        type: string\n    conditionType: string\n    datesRange:\n      endDate: string\n      startDate: string\n    datesRangeException:\n      endDate: string\n      startDate: string\n    description: string\n    dictionaryName: string\n    dictionaryValue: string\n    hoursRange:\n      endTime: string\n      startTime: string\n    hoursRangeException:\n      endTime: string\n      startTime: string\n    id: string\n    isNegate: true\n    link:\n      href: string\n      rel: string\n      type: string\n    name: string\n    operator: string\n    weekDays:\n    - string\n    weekDaysException:\n    - string\n\n- name: Delete by id\n  cisco.ise.network_access_conditions:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n"
  },
  "cisco.ise.network_access_conditions_for_authentication_rule_info": {
    "doc": {
      "description": "Get all Network Access Conditions For Authentication Rule.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Network Access Conditions For Authentication Rule",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Network Access Conditions For Authentication Rule\n  cisco.ise.network_access_conditions_for_authentication_rule_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.network_access_conditions_for_authorization_rule_info": {
    "doc": {
      "description": "Get all Network Access Conditions For Authorization Rule.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Network Access Conditions For Authorization Rule",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Network Access Conditions For Authorization Rule\n  cisco.ise.network_access_conditions_for_authorization_rule_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.network_access_conditions_for_policy_set_info": {
    "doc": {
      "description": "Get all Network Access Conditions For Policy Set.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Network Access Conditions For Policy Set",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Network Access Conditions For Policy Set\n  cisco.ise.network_access_conditions_for_policy_set_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.network_access_conditions_info": {
    "doc": {
      "description": "Get all Network Access Conditions.\nGet Network Access Conditions by id.\nGet Network Access Conditions by name.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "id": {
          "aliases": [],
          "description": "Id path parameter. Condition id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name path parameter. Condition name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Network Access Conditions",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Network Access Conditions\n  cisco.ise.network_access_conditions_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n- name: Get Network Access Conditions by id\n  cisco.ise.network_access_conditions_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n- name: Get Network Access Conditions by name\n  cisco.ise.network_access_conditions_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    name: string\n  register: result\n\n"
  },
  "cisco.ise.network_access_dictionary": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Network Access Dictionary.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "description": {
          "aliases": [],
          "description": "The description of the Dictionary.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dictionaryAttrType": {
          "aliases": [],
          "description": "The dictionary attribute type.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Identifier for the dictionary.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "link": {
          "aliases": [],
          "description": "Network Access Dictionary's link.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "href": {
              "aliases": [],
              "description": "Network Access Dictionary's href.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "rel": {
              "aliases": [],
              "description": "Network Access Dictionary's rel.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "Network Access Dictionary's type.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "The dictionary name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "version": {
          "aliases": [],
          "description": "The dictionary version.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Network Access Dictionary",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.network_access_dictionary:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    description: string\n    dictionaryAttrType: string\n    id: string\n    link:\n      href: string\n      rel: string\n      type: string\n    name: string\n    version: string\n\n- name: Update by name\n  cisco.ise.network_access_dictionary:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    description: string\n    dictionaryAttrType: string\n    id: string\n    link:\n      href: string\n      rel: string\n      type: string\n    name: string\n    version: string\n\n- name: Delete by name\n  cisco.ise.network_access_dictionary:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    name: string\n\n"
  },
  "cisco.ise.network_access_dictionary_attribute": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Network Access Dictionary Attribute.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "allowedValues": {
          "aliases": [],
          "description": "All of the allowed values for the dictionary attribute.",
          "type": "list",
          "required": false,
          "suboptions": {
            "isDefault": {
              "aliases": [],
              "description": "True if this key value is the default between the allowed values of the dictionary attribute.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "key": {
              "aliases": [],
              "description": "Network Access Dictionary Attribute's key.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "value": {
              "aliases": [],
              "description": "Network Access Dictionary Attribute's value.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "dataType": {
          "aliases": [],
          "description": "The data type for the dictionary attribute.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "The description of the Dictionary attribute.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dictionaryName": {
          "aliases": [],
          "description": "The name of the dictionary which the dictionary attribute belongs to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "directionType": {
          "aliases": [],
          "description": "The direction for the useage of the dictionary attribute.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Identifier for the dictionary attribute.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internalName": {
          "aliases": [],
          "description": "The internal name of the dictionary attribute.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The dictionary attribute's name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Network Access Dictionary Attribute",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.network_access_dictionary_attribute:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    allowedValues:\n    - isDefault: true\n      key: string\n      value: string\n    dataType: string\n    description: string\n    dictionaryName: string\n    directionType: string\n    id: string\n    internalName: string\n    name: string\n\n- name: Update by name\n  cisco.ise.network_access_dictionary_attribute:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    allowedValues:\n    - isDefault: true\n      key: string\n      value: string\n    dataType: string\n    description: string\n    dictionaryName: string\n    directionType: string\n    id: string\n    internalName: string\n    name: string\n\n- name: Delete by name\n  cisco.ise.network_access_dictionary_attribute:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    dictionaryName: string\n    name: string\n\n"
  },
  "cisco.ise.network_access_dictionary_attribute_info": {
    "doc": {
      "description": "Get all Network Access Dictionary Attribute.\nGet Network Access Dictionary Attribute by name.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "dictionaryName": {
          "aliases": [],
          "description": "DictionaryName path parameter. The name of the dictionary the dictionary attribute belongs to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name path parameter. The dictionary attribute name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Network Access Dictionary Attribute",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Network Access Dictionary Attribute\n  cisco.ise.network_access_dictionary_attribute_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    dictionaryName: string\n  register: result\n\n- name: Get Network Access Dictionary Attribute by name\n  cisco.ise.network_access_dictionary_attribute_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    name: string\n    dictionaryName: string\n  register: result\n\n"
  },
  "cisco.ise.network_access_dictionary_attributes_authentication_info": {
    "doc": {
      "description": "Get all Network Access Dictionary Attributes Authentication.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Network Access Dictionary Attributes Authentication",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Network Access Dictionary Attributes Authentication\n  cisco.ise.network_access_dictionary_attributes_authentication_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.network_access_dictionary_attributes_authorization_info": {
    "doc": {
      "description": "Get all Network Access Dictionary Attributes Authorization.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Network Access Dictionary Attributes Authorization",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Network Access Dictionary Attributes Authorization\n  cisco.ise.network_access_dictionary_attributes_authorization_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.network_access_dictionary_attributes_policy_set_info": {
    "doc": {
      "description": "Get all Network Access Dictionary Attributes Policy Set.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Network Access Dictionary Attributes Policy Set",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Network Access Dictionary Attributes Policy Set\n  cisco.ise.network_access_dictionary_attributes_policy_set_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.network_access_dictionary_info": {
    "doc": {
      "description": "Get all Network Access Dictionary.\nGet Network Access Dictionary by name.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name path parameter. The dictionary name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Network Access Dictionary",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Network Access Dictionary\n  cisco.ise.network_access_dictionary_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n- name: Get Network Access Dictionary by name\n  cisco.ise.network_access_dictionary_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    name: string\n  register: result\n\n"
  },
  "cisco.ise.network_access_global_exception_rules": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Network Access Global Exception Rules.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "id": {
          "aliases": [],
          "description": "Id path parameter. Rule id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "link": {
          "aliases": [],
          "description": "Network Access Global Exception Rules's link.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "href": {
              "aliases": [],
              "description": "Network Access Global Exception Rules's href.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "rel": {
              "aliases": [],
              "description": "Network Access Global Exception Rules's rel.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "Network Access Global Exception Rules's type.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "profile": {
          "aliases": [],
          "description": "The authorization profile/s.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "rule": {
          "aliases": [],
          "description": "Common attributes in rule authentication/authorization.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "condition": {
              "aliases": [],
              "description": "Network Access Global Exception Rules's condition.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "attributeId": {
                  "aliases": [],
                  "description": "Dictionary attribute id (Optional), used for additional verification.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "attributeName": {
                  "aliases": [],
                  "description": "Dictionary attribute name.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "attributeValue": {
                  "aliases": [],
                  "description": "<ul><li>Attribute value for condition</li> <li>Value type is specified in dictionary object</li> <li>if multiple values allowed is specified in dictionary object</li></ul>.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "children": {
                  "aliases": [],
                  "description": "In case type is andBlock or orBlock addtional conditions will be aggregated under this logical (OR/AND) condition.",
                  "type": "list",
                  "required": false,
                  "suboptions": {
                    "conditionType": {
                      "aliases": [],
                      "description": "<ul><li>Inidicates whether the record is the condition itself(data) or a logical(or,and) aggregation</li> <li>Data type enum(reference,single) indicates than \"conditonId\" OR \"ConditionAttrs\" fields should contain condition data but not both</li> <li>Logical aggreation(and,or) enum indicates that additional conditions are present under the children field</li></ul>.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "isNegate": {
                      "aliases": [],
                      "description": "Indicates whereas this condition is in negate mode.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "link": {
                      "aliases": [],
                      "description": "Network Access Global Exception Rules's link.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "href": {
                          "aliases": [],
                          "description": "Network Access Global Exception Rules's href.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        },
                        "rel": {
                          "aliases": [],
                          "description": "Network Access Global Exception Rules's rel.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        },
                        "type": {
                          "aliases": [],
                          "description": "Network Access Global Exception Rules's type.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    }
                  }
                },
                "conditionType": {
                  "aliases": [],
                  "description": "<ul><li>Inidicates whether the record is the condition itself(data) or a logical(or,and) aggregation</li> <li>Data type enum(reference,single) indicates than \"conditonId\" OR \"ConditionAttrs\" fields should contain condition data but not both</li> <li>Logical aggreation(and,or) enum indicates that additional conditions are present under the children field</li></ul>.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "datesRange": {
                  "aliases": [],
                  "description": "<p>Defines for which date/s TimeAndDate condition will be matched or NOT matched if used in exceptionDates prooperty<br> Options are - Date range, for specific date, the same date should be used for start/end date <br> Default - no specific dates<br> In order to reset the dates to have no specific dates Date format - yyyy-mm-dd (MM = month, dd = day, yyyy = year)</p>.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "endDate": {
                      "aliases": [],
                      "description": "Network Access Global Exception Rules's endDate.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "startDate": {
                      "aliases": [],
                      "description": "Network Access Global Exception Rules's startDate.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "datesRangeException": {
                  "aliases": [],
                  "description": "<p>Defines for which date/s TimeAndDate condition will be matched or NOT matched if used in exceptionDates prooperty<br> Options are - Date range, for specific date, the same date should be used for start/end date <br> Default - no specific dates<br> In order to reset the dates to have no specific dates Date format - yyyy-mm-dd (MM = month, dd = day, yyyy = year)</p>.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "endDate": {
                      "aliases": [],
                      "description": "Network Access Global Exception Rules's endDate.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "startDate": {
                      "aliases": [],
                      "description": "Network Access Global Exception Rules's startDate.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "description": {
                  "aliases": [],
                  "description": "Condition description.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "dictionaryName": {
                  "aliases": [],
                  "description": "Dictionary name.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "dictionaryValue": {
                  "aliases": [],
                  "description": "Dictionary value.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "hoursRange": {
                  "aliases": [],
                  "description": "<p>Defines for which hours a TimeAndDate condition will be matched or not matched if used in exceptionHours property<br> Time foramt - hh mm ( h = hour , mm = minutes ) <br> Default - All Day </p>.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "endTime": {
                      "aliases": [],
                      "description": "Network Access Global Exception Rules's endTime.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "startTime": {
                      "aliases": [],
                      "description": "Network Access Global Exception Rules's startTime.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "hoursRangeException": {
                  "aliases": [],
                  "description": "<p>Defines for which hours a TimeAndDate condition will be matched or not matched if used in exceptionHours property<br> Time foramt - hh mm ( h = hour , mm = minutes ) <br> Default - All Day </p>.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "endTime": {
                      "aliases": [],
                      "description": "Network Access Global Exception Rules's endTime.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "startTime": {
                      "aliases": [],
                      "description": "Network Access Global Exception Rules's startTime.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "id": {
                  "aliases": [],
                  "description": "Network Access Global Exception Rules's id.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "isNegate": {
                  "aliases": [],
                  "description": "Indicates whereas this condition is in negate mode.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "link": {
                  "aliases": [],
                  "description": "Network Access Global Exception Rules's link.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "href": {
                      "aliases": [],
                      "description": "Network Access Global Exception Rules's href.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "rel": {
                      "aliases": [],
                      "description": "Network Access Global Exception Rules's rel.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "type": {
                      "aliases": [],
                      "description": "Network Access Global Exception Rules's type.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "name": {
                  "aliases": [],
                  "description": "Condition name.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "operator": {
                  "aliases": [],
                  "description": "Equality operator.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "weekDays": {
                  "aliases": [],
                  "description": "<p>Defines for which days this condition will be matched<br> Days format - Arrays of WeekDay enums <br> Default - List of All week days</p>.",
                  "type": "list",
                  "required": false,
                  "elements": "str",
                  "suboptions": {}
                },
                "weekDaysException": {
                  "aliases": [],
                  "description": "<p>Defines for which days this condition will NOT be matched<br> Days format - Arrays of WeekDay enums <br> Default - Not enabled</p>.",
                  "type": "list",
                  "required": false,
                  "elements": "str",
                  "suboptions": {}
                }
              }
            },
            "default": {
              "aliases": [],
              "description": "Indicates if this rule is the default one.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "hitCounts": {
              "aliases": [],
              "description": "The amount of times the rule was matched.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "id": {
              "aliases": [],
              "description": "The identifier of the rule.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Rule name, Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "rank": {
              "aliases": [],
              "description": "The rank(priority) in relation to other rules. Lower rank is higher priority.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "state": {
              "aliases": [],
              "description": "The state that the rule is in. A disabled rule cannot be matched.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "securityGroup": {
          "aliases": [],
          "description": "Security group used in authorization policies.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Network Access Global Exception Rules",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.network_access_global_exception_rules:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    link:\n      href: string\n      rel: string\n      type: string\n    profile:\n    - string\n    rule:\n      condition:\n        attributeId: string\n        attributeName: string\n        attributeValue: string\n        children:\n        - conditionType: string\n          isNegate: true\n          link:\n            href: string\n            rel: string\n            type: string\n        conditionType: string\n        datesRange:\n          endDate: string\n          startDate: string\n        datesRangeException:\n          endDate: string\n          startDate: string\n        description: string\n        dictionaryName: string\n        dictionaryValue: string\n        hoursRange:\n          endTime: string\n          startTime: string\n        hoursRangeException:\n          endTime: string\n          startTime: string\n        id: string\n        isNegate: true\n        link:\n          href: string\n          rel: string\n          type: string\n        name: string\n        operator: string\n        weekDays:\n        - string\n        weekDaysException:\n        - string\n      default: true\n      hitCounts: 0\n      id: string\n      name: string\n      rank: 0\n      state: string\n    securityGroup: string\n\n- name: Update by id\n  cisco.ise.network_access_global_exception_rules:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    id: string\n    link:\n      href: string\n      rel: string\n      type: string\n    profile:\n    - string\n    rule:\n      condition:\n        attributeId: string\n        attributeName: string\n        attributeValue: string\n        children:\n        - conditionType: string\n          isNegate: true\n          link:\n            href: string\n            rel: string\n            type: string\n        conditionType: string\n        datesRange:\n          endDate: string\n          startDate: string\n        datesRangeException:\n          endDate: string\n          startDate: string\n        description: string\n        dictionaryName: string\n        dictionaryValue: string\n        hoursRange:\n          endTime: string\n          startTime: string\n        hoursRangeException:\n          endTime: string\n          startTime: string\n        id: string\n        isNegate: true\n        link:\n          href: string\n          rel: string\n          type: string\n        name: string\n        operator: string\n        weekDays:\n        - string\n        weekDaysException:\n        - string\n      default: true\n      hitCounts: 0\n      id: string\n      name: string\n      rank: 0\n      state: string\n    securityGroup: string\n\n- name: Delete by id\n  cisco.ise.network_access_global_exception_rules:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n"
  },
  "cisco.ise.network_access_global_exception_rules_info": {
    "doc": {
      "description": "Get all Network Access Global Exception Rules.\nGet Network Access Global Exception Rules by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "id": {
          "aliases": [],
          "description": "Id path parameter. Rule id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Network Access Global Exception Rules",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Network Access Global Exception Rules\n  cisco.ise.network_access_global_exception_rules_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n- name: Get Network Access Global Exception Rules by id\n  cisco.ise.network_access_global_exception_rules_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.network_access_global_exception_rules_reset_hitcount": {
    "doc": {
      "description": "Manage operation create of the resource Network Access Global Exception Rules Reset Hitcount.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Network Access Global Exception Rules Reset Hitcount",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.network_access_global_exception_rules_reset_hitcount:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n\n"
  },
  "cisco.ise.network_access_identity_stores_info": {
    "doc": {
      "description": "Get all Network Access Identity Stores.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Network Access Identity Stores",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Network Access Identity Stores\n  cisco.ise.network_access_identity_stores_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.network_access_local_exception_rules": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Network Access Local Exception Rules.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "id": {
          "aliases": [],
          "description": "Id path parameter. Rule id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "link": {
          "aliases": [],
          "description": "Network Access Local Exception Rules's link.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "href": {
              "aliases": [],
              "description": "Network Access Local Exception Rules's href.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "rel": {
              "aliases": [],
              "description": "Network Access Local Exception Rules's rel.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "Network Access Local Exception Rules's type.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "policyId": {
          "aliases": [],
          "description": "PolicyId path parameter. Policy id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "profile": {
          "aliases": [],
          "description": "The authorization profile/s.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "rule": {
          "aliases": [],
          "description": "Common attributes in rule authentication/authorization.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "condition": {
              "aliases": [],
              "description": "Network Access Local Exception Rules's condition.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "attributeId": {
                  "aliases": [],
                  "description": "Dictionary attribute id (Optional), used for additional verification.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "attributeName": {
                  "aliases": [],
                  "description": "Dictionary attribute name.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "attributeValue": {
                  "aliases": [],
                  "description": "<ul><li>Attribute value for condition</li> <li>Value type is specified in dictionary object</li> <li>if multiple values allowed is specified in dictionary object</li></ul>.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "children": {
                  "aliases": [],
                  "description": "In case type is andBlock or orBlock addtional conditions will be aggregated under this logical (OR/AND) condition.",
                  "type": "list",
                  "required": false,
                  "suboptions": {
                    "conditionType": {
                      "aliases": [],
                      "description": "<ul><li>Inidicates whether the record is the condition itself(data) or a logical(or,and) aggregation</li> <li>Data type enum(reference,single) indicates than \"conditonId\" OR \"ConditionAttrs\" fields should contain condition data but not both</li> <li>Logical aggreation(and,or) enum indicates that additional conditions are present under the children field</li></ul>.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "isNegate": {
                      "aliases": [],
                      "description": "Indicates whereas this condition is in negate mode.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "link": {
                      "aliases": [],
                      "description": "Network Access Local Exception Rules's link.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "href": {
                          "aliases": [],
                          "description": "Network Access Local Exception Rules's href.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        },
                        "rel": {
                          "aliases": [],
                          "description": "Network Access Local Exception Rules's rel.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        },
                        "type": {
                          "aliases": [],
                          "description": "Network Access Local Exception Rules's type.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    }
                  }
                },
                "conditionType": {
                  "aliases": [],
                  "description": "<ul><li>Inidicates whether the record is the condition itself(data) or a logical(or,and) aggregation</li> <li>Data type enum(reference,single) indicates than \"conditonId\" OR \"ConditionAttrs\" fields should contain condition data but not both</li> <li>Logical aggreation(and,or) enum indicates that additional conditions are present under the children field</li></ul>.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "datesRange": {
                  "aliases": [],
                  "description": "<p>Defines for which date/s TimeAndDate condition will be matched or NOT matched if used in exceptionDates prooperty<br> Options are - Date range, for specific date, the same date should be used for start/end date <br> Default - no specific dates<br> In order to reset the dates to have no specific dates Date format - yyyy-mm-dd (MM = month, dd = day, yyyy = year)</p>.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "endDate": {
                      "aliases": [],
                      "description": "Network Access Local Exception Rules's endDate.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "startDate": {
                      "aliases": [],
                      "description": "Network Access Local Exception Rules's startDate.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "datesRangeException": {
                  "aliases": [],
                  "description": "<p>Defines for which date/s TimeAndDate condition will be matched or NOT matched if used in exceptionDates prooperty<br> Options are - Date range, for specific date, the same date should be used for start/end date <br> Default - no specific dates<br> In order to reset the dates to have no specific dates Date format - yyyy-mm-dd (MM = month, dd = day, yyyy = year)</p>.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "endDate": {
                      "aliases": [],
                      "description": "Network Access Local Exception Rules's endDate.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "startDate": {
                      "aliases": [],
                      "description": "Network Access Local Exception Rules's startDate.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "description": {
                  "aliases": [],
                  "description": "Condition description.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "dictionaryName": {
                  "aliases": [],
                  "description": "Dictionary name.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "dictionaryValue": {
                  "aliases": [],
                  "description": "Dictionary value.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "hoursRange": {
                  "aliases": [],
                  "description": "<p>Defines for which hours a TimeAndDate condition will be matched or not matched if used in exceptionHours property<br> Time foramt - hh mm ( h = hour , mm = minutes ) <br> Default - All Day </p>.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "endTime": {
                      "aliases": [],
                      "description": "Network Access Local Exception Rules's endTime.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "startTime": {
                      "aliases": [],
                      "description": "Network Access Local Exception Rules's startTime.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "hoursRangeException": {
                  "aliases": [],
                  "description": "<p>Defines for which hours a TimeAndDate condition will be matched or not matched if used in exceptionHours property<br> Time foramt - hh mm ( h = hour , mm = minutes ) <br> Default - All Day </p>.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "endTime": {
                      "aliases": [],
                      "description": "Network Access Local Exception Rules's endTime.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "startTime": {
                      "aliases": [],
                      "description": "Network Access Local Exception Rules's startTime.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "id": {
                  "aliases": [],
                  "description": "Network Access Local Exception Rules's id.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "isNegate": {
                  "aliases": [],
                  "description": "Indicates whereas this condition is in negate mode.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "link": {
                  "aliases": [],
                  "description": "Network Access Local Exception Rules's link.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "href": {
                      "aliases": [],
                      "description": "Network Access Local Exception Rules's href.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "rel": {
                      "aliases": [],
                      "description": "Network Access Local Exception Rules's rel.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "type": {
                      "aliases": [],
                      "description": "Network Access Local Exception Rules's type.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "name": {
                  "aliases": [],
                  "description": "Condition name.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "operator": {
                  "aliases": [],
                  "description": "Equality operator.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "weekDays": {
                  "aliases": [],
                  "description": "<p>Defines for which days this condition will be matched<br> Days format - Arrays of WeekDay enums <br> Default - List of All week days</p>.",
                  "type": "list",
                  "required": false,
                  "elements": "str",
                  "suboptions": {}
                },
                "weekDaysException": {
                  "aliases": [],
                  "description": "<p>Defines for which days this condition will NOT be matched<br> Days format - Arrays of WeekDay enums <br> Default - Not enabled</p>.",
                  "type": "list",
                  "required": false,
                  "elements": "str",
                  "suboptions": {}
                }
              }
            },
            "default": {
              "aliases": [],
              "description": "Indicates if this rule is the default one.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "hitCounts": {
              "aliases": [],
              "description": "The amount of times the rule was matched.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "id": {
              "aliases": [],
              "description": "The identifier of the rule.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Rule name, Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "rank": {
              "aliases": [],
              "description": "The rank(priority) in relation to other rules. Lower rank is higher priority.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "state": {
              "aliases": [],
              "description": "The state that the rule is in. A disabled rule cannot be matched.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "securityGroup": {
          "aliases": [],
          "description": "Security group used in authorization policies.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Network Access Local Exception Rules",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.network_access_local_exception_rules:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    link:\n      href: string\n      rel: string\n      type: string\n    profile:\n    - string\n    rule:\n      condition:\n        attributeId: string\n        attributeName: string\n        attributeValue: string\n        children:\n        - conditionType: string\n          isNegate: true\n          link:\n            href: string\n            rel: string\n            type: string\n        conditionType: string\n        datesRange:\n          endDate: string\n          startDate: string\n        datesRangeException:\n          endDate: string\n          startDate: string\n        description: string\n        dictionaryName: string\n        dictionaryValue: string\n        hoursRange:\n          endTime: string\n          startTime: string\n        hoursRangeException:\n          endTime: string\n          startTime: string\n        id: string\n        isNegate: true\n        link:\n          href: string\n          rel: string\n          type: string\n        name: string\n        operator: string\n        weekDays:\n        - string\n        weekDaysException:\n        - string\n      default: true\n      hitCounts: 0\n      id: string\n      name: string\n      rank: 0\n      state: string\n    securityGroup: string\n\n- name: Update by id\n  cisco.ise.network_access_local_exception_rules:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    id: string\n    link:\n      href: string\n      rel: string\n      type: string\n    policyId: string\n    profile:\n    - string\n    rule:\n      condition:\n        attributeId: string\n        attributeName: string\n        attributeValue: string\n        children:\n        - conditionType: string\n          isNegate: true\n          link:\n            href: string\n            rel: string\n            type: string\n        conditionType: string\n        datesRange:\n          endDate: string\n          startDate: string\n        datesRangeException:\n          endDate: string\n          startDate: string\n        description: string\n        dictionaryName: string\n        dictionaryValue: string\n        hoursRange:\n          endTime: string\n          startTime: string\n        hoursRangeException:\n          endTime: string\n          startTime: string\n        id: string\n        isNegate: true\n        link:\n          href: string\n          rel: string\n          type: string\n        name: string\n        operator: string\n        weekDays:\n        - string\n        weekDaysException:\n        - string\n      default: true\n      hitCounts: 0\n      id: string\n      name: string\n      rank: 0\n      state: string\n    securityGroup: string\n\n- name: Delete by id\n  cisco.ise.network_access_local_exception_rules:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n    policyId: string\n\n"
  },
  "cisco.ise.network_access_local_exception_rules_info": {
    "doc": {
      "description": "Get all Network Access Local Exception Rules.\nGet Network Access Local Exception Rules by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "id": {
          "aliases": [],
          "description": "Id path parameter. Rule id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "policyId": {
          "aliases": [],
          "description": "PolicyId path parameter. Policy id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Network Access Local Exception Rules",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Network Access Local Exception Rules\n  cisco.ise.network_access_local_exception_rules_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    policyId: string\n  register: result\n\n- name: Get Network Access Local Exception Rules by id\n  cisco.ise.network_access_local_exception_rules_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    policyId: string\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.network_access_local_exception_rules_reset_hitcounts": {
    "doc": {
      "description": "Manage operation create of the resource Network Access Local Exception Rules Reset Hitcounts.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Network Access Local Exception Rules Reset Hitcounts",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.network_access_local_exception_rules_reset_hitcounts:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n\n"
  },
  "cisco.ise.network_access_network_condition": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Network Access Network Condition.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "conditionType": {
          "aliases": [],
          "description": "This field determines the content of the conditions field.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "conditions": {
          "aliases": [],
          "description": "Network Access Network Condition's conditions.",
          "type": "list",
          "required": false,
          "suboptions": {
            "cliDnisList": {
              "aliases": [],
              "description": "<p>This field should contain a Caller ID (CLI), comma, and Called ID (DNIS).<br> Line format - Caller ID (CLI), Called ID (DNIS)</p>.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "deviceGroupList": {
              "aliases": [],
              "description": "<p>This field should contain a tuple with NDG Root, comma, and an NDG (that it under the root).<br> Line format - NDG Root Name, NDG, Port</p>.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "deviceList": {
              "aliases": [],
              "description": "<p>This field should contain Device-Name,port-number. The device name must be the same as the name field in a Network Device object.<br> Line format - Device Name,Port</p>.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "ipAddrList": {
              "aliases": [],
              "description": "<p>This field should contain IP-address-or-subnet,port number<br> IP address can be IPV4 format (n.n.n.n) or IPV6 format (n n n n n n n n).<br> IP subnet can be IPV4 format (n.n.n.n/m) or IPV6 format (n n n n n n n n/m).<br> Line format - IP Address or subnet,Port</p>.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "macAddrList": {
              "aliases": [],
              "description": "<p>This field should contain Endstation MAC address, comma, and Destination MAC addresses.<br> Each Max address must include twelve hexadecimal digits using formats nn nn nn nn nn nn or nn-nn-nn-nn-nn-nn or nnnn.nnnn.nnnn or nnnnnnnnnnnn.<br> Line format - Endstation MAC,Destination MAC </p>.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            }
          }
        },
        "description": {
          "aliases": [],
          "description": "Network Access Network Condition's description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Network Access Network Condition's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "link": {
          "aliases": [],
          "description": "Network Access Network Condition's link.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "href": {
              "aliases": [],
              "description": "Network Access Network Condition's href.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "rel": {
              "aliases": [],
              "description": "Network Access Network Condition's rel.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "Network Access Network Condition's type.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "Network Condition name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Network Access Network Condition",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.network_access_network_condition:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    conditionType: string\n    conditions:\n    - cliDnisList:\n      - string\n      deviceGroupList:\n      - string\n      deviceList:\n      - string\n      ipAddrList:\n      - string\n      macAddrList:\n      - string\n    description: string\n    id: string\n    link:\n      href: string\n      rel: string\n      type: string\n    name: string\n\n- name: Update by id\n  cisco.ise.network_access_network_condition:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    conditionType: string\n    conditions:\n    - cliDnisList:\n      - string\n      deviceGroupList:\n      - string\n      deviceList:\n      - string\n      ipAddrList:\n      - string\n      macAddrList:\n      - string\n    description: string\n    id: string\n    link:\n      href: string\n      rel: string\n      type: string\n    name: string\n\n- name: Delete by id\n  cisco.ise.network_access_network_condition:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n"
  },
  "cisco.ise.network_access_network_condition_info": {
    "doc": {
      "description": "Get all Network Access Network Condition.\nGet Network Access Network Condition by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "id": {
          "aliases": [],
          "description": "Id path parameter. Condition id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Network Access Network Condition",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Network Access Network Condition\n  cisco.ise.network_access_network_condition_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n- name: Get Network Access Network Condition by id\n  cisco.ise.network_access_network_condition_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.network_access_policy_set": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Network Access Policy Set.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "condition": {
          "aliases": [],
          "description": "Network Access Policy Set's condition.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "attributeId": {
              "aliases": [],
              "description": "Dictionary attribute id (Optional), used for additional verification.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "attributeName": {
              "aliases": [],
              "description": "Dictionary attribute name.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "attributeValue": {
              "aliases": [],
              "description": "<ul><li>Attribute value for condition</li> <li>Value type is specified in dictionary object</li> <li>if multiple values allowed is specified in dictionary object</li></ul>.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "children": {
              "aliases": [],
              "description": "In case type is andBlock or orBlock addtional conditions will be aggregated under this logical (OR/AND) condition.",
              "type": "list",
              "required": false,
              "suboptions": {
                "conditionType": {
                  "aliases": [],
                  "description": "<ul><li>Inidicates whether the record is the condition itself(data) or a logical(or,and) aggregation</li> <li>Data type enum(reference,single) indicates than \"conditonId\" OR \"ConditionAttrs\" fields should contain condition data but not both</li> <li>Logical aggreation(and,or) enum indicates that additional conditions are present under the children field</li></ul>.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "isNegate": {
                  "aliases": [],
                  "description": "Indicates whereas this condition is in negate mode.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "link": {
                  "aliases": [],
                  "description": "Network Access Policy Set's link.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "href": {
                      "aliases": [],
                      "description": "Network Access Policy Set's href.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "rel": {
                      "aliases": [],
                      "description": "Network Access Policy Set's rel.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "type": {
                      "aliases": [],
                      "description": "Network Access Policy Set's type.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                }
              }
            },
            "conditionType": {
              "aliases": [],
              "description": "<ul><li>Inidicates whether the record is the condition itself(data) or a logical(or,and) aggregation</li> <li>Data type enum(reference,single) indicates than \"conditonId\" OR \"ConditionAttrs\" fields should contain condition data but not both</li> <li>Logical aggreation(and,or) enum indicates that additional conditions are present under the children field</li></ul>.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "datesRange": {
              "aliases": [],
              "description": "<p>Defines for which date/s TimeAndDate condition will be matched or NOT matched if used in exceptionDates prooperty<br> Options are - Date range, for specific date, the same date should be used for start/end date <br> Default - no specific dates<br> In order to reset the dates to have no specific dates Date format - yyyy-mm-dd (MM = month, dd = day, yyyy = year)</p>.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "endDate": {
                  "aliases": [],
                  "description": "Network Access Policy Set's endDate.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "startDate": {
                  "aliases": [],
                  "description": "Network Access Policy Set's startDate.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "datesRangeException": {
              "aliases": [],
              "description": "<p>Defines for which date/s TimeAndDate condition will be matched or NOT matched if used in exceptionDates prooperty<br> Options are - Date range, for specific date, the same date should be used for start/end date <br> Default - no specific dates<br> In order to reset the dates to have no specific dates Date format - yyyy-mm-dd (MM = month, dd = day, yyyy = year)</p>.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "endDate": {
                  "aliases": [],
                  "description": "Network Access Policy Set's endDate.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "startDate": {
                  "aliases": [],
                  "description": "Network Access Policy Set's startDate.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "description": {
              "aliases": [],
              "description": "Condition description.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "dictionaryName": {
              "aliases": [],
              "description": "Dictionary name.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "dictionaryValue": {
              "aliases": [],
              "description": "Dictionary value.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "hoursRange": {
              "aliases": [],
              "description": "<p>Defines for which hours a TimeAndDate condition will be matched or not matched if used in exceptionHours property<br> Time foramt - hh mm ( h = hour , mm = minutes ) <br> Default - All Day </p>.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "endTime": {
                  "aliases": [],
                  "description": "Network Access Policy Set's endTime.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "startTime": {
                  "aliases": [],
                  "description": "Network Access Policy Set's startTime.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "hoursRangeException": {
              "aliases": [],
              "description": "<p>Defines for which hours a TimeAndDate condition will be matched or not matched if used in exceptionHours property<br> Time foramt - hh mm ( h = hour , mm = minutes ) <br> Default - All Day </p>.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "endTime": {
                  "aliases": [],
                  "description": "Network Access Policy Set's endTime.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "startTime": {
                  "aliases": [],
                  "description": "Network Access Policy Set's startTime.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "id": {
              "aliases": [],
              "description": "Network Access Policy Set's id.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "isNegate": {
              "aliases": [],
              "description": "Indicates whereas this condition is in negate mode.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "link": {
              "aliases": [],
              "description": "Network Access Policy Set's link.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "href": {
                  "aliases": [],
                  "description": "Network Access Policy Set's href.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "rel": {
                  "aliases": [],
                  "description": "Network Access Policy Set's rel.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "type": {
                  "aliases": [],
                  "description": "Network Access Policy Set's type.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "name": {
              "aliases": [],
              "description": "Condition name.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "operator": {
              "aliases": [],
              "description": "Equality operator.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "weekDays": {
              "aliases": [],
              "description": "<p>Defines for which days this condition will be matched<br> Days format - Arrays of WeekDay enums <br> Default - List of All week days</p>.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "weekDaysException": {
              "aliases": [],
              "description": "<p>Defines for which days this condition will NOT be matched<br> Days format - Arrays of WeekDay enums <br> Default - Not enabled</p>.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            }
          }
        },
        "default": {
          "aliases": [],
          "description": "Flag which indicates if this policy set is the default one.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "The description for the policy set.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hitCounts": {
          "aliases": [],
          "description": "The amount of times the policy was matched.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Identifier for the policy set.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "isProxy": {
          "aliases": [],
          "description": "Flag which indicates if the policy set service is of type 'Proxy Sequence' or 'Allowed Protocols'.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "link": {
          "aliases": [],
          "description": "Network Access Policy Set's link.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "href": {
              "aliases": [],
              "description": "Network Access Policy Set's href.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "rel": {
              "aliases": [],
              "description": "Network Access Policy Set's rel.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "Network Access Policy Set's type.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "Given name for the policy set, Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "rank": {
          "aliases": [],
          "description": "The rank(priority) in relation to other policy set. Lower rank is higher priority.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "serviceName": {
          "aliases": [],
          "description": "Policy set service identifier - Allowed Protocols,Server Sequence..",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state_": {
          "aliases": [],
          "description": "The state that the policy set is in. A disabled policy set cannot be matched.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Network Access Policy Set",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.network_access_policy_set:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    condition:\n      attributeId: string\n      attributeName: string\n      attributeValue: string\n      children:\n      - conditionType: string\n        isNegate: true\n        link:\n          href: string\n          rel: string\n          type: string\n      conditionType: string\n      datesRange:\n        endDate: string\n        startDate: string\n      datesRangeException:\n        endDate: string\n        startDate: string\n      description: string\n      dictionaryName: string\n      dictionaryValue: string\n      hoursRange:\n        endTime: string\n        startTime: string\n      hoursRangeException:\n        endTime: string\n        startTime: string\n      id: string\n      isNegate: true\n      link:\n        href: string\n        rel: string\n        type: string\n      name: string\n      operator: string\n      weekDays:\n      - string\n      weekDaysException:\n      - string\n    default: true\n    description: string\n    hitCounts: 0\n    id: string\n    isProxy: true\n    link:\n      href: string\n      rel: string\n      type: string\n    name: string\n    rank: 0\n    serviceName: string\n    state_: string\n\n- name: Update by id\n  cisco.ise.network_access_policy_set:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    condition:\n      attributeId: string\n      attributeName: string\n      attributeValue: string\n      children:\n      - conditionType: string\n        isNegate: true\n        link:\n          href: string\n          rel: string\n          type: string\n      conditionType: string\n      datesRange:\n        endDate: string\n        startDate: string\n      datesRangeException:\n        endDate: string\n        startDate: string\n      description: string\n      dictionaryName: string\n      dictionaryValue: string\n      hoursRange:\n        endTime: string\n        startTime: string\n      hoursRangeException:\n        endTime: string\n        startTime: string\n      id: string\n      isNegate: true\n      link:\n        href: string\n        rel: string\n        type: string\n      name: string\n      operator: string\n      weekDays:\n      - string\n      weekDaysException:\n      - string\n    default: true\n    description: string\n    hitCounts: 0\n    id: string\n    isProxy: true\n    link:\n      href: string\n      rel: string\n      type: string\n    name: string\n    rank: 0\n    serviceName: string\n    state_: string\n\n- name: Delete by id\n  cisco.ise.network_access_policy_set:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n"
  },
  "cisco.ise.network_access_policy_set_info": {
    "doc": {
      "description": "Get all Network Access Policy Set.\nGet Network Access Policy Set by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "id": {
          "aliases": [],
          "description": "Id path parameter. Policy id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Network Access Policy Set",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Network Access Policy Set\n  cisco.ise.network_access_policy_set_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n- name: Get Network Access Policy Set by id\n  cisco.ise.network_access_policy_set_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.network_access_policy_set_reset_hitcount": {
    "doc": {
      "description": "Manage operation create of the resource Network Access Policy Set Reset Hitcount.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Network Access Policy Set Reset Hitcount",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.network_access_policy_set_reset_hitcount:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n\n"
  },
  "cisco.ise.network_access_profiles_info": {
    "doc": {
      "description": "Get all Network Access Profiles.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Network Access Profiles",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Network Access Profiles\n  cisco.ise.network_access_profiles_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.network_access_security_groups_info": {
    "doc": {
      "description": "Get all Network Access Security Groups.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Network Access Security Groups",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Network Access Security Groups\n  cisco.ise.network_access_security_groups_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.network_access_service_name_info": {
    "doc": {
      "description": "Get all Network Access Service Name.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Network Access Service Name",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Network Access Service Name\n  cisco.ise.network_access_service_name_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.network_access_time_date_conditions": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Network Access Time Date Conditions.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "attributeId": {
          "aliases": [],
          "description": "Dictionary attribute id (Optional), used for additional verification.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "attributeName": {
          "aliases": [],
          "description": "Dictionary attribute name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "attributeValue": {
          "aliases": [],
          "description": "<ul><li>Attribute value for condition</li> <li>Value type is specified in dictionary object</li> <li>if multiple values allowed is specified in dictionary object</li></ul>.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "children": {
          "aliases": [],
          "description": "In case type is andBlock or orBlock addtional conditions will be aggregated under this logical (OR/AND) condition.",
          "type": "list",
          "required": false,
          "suboptions": {
            "conditionType": {
              "aliases": [],
              "description": "<ul><li>Inidicates whether the record is the condition itself(data) or a logical(or,and) aggregation</li> <li>Data type enum(reference,single) indicates than \"conditonId\" OR \"ConditionAttrs\" fields should contain condition data but not both</li> <li>Logical aggreation(and,or) enum indicates that additional conditions are present under the children field</li></ul>.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "isNegate": {
              "aliases": [],
              "description": "Indicates whereas this condition is in negate mode.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "link": {
              "aliases": [],
              "description": "Network Access Time Date Conditions's link.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "href": {
                  "aliases": [],
                  "description": "Network Access Time Date Conditions's href.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "rel": {
                  "aliases": [],
                  "description": "Network Access Time Date Conditions's rel.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "type": {
                  "aliases": [],
                  "description": "Network Access Time Date Conditions's type.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        },
        "conditionType": {
          "aliases": [],
          "description": "<ul><li>Inidicates whether the record is the condition itself(data) or a logical(or,and) aggregation</li> <li>Data type enum(reference,single) indicates than \"conditonId\" OR \"ConditionAttrs\" fields should contain condition data but not both</li> <li>Logical aggreation(and,or) enum indicates that additional conditions are present under the children field</li></ul>.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "datesRange": {
          "aliases": [],
          "description": "<p>Defines for which date/s TimeAndDate condition will be matched or NOT matched if used in exceptionDates prooperty<br> Options are - Date range, for specific date, the same date should be used for start/end date <br> Default - no specific dates<br> In order to reset the dates to have no specific dates Date format - yyyy-mm-dd (MM = month, dd = day, yyyy = year)</p>.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "endDate": {
              "aliases": [],
              "description": "Network Access Time Date Conditions's endDate.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "startDate": {
              "aliases": [],
              "description": "Network Access Time Date Conditions's startDate.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "datesRangeException": {
          "aliases": [],
          "description": "<p>Defines for which date/s TimeAndDate condition will be matched or NOT matched if used in exceptionDates prooperty<br> Options are - Date range, for specific date, the same date should be used for start/end date <br> Default - no specific dates<br> In order to reset the dates to have no specific dates Date format - yyyy-mm-dd (MM = month, dd = day, yyyy = year)</p>.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "endDate": {
              "aliases": [],
              "description": "Network Access Time Date Conditions's endDate.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "startDate": {
              "aliases": [],
              "description": "Network Access Time Date Conditions's startDate.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "description": {
          "aliases": [],
          "description": "Condition description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dictionaryName": {
          "aliases": [],
          "description": "Dictionary name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dictionaryValue": {
          "aliases": [],
          "description": "Dictionary value.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hoursRange": {
          "aliases": [],
          "description": "<p>Defines for which hours a TimeAndDate condition will be matched or not matched if used in exceptionHours property<br> Time foramt - hh mm ( h = hour , mm = minutes ) <br> Default - All Day </p>.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "endTime": {
              "aliases": [],
              "description": "Network Access Time Date Conditions's endTime.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "startTime": {
              "aliases": [],
              "description": "Network Access Time Date Conditions's startTime.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "hoursRangeException": {
          "aliases": [],
          "description": "<p>Defines for which hours a TimeAndDate condition will be matched or not matched if used in exceptionHours property<br> Time foramt - hh mm ( h = hour , mm = minutes ) <br> Default - All Day </p>.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "endTime": {
              "aliases": [],
              "description": "Network Access Time Date Conditions's endTime.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "startTime": {
              "aliases": [],
              "description": "Network Access Time Date Conditions's startTime.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "id": {
          "aliases": [],
          "description": "Network Access Time Date Conditions's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "isNegate": {
          "aliases": [],
          "description": "Indicates whereas this condition is in negate mode.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "link": {
          "aliases": [],
          "description": "Network Access Time Date Conditions's link.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "href": {
              "aliases": [],
              "description": "Network Access Time Date Conditions's href.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "rel": {
              "aliases": [],
              "description": "Network Access Time Date Conditions's rel.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "Network Access Time Date Conditions's type.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "Condition name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "operator": {
          "aliases": [],
          "description": "Equality operator.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "weekDays": {
          "aliases": [],
          "description": "<p>Defines for which days this condition will be matched<br> Days format - Arrays of WeekDay enums <br> Default - List of All week days</p>.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "weekDaysException": {
          "aliases": [],
          "description": "<p>Defines for which days this condition will NOT be matched<br> Days format - Arrays of WeekDay enums <br> Default - Not enabled</p>.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Network Access Time Date Conditions",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.network_access_time_date_conditions:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    attributeId: string\n    attributeName: string\n    attributeValue: string\n    children:\n    - conditionType: string\n      isNegate: true\n      link:\n        href: string\n        rel: string\n        type: string\n    conditionType: string\n    datesRange:\n      endDate: string\n      startDate: string\n    datesRangeException:\n      endDate: string\n      startDate: string\n    description: string\n    dictionaryName: string\n    dictionaryValue: string\n    hoursRange:\n      endTime: string\n      startTime: string\n    hoursRangeException:\n      endTime: string\n      startTime: string\n    id: string\n    isNegate: true\n    link:\n      href: string\n      rel: string\n      type: string\n    name: string\n    operator: string\n    weekDays:\n    - string\n    weekDaysException:\n    - string\n\n- name: Update by id\n  cisco.ise.network_access_time_date_conditions:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    attributeId: string\n    attributeName: string\n    attributeValue: string\n    children:\n    - conditionType: string\n      isNegate: true\n      link:\n        href: string\n        rel: string\n        type: string\n    conditionType: string\n    datesRange:\n      endDate: string\n      startDate: string\n    datesRangeException:\n      endDate: string\n      startDate: string\n    description: string\n    dictionaryName: string\n    dictionaryValue: string\n    hoursRange:\n      endTime: string\n      startTime: string\n    hoursRangeException:\n      endTime: string\n      startTime: string\n    id: string\n    isNegate: true\n    link:\n      href: string\n      rel: string\n      type: string\n    name: string\n    operator: string\n    weekDays:\n    - string\n    weekDaysException:\n    - string\n\n- name: Delete by id\n  cisco.ise.network_access_time_date_conditions:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n"
  },
  "cisco.ise.network_access_time_date_conditions_info": {
    "doc": {
      "description": "Get all Network Access Time Date Conditions.\nGet Network Access Time Date Conditions by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "id": {
          "aliases": [],
          "description": "Id path parameter. Condition id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Network Access Time Date Conditions",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Network Access Time Date Conditions\n  cisco.ise.network_access_time_date_conditions_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n- name: Get Network Access Time Date Conditions by id\n  cisco.ise.network_access_time_date_conditions_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.network_device": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Network Device.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "NetworkDeviceGroupList": {
          "aliases": [],
          "description": "List of Network Device Group names for this node.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "NetworkDeviceIPList": {
          "aliases": [],
          "description": "List of IP Subnets for this node.",
          "type": "list",
          "required": false,
          "suboptions": {
            "getIpaddressExclude": {
              "aliases": [],
              "description": "It can be either single IP address or IP range address.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "ipaddress": {
              "aliases": [],
              "description": "Network Device's ipaddress.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "mask": {
              "aliases": [],
              "description": "Network Device's mask.",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "authenticationSettings": {
          "aliases": [],
          "description": "Network Device's authenticationSettings.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "dtlsRequired": {
              "aliases": [],
              "description": "This value enforces use of dtls.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "enableKeyWrap": {
              "aliases": [],
              "description": "EnableKeyWrap flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "enableMultiSecret": {
              "aliases": [],
              "description": "EnableMultiSecret flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "enabled": {
              "aliases": [],
              "description": "Enabled flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "keyEncryptionKey": {
              "aliases": [],
              "description": "Network Device's keyEncryptionKey.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "keyInputFormat": {
              "aliases": [],
              "description": "Allowed values - ASCII, - HEXADECIMAL.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "messageAuthenticatorCodeKey": {
              "aliases": [],
              "description": "Network Device's messageAuthenticatorCodeKey.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "networkProtocol": {
              "aliases": [],
              "description": "Allowed values - RADIUS, - TACACS_PLUS.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "radiusSharedSecret": {
              "aliases": [],
              "description": "Network Device's radiusSharedSecret.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "secondRadiusSharedSecret": {
              "aliases": [],
              "description": "Network Device's secondRadiusSharedSecret.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "coaPort": {
          "aliases": [],
          "description": "Network Device's coaPort.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Network Device's description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dtlsDnsName": {
          "aliases": [],
          "description": "This value is used to verify the client identity contained in the X.509 RADIUS/DTLS client certificate.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Network Device's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "modelName": {
          "aliases": [],
          "description": "Network Device's modelName.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Network Device's name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "profileName": {
          "aliases": [],
          "description": "Network Device's profileName.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "snmpsettings": {
          "aliases": [],
          "description": "Network Device's snmpsettings.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "linkTrapQuery": {
              "aliases": [],
              "description": "LinkTrapQuery flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "macTrapQuery": {
              "aliases": [],
              "description": "MacTrapQuery flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "originatingPolicyServicesNode": {
              "aliases": [],
              "description": "Network Device's originatingPolicyServicesNode.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "pollingInterval": {
              "aliases": [],
              "description": "Network Device's pollingInterval.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "roCommunity": {
              "aliases": [],
              "description": "Network Device's roCommunity.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "version": {
              "aliases": [],
              "description": "Network Device's version.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "softwareVersion": {
          "aliases": [],
          "description": "Network Device's softwareVersion.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tacacsSettings": {
          "aliases": [],
          "description": "Network Device's tacacsSettings.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "connectModeOptions": {
              "aliases": [],
              "description": "Allowed values - OFF, - ON_LEGACY, - ON_DRAFT_COMPLIANT.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "sharedSecret": {
              "aliases": [],
              "description": "Network Device's sharedSecret.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "trustsecsettings": {
          "aliases": [],
          "description": "Network Device's trustsecsettings.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "deviceAuthenticationSettings": {
              "aliases": [],
              "description": "Network Device's deviceAuthenticationSettings.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "sgaDeviceId": {
                  "aliases": [],
                  "description": "Network Device's sgaDeviceId.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "sgaDevicePassword": {
                  "aliases": [],
                  "description": "Network Device's sgaDevicePassword.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "deviceConfigurationDeployment": {
              "aliases": [],
              "description": "Network Device's deviceConfigurationDeployment.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "enableModePassword": {
                  "aliases": [],
                  "description": "Network Device's enableModePassword.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "execModePassword": {
                  "aliases": [],
                  "description": "Network Device's execModePassword.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "execModeUsername": {
                  "aliases": [],
                  "description": "Network Device's execModeUsername.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "includeWhenDeployingSGTUpdates": {
                  "aliases": [],
                  "description": "IncludeWhenDeployingSGTUpdates flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "pushIdSupport": {
              "aliases": [],
              "description": "PushIdSupport flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "sgaNotificationAndUpdates": {
              "aliases": [],
              "description": "Network Device's sgaNotificationAndUpdates.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "coaSourceHost": {
                  "aliases": [],
                  "description": "Network Device's coaSourceHost.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "downlaodEnvironmentDataEveryXSeconds": {
                  "aliases": [],
                  "description": "Network Device's downlaodEnvironmentDataEveryXSeconds.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "downlaodPeerAuthorizationPolicyEveryXSeconds": {
                  "aliases": [],
                  "description": "Network Device's downlaodPeerAuthorizationPolicyEveryXSeconds.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "downloadSGACLListsEveryXSeconds": {
                  "aliases": [],
                  "description": "Network Device's downloadSGACLListsEveryXSeconds.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "otherSGADevicesToTrustThisDevice": {
                  "aliases": [],
                  "description": "OtherSGADevicesToTrustThisDevice flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "reAuthenticationEveryXSeconds": {
                  "aliases": [],
                  "description": "Network Device's reAuthenticationEveryXSeconds.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "sendConfigurationToDevice": {
                  "aliases": [],
                  "description": "SendConfigurationToDevice flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "sendConfigurationToDeviceUsing": {
                  "aliases": [],
                  "description": "Allowed values - ENABLE_USING_COA, - ENABLE_USING_CLI, - DISABLE_ALL.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Network Device",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by name\n  cisco.ise.network_device:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    NetworkDeviceGroupList:\n    - string\n    NetworkDeviceIPList:\n    - getIpaddressExclude: string\n      ipaddress: string\n      mask: 0\n    authenticationSettings:\n      dtlsRequired: true\n      enableKeyWrap: true\n      enableMultiSecret: true\n      enabled: true\n      keyEncryptionKey: string\n      keyInputFormat: string\n      messageAuthenticatorCodeKey: string\n      networkProtocol: string\n      radiusSharedSecret: string\n      secondRadiusSharedSecret: string\n    coaPort: 0\n    description: string\n    dtlsDnsName: string\n    id: string\n    modelName: string\n    name: string\n    profileName: string\n    snmpsettings:\n      linkTrapQuery: true\n      macTrapQuery: true\n      originatingPolicyServicesNode: string\n      pollingInterval: 0\n      roCommunity: string\n      version: string\n    softwareVersion: string\n    tacacsSettings:\n      connectModeOptions: string\n      sharedSecret: string\n    trustsecsettings:\n      deviceAuthenticationSettings:\n        sgaDeviceId: string\n        sgaDevicePassword: string\n      deviceConfigurationDeployment:\n        enableModePassword: string\n        execModePassword: string\n        execModeUsername: string\n        includeWhenDeployingSGTUpdates: true\n      pushIdSupport: true\n      sgaNotificationAndUpdates:\n        coaSourceHost: string\n        downlaodEnvironmentDataEveryXSeconds: 0\n        downlaodPeerAuthorizationPolicyEveryXSeconds: 0\n        downloadSGACLListsEveryXSeconds: 0\n        otherSGADevicesToTrustThisDevice: true\n        reAuthenticationEveryXSeconds: 0\n        sendConfigurationToDevice: true\n        sendConfigurationToDeviceUsing: string\n\n- name: Delete by name\n  cisco.ise.network_device:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    name: string\n\n- name: Update by id\n  cisco.ise.network_device:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    NetworkDeviceGroupList:\n    - string\n    NetworkDeviceIPList:\n    - getIpaddressExclude: string\n      ipaddress: string\n      mask: 0\n    authenticationSettings:\n      dtlsRequired: true\n      enableKeyWrap: true\n      enableMultiSecret: true\n      enabled: true\n      keyEncryptionKey: string\n      keyInputFormat: string\n      messageAuthenticatorCodeKey: string\n      networkProtocol: string\n      radiusSharedSecret: string\n      secondRadiusSharedSecret: string\n    coaPort: 0\n    description: string\n    dtlsDnsName: string\n    id: string\n    modelName: string\n    name: string\n    profileName: string\n    snmpsettings:\n      linkTrapQuery: true\n      macTrapQuery: true\n      originatingPolicyServicesNode: string\n      pollingInterval: 0\n      roCommunity: string\n      version: string\n    softwareVersion: string\n    tacacsSettings:\n      connectModeOptions: string\n      sharedSecret: string\n    trustsecsettings:\n      deviceAuthenticationSettings:\n        sgaDeviceId: string\n        sgaDevicePassword: string\n      deviceConfigurationDeployment:\n        enableModePassword: string\n        execModePassword: string\n        execModeUsername: string\n        includeWhenDeployingSGTUpdates: true\n      pushIdSupport: true\n      sgaNotificationAndUpdates:\n        coaSourceHost: string\n        downlaodEnvironmentDataEveryXSeconds: 0\n        downlaodPeerAuthorizationPolicyEveryXSeconds: 0\n        downloadSGACLListsEveryXSeconds: 0\n        otherSGADevicesToTrustThisDevice: true\n        reAuthenticationEveryXSeconds: 0\n        sendConfigurationToDevice: true\n        sendConfigurationToDeviceUsing: string\n\n- name: Delete by id\n  cisco.ise.network_device:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n- name: Create\n  cisco.ise.network_device:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    NetworkDeviceGroupList:\n    - string\n    NetworkDeviceIPList:\n    - getIpaddressExclude: string\n      ipaddress: string\n      mask: 0\n    authenticationSettings:\n      dtlsRequired: true\n      enableKeyWrap: true\n      enableMultiSecret: true\n      enabled: true\n      keyEncryptionKey: string\n      keyInputFormat: string\n      messageAuthenticatorCodeKey: string\n      networkProtocol: string\n      radiusSharedSecret: string\n      secondRadiusSharedSecret: string\n    coaPort: 0\n    description: string\n    dtlsDnsName: string\n    modelName: string\n    name: string\n    profileName: string\n    snmpsettings:\n      linkTrapQuery: true\n      macTrapQuery: true\n      originatingPolicyServicesNode: string\n      pollingInterval: 0\n      roCommunity: string\n      version: string\n    softwareVersion: string\n    tacacsSettings:\n      connectModeOptions: string\n      sharedSecret: string\n    trustsecsettings:\n      deviceAuthenticationSettings:\n        sgaDeviceId: string\n        sgaDevicePassword: string\n      deviceConfigurationDeployment:\n        enableModePassword: string\n        execModePassword: string\n        execModeUsername: string\n        includeWhenDeployingSGTUpdates: true\n      pushIdSupport: true\n      sgaNotificationAndUpdates:\n        coaSourceHost: string\n        downlaodEnvironmentDataEveryXSeconds: 0\n        downlaodPeerAuthorizationPolicyEveryXSeconds: 0\n        downloadSGACLListsEveryXSeconds: 0\n        otherSGADevicesToTrustThisDevice: true\n        reAuthenticationEveryXSeconds: 0\n        sendConfigurationToDevice: true\n        sendConfigurationToDeviceUsing: string\n\n"
  },
  "cisco.ise.network_device_bulk_monitor_status_info": {
    "doc": {
      "description": "Get Network Device Bulk Monitor Status by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "bulkid": {
          "aliases": [],
          "description": "Bulkid path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Network Device Bulk Monitor Status",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get Network Device Bulk Monitor Status by id\n  cisco.ise.network_device_bulk_monitor_status_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    bulkid: string\n  register: result\n\n"
  },
  "cisco.ise.network_device_bulk_request": {
    "doc": {
      "description": "Manage operation update of the resource Network Device Bulk Request.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "operationType": {
          "aliases": [],
          "description": "Network Device Bulk Request's operationType.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "resourceMediaType": {
          "aliases": [],
          "description": "Network Device Bulk Request's resourceMediaType.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Network Device Bulk Request",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update all\n  cisco.ise.network_device_bulk_request:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    operationType: string\n    resourceMediaType: string\n\n"
  },
  "cisco.ise.network_device_group": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Network Device Group.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "description": {
          "aliases": [],
          "description": "Network Device Group's description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Network Device Group's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Network Device Group's name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "othername": {
          "aliases": [],
          "description": "Network Device Group's othername.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Network Device Group",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.network_device_group:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    description: string\n    id: string\n    name: string\n    othername: string\n\n- name: Delete by id\n  cisco.ise.network_device_group:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n- name: Create\n  cisco.ise.network_device_group:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    description: string\n    name: string\n    othername: string\n\n"
  },
  "cisco.ise.network_device_group_info": {
    "doc": {
      "description": "Get all Network Device Group.\nGet Network Device Group by id.\nGet Network Device Group by name.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter query parameter. <br/> **Simple filtering** should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the \"filterType=or\" query string parameter. Each resource Data model description should specify if an attribute is a filtered field. <br/> Operator | Description <br/> ------------|----------------- <br/> EQ | Equals <br/> NEQ | Not Equals <br/> GT | Greater Than <br/> LT | Less Then <br/> STARTSW | Starts With <br/> NSTARTSW | Not Starts With <br/> ENDSW | Ends With <br/> NENDSW | Not Ends With <br/> CONTAINS | Contains <br/> NCONTAINS | Not Contains <br/>.\n",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "filterType": {
          "aliases": [],
          "description": "FilterType query parameter. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name path parameter. Colon is used as a separator instead of (#) in the NDG name. For example, if the name is a#b#c it should appear in the request URL as a b c.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sortasc": {
          "aliases": [],
          "description": "Sortasc query parameter. Sort asc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sortdsc": {
          "aliases": [],
          "description": "Sortdsc query parameter. Sort desc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Network Device Group",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Network Device Group\n  cisco.ise.network_device_group_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n    sortasc: string\n    sortdsc: string\n    filter: []\n    filterType: AND\n  register: result\n\n- name: Get Network Device Group by id\n  cisco.ise.network_device_group_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n- name: Get Network Device Group by name\n  cisco.ise.network_device_group_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    name: string\n  register: result\n\n"
  },
  "cisco.ise.network_device_info": {
    "doc": {
      "description": "Get all Network Device.\nGet Network Device by id.\nGet Network Device by name.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter query parameter. <br/> **Simple filtering** should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the \"filterType=or\" query string parameter. Each resource Data model description should specify if an attribute is a filtered field. <br/> Operator | Description <br/> ------------|----------------- <br/> EQ | Equals <br/> NEQ | Not Equals <br/> GT | Greater Than <br/> LT | Less Then <br/> STARTSW | Starts With <br/> NSTARTSW | Not Starts With <br/> ENDSW | Ends With <br/> NENDSW | Not Ends With <br/> CONTAINS | Contains <br/> NCONTAINS | Not Contains <br/>.\n",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "filterType": {
          "aliases": [],
          "description": "FilterType query parameter. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sortasc": {
          "aliases": [],
          "description": "Sortasc query parameter. Sort asc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sortdsc": {
          "aliases": [],
          "description": "Sortdsc query parameter. Sort desc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Network Device",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Network Device\n  cisco.ise.network_device_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n    sortasc: string\n    sortdsc: string\n    filter: []\n    filterType: AND\n  register: result\n\n- name: Get Network Device by id\n  cisco.ise.network_device_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n- name: Get Network Device by name\n  cisco.ise.network_device_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    name: string\n  register: result\n\n"
  },
  "cisco.ise.node_deployment": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Node Deployment.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "administration": {
          "aliases": [],
          "description": "Node Deployment's administration.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "isEnabled": {
              "aliases": [],
              "description": "IsEnabled flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "role": {
              "aliases": [],
              "description": "Node Deployment's role.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "fdqn": {
          "aliases": [],
          "description": "Node Deployment's fdqn.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "generalSettings": {
          "aliases": [],
          "description": "Node Deployment's generalSettings.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "monitoring": {
              "aliases": [],
              "description": "Node Deployment's monitoring.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "enablePXGrid": {
                  "aliases": [],
                  "description": "EnablePXGrid flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "isEnabled": {
                  "aliases": [],
                  "description": "IsEnabled flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "isMntDedicated": {
                  "aliases": [],
                  "description": "IsMntDedicated flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "otherMonitoringNode": {
                  "aliases": [],
                  "description": "Node Deployment's otherMonitoringNode.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "policyservice": {
                  "aliases": [],
                  "description": "Node Deployment's policyservice.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "enableDeviceAdminService": {
                      "aliases": [],
                      "description": "EnableDeviceAdminService flag.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "enableNACService": {
                      "aliases": [],
                      "description": "EnableNACService flag.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "enablePassiveIdentityService": {
                      "aliases": [],
                      "description": "EnablePassiveIdentityService flag.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "enableProfilingService": {
                      "aliases": [],
                      "description": "EnableProfilingService flag.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "enabled": {
                      "aliases": [],
                      "description": "Enabled flag.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "sessionService": {
                      "aliases": [],
                      "description": "Node Deployment's sessionService.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "isEnabled": {
                          "aliases": [],
                          "description": "IsEnabled flag.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "nodegroup": {
                          "aliases": [],
                          "description": "Node Deployment's nodegroup.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    },
                    "sxpservice": {
                      "aliases": [],
                      "description": "Node Deployment's sxpservice.",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "isEnabled": {
                          "aliases": [],
                          "description": "IsEnabled flag.",
                          "type": "bool",
                          "required": false,
                          "suboptions": {}
                        },
                        "userInterface": {
                          "aliases": [],
                          "description": "Node Deployment's userInterface.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    }
                  }
                },
                "role": {
                  "aliases": [],
                  "description": "Node Deployment's role.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        },
        "hostname": {
          "aliases": [],
          "description": "Hostname path parameter. Node name of the existing deployed node.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Node Deployment's password.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "profileConfiguration": {
          "aliases": [],
          "description": "Node Deployment's profileConfiguration.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "activeDirectory": {
              "aliases": [],
              "description": "Node Deployment's activeDirectory.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "daysBeforeRescan": {
                  "aliases": [],
                  "description": "Node Deployment's daysBeforeRescan.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "description": {
                  "aliases": [],
                  "description": "Node Deployment's description.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "enabled": {
                  "aliases": [],
                  "description": "Enabled flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "dhcp": {
              "aliases": [],
              "description": "Node Deployment's dhcp.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "description": {
                  "aliases": [],
                  "description": "Node Deployment's description.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "enabled": {
                  "aliases": [],
                  "description": "Enabled flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "interface": {
                  "aliases": [],
                  "description": "Node Deployment's interface.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "port": {
                  "aliases": [],
                  "description": "Node Deployment's port.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "dhcpSpan": {
              "aliases": [],
              "description": "Node Deployment's dhcpSpan.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "description": {
                  "aliases": [],
                  "description": "Node Deployment's description.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "enabled": {
                  "aliases": [],
                  "description": "Enabled flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "interface": {
                  "aliases": [],
                  "description": "Node Deployment's interface.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "dns": {
              "aliases": [],
              "description": "Node Deployment's dns.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "description": {
                  "aliases": [],
                  "description": "Node Deployment's description.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "enabled": {
                  "aliases": [],
                  "description": "Enabled flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "http": {
              "aliases": [],
              "description": "Node Deployment's http.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "description": {
                  "aliases": [],
                  "description": "Node Deployment's description.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "enabled": {
                  "aliases": [],
                  "description": "Enabled flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "interface": {
                  "aliases": [],
                  "description": "Node Deployment's interface.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "netflow": {
              "aliases": [],
              "description": "Node Deployment's netflow.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "description": {
                  "aliases": [],
                  "description": "Node Deployment's description.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "enabled": {
                  "aliases": [],
                  "description": "Enabled flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "interface": {
                  "aliases": [],
                  "description": "Node Deployment's interface.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "port": {
                  "aliases": [],
                  "description": "Node Deployment's port.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "nmap": {
              "aliases": [],
              "description": "Node Deployment's nmap.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "description": {
                  "aliases": [],
                  "description": "Node Deployment's description.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "enabled": {
                  "aliases": [],
                  "description": "Enabled flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "pxgrid": {
              "aliases": [],
              "description": "Node Deployment's pxgrid.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "description": {
                  "aliases": [],
                  "description": "Node Deployment's description.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "enabled": {
                  "aliases": [],
                  "description": "Enabled flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "radius": {
              "aliases": [],
              "description": "Node Deployment's radius.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "description": {
                  "aliases": [],
                  "description": "Node Deployment's description.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "enabled": {
                  "aliases": [],
                  "description": "Enabled flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "snmpQuery": {
              "aliases": [],
              "description": "Node Deployment's snmpQuery.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "description": {
                  "aliases": [],
                  "description": "Node Deployment's description.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "enabled": {
                  "aliases": [],
                  "description": "Enabled flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "eventTimeout": {
                  "aliases": [],
                  "description": "Node Deployment's eventTimeout.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "retries": {
                  "aliases": [],
                  "description": "Node Deployment's retries.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "timeout": {
                  "aliases": [],
                  "description": "Node Deployment's timeout.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "snmpTrap": {
              "aliases": [],
              "description": "Node Deployment's snmpTrap.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "description": {
                  "aliases": [],
                  "description": "Node Deployment's description.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "interface": {
                  "aliases": [],
                  "description": "Node Deployment's interface.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "linkTrapQuery": {
                  "aliases": [],
                  "description": "LinkTrapQuery flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "macTrapQuery": {
                  "aliases": [],
                  "description": "MacTrapQuery flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "port": {
                  "aliases": [],
                  "description": "Node Deployment's port.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        },
        "userName": {
          "aliases": [],
          "description": "Node Deployment's userName.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Node Deployment",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.node_deployment:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    administration:\n      isEnabled: true\n      role: string\n    fdqn: string\n    generalSettings:\n      monitoring:\n        enablePXGrid: true\n        isEnabled: true\n        isMntDedicated: true\n        otherMonitoringNode: string\n        policyservice:\n          enableDeviceAdminService: true\n          enableNACService: true\n          enablePassiveIdentityService: true\n          enableProfilingService: true\n          enabled: true\n          sessionService:\n            isEnabled: true\n            nodegroup: string\n          sxpservice:\n            isEnabled: true\n            userInterface: string\n        role: string\n    password: string\n    profileConfiguration:\n      activeDirectory:\n        daysBeforeRescan: 0\n        description: string\n        enabled: true\n      dhcp:\n        description: string\n        enabled: true\n        interface: string\n        port: {}\n      dhcpSpan:\n        description: string\n        enabled: true\n        interface: string\n      dns:\n        description: string\n        enabled: true\n      http:\n        description: string\n        enabled: true\n        interface: string\n      netflow:\n        description: string\n        enabled: true\n        interface: string\n        port: {}\n      nmap:\n        description: string\n        enabled: true\n      pxgrid:\n        description: string\n        enabled: true\n      radius:\n        description: string\n        enabled: true\n      snmpQuery:\n        description: string\n        enabled: true\n        eventTimeout: 0\n        retries: 0\n        timeout: 0\n      snmpTrap:\n        description: string\n        interface: string\n        linkTrapQuery: true\n        macTrapQuery: true\n        port: {}\n    userName: string\n\n- name: Update by name\n  cisco.ise.node_deployment:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    generalSettings:\n      monitoring:\n        enablePXGrid: true\n        isEnabled: true\n        isMntDedicated: true\n        otherMonitoringNode: string\n        policyservice:\n          enableDeviceAdminService: true\n          enableNACService: true\n          enablePassiveIdentityService: true\n          enableProfilingService: true\n          enabled: true\n          sessionService:\n            isEnabled: true\n            nodegroup: string\n          sxpservice:\n            isEnabled: true\n            userInterface: string\n        role: string\n    hostname: string\n    profileConfiguration:\n      activeDirectory:\n        daysBeforeRescan: 0\n        description: string\n        enabled: true\n      dhcp:\n        description: string\n        enabled: true\n        interface: string\n        port: {}\n      dhcpSpan:\n        description: string\n        enabled: true\n        interface: string\n      dns:\n        description: string\n        enabled: true\n      http:\n        description: string\n        enabled: true\n        interface: string\n      netflow:\n        description: string\n        enabled: true\n        interface: string\n        port: {}\n      nmap:\n        description: string\n        enabled: true\n      pxgrid:\n        description: string\n        enabled: true\n      radius:\n        description: string\n        enabled: true\n      snmpQuery:\n        description: string\n        enabled: true\n        eventTimeout: 0\n        retries: 0\n        timeout: 0\n      snmpTrap:\n        description: string\n        interface: string\n        linkTrapQuery: true\n        macTrapQuery: true\n        port: {}\n\n- name: Delete by name\n  cisco.ise.node_deployment:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    hostname: string\n\n"
  },
  "cisco.ise.node_deployment_info": {
    "doc": {
      "description": "Get all Node Deployment.\nGet Node Deployment by name.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "hostname": {
          "aliases": [],
          "description": "Hostname path parameter. ID of the existing deployed node.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Node Deployment",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Node Deployment\n  cisco.ise.node_deployment_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n- name: Get Node Deployment by name\n  cisco.ise.node_deployment_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    hostname: string\n  register: result\n\n"
  },
  "cisco.ise.node_group": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Node Group.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "description": {
          "aliases": [],
          "description": "Node Group's description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "mar_cache": {
          "aliases": [],
          "description": "Node Group's mar-cache.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "enabled": {
              "aliases": [],
              "description": "Enabled flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "query-attempts": {
              "aliases": [],
              "description": "Node Group's query-attempts.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "query-timeout": {
              "aliases": [],
              "description": "Node Group's query-timeout.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "replication-attempts": {
              "aliases": [],
              "description": "Node Group's replication-attempts.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "replication-timeout": {
              "aliases": [],
              "description": "Node Group's replication-timeout.",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "node_group_name": {
          "aliases": [],
          "description": "Node-group-name path parameter. ID of the existing node group.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Node Group",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.node_group:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    description: string\n    mar_cache:\n      enabled: true\n      query-attempts: 0\n      query-timeout: 0\n      replication-attempts: 0\n      replication-timeout: 0\n\n- name: Update by name\n  cisco.ise.node_group:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    description: string\n    mar_cache:\n      enabled: true\n      query-attempts: 0\n      query-timeout: 0\n      replication-attempts: 0\n      replication-timeout: 0\n    node_group_name: string\n\n- name: Delete by name\n  cisco.ise.node_group:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    node_group_name: string\n\n"
  },
  "cisco.ise.node_group_info": {
    "doc": {
      "description": "Get all Node Group.\nGet Node Group by name.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "node_group_name": {
          "aliases": [],
          "description": "Node-group-name path parameter. ID of the existing node group.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Node Group",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Node Group\n  cisco.ise.node_group_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n- name: Get Node Group by name\n  cisco.ise.node_group_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    node_group_name: string\n  register: result\n\n"
  },
  "cisco.ise.node_info": {
    "doc": {
      "description": "Get all Node.\nGet Node by id.\nGet Node by name.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter query parameter. <br/> **Simple filtering** should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the \"filterType=or\" query string parameter. Each resource Data model description should specify if an attribute is a filtered field. <br/> Operator | Description <br/> ------------|----------------- <br/> EQ | Equals <br/> NEQ | Not Equals <br/> GT | Greater Than <br/> LT | Less Then <br/> STARTSW | Starts With <br/> NSTARTSW | Not Starts With <br/> ENDSW | Ends With <br/> NENDSW | Not Ends With <br/> CONTAINS | Contains <br/> NCONTAINS | Not Contains <br/>.\n",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "filterType": {
          "aliases": [],
          "description": "FilterType query parameter. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Node",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Node\n  cisco.ise.node_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n    filter: []\n    filterType: AND\n  register: result\n\n- name: Get Node by id\n  cisco.ise.node_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n- name: Get Node by name\n  cisco.ise.node_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    name: string\n  register: result\n\n"
  },
  "cisco.ise.node_promotion": {
    "doc": {
      "description": "Manage operation update of the resource Node Promotion.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "promotionType": {
          "aliases": [],
          "description": "Node Promotion's promotionType.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Node Promotion",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update all\n  cisco.ise.node_promotion:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    promotionType: string\n\n"
  },
  "cisco.ise.node_replication_status_info": {
    "doc": {
      "description": "Get Node Replication Status by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "node": {
          "aliases": [],
          "description": "Node path parameter. ID of the existing node.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Node Replication Status",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get Node Replication Status by id\n  cisco.ise.node_replication_status_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    node: string\n  register: result\n\n"
  },
  "cisco.ise.node_sync": {
    "doc": {
      "description": "Manage operation create of the resource Node Sync.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "hostname": {
          "aliases": [],
          "description": "Node Sync's hostname.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Node Sync",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.node_sync:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    hostname: string\n\n"
  },
  "cisco.ise.pan_ha": {
    "doc": {
      "description": "Manage operations create and delete of the resource Pan Ha.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "failedAttempts": {
          "aliases": [],
          "description": "Pan Ha's failedAttempts.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "isEnabled": {
          "aliases": [],
          "description": "IsEnabled flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pollingInterval": {
          "aliases": [],
          "description": "Pan Ha's pollingInterval.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "primaryHealthCheckNode": {
          "aliases": [],
          "description": "Pan Ha's primaryHealthCheckNode.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "secondaryHealthCheckNode": {
          "aliases": [],
          "description": "Pan Ha's secondaryHealthCheckNode.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Pan Ha",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.pan_ha:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    failedAttempts: 0\n    isEnabled: true\n    pollingInterval: 0\n    primaryHealthCheckNode: string\n    secondaryHealthCheckNode: string\n\n- name: Delete all\n  cisco.ise.pan_ha:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n\n"
  },
  "cisco.ise.pan_ha_info": {
    "doc": {
      "description": "Get all Pan Ha.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Pan Ha",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Pan Ha\n  cisco.ise.pan_ha_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.personas_check_standalone": {
    "doc": {
      "description": "Ensure the mode is in standalone mode",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ip": {
          "aliases": [],
          "description": "The public IP address of the node",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Whether or not to verify the identity of the node.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "The version of the ISE node.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Whether or not to wait on rate limit",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the node.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The password for the node.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "The username for the node.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "requests >= 2.25.1",
        "python >= 3.5"
      ],
      "short_description": "Ensure the node is in standalone mode",
      "version_added": "0.0.8"
    },
    "examples": "\n- name: Check if all nodes are in STANDALONE state\n  cisco.ise.personas_check_standalone:\n    name: \"{{ item.name }}\"\n    ip: \"{{ item.ip }}\"\n    username: admin\n    password: cisco123\n  loop:\n    - name: ISE PAN Server 1\n      ip: 10.1.1.1\n    - name: ISE PAN Server 2\n      ip: 10.1.1.2\n    - name: ISE PSN Server 1\n      ip: 10.1.1.3\n    - name: ISE PSN Server 2\n      ip: 10.1.1.4\n"
  },
  "cisco.ise.personas_export_certs": {
    "doc": {
      "description": "Export certificate into primary node",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ip": {
          "aliases": [],
          "description": "The public IP address of the node for which the certificate will be exported.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Whether or not to verify the identity of the node.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "The version of the ISE node.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Whether or not to wait on rate limit",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the node for which the certificate will be exported.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The password for the node for which the certificate will be exported.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "primary_ip": {
          "aliases": [],
          "description": "The public IP address of the primary node.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "primary_password": {
          "aliases": [],
          "description": "The password for the primary node.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "primary_username": {
          "aliases": [],
          "description": "The username for the primary node.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "The username for the node for which the certificate will be exported.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "requests >= 2.25.1",
        "python >= 3.5"
      ],
      "short_description": "Export certificate into primary node",
      "version_added": "0.0.8"
    },
    "examples": "\n- name: Export trusted certificates into primary node\n  cisco.ise.personas_export_certs:\n    primary_ip: 10.1.1.1\n    primary_username: admin\n    primary_password: cisco123\n    name: \"{{ item.name }}\"\n    ip: \"{{ item.ip }}\"\n    hostname: \"{{ item.hostname }}\"\n    username: admin\n    password: cisco123\n  loop:\n    - name: ISE PAN Server 2\n      ip: 10.1.1.2\n      hostname: ise-pan-server-2\n    - name: ISE PSN Server 1\n      ip: 10.1.1.3\n      hostname: ise-psn-server-1\n    - name: ISE PSN Server 2\n      ip: 10.1.1.4\n      hostname: ise-psn-server-2\n"
  },
  "cisco.ise.personas_promote_primary": {
    "doc": {
      "description": "Promote a node as the primary node",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "hostname": {
          "aliases": [],
          "description": "The hostname of the primary node.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ip": {
          "aliases": [],
          "description": "The public IP address of the primary node",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Whether or not to verify the identity of the node.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "The version of the ISE node.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Whether or not to wait on rate limit",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The password to log into the primary node.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "roles": {
          "aliases": [],
          "description": "The roles to be fulfilled by this node. Must contain at least PPAN and any of MNT-ACTIVE or MNT-STANDBY or PDP",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "The username to log into the primary node.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "requests >= 2.25.1",
        "python >= 3.5"
      ],
      "short_description": "Promote a node as the primary node",
      "version_added": "0.0.8"
    },
    "examples": "\n- name: Promote primary node\n  cisco.ise.personas_promote_primary:\n    ip: 10.1.1.1\n    hostname: ise-pan-server-1\n    username: admin\n    password: cisco123\n    roles:\n      - PPAN\n      - MNT-ACTIVE\n"
  },
  "cisco.ise.personas_update_roles": {
    "doc": {
      "description": "Update the roles of a node",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "domain": {
          "aliases": [],
          "description": "The domain of the node.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Whether or not to verify the identity of the node.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "The version of the ISE node.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Whether or not to wait on rate limit",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "local_ip": {
          "aliases": [],
          "description": "The local IP address of the node",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the node.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The password to log into the node.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "primary_ip": {
          "aliases": [],
          "description": "The public IP address of the primary node.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "primary_password": {
          "aliases": [],
          "description": "The password for the primary node.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "primary_username": {
          "aliases": [],
          "description": "The username for the primary node.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "roles": {
          "aliases": [],
          "description": "The roles to be fulfilled by this node. Possible roles are SPAN or MNT-ACTIVE or MNT-STANDBY or PDP",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "The username to log into the node.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "requests >= 2.25.1",
        "python >= 3.5"
      ],
      "short_description": "Update the roles of a node",
      "version_added": "0.0.8"
    },
    "examples": "\n- name: Update roles on the rest of the nodes\n  cisco.ise.personas_update_roles:\n    primary_ip: 10.1.1.1\n    primary_username: admin\n    primary_password: cisco123\n    name: \"{{ item.name }}\"\n    local_ip: \"{{ item.local_ip }}\"\n    hostname: \"{{ item.hostname }}\"\n    username: admin\n    password: cisco123\n    domain: sstcloud.com\n    roles: \"{{ item.roles }}\"\n  loop:\n    - name: ISE PAN Server 2\n      local_ip: 10.1.1.2\n      hostname: ise-pan-server-2\n      roles:\n        - SPAN\n        - MNT-STANDBY\n    - name: ISE PSN Server 1\n      local_ip: 10.1.1.3\n      hostname: ise-psn-server-1\n      roles:\n        - PDP\n    - name: ISE PSN Server 2\n      local_ip: 10.1.1.4\n      hostname: ise-psn-server-2\n      roles:\n        - PDP\n"
  },
  "cisco.ise.portal_global_setting": {
    "doc": {
      "description": "Manage operation update of the resource Portal Global Setting.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "customization": {
          "aliases": [],
          "description": "Allowed values - HTML, - HTMLANDJAVASCRIPT.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Portal Global Setting's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Portal Global Setting",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.portal_global_setting:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    customization: string\n    id: string\n\n"
  },
  "cisco.ise.portal_global_setting_info": {
    "doc": {
      "description": "Get all Portal Global Setting.\nGet Portal Global Setting by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter query parameter. <br/> **Simple filtering** should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the \"filterType=or\" query string parameter. Each resource Data model description should specify if an attribute is a filtered field. <br/> Operator | Description <br/> ------------|----------------- <br/> EQ | Equals <br/> NEQ | Not Equals <br/> GT | Greater Than <br/> LT | Less Then <br/> STARTSW | Starts With <br/> NSTARTSW | Not Starts With <br/> ENDSW | Ends With <br/> NENDSW | Not Ends With <br/> CONTAINS | Contains <br/> NCONTAINS | Not Contains <br/>.\n",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "filterType": {
          "aliases": [],
          "description": "FilterType query parameter. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sortasc": {
          "aliases": [],
          "description": "Sortasc query parameter. Sort asc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sortdsc": {
          "aliases": [],
          "description": "Sortdsc query parameter. Sort desc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Portal Global Setting",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Portal Global Setting\n  cisco.ise.portal_global_setting_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n    sortasc: string\n    sortdsc: string\n    filter: []\n    filterType: AND\n  register: result\n\n- name: Get Portal Global Setting by id\n  cisco.ise.portal_global_setting_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.portal_info": {
    "doc": {
      "description": "Get all Portal.\nGet Portal by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter query parameter. <br/> **Simple filtering** should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the \"filterType=or\" query string parameter. Each resource Data model description should specify if an attribute is a filtered field. <br/> Operator | Description <br/> ------------|----------------- <br/> EQ | Equals <br/> NEQ | Not Equals <br/> GT | Greater Than <br/> LT | Less Then <br/> STARTSW | Starts With <br/> NSTARTSW | Not Starts With <br/> ENDSW | Ends With <br/> NENDSW | Not Ends With <br/> CONTAINS | Contains <br/> NCONTAINS | Not Contains <br/>.\n",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "filterType": {
          "aliases": [],
          "description": "FilterType query parameter. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sortasc": {
          "aliases": [],
          "description": "Sortasc query parameter. Sort asc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sortdsc": {
          "aliases": [],
          "description": "Sortdsc query parameter. Sort desc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Portal",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Portal\n  cisco.ise.portal_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n    sortasc: string\n    sortdsc: string\n    filter: []\n    filterType: AND\n  register: result\n\n- name: Get Portal by id\n  cisco.ise.portal_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.portal_theme": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Portal Theme.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "description": {
          "aliases": [],
          "description": "Portal Theme's description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Portal Theme's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Portal Theme's name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "themeData": {
          "aliases": [],
          "description": "Portal Theme for all portals.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Portal Theme",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.portal_theme:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    description: string\n    id: string\n    name: string\n    themeData: string\n\n- name: Delete by id\n  cisco.ise.portal_theme:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n- name: Create\n  cisco.ise.portal_theme:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    description: string\n    name: string\n    themeData: string\n\n"
  },
  "cisco.ise.portal_theme_info": {
    "doc": {
      "description": "Get all Portal Theme.\nGet Portal Theme by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter query parameter. <br/> **Simple filtering** should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the \"filterType=or\" query string parameter. Each resource Data model description should specify if an attribute is a filtered field. <br/> Operator | Description <br/> ------------|----------------- <br/> EQ | Equals <br/> NEQ | Not Equals <br/> GT | Greater Than <br/> LT | Less Then <br/> STARTSW | Starts With <br/> NSTARTSW | Not Starts With <br/> ENDSW | Ends With <br/> NENDSW | Not Ends With <br/> CONTAINS | Contains <br/> NCONTAINS | Not Contains <br/>.\n",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "filterType": {
          "aliases": [],
          "description": "FilterType query parameter. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sortasc": {
          "aliases": [],
          "description": "Sortasc query parameter. Sort asc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sortdsc": {
          "aliases": [],
          "description": "Sortdsc query parameter. Sort desc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Portal Theme",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Portal Theme\n  cisco.ise.portal_theme_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n    sortasc: string\n    sortdsc: string\n    filter: []\n    filterType: AND\n  register: result\n\n- name: Get Portal Theme by id\n  cisco.ise.portal_theme_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.profiler_profile_info": {
    "doc": {
      "description": "Get all Profiler Profile.\nGet Profiler Profile by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter query parameter. <br/> **Simple filtering** should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the \"filterType=or\" query string parameter. Each resource Data model description should specify if an attribute is a filtered field. <br/> Operator | Description <br/> ------------|----------------- <br/> EQ | Equals <br/> NEQ | Not Equals <br/> GT | Greater Than <br/> LT | Less Then <br/> STARTSW | Starts With <br/> NSTARTSW | Not Starts With <br/> ENDSW | Ends With <br/> NENDSW | Not Ends With <br/> CONTAINS | Contains <br/> NCONTAINS | Not Contains <br/>.\n",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "filterType": {
          "aliases": [],
          "description": "FilterType query parameter. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sortasc": {
          "aliases": [],
          "description": "Sortasc query parameter. Sort asc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sortdsc": {
          "aliases": [],
          "description": "Sortdsc query parameter. Sort desc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Profiler Profile",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Profiler Profile\n  cisco.ise.profiler_profile_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n    sortasc: string\n    sortdsc: string\n    filter: []\n    filterType: AND\n  register: result\n\n- name: Get Profiler Profile by id\n  cisco.ise.profiler_profile_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.px_grid_node_approve": {
    "doc": {
      "description": "Manage operation update of the resource Px Grid Node Approve.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Px Grid Node Approve",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update all\n  cisco.ise.px_grid_node_approve:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    name: string\n\n"
  },
  "cisco.ise.px_grid_node_delete": {
    "doc": {
      "description": "Manage operation delete of the resource Px Grid Node Delete.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Px Grid Node Delete",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Delete by name\n  cisco.ise.px_grid_node_delete:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    name: string\n\n"
  },
  "cisco.ise.px_grid_node_info": {
    "doc": {
      "description": "Get all Px Grid Node.\nGet Px Grid Node by id.\nGet Px Grid Node by name.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Px Grid Node",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Px Grid Node\n  cisco.ise.px_grid_node_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n  register: result\n\n- name: Get Px Grid Node by id\n  cisco.ise.px_grid_node_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n- name: Get Px Grid Node by name\n  cisco.ise.px_grid_node_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    name: string\n  register: result\n\n"
  },
  "cisco.ise.px_grid_settings_auto_approve": {
    "doc": {
      "description": "Manage operation update of the resource Px Grid Settings Auto Approve.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "allowPasswordBasedAccounts": {
          "aliases": [],
          "description": "Allow password based accounts when true.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "autoApproveCertBasedAccounts": {
          "aliases": [],
          "description": "Auto approve certificate based accounts when true.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Px Grid Settings Auto Approve",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update all\n  cisco.ise.px_grid_settings_auto_approve:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    allowPasswordBasedAccounts: true\n    autoApproveCertBasedAccounts: true\n\n"
  },
  "cisco.ise.pxgrid_access_secret": {
    "doc": {
      "description": "Manage operation create of the resource Pxgrid Access Secret.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "peerNodeName": {
          "aliases": [],
          "description": "Pxgrid Access Secret's peerNodeName.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Pxgrid Access Secret",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.pxgrid_access_secret:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    peerNodeName: ise-admin-pxgrid-002\n\n"
  },
  "cisco.ise.pxgrid_account_activate": {
    "doc": {
      "description": "Manage operation create of the resource Pxgrid Account Activate.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "description": {
          "aliases": [],
          "description": "Pxgrid Account Activate's description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Pxgrid Account Activate",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.pxgrid_account_activate:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    description: MyApp 1.0\n\n"
  },
  "cisco.ise.pxgrid_account_create": {
    "doc": {
      "description": "Manage operation create of the resource Pxgrid Account Create.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "nodeName": {
          "aliases": [],
          "description": "Pxgrid Account Create's nodeName.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Pxgrid Account Create",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.pxgrid_account_create:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    nodeName: MyName01\n\n"
  },
  "cisco.ise.pxgrid_authorization": {
    "doc": {
      "description": "Manage operation create of the resource Pxgrid Authorization.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Pxgrid Authorization",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.pxgrid_authorization:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n\n"
  },
  "cisco.ise.pxgrid_bindings_info": {
    "doc": {
      "description": "Get Pxgrid Bindings Info.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Pxgrid Bindings Info",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Pxgrid Bindings Info\n  cisco.ise.pxgrid_bindings_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.pxgrid_egress_matrices_info": {
    "doc": {
      "description": "Get Pxgrid Egress Matrices Info.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Pxgrid Egress Matrices Info",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Pxgrid Egress Matrices Info\n  cisco.ise.pxgrid_egress_matrices_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.pxgrid_egress_policies_info": {
    "doc": {
      "description": "Get Pxgrid Egress Policies Info.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Pxgrid Egress Policies Info",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Pxgrid Egress Policies Info\n  cisco.ise.pxgrid_egress_policies_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.pxgrid_endpoint_by_mac_info": {
    "doc": {
      "description": "Get Pxgrid Endpoint By Mac Info.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Pxgrid Endpoint By Mac Info",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Pxgrid Endpoint By Mac Info\n  cisco.ise.pxgrid_endpoint_by_mac_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.pxgrid_endpoints_by_os_type_info": {
    "doc": {
      "description": "Get Pxgrid Endpoints By Os Type Info.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Pxgrid Endpoints By Os Type Info",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Pxgrid Endpoints By Os Type Info\n  cisco.ise.pxgrid_endpoints_by_os_type_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.pxgrid_endpoints_by_type_info": {
    "doc": {
      "description": "Get Pxgrid Endpoints By Type Info.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Pxgrid Endpoints By Type Info",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Pxgrid Endpoints By Type Info\n  cisco.ise.pxgrid_endpoints_by_type_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.pxgrid_endpoints_info": {
    "doc": {
      "description": "Get Pxgrid Endpoints Info.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Pxgrid Endpoints Info",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Pxgrid Endpoints Info\n  cisco.ise.pxgrid_endpoints_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.pxgrid_failures_info": {
    "doc": {
      "description": "Get all Pxgrid Failures.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Pxgrid Failures",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Pxgrid Failures\n  cisco.ise.pxgrid_failures_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.pxgrid_healths_info": {
    "doc": {
      "description": "Get Pxgrid Healths Info.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Pxgrid Healths Info",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Pxgrid Healths Info\n  cisco.ise.pxgrid_healths_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.pxgrid_performances_info": {
    "doc": {
      "description": "Get Pxgrid Performances Info.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Pxgrid Performances Info",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Pxgrid Performances Info\n  cisco.ise.pxgrid_performances_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.pxgrid_profiles_info": {
    "doc": {
      "description": "Get Pxgrid Profiles Info.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Pxgrid Profiles Info",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Pxgrid Profiles Info\n  cisco.ise.pxgrid_profiles_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.pxgrid_security_group_acls_info": {
    "doc": {
      "description": "Get Pxgrid Security Group Acls Info.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Pxgrid Security Group Acls Info",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Pxgrid Security Group Acls Info\n  cisco.ise.pxgrid_security_group_acls_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.pxgrid_security_groups_info": {
    "doc": {
      "description": "Get Pxgrid Security Groups Info.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Pxgrid Security Groups Info",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Pxgrid Security Groups Info\n  cisco.ise.pxgrid_security_groups_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.pxgrid_service_lookup": {
    "doc": {
      "description": "Manage operation create of the resource Pxgrid Service Lookup.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Pxgrid Service Lookup's name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Pxgrid Service Lookup",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.pxgrid_service_lookup:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    name: com.cisco.ise.pubsub\n\n"
  },
  "cisco.ise.pxgrid_service_register": {
    "doc": {
      "description": "Manage operation create of the resource Pxgrid Service Register.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Pxgrid Service Register's name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Pxgrid Service Register",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.pxgrid_service_register:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    name: com.cisco.ise.pubsub\n\n"
  },
  "cisco.ise.pxgrid_service_reregister": {
    "doc": {
      "description": "Manage operation create of the resource Pxgrid Service Reregister.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Pxgrid Service Reregister",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.pxgrid_service_reregister:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n\n"
  },
  "cisco.ise.pxgrid_service_unregister": {
    "doc": {
      "description": "Manage operation create of the resource Pxgrid Service Unregister.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Pxgrid Service Unregister",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.pxgrid_service_unregister:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n\n"
  },
  "cisco.ise.pxgrid_session_by_ip_info": {
    "doc": {
      "description": "Get Pxgrid Session By Ip Info.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Pxgrid Session By Ip Info",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Pxgrid Session By Ip Info\n  cisco.ise.pxgrid_session_by_ip_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.pxgrid_session_by_mac_info": {
    "doc": {
      "description": "Get Pxgrid Session By Mac Info.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Pxgrid Session By Mac Info",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Pxgrid Session By Mac Info\n  cisco.ise.pxgrid_session_by_mac_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.pxgrid_session_for_recovery_info": {
    "doc": {
      "description": "Get Pxgrid Session For Recovery Info.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Pxgrid Session For Recovery Info",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Pxgrid Session For Recovery Info\n  cisco.ise.pxgrid_session_for_recovery_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.pxgrid_sessions_info": {
    "doc": {
      "description": "Get Pxgrid Sessions Info.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Pxgrid Sessions Info",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Pxgrid Sessions Info\n  cisco.ise.pxgrid_sessions_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.pxgrid_user_group_by_username_info": {
    "doc": {
      "description": "Get Pxgrid User Group By Username Info.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Pxgrid User Group By Username Info",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Pxgrid User Group By Username Info\n  cisco.ise.pxgrid_user_group_by_username_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.pxgrid_user_groups_info": {
    "doc": {
      "description": "Get Pxgrid User Groups Info.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Pxgrid User Groups Info",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Pxgrid User Groups Info\n  cisco.ise.pxgrid_user_groups_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.radius_server_sequence": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Radius Server Sequence.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "BeforeAcceptAttrManipulatorsList": {
          "aliases": [],
          "description": "The beforeAcceptAttrManipulators is required only if useAttrSetBeforeAcc is true.",
          "type": "list",
          "required": false,
          "suboptions": {
            "action": {
              "aliases": [],
              "description": "Allowed Values - ADD, - UPDATE, - REMOVE, - REMOVEANY.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "attributeName": {
              "aliases": [],
              "description": "Radius Server Sequence's attributeName.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "changedVal": {
              "aliases": [],
              "description": "The changedVal is required only if the action equals to 'UPDATE'.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "dictionaryName": {
              "aliases": [],
              "description": "Radius Server Sequence's dictionaryName.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "value": {
              "aliases": [],
              "description": "Radius Server Sequence's value.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "OnRequestAttrManipulatorList": {
          "aliases": [],
          "description": "The onRequestAttrManipulators is required only if useAttrSetOnRequest is true.",
          "type": "list",
          "required": false,
          "suboptions": {
            "action": {
              "aliases": [],
              "description": "Allowed Values - ADD, - UPDATE, - REMOVE, - REMOVEANY.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "attributeName": {
              "aliases": [],
              "description": "Radius Server Sequence's attributeName.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "changedVal": {
              "aliases": [],
              "description": "The changedVal is required only if the action equals to 'UPDATE'.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "dictionaryName": {
              "aliases": [],
              "description": "Radius Server Sequence's dictionaryName.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "value": {
              "aliases": [],
              "description": "Radius Server Sequence's value.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "RadiusServerList": {
          "aliases": [],
          "description": "Radius Server Sequence's RadiusServerList.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "continueAuthorzPolicy": {
          "aliases": [],
          "description": "ContinueAuthorzPolicy flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Radius Server Sequence's description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Radius Server Sequence's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "localAccounting": {
          "aliases": [],
          "description": "LocalAccounting flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Radius Server Sequence's name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "prefixSeparator": {
          "aliases": [],
          "description": "The prefixSeparator is required only if stripPrefix is true. The maximum length is 1 character.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "remoteAccounting": {
          "aliases": [],
          "description": "RemoteAccounting flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "stripPrefix": {
          "aliases": [],
          "description": "StripPrefix flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "stripSuffix": {
          "aliases": [],
          "description": "StripSuffix flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "suffixSeparator": {
          "aliases": [],
          "description": "The suffixSeparator is required only if stripSuffix is true. The maximum length is 1 character.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "useAttrSetBeforeAcc": {
          "aliases": [],
          "description": "UseAttrSetBeforeAcc flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "useAttrSetOnRequest": {
          "aliases": [],
          "description": "UseAttrSetOnRequest flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Radius Server Sequence",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.radius_server_sequence:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    BeforeAcceptAttrManipulatorsList:\n    - action: string\n      attributeName: string\n      changedVal: string\n      dictionaryName: string\n      value: string\n    OnRequestAttrManipulatorList:\n    - action: string\n      attributeName: string\n      changedVal: string\n      dictionaryName: string\n      value: string\n    RadiusServerList:\n    - string\n    continueAuthorzPolicy: true\n    description: string\n    id: string\n    localAccounting: true\n    name: string\n    prefixSeparator: string\n    remoteAccounting: true\n    stripPrefix: true\n    stripSuffix: true\n    suffixSeparator: string\n    useAttrSetBeforeAcc: true\n    useAttrSetOnRequest: true\n\n- name: Delete by id\n  cisco.ise.radius_server_sequence:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n- name: Create\n  cisco.ise.radius_server_sequence:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    BeforeAcceptAttrManipulatorsList:\n    - action: string\n      attributeName: string\n      changedVal: string\n      dictionaryName: string\n      value: string\n    OnRequestAttrManipulatorList:\n    - action: string\n      attributeName: string\n      changedVal: string\n      dictionaryName: string\n      value: string\n    RadiusServerList:\n    - string\n    continueAuthorzPolicy: true\n    description: string\n    localAccounting: true\n    name: string\n    prefixSeparator: string\n    remoteAccounting: true\n    stripPrefix: true\n    stripSuffix: true\n    suffixSeparator: string\n    useAttrSetBeforeAcc: true\n    useAttrSetOnRequest: true\n\n"
  },
  "cisco.ise.radius_server_sequence_info": {
    "doc": {
      "description": "Get all Radius Server Sequence.\nGet Radius Server Sequence by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Radius Server Sequence",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Radius Server Sequence\n  cisco.ise.radius_server_sequence_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n  register: result\n\n- name: Get Radius Server Sequence by id\n  cisco.ise.radius_server_sequence_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.renew_certificate": {
    "doc": {
      "description": "Manage operation create of the resource Renew Certificate.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "certType": {
          "aliases": [],
          "description": "Renew Certificate's certType.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Renew Certificate",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.renew_certificate:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    certType: string\n\n"
  },
  "cisco.ise.repository": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Repository.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "enablePki": {
          "aliases": [],
          "description": "EnablePki flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Repository name should be less than 80 characters and can contain alphanumeric, underscore, hyphen and dot characters.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password can contain alphanumeric and/or special characters.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "Path should always start with \"/\" and can contain alphanumeric, underscore, hyphen and dot characters.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "Repository's protocol.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "serverName": {
          "aliases": [],
          "description": "Repository's serverName.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "userName": {
          "aliases": [],
          "description": "Username can contain alphanumeric characters.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Repository",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.repository:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    enablePki: true\n    name: string\n    password: string\n    path: string\n    protocol: string\n    serverName: string\n    userName: string\n\n- name: Update by name\n  cisco.ise.repository:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    enablePki: true\n    name: string\n    password: string\n    path: string\n    protocol: string\n    serverName: string\n    userName: string\n\n- name: Delete by name\n  cisco.ise.repository:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    name: string\n\n"
  },
  "cisco.ise.repository_files_info": {
    "doc": {
      "description": "Get all Repository Files.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name path parameter. Unique name for a repository.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Repository Files",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Repository Files\n  cisco.ise.repository_files_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    name: string\n  register: result\n\n"
  },
  "cisco.ise.repository_info": {
    "doc": {
      "description": "Get all Repository.\nGet Repository by name.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name path parameter. Unique name for a repository.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Repository",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Repository\n  cisco.ise.repository_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n- name: Get Repository by name\n  cisco.ise.repository_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    name: string\n  register: result\n\n"
  },
  "cisco.ise.resource_version_info": {
    "doc": {
      "description": "Get all Resource Version.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "resource": {
          "aliases": [],
          "description": "Resource path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Resource Version",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Resource Version\n  cisco.ise.resource_version_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    resource: string\n  register: result\n\n"
  },
  "cisco.ise.rest_id_store": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Rest Id Store.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "description": {
          "aliases": [],
          "description": "Rest Id Store's description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ersRestIDStoreAttributes": {
          "aliases": [],
          "description": "Rest Id Store's ersRestIDStoreAttributes.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "headers": {
              "aliases": [],
              "description": "Rest Id Store's headers.",
              "type": "list",
              "required": false,
              "suboptions": {
                "key": {
                  "aliases": [],
                  "description": "Rest Id Store's key.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "value": {
                  "aliases": [],
                  "description": "Rest Id Store's value.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "predefined": {
              "aliases": [],
              "description": "The cloud provider connected to of the RestIDStore. Options are - Azure, - Okta, - None.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "rootUrl": {
              "aliases": [],
              "description": "Url of the root of the RestIDStore.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "usernameSuffix": {
              "aliases": [],
              "description": "Suffix of the username domain.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "id": {
          "aliases": [],
          "description": "Rest Id Store's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Rest Id Store's name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Rest Id Store",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by name\n  cisco.ise.rest_id_store:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    description: string\n    ersRestIDStoreAttributes:\n      headers:\n      - key: string\n        value: string\n      predefined: string\n      rootUrl: string\n      usernameSuffix: string\n    id: string\n    name: string\n\n- name: Delete by name\n  cisco.ise.rest_id_store:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    name: string\n\n- name: Update by id\n  cisco.ise.rest_id_store:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    description: string\n    ersRestIDStoreAttributes:\n      headers:\n      - key: string\n        value: string\n      predefined: string\n      rootUrl: string\n      usernameSuffix: string\n    id: string\n    name: string\n\n- name: Delete by id\n  cisco.ise.rest_id_store:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n- name: Create\n  cisco.ise.rest_id_store:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    description: string\n    ersRestIDStoreAttributes:\n      headers:\n      - key: string\n        value: string\n      predefined: string\n      rootUrl: string\n      usernameSuffix: string\n    name: string\n\n"
  },
  "cisco.ise.rest_id_store_info": {
    "doc": {
      "description": "Get all Rest Id Store.\nGet Rest Id Store by id.\nGet Rest Id Store by name.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter query parameter. <br/> **Simple filtering** should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the \"filterType=or\" query string parameter. Each resource Data model description should specify if an attribute is a filtered field. <br/> Operator | Description <br/> ------------|----------------- <br/> EQ | Equals <br/> NEQ | Not Equals <br/> GT | Greater Than <br/> LT | Less Then <br/> STARTSW | Starts With <br/> NSTARTSW | Not Starts With <br/> ENDSW | Ends With <br/> NENDSW | Not Ends With <br/> CONTAINS | Contains <br/> NCONTAINS | Not Contains <br/>.\n",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "filterType": {
          "aliases": [],
          "description": "FilterType query parameter. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sortasc": {
          "aliases": [],
          "description": "Sortasc query parameter. Sort asc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sortdsc": {
          "aliases": [],
          "description": "Sortdsc query parameter. Sort desc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Rest Id Store",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Rest Id Store\n  cisco.ise.rest_id_store_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n    sortasc: string\n    sortdsc: string\n    filter: []\n    filterType: AND\n  register: result\n\n- name: Get Rest Id Store by id\n  cisco.ise.rest_id_store_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n- name: Get Rest Id Store by name\n  cisco.ise.rest_id_store_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    name: string\n  register: result\n\n"
  },
  "cisco.ise.self_registered_portal": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Self Registered Portal.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "customizations": {
          "aliases": [],
          "description": "Defines all of the Portal Customizations available.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "globalCustomizations": {
              "aliases": [],
              "description": "Self Registered Portal's globalCustomizations.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "backgroundImage": {
                  "aliases": [],
                  "description": "Self Registered Portal's backgroundImage.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "data": {
                      "aliases": [],
                      "description": "Represented as base 64 encoded string of the image byte array.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "bannerImage": {
                  "aliases": [],
                  "description": "Self Registered Portal's bannerImage.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "data": {
                      "aliases": [],
                      "description": "Represented as base 64 encoded string of the image byte array.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "bannerTitle": {
                  "aliases": [],
                  "description": "Self Registered Portal's bannerTitle.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "contactText": {
                  "aliases": [],
                  "description": "Self Registered Portal's contactText.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "desktopLogoImage": {
                  "aliases": [],
                  "description": "Self Registered Portal's desktopLogoImage.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "data": {
                      "aliases": [],
                      "description": "Represented as base 64 encoded string of the image byte array.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "footerElement": {
                  "aliases": [],
                  "description": "Self Registered Portal's footerElement.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "mobileLogoImage": {
                  "aliases": [],
                  "description": "Self Registered Portal's mobileLogoImage.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "data": {
                      "aliases": [],
                      "description": "Represented as base 64 encoded string of the image byte array.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                }
              }
            },
            "language": {
              "aliases": [],
              "description": "This property is supported only for Read operation and it allows to show the customizations in English. Other languages are not supported.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "viewLanguage": {
                  "aliases": [],
                  "description": "Self Registered Portal's viewLanguage.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "pageCustomizations": {
              "aliases": [],
              "description": "Represent the entire page customization as a giant dictionary.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "data": {
                  "aliases": [],
                  "description": "The Dictionary will be exposed here as key value pair.",
                  "type": "list",
                  "required": false,
                  "suboptions": {
                    "key": {
                      "aliases": [],
                      "description": "Self Registered Portal's key.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "value": {
                      "aliases": [],
                      "description": "Self Registered Portal's value.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                }
              }
            },
            "portalTheme": {
              "aliases": [],
              "description": "Self Registered Portal's portalTheme.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "id": {
                  "aliases": [],
                  "description": "Self Registered Portal's id.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "name": {
                  "aliases": [],
                  "description": "The system- or user-assigned name of the portal theme.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "themeData": {
                  "aliases": [],
                  "description": "A CSS file, represented as a Base64-encoded byte array.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "portalTweakSettings": {
              "aliases": [],
              "description": "The Tweak Settings are a customization of the Portal Theme that has been selected for the portal. When the Portal Theme selection is changed, the Tweak Settings are overwritten to match the values in the theme. The Tweak Settings can subsequently be changed by the user.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "bannerColor": {
                  "aliases": [],
                  "description": "Hex value of color.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "bannerTextColor": {
                  "aliases": [],
                  "description": "Self Registered Portal's bannerTextColor.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "pageBackgroundColor": {
                  "aliases": [],
                  "description": "Self Registered Portal's pageBackgroundColor.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "pageLabelAndTextColor": {
                  "aliases": [],
                  "description": "Self Registered Portal's pageLabelAndTextColor.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        },
        "description": {
          "aliases": [],
          "description": "Self Registered Portal's description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Self Registered Portal's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Self Registered Portal's name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "portalTestUrl": {
          "aliases": [],
          "description": "URL to bring up a test page for this portal.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "portalType": {
          "aliases": [],
          "description": "Allowed values - BYOD, - HOTSPOTGUEST, - MYDEVICE, - SELFREGGUEST, - SPONSOR, - SPONSOREDGUEST.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "settings": {
          "aliases": [],
          "description": "Defines all of the settings groups available for a portal.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "aupSettings": {
              "aliases": [],
              "description": "Self Registered Portal's aupSettings.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "displayFrequency": {
                  "aliases": [],
                  "description": "How the AUP should be displayed, either on page or as a link. Only valid if includeAup = true. Allowed Values - FIRSTLOGIN, - EVERYLOGIN, - RECURRING.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "displayFrequencyIntervalDays": {
                  "aliases": [],
                  "description": "Number of days between AUP confirmations (when displayFrequency = recurring).",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "includeAup": {
                  "aliases": [],
                  "description": "Require the portal user to read and accept an AUP.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "requireAupScrolling": {
                  "aliases": [],
                  "description": "Require the portal user to scroll to the end of the AUP. Only valid if requireAupAcceptance = true.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "requireScrolling": {
                  "aliases": [],
                  "description": "RequireScrolling flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "skipAupForEmployees": {
                  "aliases": [],
                  "description": "Only valid if requireAupAcceptance = trueG.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "useDiffAupForEmployees": {
                  "aliases": [],
                  "description": "Only valid if requireAupAcceptance = trueG.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "authSuccessSettings": {
              "aliases": [],
              "description": "Self Registered Portal's authSuccessSettings.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "redirectUrl": {
                  "aliases": [],
                  "description": "Self Registered Portal's redirectUrl.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "successRedirect": {
                  "aliases": [],
                  "description": "Self Registered Portal's successRedirect.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "byodSettings": {
              "aliases": [],
              "description": "Configuration of BYOD Device Welcome, Registration and Success steps.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "byodRegistrationSettings": {
                  "aliases": [],
                  "description": "Configuration of BYOD endpoint Registration step configuration.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "endPointIdentityGroupId": {
                      "aliases": [],
                      "description": "Identity group id for which endpoint belongs.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "showDeviceID": {
                      "aliases": [],
                      "description": "Display Device ID field during registration.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "byodRegistrationSuccessSettings": {
                  "aliases": [],
                  "description": "Configuration of BYOD endpoint Registration Success step configuration.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "redirectUrl": {
                      "aliases": [],
                      "description": "Target URL for redirection, used when successRedirect = URL.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "successRedirect": {
                      "aliases": [],
                      "description": "After an Authentication Success where should device be redirected. Allowed values - AUTHSUCCESSPAGE, - ORIGINATINGURL, - URL.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "byodWelcomeSettings": {
                  "aliases": [],
                  "description": "Configuration of BYOD endpoint welcome step configuration.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "aupDisplay": {
                      "aliases": [],
                      "description": "How the AUP should be displayed, either on page or as a link. Only valid if includeAup = true. Allowed values - ONPAGE, - ASLINK.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "enableBYOD": {
                      "aliases": [],
                      "description": "EnableBYOD flag.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "enableGuestAccess": {
                      "aliases": [],
                      "description": "EnableGuestAccess flag.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "includeAup": {
                      "aliases": [],
                      "description": "IncludeAup flag.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "requireAupAcceptance": {
                      "aliases": [],
                      "description": "RequireAupAcceptance flag.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "requireMDM": {
                      "aliases": [],
                      "description": "RequireMDM flag.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "requireScrolling": {
                      "aliases": [],
                      "description": "Require BYOD devices to scroll down to the bottom of the AUP, Only valid if includeAup = true.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                }
              }
            },
            "guestChangePasswordSettings": {
              "aliases": [],
              "description": "Self Registered Portal's guestChangePasswordSettings.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "allowChangePasswdAtFirstLogin": {
                  "aliases": [],
                  "description": "Allow guest to change their own passwords.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "guestDeviceRegistrationSettings": {
              "aliases": [],
              "description": "Self Registered Portal's guestDeviceRegistrationSettings.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "allowGuestsToRegisterDevices": {
                  "aliases": [],
                  "description": "Allow guests to register devices.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "autoRegisterGuestDevices": {
                  "aliases": [],
                  "description": "Automatically register guest devices.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "loginPageSettings": {
              "aliases": [],
              "description": "Portal Login Page settings groups follow.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "accessCode": {
                  "aliases": [],
                  "description": "Access code that must be entered by the portal user (only valid if requireAccessCode = true).",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "allowAlternateGuestPortal": {
                  "aliases": [],
                  "description": "AllowAlternateGuestPortal flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "allowForgotPassword": {
                  "aliases": [],
                  "description": "AllowForgotPassword flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "allowGuestToChangePassword": {
                  "aliases": [],
                  "description": "Require the portal user to enter an access code.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "allowGuestToCreateAccounts": {
                  "aliases": [],
                  "description": "AllowGuestToCreateAccounts flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "allowGuestToUseSocialAccounts": {
                  "aliases": [],
                  "description": "AllowGuestToUseSocialAccounts flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "allowShowGuestForm": {
                  "aliases": [],
                  "description": "AllowShowGuestForm flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "alternateGuestPortal": {
                  "aliases": [],
                  "description": "Self Registered Portal's alternateGuestPortal.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "aupDisplay": {
                  "aliases": [],
                  "description": "How the AUP should be displayed, either on page or as a link. Only valid if includeAup = true. Allowed values - ONPAGE, - ASLINK.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "includeAup": {
                  "aliases": [],
                  "description": "Include an Acceptable Use Policy (AUP) that should be displayed during login.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "maxFailedAttemptsBeforeRateLimit": {
                  "aliases": [],
                  "description": "Maximum failed login attempts before rate limiting.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "requireAccessCode": {
                  "aliases": [],
                  "description": "Require the portal user to enter an access code.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "requireAupAcceptance": {
                  "aliases": [],
                  "description": "Require the portal user to accept the AUP. Only valid if includeAup = true.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "socialConfigs": {
                  "aliases": [],
                  "description": "Self Registered Portal's socialConfigs.",
                  "type": "list",
                  "required": false,
                  "suboptions": {
                    "socialMediaType": {
                      "aliases": [],
                      "description": "Self Registered Portal's socialMediaType.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "socialMediaValue": {
                      "aliases": [],
                      "description": "Self Registered Portal's socialMediaValue.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "timeBetweenLoginsDuringRateLimit": {
                  "aliases": [],
                  "description": "Time between login attempts when rate limiting.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "portalSettings": {
              "aliases": [],
              "description": "The port, interface, certificate, and other basic settings of a portal.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "allowedInterfaces": {
                  "aliases": [],
                  "description": "Interfaces that the portal will be reachable on. Allowed values - eth0, - eth1, - eth2, - eth3, - eth4, - eth5, - bond0, - bond1, - bond2.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "alwaysUsedLanguage": {
                  "aliases": [],
                  "description": "Self Registered Portal's alwaysUsedLanguage.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "assignedGuestTypeForEmployee": {
                  "aliases": [],
                  "description": "Unique Id of a guest type. Employees using this portal as a guest inherit login options from the guest type.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "authenticationMethod": {
                  "aliases": [],
                  "description": "Unique Id of the identity source sequence.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "certificateGroupTag": {
                  "aliases": [],
                  "description": "Logical name of the x.509 server certificate that will be used for the portal.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "displayLang": {
                  "aliases": [],
                  "description": "Allowed values - USEBROWSERLOCALE, - ALWAYSUSE.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "fallbackLanguage": {
                  "aliases": [],
                  "description": "Used when displayLang = USEBROWSERLOCALE.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "httpsPort": {
                  "aliases": [],
                  "description": "The port number that the allowed interfaces will listen on. Range from 8000 to 8999.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "postAccessBannerSettings": {
              "aliases": [],
              "description": "Self Registered Portal's postAccessBannerSettings.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "includePostAccessBanner": {
                  "aliases": [],
                  "description": "IncludePostAccessBanner flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "postLoginBannerSettings": {
              "aliases": [],
              "description": "Self Registered Portal's postLoginBannerSettings.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "includePostAccessBanner": {
                  "aliases": [],
                  "description": "Include a Post-Login Banner page.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "selfRegPageSettings": {
              "aliases": [],
              "description": "Self Registered Portal's selfRegPageSettings.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "accountValidityDuration": {
                  "aliases": [],
                  "description": "Self-registered guest account is valid for this many account_validity_time_units.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "accountValidityTimeUnits": {
                  "aliases": [],
                  "description": "Time units for account_validity_duration. Allowed Values - DAYS, - HOURS, - MINUTES.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "allowGraceAccess": {
                  "aliases": [],
                  "description": "AllowGraceAccess flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "approvalEmailAddresses": {
                  "aliases": [],
                  "description": "Only valid if requireGuestApproval = true and sendApprovalRequestTo = SELECTEDEMAILADDRESSES.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "approveDenyLinksTimeUnits": {
                  "aliases": [],
                  "description": "This attribute, along with approveDenyLinksValidFor, specifies how long the link can be used. Only valid if requireGuestApproval = true. Allowed Values - DAYS, - HOURS, - MINUTES.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "approveDenyLinksValidFor": {
                  "aliases": [],
                  "description": "This attribute, along with approveDenyLinksTimeUnits, specifies how long the link can be used. Only valid if requireGuestApproval = true.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "assignGuestsToGuestType": {
                  "aliases": [],
                  "description": "Guests are assigned to this guest type.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "aupDisplay": {
                  "aliases": [],
                  "description": "How the AUP should be displayed, either on page or as a link. Only valid if includeAup = true. Allowed values - ONPAGE, - ASLINK.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "authenticateSponsorsUsingPortalList": {
                  "aliases": [],
                  "description": "Self Registered Portal's authenticateSponsorsUsingPortalList.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "autoLoginSelfWait": {
                  "aliases": [],
                  "description": "Allow guests to login automatically from self-registration after sponsor's approval. No need to provide the credentials by guest to login.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "autoLoginTimePeriod": {
                  "aliases": [],
                  "description": "Waiting period for auto login until sponsor's approval. If time exceeds, guest has to login manually by providing the credentials. Default value is 5 minutes.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "credentialNotificationUsingEmail": {
                  "aliases": [],
                  "description": "If true, send credential notification upon approval using email. Only valid if requireGuestApproval = true.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "credentialNotificationUsingSms": {
                  "aliases": [],
                  "description": "If true, send credential notification upon approval using SMS. Only valid if requireGuestApproval = true.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "enableGuestEmailBlacklist": {
                  "aliases": [],
                  "description": "Disallow guests with an e-mail address from selected domains.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "enableGuestEmailWhitelist": {
                  "aliases": [],
                  "description": "Allow guests with an e-mail address from selected domains.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "fieldCompany": {
                  "aliases": [],
                  "description": "Self Registered Portal's fieldCompany.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "include": {
                      "aliases": [],
                      "description": "Include flag.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "require": {
                      "aliases": [],
                      "description": "Only applicable if include = true.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "fieldEmailAddr": {
                  "aliases": [],
                  "description": "Self Registered Portal's fieldEmailAddr.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "include": {
                      "aliases": [],
                      "description": "Include flag.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "require": {
                      "aliases": [],
                      "description": "Only applicable if include = true.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "fieldFirstName": {
                  "aliases": [],
                  "description": "Self Registered Portal's fieldFirstName.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "include": {
                      "aliases": [],
                      "description": "Include flag.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "require": {
                      "aliases": [],
                      "description": "Only applicable if include = true.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "fieldLastName": {
                  "aliases": [],
                  "description": "Self Registered Portal's fieldLastName.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "include": {
                      "aliases": [],
                      "description": "Include flag.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "require": {
                      "aliases": [],
                      "description": "Only applicable if include = true.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "fieldLocation": {
                  "aliases": [],
                  "description": "Self Registered Portal's fieldLocation.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "include": {
                      "aliases": [],
                      "description": "Include flag.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "require": {
                      "aliases": [],
                      "description": "Only applicable if include = true.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "fieldPersonBeingVisited": {
                  "aliases": [],
                  "description": "Self Registered Portal's fieldPersonBeingVisited.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "include": {
                      "aliases": [],
                      "description": "Include flag.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "require": {
                      "aliases": [],
                      "description": "Only applicable if include = true.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "fieldPhoneNo": {
                  "aliases": [],
                  "description": "Self Registered Portal's fieldPhoneNo.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "include": {
                      "aliases": [],
                      "description": "Include flag.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "require": {
                      "aliases": [],
                      "description": "Only applicable if include = true.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "fieldReasonForVisit": {
                  "aliases": [],
                  "description": "Self Registered Portal's fieldReasonForVisit.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "include": {
                      "aliases": [],
                      "description": "Include flag.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "require": {
                      "aliases": [],
                      "description": "Only applicable if include = true.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "fieldSmsProvider": {
                  "aliases": [],
                  "description": "Self Registered Portal's fieldSmsProvider.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "include": {
                      "aliases": [],
                      "description": "Include flag.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "require": {
                      "aliases": [],
                      "description": "Only applicable if include = true.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "fieldUserName": {
                  "aliases": [],
                  "description": "Self Registered Portal's fieldUserName.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "include": {
                      "aliases": [],
                      "description": "Include flag.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "require": {
                      "aliases": [],
                      "description": "Only applicable if include = true.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "graceAccessExpireInterval": {
                  "aliases": [],
                  "description": "Self Registered Portal's graceAccessExpireInterval.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "graceAccessSendAccountExpiration": {
                  "aliases": [],
                  "description": "GraceAccessSendAccountExpiration flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "guestEmailBlacklistDomains": {
                  "aliases": [],
                  "description": "Disallow guests with an e-mail address from selected domains.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "guestEmailWhitelistDomains": {
                  "aliases": [],
                  "description": "Self-registered guests whose e-mail address is in one of these domains will be allowed. Only valid if enableGuestEmailWhitelist = true.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "includeAup": {
                  "aliases": [],
                  "description": "Include an Acceptable Use Policy (AUP) that should be displayed during login.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "postRegistrationRedirect": {
                  "aliases": [],
                  "description": "After the registration submission direct the guest user to one of the following pages. Only valid if requireGuestApproval = true. Allowed Values - SELFREGISTRATIONSUCCESS, - LOGINPAGEWITHINSTRUCTIONS - URL.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "postRegistrationRedirectUrl": {
                  "aliases": [],
                  "description": "URL where guest user is redirected after registration. Only valid if requireGuestApproval = true and postRegistrationRedirect = URL.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "registrationCode": {
                  "aliases": [],
                  "description": "The registration code that the guest user must enter.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "requireApproverToAuthenticate": {
                  "aliases": [],
                  "description": "When self-registered guests require approval, an approval request is e-mailed to one or more sponsor users. If the Cisco ISE Administrator chooses to include an approval link in the e-mail, a sponsor user who clicks the link will be required to enter their username and password if this attribute is true. Only valid if requireGuestApproval = true.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "requireAupAcceptance": {
                  "aliases": [],
                  "description": "Require the portal user to accept the AUP. Only valid if includeAup = true.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "requireGuestApproval": {
                  "aliases": [],
                  "description": "Require self-registered guests to be approved if true.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "requireRegistrationCode": {
                  "aliases": [],
                  "description": "Self-registered guests are required to enter a registration code.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "selectableLocations": {
                  "aliases": [],
                  "description": "Guests can choose from these locations to set their time zone.",
                  "type": "list",
                  "required": false,
                  "elements": "str",
                  "suboptions": {}
                },
                "selectableSmsProviders": {
                  "aliases": [],
                  "description": "This attribute is an array of SMS provider names.",
                  "type": "list",
                  "required": false,
                  "elements": "str",
                  "suboptions": {}
                },
                "sendApprovalRequestTo": {
                  "aliases": [],
                  "description": "Specifies where approval requests are sent. Only valid if requireGuestApproval = true. Allowed Values - SELECTEDEMAILADDRESSES, - PERSONBEINGVISITED.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "sponsorPortalList": {
                  "aliases": [],
                  "description": "Self Registered Portal's sponsorPortalList.",
                  "type": "list",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "selfRegSuccessSettings": {
              "aliases": [],
              "description": "Self Registered Portal's selfRegSuccessSettings.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "allowGuestLoginFromSelfregSuccessPage": {
                  "aliases": [],
                  "description": "AllowGuestLoginFromSelfregSuccessPage flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "allowGuestSendSelfUsingEmail": {
                  "aliases": [],
                  "description": "AllowGuestSendSelfUsingEmail flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "allowGuestSendSelfUsingPrint": {
                  "aliases": [],
                  "description": "AllowGuestSendSelfUsingPrint flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "allowGuestSendSelfUsingSms": {
                  "aliases": [],
                  "description": "AllowGuestSendSelfUsingSms flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "aupOnPage": {
                  "aliases": [],
                  "description": "AupOnPage flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "includeAup": {
                  "aliases": [],
                  "description": "IncludeAup flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "includeCompany": {
                  "aliases": [],
                  "description": "IncludeCompany flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "includeEmailAddr": {
                  "aliases": [],
                  "description": "IncludeEmailAddr flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "includeFirstName": {
                  "aliases": [],
                  "description": "IncludeFirstName flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "includeLastName": {
                  "aliases": [],
                  "description": "IncludeLastName flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "includeLocation": {
                  "aliases": [],
                  "description": "IncludeLocation flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "includePassword": {
                  "aliases": [],
                  "description": "IncludePassword flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "includePersonBeingVisited": {
                  "aliases": [],
                  "description": "IncludePersonBeingVisited flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "includePhoneNo": {
                  "aliases": [],
                  "description": "IncludePhoneNo flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "includeReasonForVisit": {
                  "aliases": [],
                  "description": "IncludeReasonForVisit flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "includeSmsProvider": {
                  "aliases": [],
                  "description": "IncludeSmsProvider flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "includeUserName": {
                  "aliases": [],
                  "description": "IncludeUserName flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "requireAupAcceptance": {
                  "aliases": [],
                  "description": "RequireAupAcceptance flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "requireAupScrolling": {
                  "aliases": [],
                  "description": "RequireAupScrolling flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "supportInfoSettings": {
              "aliases": [],
              "description": "Self Registered Portal's supportInfoSettings.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "defaultEmptyFieldValue": {
                  "aliases": [],
                  "description": "The default value displayed for an empty field. Only valid when emptyFieldDisplay = DISPLAYWITHDEFAULTVALUE.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "emptyFieldDisplay": {
                  "aliases": [],
                  "description": "Specifies how empty fields are handled on the Support Information Page. Allowed values - HIDE, - DISPLAYWITHNOVALUE, - DISPLAYWITHDEFAULTVALUE.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "includeBrowserUserAgent": {
                  "aliases": [],
                  "description": "IncludeBrowserUserAgent flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "includeFailureCode": {
                  "aliases": [],
                  "description": "IncludeFailureCode flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "includeIpAddress": {
                  "aliases": [],
                  "description": "IncludeIpAddress flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "includeMacAddr": {
                  "aliases": [],
                  "description": "IncludeMacAddr flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "includePolicyServer": {
                  "aliases": [],
                  "description": "IncludePolicyServer flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "includeSupportInfoPage": {
                  "aliases": [],
                  "description": "IncludeSupportInfoPage flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Self Registered Portal",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.self_registered_portal:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    customizations:\n      globalCustomizations:\n        backgroundImage:\n          data: string\n        bannerImage:\n          data: string\n        bannerTitle: string\n        contactText: string\n        desktopLogoImage:\n          data: string\n        footerElement: string\n        mobileLogoImage:\n          data: string\n      language:\n        viewLanguage: string\n      pageCustomizations:\n        data:\n        - key: string\n          value: string\n      portalTheme:\n        id: string\n        name: string\n        themeData: string\n      portalTweakSettings:\n        bannerColor: string\n        bannerTextColor: string\n        pageBackgroundColor: string\n        pageLabelAndTextColor: string\n    description: string\n    id: string\n    name: string\n    portalTestUrl: string\n    portalType: string\n    settings:\n      aupSettings:\n        displayFrequency: string\n        displayFrequencyIntervalDays: 0\n        includeAup: true\n        requireAupScrolling: true\n        requireScrolling: true\n        skipAupForEmployees: true\n        useDiffAupForEmployees: true\n      authSuccessSettings:\n        redirectUrl: string\n        successRedirect: string\n      byodSettings:\n        byodRegistrationSettings:\n          endPointIdentityGroupId: string\n          showDeviceID: true\n        byodRegistrationSuccessSettings:\n          redirectUrl: string\n          successRedirect: string\n        byodWelcomeSettings:\n          aupDisplay: string\n          enableBYOD: true\n          enableGuestAccess: true\n          includeAup: true\n          requireAupAcceptance: true\n          requireMDM: true\n          requireScrolling: true\n      guestChangePasswordSettings:\n        allowChangePasswdAtFirstLogin: true\n      guestDeviceRegistrationSettings:\n        allowGuestsToRegisterDevices: true\n        autoRegisterGuestDevices: true\n      loginPageSettings:\n        accessCode: string\n        allowAlternateGuestPortal: true\n        allowForgotPassword: true\n        allowGuestToChangePassword: true\n        allowGuestToCreateAccounts: true\n        allowGuestToUseSocialAccounts: true\n        allowShowGuestForm: true\n        alternateGuestPortal: string\n        aupDisplay: string\n        includeAup: true\n        maxFailedAttemptsBeforeRateLimit: 0\n        requireAccessCode: true\n        requireAupAcceptance: true\n        socialConfigs:\n        - socialMediaType: string\n          socialMediaValue: string\n        timeBetweenLoginsDuringRateLimit: 0\n      portalSettings:\n        allowedInterfaces: string\n        alwaysUsedLanguage: string\n        assignedGuestTypeForEmployee: string\n        authenticationMethod: string\n        certificateGroupTag: string\n        displayLang: string\n        fallbackLanguage: string\n        httpsPort: 0\n      postAccessBannerSettings:\n        includePostAccessBanner: true\n      postLoginBannerSettings:\n        includePostAccessBanner: true\n      selfRegPageSettings:\n        accountValidityDuration: 0\n        accountValidityTimeUnits: string\n        allowGraceAccess: true\n        approvalEmailAddresses: string\n        approveDenyLinksTimeUnits: string\n        approveDenyLinksValidFor: 0\n        assignGuestsToGuestType: string\n        aupDisplay: string\n        authenticateSponsorsUsingPortalList: string\n        autoLoginSelfWait: true\n        autoLoginTimePeriod: 0\n        credentialNotificationUsingEmail: true\n        credentialNotificationUsingSms: true\n        enableGuestEmailBlacklist: true\n        enableGuestEmailWhitelist: true\n        fieldCompany:\n          include: true\n          require: true\n        fieldEmailAddr:\n          include: true\n          require: true\n        fieldFirstName:\n          include: true\n          require: true\n        fieldLastName:\n          include: true\n          require: true\n        fieldLocation:\n          include: true\n          require: true\n        fieldPersonBeingVisited:\n          include: true\n          require: true\n        fieldPhoneNo:\n          include: true\n          require: true\n        fieldReasonForVisit:\n          include: true\n          require: true\n        fieldSmsProvider:\n          include: true\n          require: true\n        fieldUserName:\n          include: true\n          require: true\n        graceAccessExpireInterval: 0\n        graceAccessSendAccountExpiration: true\n        guestEmailBlacklistDomains: string\n        guestEmailWhitelistDomains: string\n        includeAup: true\n        postRegistrationRedirect: string\n        postRegistrationRedirectUrl: string\n        registrationCode: string\n        requireApproverToAuthenticate: true\n        requireAupAcceptance: true\n        requireGuestApproval: true\n        requireRegistrationCode: true\n        selectableLocations:\n        - string\n        selectableSmsProviders:\n        - string\n        sendApprovalRequestTo: string\n        sponsorPortalList: []\n      selfRegSuccessSettings:\n        allowGuestLoginFromSelfregSuccessPage: true\n        allowGuestSendSelfUsingEmail: true\n        allowGuestSendSelfUsingPrint: true\n        allowGuestSendSelfUsingSms: true\n        aupOnPage: true\n        includeAup: true\n        includeCompany: true\n        includeEmailAddr: true\n        includeFirstName: true\n        includeLastName: true\n        includeLocation: true\n        includePassword: true\n        includePersonBeingVisited: true\n        includePhoneNo: true\n        includeReasonForVisit: true\n        includeSmsProvider: true\n        includeUserName: true\n        requireAupAcceptance: true\n        requireAupScrolling: true\n      supportInfoSettings:\n        defaultEmptyFieldValue: string\n        emptyFieldDisplay: string\n        includeBrowserUserAgent: true\n        includeFailureCode: true\n        includeIpAddress: true\n        includeMacAddr: true\n        includePolicyServer: true\n        includeSupportInfoPage: true\n\n- name: Delete by id\n  cisco.ise.self_registered_portal:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n- name: Create\n  cisco.ise.self_registered_portal:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    customizations:\n      globalCustomizations:\n        backgroundImage:\n          data: string\n        bannerImage:\n          data: string\n        bannerTitle: string\n        contactText: string\n        desktopLogoImage:\n          data: string\n        footerElement: string\n        mobileLogoImage:\n          data: string\n      language:\n        viewLanguage: string\n      pageCustomizations:\n        data:\n        - key: string\n          value: string\n      portalTheme:\n        id: string\n        name: string\n        themeData: string\n      portalTweakSettings:\n        bannerColor: string\n        bannerTextColor: string\n        pageBackgroundColor: string\n        pageLabelAndTextColor: string\n    description: string\n    name: string\n    portalTestUrl: string\n    portalType: string\n    settings:\n      aupSettings:\n        displayFrequency: string\n        displayFrequencyIntervalDays: 0\n        includeAup: true\n        requireAupScrolling: true\n        requireScrolling: true\n        skipAupForEmployees: true\n        useDiffAupForEmployees: true\n      authSuccessSettings:\n        redirectUrl: string\n        successRedirect: string\n      byodSettings:\n        byodRegistrationSettings:\n          endPointIdentityGroupId: string\n          showDeviceID: true\n        byodRegistrationSuccessSettings:\n          redirectUrl: string\n          successRedirect: string\n        byodWelcomeSettings:\n          aupDisplay: string\n          enableBYOD: true\n          enableGuestAccess: true\n          includeAup: true\n          requireAupAcceptance: true\n          requireMDM: true\n          requireScrolling: true\n      guestChangePasswordSettings:\n        allowChangePasswdAtFirstLogin: true\n      guestDeviceRegistrationSettings:\n        allowGuestsToRegisterDevices: true\n        autoRegisterGuestDevices: true\n      loginPageSettings:\n        accessCode: string\n        allowAlternateGuestPortal: true\n        allowForgotPassword: true\n        allowGuestToChangePassword: true\n        allowGuestToCreateAccounts: true\n        allowGuestToUseSocialAccounts: true\n        allowShowGuestForm: true\n        alternateGuestPortal: string\n        aupDisplay: string\n        includeAup: true\n        maxFailedAttemptsBeforeRateLimit: 0\n        requireAccessCode: true\n        requireAupAcceptance: true\n        socialConfigs:\n        - socialMediaType: string\n          socialMediaValue: string\n        timeBetweenLoginsDuringRateLimit: 0\n      portalSettings:\n        allowedInterfaces: string\n        alwaysUsedLanguage: string\n        assignedGuestTypeForEmployee: string\n        authenticationMethod: string\n        certificateGroupTag: string\n        displayLang: string\n        fallbackLanguage: string\n        httpsPort: 0\n      postAccessBannerSettings:\n        includePostAccessBanner: true\n      postLoginBannerSettings:\n        includePostAccessBanner: true\n      selfRegPageSettings:\n        accountValidityDuration: 0\n        accountValidityTimeUnits: string\n        allowGraceAccess: true\n        approvalEmailAddresses: string\n        approveDenyLinksTimeUnits: string\n        approveDenyLinksValidFor: 0\n        assignGuestsToGuestType: string\n        aupDisplay: string\n        authenticateSponsorsUsingPortalList: string\n        autoLoginSelfWait: true\n        autoLoginTimePeriod: 0\n        credentialNotificationUsingEmail: true\n        credentialNotificationUsingSms: true\n        enableGuestEmailBlacklist: true\n        enableGuestEmailWhitelist: true\n        fieldCompany:\n          include: true\n          require: true\n        fieldEmailAddr:\n          include: true\n          require: true\n        fieldFirstName:\n          include: true\n          require: true\n        fieldLastName:\n          include: true\n          require: true\n        fieldLocation:\n          include: true\n          require: true\n        fieldPersonBeingVisited:\n          include: true\n          require: true\n        fieldPhoneNo:\n          include: true\n          require: true\n        fieldReasonForVisit:\n          include: true\n          require: true\n        fieldSmsProvider:\n          include: true\n          require: true\n        fieldUserName:\n          include: true\n          require: true\n        graceAccessExpireInterval: 0\n        graceAccessSendAccountExpiration: true\n        guestEmailBlacklistDomains: string\n        guestEmailWhitelistDomains: string\n        includeAup: true\n        postRegistrationRedirect: string\n        postRegistrationRedirectUrl: string\n        registrationCode: string\n        requireApproverToAuthenticate: true\n        requireAupAcceptance: true\n        requireGuestApproval: true\n        requireRegistrationCode: true\n        selectableLocations:\n        - string\n        selectableSmsProviders:\n        - string\n        sendApprovalRequestTo: string\n        sponsorPortalList: []\n      selfRegSuccessSettings:\n        allowGuestLoginFromSelfregSuccessPage: true\n        allowGuestSendSelfUsingEmail: true\n        allowGuestSendSelfUsingPrint: true\n        allowGuestSendSelfUsingSms: true\n        aupOnPage: true\n        includeAup: true\n        includeCompany: true\n        includeEmailAddr: true\n        includeFirstName: true\n        includeLastName: true\n        includeLocation: true\n        includePassword: true\n        includePersonBeingVisited: true\n        includePhoneNo: true\n        includeReasonForVisit: true\n        includeSmsProvider: true\n        includeUserName: true\n        requireAupAcceptance: true\n        requireAupScrolling: true\n      supportInfoSettings:\n        defaultEmptyFieldValue: string\n        emptyFieldDisplay: string\n        includeBrowserUserAgent: true\n        includeFailureCode: true\n        includeIpAddress: true\n        includeMacAddr: true\n        includePolicyServer: true\n        includeSupportInfoPage: true\n\n"
  },
  "cisco.ise.self_registered_portal_info": {
    "doc": {
      "description": "Get all Self Registered Portal.\nGet Self Registered Portal by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter query parameter. <br/> **Simple filtering** should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the \"filterType=or\" query string parameter. Each resource Data model description should specify if an attribute is a filtered field. <br/> Operator | Description <br/> ------------|----------------- <br/> EQ | Equals <br/> NEQ | Not Equals <br/> GT | Greater Than <br/> LT | Less Then <br/> STARTSW | Starts With <br/> NSTARTSW | Not Starts With <br/> ENDSW | Ends With <br/> NENDSW | Not Ends With <br/> CONTAINS | Contains <br/> NCONTAINS | Not Contains <br/>.\n",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "filterType": {
          "aliases": [],
          "description": "FilterType query parameter. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sortasc": {
          "aliases": [],
          "description": "Sortasc query parameter. Sort asc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sortdsc": {
          "aliases": [],
          "description": "Sortdsc query parameter. Sort desc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Self Registered Portal",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Self Registered Portal\n  cisco.ise.self_registered_portal_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n    sortasc: string\n    sortdsc: string\n    filter: []\n    filterType: AND\n  register: result\n\n- name: Get Self Registered Portal by id\n  cisco.ise.self_registered_portal_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.session_service_node_info": {
    "doc": {
      "description": "Get all Session Service Node.\nGet Session Service Node by id.\nGet Session Service Node by name.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Session Service Node",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Session Service Node\n  cisco.ise.session_service_node_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n  register: result\n\n- name: Get Session Service Node by id\n  cisco.ise.session_service_node_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n- name: Get Session Service Node by name\n  cisco.ise.session_service_node_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    name: string\n  register: result\n\n"
  },
  "cisco.ise.sg_acl": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Sg Acl.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "aclcontent": {
          "aliases": [],
          "description": "Sg Acl's aclcontent.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Sg Acl's description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "generationId": {
          "aliases": [],
          "description": "Sg Acl's generationId.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Sg Acl's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipVersion": {
          "aliases": [],
          "description": "Allowed values - IPV4, - IPV6, - IP_AGNOSTIC.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "isReadOnly": {
          "aliases": [],
          "description": "IsReadOnly flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "modelledContent": {
          "aliases": [],
          "description": "Modelled content of contract.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Sg Acl's name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Sg Acl",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.sg_acl:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    aclcontent: string\n    description: string\n    generationId: string\n    id: string\n    ipVersion: string\n    isReadOnly: true\n    modelledContent: {}\n    name: string\n\n- name: Delete by id\n  cisco.ise.sg_acl:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n- name: Create\n  cisco.ise.sg_acl:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    aclcontent: string\n    description: string\n    generationId: string\n    ipVersion: string\n    isReadOnly: true\n    modelledContent: {}\n    name: string\n\n"
  },
  "cisco.ise.sg_acl_bulk_monitor_status_info": {
    "doc": {
      "description": "Get Sg Acl Bulk Monitor Status by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "bulkid": {
          "aliases": [],
          "description": "Bulkid path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Sg Acl Bulk Monitor Status",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get Sg Acl Bulk Monitor Status by id\n  cisco.ise.sg_acl_bulk_monitor_status_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    bulkid: string\n  register: result\n\n"
  },
  "cisco.ise.sg_acl_bulk_request": {
    "doc": {
      "description": "Manage operation update of the resource Sg Acl Bulk Request.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "operationType": {
          "aliases": [],
          "description": "Sg Acl Bulk Request's operationType.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "resourceMediaType": {
          "aliases": [],
          "description": "Sg Acl Bulk Request's resourceMediaType.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Sg Acl Bulk Request",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update all\n  cisco.ise.sg_acl_bulk_request:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    operationType: string\n    resourceMediaType: string\n\n"
  },
  "cisco.ise.sg_acl_info": {
    "doc": {
      "description": "Get all Sg Acl.\nGet Sg Acl by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter query parameter. <br/> **Simple filtering** should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the \"filterType=or\" query string parameter. Each resource Data model description should specify if an attribute is a filtered field. <br/> Operator | Description <br/> ------------|----------------- <br/> EQ | Equals <br/> NEQ | Not Equals <br/> GT | Greater Than <br/> LT | Less Then <br/> STARTSW | Starts With <br/> NSTARTSW | Not Starts With <br/> ENDSW | Ends With <br/> NENDSW | Not Ends With <br/> CONTAINS | Contains <br/> NCONTAINS | Not Contains <br/>.\n",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "filterType": {
          "aliases": [],
          "description": "FilterType query parameter. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sortasc": {
          "aliases": [],
          "description": "Sortasc query parameter. Sort asc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sortdsc": {
          "aliases": [],
          "description": "Sortdsc query parameter. Sort desc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Sg Acl",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Sg Acl\n  cisco.ise.sg_acl_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n    sortasc: string\n    sortdsc: string\n    filter: []\n    filterType: AND\n  register: result\n\n- name: Get Sg Acl by id\n  cisco.ise.sg_acl_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.sg_mapping": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Sg Mapping.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "deployTo": {
          "aliases": [],
          "description": "Mandatory unless mappingGroup is set or unless deployType=ALL.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "deployType": {
          "aliases": [],
          "description": "Allowed values - ALL, - ND, - NDG.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostIp": {
          "aliases": [],
          "description": "Mandatory if hostName is empty -- valid IP.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostName": {
          "aliases": [],
          "description": "Mandatory if hostIp is empty.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Sg Mapping's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "mappingGroup": {
          "aliases": [],
          "description": "Mapping Group Id. Mandatory unless sgt and deployTo and deployType are set.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Sg Mapping's name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sgt": {
          "aliases": [],
          "description": "Mandatory unless mappingGroup is set.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Sg Mapping",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.sg_mapping:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    deployTo: string\n    deployType: string\n    hostIp: string\n    hostName: string\n    id: string\n    mappingGroup: string\n    name: string\n    sgt: string\n\n- name: Delete by id\n  cisco.ise.sg_mapping:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n- name: Create\n  cisco.ise.sg_mapping:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    deployTo: string\n    deployType: string\n    hostIp: string\n    hostName: string\n    mappingGroup: string\n    name: string\n    sgt: string\n\n"
  },
  "cisco.ise.sg_mapping_bulk_monitor_status_info": {
    "doc": {
      "description": "Get Sg Mapping Bulk Monitor Status by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "bulkid": {
          "aliases": [],
          "description": "Bulkid path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Sg Mapping Bulk Monitor Status",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get Sg Mapping Bulk Monitor Status by id\n  cisco.ise.sg_mapping_bulk_monitor_status_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    bulkid: string\n  register: result\n\n"
  },
  "cisco.ise.sg_mapping_bulk_request": {
    "doc": {
      "description": "Manage operation update of the resource Sg Mapping Bulk Request.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "operationType": {
          "aliases": [],
          "description": "Sg Mapping Bulk Request's operationType.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "resourceMediaType": {
          "aliases": [],
          "description": "Sg Mapping Bulk Request's resourceMediaType.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Sg Mapping Bulk Request",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update all\n  cisco.ise.sg_mapping_bulk_request:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    operationType: string\n    resourceMediaType: string\n\n"
  },
  "cisco.ise.sg_mapping_deploy": {
    "doc": {
      "description": "Manage operation update of the resource Sg Mapping Deploy.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Sg Mapping Deploy",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.sg_mapping_deploy:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n\n"
  },
  "cisco.ise.sg_mapping_deploy_all": {
    "doc": {
      "description": "Manage operation update of the resource Sg Mapping Deploy All.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Sg Mapping Deploy All",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update all\n  cisco.ise.sg_mapping_deploy_all:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n\n"
  },
  "cisco.ise.sg_mapping_deploy_status_info": {
    "doc": {
      "description": "Get all Sg Mapping Deploy Status.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Sg Mapping Deploy Status",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Sg Mapping Deploy Status\n  cisco.ise.sg_mapping_deploy_status_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.sg_mapping_group": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Sg Mapping Group.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "deployTo": {
          "aliases": [],
          "description": "Mandatory unless mappingGroup is set or unless deployType=ALL.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "deployType": {
          "aliases": [],
          "description": "Allowed values - ALL, - ND, - NDG.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Sg Mapping Group's name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sgt": {
          "aliases": [],
          "description": "Mandatory unless mappingGroup is set.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Sg Mapping Group",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.sg_mapping_group:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    deployTo: string\n    deployType: string\n    id: string\n    name: string\n    sgt: string\n\n- name: Delete by id\n  cisco.ise.sg_mapping_group:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n- name: Create\n  cisco.ise.sg_mapping_group:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    deployTo: string\n    deployType: string\n    name: string\n    sgt: string\n\n"
  },
  "cisco.ise.sg_mapping_group_bulk_monitor_status_info": {
    "doc": {
      "description": "Get Sg Mapping Group Bulk Monitor Status by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "bulkid": {
          "aliases": [],
          "description": "Bulkid path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Sg Mapping Group Bulk Monitor Status",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get Sg Mapping Group Bulk Monitor Status by id\n  cisco.ise.sg_mapping_group_bulk_monitor_status_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    bulkid: string\n  register: result\n\n"
  },
  "cisco.ise.sg_mapping_group_bulk_request": {
    "doc": {
      "description": "Manage operation update of the resource Sg Mapping Group Bulk Request.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "operationType": {
          "aliases": [],
          "description": "Sg Mapping Group Bulk Request's operationType.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "resourceMediaType": {
          "aliases": [],
          "description": "Sg Mapping Group Bulk Request's resourceMediaType.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Sg Mapping Group Bulk Request",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update all\n  cisco.ise.sg_mapping_group_bulk_request:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    operationType: string\n    resourceMediaType: string\n\n"
  },
  "cisco.ise.sg_mapping_group_deploy": {
    "doc": {
      "description": "Manage operation update of the resource Sg Mapping Group Deploy.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Sg Mapping Group Deploy",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.sg_mapping_group_deploy:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n\n"
  },
  "cisco.ise.sg_mapping_group_deploy_all": {
    "doc": {
      "description": "Manage operation update of the resource Sg Mapping Group Deploy All.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Sg Mapping Group Deploy All",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update all\n  cisco.ise.sg_mapping_group_deploy_all:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n\n"
  },
  "cisco.ise.sg_mapping_group_deploy_status_info": {
    "doc": {
      "description": "Get all Sg Mapping Group Deploy Status.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Sg Mapping Group Deploy Status",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Sg Mapping Group Deploy Status\n  cisco.ise.sg_mapping_group_deploy_status_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.sg_mapping_group_info": {
    "doc": {
      "description": "Get all Sg Mapping Group.\nGet Sg Mapping Group by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter query parameter. <br/> **Simple filtering** should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the \"filterType=or\" query string parameter. Each resource Data model description should specify if an attribute is a filtered field. <br/> Operator | Description <br/> ------------|----------------- <br/> EQ | Equals <br/> NEQ | Not Equals <br/> GT | Greater Than <br/> LT | Less Then <br/> STARTSW | Starts With <br/> NSTARTSW | Not Starts With <br/> ENDSW | Ends With <br/> NENDSW | Not Ends With <br/> CONTAINS | Contains <br/> NCONTAINS | Not Contains <br/>.\n",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "filterType": {
          "aliases": [],
          "description": "FilterType query parameter. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sortasc": {
          "aliases": [],
          "description": "Sortasc query parameter. Sort asc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sortdsc": {
          "aliases": [],
          "description": "Sortdsc query parameter. Sort desc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Sg Mapping Group",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Sg Mapping Group\n  cisco.ise.sg_mapping_group_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n    sortasc: string\n    sortdsc: string\n    filter: []\n    filterType: AND\n  register: result\n\n- name: Get Sg Mapping Group by id\n  cisco.ise.sg_mapping_group_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.sg_mapping_info": {
    "doc": {
      "description": "Get all Sg Mapping.\nGet Sg Mapping by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter query parameter. <br/> **Simple filtering** should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the \"filterType=or\" query string parameter. Each resource Data model description should specify if an attribute is a filtered field. <br/> Operator | Description <br/> ------------|----------------- <br/> EQ | Equals <br/> NEQ | Not Equals <br/> GT | Greater Than <br/> LT | Less Then <br/> STARTSW | Starts With <br/> NSTARTSW | Not Starts With <br/> ENDSW | Ends With <br/> NENDSW | Not Ends With <br/> CONTAINS | Contains <br/> NCONTAINS | Not Contains <br/>.\n",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "filterType": {
          "aliases": [],
          "description": "FilterType query parameter. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sortasc": {
          "aliases": [],
          "description": "Sortasc query parameter. Sort asc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sortdsc": {
          "aliases": [],
          "description": "Sortdsc query parameter. Sort desc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Sg Mapping",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Sg Mapping\n  cisco.ise.sg_mapping_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n    sortasc: string\n    sortdsc: string\n    filter: []\n    filterType: AND\n  register: result\n\n- name: Get Sg Mapping by id\n  cisco.ise.sg_mapping_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.sg_to_vn_to_vlan": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Sg To Vn To Vlan.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "description": {
          "aliases": [],
          "description": "Sg To Vn To Vlan's description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Sg To Vn To Vlan's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Sg To Vn To Vlan's name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sgtId": {
          "aliases": [],
          "description": "Sg To Vn To Vlan's sgtId.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "virtualnetworklist": {
          "aliases": [],
          "description": "Sg To Vn To Vlan's virtualnetworklist.",
          "type": "list",
          "required": false,
          "suboptions": {
            "defaultVirtualNetwork": {
              "aliases": [],
              "description": "DefaultVirtualNetwork flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "description": {
              "aliases": [],
              "description": "Sg To Vn To Vlan's description.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "id": {
              "aliases": [],
              "description": "Sg To Vn To Vlan's id.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Sg To Vn To Vlan's name.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "vlans": {
              "aliases": [],
              "description": "Sg To Vn To Vlan's vlans.",
              "type": "list",
              "required": false,
              "suboptions": {
                "data": {
                  "aliases": [],
                  "description": "Data flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "defaultVlan": {
                  "aliases": [],
                  "description": "DefaultVlan flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "description": {
                  "aliases": [],
                  "description": "Sg To Vn To Vlan's description.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "id": {
                  "aliases": [],
                  "description": "Sg To Vn To Vlan's id.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "maxValue": {
                  "aliases": [],
                  "description": "Sg To Vn To Vlan's maxValue.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "name": {
                  "aliases": [],
                  "description": "Sg To Vn To Vlan's name.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Sg To Vn To Vlan",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.sg_to_vn_to_vlan:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    description: string\n    id: string\n    name: string\n    sgtId: string\n    virtualnetworklist:\n    - defaultVirtualNetwork: true\n      description: string\n      id: string\n      name: string\n      vlans:\n      - data: true\n        defaultVlan: true\n        description: string\n        id: string\n        maxValue: 0\n        name: string\n\n- name: Delete by id\n  cisco.ise.sg_to_vn_to_vlan:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n- name: Create\n  cisco.ise.sg_to_vn_to_vlan:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    description: string\n    id: string\n    name: string\n    sgtId: string\n    virtualnetworklist:\n    - defaultVirtualNetwork: true\n      description: string\n      id: string\n      name: string\n      vlans:\n      - data: true\n        defaultVlan: true\n        description: string\n        id: string\n        maxValue: 0\n        name: string\n\n"
  },
  "cisco.ise.sg_to_vn_to_vlan_bulk_monitor_status_info": {
    "doc": {
      "description": "Get Sg To Vn To Vlan Bulk Monitor Status by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "bulkid": {
          "aliases": [],
          "description": "Bulkid path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Sg To Vn To Vlan Bulk Monitor Status",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get Sg To Vn To Vlan Bulk Monitor Status by id\n  cisco.ise.sg_to_vn_to_vlan_bulk_monitor_status_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    bulkid: string\n  register: result\n\n"
  },
  "cisco.ise.sg_to_vn_to_vlan_bulk_request": {
    "doc": {
      "description": "Manage operation update of the resource Sg To Vn To Vlan Bulk Request.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "operationType": {
          "aliases": [],
          "description": "Sg To Vn To Vlan Bulk Request's operationType.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "resourceMediaType": {
          "aliases": [],
          "description": "Sg To Vn To Vlan Bulk Request's resourceMediaType.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Sg To Vn To Vlan Bulk Request",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update all\n  cisco.ise.sg_to_vn_to_vlan_bulk_request:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    operationType: string\n    resourceMediaType: string\n\n"
  },
  "cisco.ise.sg_to_vn_to_vlan_info": {
    "doc": {
      "description": "Get all Sg To Vn To Vlan.\nGet Sg To Vn To Vlan by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter query parameter. <br/> **Simple filtering** should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the \"filterType=or\" query string parameter. Each resource Data model description should specify if an attribute is a filtered field. <br/> Operator | Description <br/> ------------|----------------- <br/> EQ | Equals <br/> NEQ | Not Equals <br/> GT | Greater Than <br/> LT | Less Then <br/> STARTSW | Starts With <br/> NSTARTSW | Not Starts With <br/> ENDSW | Ends With <br/> NENDSW | Not Ends With <br/> CONTAINS | Contains <br/> NCONTAINS | Not Contains <br/>.\n",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "filterType": {
          "aliases": [],
          "description": "FilterType query parameter. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Sg To Vn To Vlan",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Sg To Vn To Vlan\n  cisco.ise.sg_to_vn_to_vlan_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n    filter: []\n    filterType: AND\n  register: result\n\n- name: Get Sg To Vn To Vlan by id\n  cisco.ise.sg_to_vn_to_vlan_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.sgt": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Sgt.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "defaultSGACLs": {
          "aliases": [],
          "description": "Sgt's defaultSGACLs.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Sgt's description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "generationId": {
          "aliases": [],
          "description": "Sgt's generationId.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Sgt's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "isReadOnly": {
          "aliases": [],
          "description": "IsReadOnly flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Sgt's name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "propogateToApic": {
          "aliases": [],
          "description": "PropogateToApic flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "value": {
          "aliases": [],
          "description": "Value range 2 ot 65519 or -1 to auto-generate.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Sgt",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.sgt:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    defaultSGACLs:\n    - {}\n    description: string\n    generationId: 0\n    id: string\n    isReadOnly: true\n    name: string\n    propogateToApic: true\n    value: 0\n\n- name: Delete by id\n  cisco.ise.sgt:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n- name: Create\n  cisco.ise.sgt:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    defaultSGACLs:\n    - {}\n    description: string\n    generationId: 0\n    isReadOnly: true\n    name: string\n    propogateToApic: true\n    value: 0\n\n"
  },
  "cisco.ise.sgt_bulk_monitor_status_info": {
    "doc": {
      "description": "Get Sgt Bulk Monitor Status by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "bulkid": {
          "aliases": [],
          "description": "Bulkid path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Sgt Bulk Monitor Status",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get Sgt Bulk Monitor Status by id\n  cisco.ise.sgt_bulk_monitor_status_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    bulkid: string\n  register: result\n\n"
  },
  "cisco.ise.sgt_bulk_request": {
    "doc": {
      "description": "Manage operation update of the resource Sgt Bulk Request.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "operationType": {
          "aliases": [],
          "description": "Sgt Bulk Request's operationType.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "resourceMediaType": {
          "aliases": [],
          "description": "Sgt Bulk Request's resourceMediaType.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Sgt Bulk Request",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update all\n  cisco.ise.sgt_bulk_request:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    operationType: string\n    resourceMediaType: string\n\n"
  },
  "cisco.ise.sgt_info": {
    "doc": {
      "description": "Get all Sgt.\nGet Sgt by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter query parameter. <br/> **Simple filtering** should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the \"filterType=or\" query string parameter. Each resource Data model description should specify if an attribute is a filtered field. <br/> Operator | Description <br/> ------------|----------------- <br/> EQ | Equals <br/> NEQ | Not Equals <br/> GT | Greater Than <br/> LT | Less Then <br/> STARTSW | Starts With <br/> NSTARTSW | Not Starts With <br/> ENDSW | Ends With <br/> NENDSW | Not Ends With <br/> CONTAINS | Contains <br/> NCONTAINS | Not Contains <br/>.\n",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "filterType": {
          "aliases": [],
          "description": "FilterType query parameter. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sortasc": {
          "aliases": [],
          "description": "Sortasc query parameter. Sort asc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sortdsc": {
          "aliases": [],
          "description": "Sortdsc query parameter. Sort desc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Sgt",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Sgt\n  cisco.ise.sgt_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n    sortasc: string\n    sortdsc: string\n    filter: []\n    filterType: AND\n  register: result\n\n- name: Get Sgt by id\n  cisco.ise.sgt_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.sms_provider_info": {
    "doc": {
      "description": "Get all Sms Provider.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter query parameter. <br/> **Simple filtering** should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the \"filterType=or\" query string parameter. Each resource Data model description should specify if an attribute is a filtered field. <br/> Operator | Description <br/> ------------|----------------- <br/> EQ | Equals <br/> NEQ | Not Equals <br/> GT | Greater Than <br/> LT | Less Then <br/> STARTSW | Starts With <br/> NSTARTSW | Not Starts With <br/> ENDSW | Ends With <br/> NENDSW | Not Ends With <br/> CONTAINS | Contains <br/> NCONTAINS | Not Contains <br/>.\n",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "filterType": {
          "aliases": [],
          "description": "FilterType query parameter. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sortasc": {
          "aliases": [],
          "description": "Sortasc query parameter. Sort asc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sortdsc": {
          "aliases": [],
          "description": "Sortdsc query parameter. Sort desc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Sms Provider",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Sms Provider\n  cisco.ise.sms_provider_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n    sortasc: string\n    sortdsc: string\n    filter: []\n    filterType: AND\n  register: result\n\n"
  },
  "cisco.ise.sponsor_group": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Sponsor Group.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "autoNotification": {
          "aliases": [],
          "description": "AutoNotification flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "createPermissions": {
          "aliases": [],
          "description": "Sponsor Group's createPermissions.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "canCreateRandomAccounts": {
              "aliases": [],
              "description": "CanCreateRandomAccounts flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "canImportMultipleAccounts": {
              "aliases": [],
              "description": "CanImportMultipleAccounts flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "canSetFutureStartDate": {
              "aliases": [],
              "description": "CanSetFutureStartDate flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "canSpecifyUsernamePrefix": {
              "aliases": [],
              "description": "CanSpecifyUsernamePrefix flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "defaultUsernamePrefix": {
              "aliases": [],
              "description": "Sponsor Group's defaultUsernamePrefix.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "importBatchSizeLimit": {
              "aliases": [],
              "description": "Sponsor Group's importBatchSizeLimit.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "randomBatchSizeLimit": {
              "aliases": [],
              "description": "Sponsor Group's randomBatchSizeLimit.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "startDateFutureLimitDays": {
              "aliases": [],
              "description": "Sponsor Group's startDateFutureLimitDays.",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "description": {
          "aliases": [],
          "description": "Sponsor Group's description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "guestTypes": {
          "aliases": [],
          "description": "Sponsor Group's guestTypes.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Sponsor Group's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "isDefaultGroup": {
          "aliases": [],
          "description": "IsDefaultGroup flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "isEnabled": {
          "aliases": [],
          "description": "IsEnabled flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "locations": {
          "aliases": [],
          "description": "Sponsor Group's locations.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "managePermission": {
          "aliases": [],
          "description": "Sponsor Group's managePermission.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "memberGroups": {
          "aliases": [],
          "description": "Sponsor Group's memberGroups.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Sponsor Group's name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "otherPermissions": {
          "aliases": [],
          "description": "Sponsor Group's otherPermissions.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "canAccessViaRest": {
              "aliases": [],
              "description": "CanAccessViaRest flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "canApproveSelfregGuests": {
              "aliases": [],
              "description": "CanApproveSelfregGuests flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "canDeleteGuestAccounts": {
              "aliases": [],
              "description": "CanDeleteGuestAccounts flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "canExtendGuestAccounts": {
              "aliases": [],
              "description": "CanExtendGuestAccounts flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "canReinstateSuspendedAccounts": {
              "aliases": [],
              "description": "CanReinstateSuspendedAccounts flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "canResetGuestPasswords": {
              "aliases": [],
              "description": "CanResetGuestPasswords flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "canSendSmsNotifications": {
              "aliases": [],
              "description": "CanSendSmsNotifications flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "canSuspendGuestAccounts": {
              "aliases": [],
              "description": "CanSuspendGuestAccounts flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "canUpdateGuestContactInfo": {
              "aliases": [],
              "description": "CanUpdateGuestContactInfo flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "canViewGuestPasswords": {
              "aliases": [],
              "description": "CanViewGuestPasswords flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "limitApprovalToSponsorsGuests": {
              "aliases": [],
              "description": "LimitApprovalToSponsorsGuests flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "requireSuspensionReason": {
              "aliases": [],
              "description": "RequireSuspensionReason flag.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Sponsor Group",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.sponsor_group:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    autoNotification: true\n    createPermissions:\n      canCreateRandomAccounts: true\n      canImportMultipleAccounts: true\n      canSetFutureStartDate: true\n      canSpecifyUsernamePrefix: true\n      defaultUsernamePrefix: string\n      importBatchSizeLimit: 0\n      randomBatchSizeLimit: 0\n      startDateFutureLimitDays: 0\n    description: string\n    guestTypes:\n    - string\n    id: string\n    isDefaultGroup: true\n    isEnabled: true\n    locations:\n    - string\n    managePermission: string\n    memberGroups:\n    - string\n    name: string\n    otherPermissions:\n      canAccessViaRest: true\n      canApproveSelfregGuests: true\n      canDeleteGuestAccounts: true\n      canExtendGuestAccounts: true\n      canReinstateSuspendedAccounts: true\n      canResetGuestPasswords: true\n      canSendSmsNotifications: true\n      canSuspendGuestAccounts: true\n      canUpdateGuestContactInfo: true\n      canViewGuestPasswords: true\n      limitApprovalToSponsorsGuests: true\n      requireSuspensionReason: true\n\n- name: Delete by id\n  cisco.ise.sponsor_group:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n- name: Create\n  cisco.ise.sponsor_group:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    autoNotification: true\n    createPermissions:\n      canCreateRandomAccounts: true\n      canImportMultipleAccounts: true\n      canSetFutureStartDate: true\n      canSpecifyUsernamePrefix: true\n      defaultUsernamePrefix: string\n      importBatchSizeLimit: 0\n      randomBatchSizeLimit: 0\n      startDateFutureLimitDays: 0\n    description: string\n    guestTypes:\n    - string\n    isDefaultGroup: true\n    isEnabled: true\n    locations:\n    - string\n    managePermission: string\n    memberGroups:\n    - string\n    name: string\n    otherPermissions:\n      canAccessViaRest: true\n      canApproveSelfregGuests: true\n      canDeleteGuestAccounts: true\n      canExtendGuestAccounts: true\n      canReinstateSuspendedAccounts: true\n      canResetGuestPasswords: true\n      canSendSmsNotifications: true\n      canSuspendGuestAccounts: true\n      canUpdateGuestContactInfo: true\n      canViewGuestPasswords: true\n      limitApprovalToSponsorsGuests: true\n      requireSuspensionReason: true\n\n"
  },
  "cisco.ise.sponsor_group_info": {
    "doc": {
      "description": "Get all Sponsor Group.\nGet Sponsor Group by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter query parameter. <br/> **Simple filtering** should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the \"filterType=or\" query string parameter. Each resource Data model description should specify if an attribute is a filtered field. <br/> Operator | Description <br/> ------------|----------------- <br/> EQ | Equals <br/> NEQ | Not Equals <br/> GT | Greater Than <br/> LT | Less Then <br/> STARTSW | Starts With <br/> NSTARTSW | Not Starts With <br/> ENDSW | Ends With <br/> NENDSW | Not Ends With <br/> CONTAINS | Contains <br/> NCONTAINS | Not Contains <br/>.\n",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "filterType": {
          "aliases": [],
          "description": "FilterType query parameter. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sortasc": {
          "aliases": [],
          "description": "Sortasc query parameter. Sort asc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sortdsc": {
          "aliases": [],
          "description": "Sortdsc query parameter. Sort desc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Sponsor Group",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Sponsor Group\n  cisco.ise.sponsor_group_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n    sortasc: string\n    sortdsc: string\n    filter: []\n    filterType: AND\n  register: result\n\n- name: Get Sponsor Group by id\n  cisco.ise.sponsor_group_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.sponsor_group_member_info": {
    "doc": {
      "description": "Get all Sponsor Group Member.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter query parameter. <br/> **Simple filtering** should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the \"filterType=or\" query string parameter. Each resource Data model description should specify if an attribute is a filtered field. <br/> Operator | Description <br/> ------------|----------------- <br/> EQ | Equals <br/> NEQ | Not Equals <br/> GT | Greater Than <br/> LT | Less Then <br/> STARTSW | Starts With <br/> NSTARTSW | Not Starts With <br/> ENDSW | Ends With <br/> NENDSW | Not Ends With <br/> CONTAINS | Contains <br/> NCONTAINS | Not Contains <br/>.\n",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "filterType": {
          "aliases": [],
          "description": "FilterType query parameter. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sortasc": {
          "aliases": [],
          "description": "Sortasc query parameter. Sort asc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sortdsc": {
          "aliases": [],
          "description": "Sortdsc query parameter. Sort desc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Sponsor Group Member",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Sponsor Group Member\n  cisco.ise.sponsor_group_member_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n    sortasc: string\n    sortdsc: string\n    filter: []\n    filterType: AND\n  register: result\n\n"
  },
  "cisco.ise.sponsor_portal": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Sponsor Portal.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "customizations": {
          "aliases": [],
          "description": "Sponsor Portal's customizations.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "globalCustomizations": {
              "aliases": [],
              "description": "Sponsor Portal's globalCustomizations.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "backgroundImage": {
                  "aliases": [],
                  "description": "Sponsor Portal's backgroundImage.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "data": {
                      "aliases": [],
                      "description": "Represented as base 64 encoded string of the image byte array.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "bannerImage": {
                  "aliases": [],
                  "description": "Sponsor Portal's bannerImage.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "data": {
                      "aliases": [],
                      "description": "Represented as base 64 encoded string of the image byte array.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "bannerTitle": {
                  "aliases": [],
                  "description": "Sponsor Portal's bannerTitle.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "contactText": {
                  "aliases": [],
                  "description": "Sponsor Portal's contactText.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "desktopLogoImage": {
                  "aliases": [],
                  "description": "Sponsor Portal's desktopLogoImage.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "data": {
                      "aliases": [],
                      "description": "Represented as base 64 encoded string of the image byte array.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "footerElement": {
                  "aliases": [],
                  "description": "Sponsor Portal's footerElement.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "mobileLogoImage": {
                  "aliases": [],
                  "description": "Sponsor Portal's mobileLogoImage.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "data": {
                      "aliases": [],
                      "description": "Represented as base 64 encoded string of the image byte array.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                }
              }
            },
            "language": {
              "aliases": [],
              "description": "This property is supported only for Read operation and it allows to show the customizations in English. Other languages are not supported.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "viewLanguage": {
                  "aliases": [],
                  "description": "Sponsor Portal's viewLanguage.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "pageCustomizations": {
              "aliases": [],
              "description": "Sponsor Portal's pageCustomizations.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "data": {
                  "aliases": [],
                  "description": "The Dictionary will be exposed here as key value pair.",
                  "type": "list",
                  "required": false,
                  "suboptions": {
                    "key": {
                      "aliases": [],
                      "description": "Sponsor Portal's key.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "value": {
                      "aliases": [],
                      "description": "Sponsor Portal's value.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                }
              }
            },
            "portalTheme": {
              "aliases": [],
              "description": "Sponsor Portal's portalTheme.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "id": {
                  "aliases": [],
                  "description": "Sponsor Portal's id.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "name": {
                  "aliases": [],
                  "description": "The system- or user-assigned name of the portal theme.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "themeData": {
                  "aliases": [],
                  "description": "A CSS file, represented as a Base64-encoded byte array.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "portalTweakSettings": {
              "aliases": [],
              "description": "The Tweak Settings are a customization of the Portal Theme that has been selected for the portal. When the Portal Theme selection is changed, the Tweak Settings are overwritten to match the values in the theme. The Tweak Settings can subsequently be changed by the user.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "bannerColor": {
                  "aliases": [],
                  "description": "Hex value of color.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "bannerTextColor": {
                  "aliases": [],
                  "description": "Sponsor Portal's bannerTextColor.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "pageBackgroundColor": {
                  "aliases": [],
                  "description": "Sponsor Portal's pageBackgroundColor.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "pageLabelAndTextColor": {
                  "aliases": [],
                  "description": "Sponsor Portal's pageLabelAndTextColor.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        },
        "description": {
          "aliases": [],
          "description": "Sponsor Portal's description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Sponsor Portal's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Sponsor Portal's name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "portalTestUrl": {
          "aliases": [],
          "description": "URL to bring up a test page for this portal.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "portalType": {
          "aliases": [],
          "description": "Allowed values - BYOD, - HOTSPOTGUEST, - MYDEVICE, - SELFREGGUEST, - SPONSOR, - SPONSOREDGUEST.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "settings": {
          "aliases": [],
          "description": "Defines all of the settings groups available for a portal.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "aupSettings": {
              "aliases": [],
              "description": "Sponsor Portal's aupSettings.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "displayFrequency": {
                  "aliases": [],
                  "description": "How the AUP should be displayed, either on page or as a link. Only valid if includeAup = true. Allowed Values - FIRSTLOGIN, - EVERYLOGIN, - RECURRING.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "displayFrequencyIntervalDays": {
                  "aliases": [],
                  "description": "Number of days between AUP confirmations (when displayFrequency = recurring).",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "includeAup": {
                  "aliases": [],
                  "description": "IncludeAup flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "requireScrolling": {
                  "aliases": [],
                  "description": "RequireScrolling flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "loginPageSettings": {
              "aliases": [],
              "description": "Portal Login Page settings groups follow.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "aupDisplay": {
                  "aliases": [],
                  "description": "How the AUP should be displayed, either on page or as a link. Only valid if includeAup = true. Allowed values - ONPAGE, - ASLINK.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "includeAup": {
                  "aliases": [],
                  "description": "Include an Acceptable Use Policy (AUP) that should be displayed during login.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "maxFailedAttemptsBeforeRateLimit": {
                  "aliases": [],
                  "description": "Maximum failed login attempts before rate limiting.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "requireAupAcceptance": {
                  "aliases": [],
                  "description": "Require the portal user to accept the AUP. Only valid if includeAup = true.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "requireAupScrolling": {
                  "aliases": [],
                  "description": "RequireAupScrolling flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "socialConfigs": {
                  "aliases": [],
                  "description": "Sponsor Portal's socialConfigs.",
                  "type": "list",
                  "required": false,
                  "suboptions": {}
                },
                "timeBetweenLoginsDuringRateLimit": {
                  "aliases": [],
                  "description": "Time between login attempts when rate limiting.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "portalSettings": {
              "aliases": [],
              "description": "The port, interface, certificate, and other basic settings of a portal.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "allowedInterfaces": {
                  "aliases": [],
                  "description": "Interfaces that the portal will be reachable on. Allowed values - eth0, - eth1, - eth2, - eth3, - eth4, - eth5, - bond0, - bond1, - bond2.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "authenticationMethod": {
                  "aliases": [],
                  "description": "Unique Id of the identity source sequence.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "availableSsids": {
                  "aliases": [],
                  "description": "Names of the SSIDs available for assignment to guest users by sponsors.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "certificateGroupTag": {
                  "aliases": [],
                  "description": "Logical name of the x.509 server certificate that will be used for the portal.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "displayLang": {
                  "aliases": [],
                  "description": "Allowed values - USEBROWSERLOCALE, - ALWAYSUSE.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "fallbackLanguage": {
                  "aliases": [],
                  "description": "Used when displayLang = USEBROWSERLOCALE.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "fqdn": {
                  "aliases": [],
                  "description": "The fully-qualified domain name (FQDN) that end-users will use to access this portal. Used only in Sponsor portal.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "httpsPort": {
                  "aliases": [],
                  "description": "The port number that the allowed interfaces will listen on. Range from 8000 to 8999.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "idleTimeout": {
                  "aliases": [],
                  "description": "Sponsor Portal's idleTimeout.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "postAccessBannerSettings": {
              "aliases": [],
              "description": "Sponsor Portal's postAccessBannerSettings.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "includePostAccessBanner": {
                  "aliases": [],
                  "description": "IncludePostAccessBanner flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "postLoginBannerSettings": {
              "aliases": [],
              "description": "Sponsor Portal's postLoginBannerSettings.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "includePostAccessBanner": {
                  "aliases": [],
                  "description": "Include a Post-Login Banner page.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "sponsorChangePasswordSettings": {
              "aliases": [],
              "description": "Sponsor Portal's sponsorChangePasswordSettings.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "allowSponsorToChangePwd": {
                  "aliases": [],
                  "description": "Allow sponsors to change their own passwords.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "supportInfoSettings": {
              "aliases": [],
              "description": "Sponsor Portal's supportInfoSettings.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "defaultEmptyFieldValue": {
                  "aliases": [],
                  "description": "The default value displayed for an empty field. Only valid when emptyFieldDisplay = DISPLAYWITHDEFAULTVALUE.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "emptyFieldDisplay": {
                  "aliases": [],
                  "description": "Specifies how empty fields are handled on the Support Information Page. Allowed values - HIDE, - DISPLAYWITHNOVALUE, - DISPLAYWITHDEFAULTVALUE.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "includeBrowserUserAgent": {
                  "aliases": [],
                  "description": "IncludeBrowserUserAgent flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "includeFailureCode": {
                  "aliases": [],
                  "description": "IncludeFailureCode flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "includeIpAddress": {
                  "aliases": [],
                  "description": "IncludeIpAddress flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "includeMacAddr": {
                  "aliases": [],
                  "description": "IncludeMacAddr flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "includePolicyServer": {
                  "aliases": [],
                  "description": "IncludePolicyServer flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "includeSupportInfoPage": {
                  "aliases": [],
                  "description": "IncludeSupportInfoPage flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Sponsor Portal",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.sponsor_portal:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    customizations:\n      globalCustomizations:\n        backgroundImage:\n          data: string\n        bannerImage:\n          data: string\n        bannerTitle: string\n        contactText: string\n        desktopLogoImage:\n          data: string\n        footerElement: string\n        mobileLogoImage:\n          data: string\n      language:\n        viewLanguage: string\n      pageCustomizations:\n        data:\n        - key: string\n          value: string\n      portalTheme:\n        id: string\n        name: string\n        themeData: string\n      portalTweakSettings:\n        bannerColor: string\n        bannerTextColor: string\n        pageBackgroundColor: string\n        pageLabelAndTextColor: string\n    description: string\n    id: string\n    name: string\n    portalTestUrl: string\n    portalType: string\n    settings:\n      aupSettings:\n        displayFrequency: string\n        displayFrequencyIntervalDays: 0\n        includeAup: true\n        requireScrolling: true\n      loginPageSettings:\n        aupDisplay: string\n        includeAup: true\n        maxFailedAttemptsBeforeRateLimit: 0\n        requireAupAcceptance: true\n        requireAupScrolling: true\n        socialConfigs: []\n        timeBetweenLoginsDuringRateLimit: 0\n      portalSettings:\n        allowedInterfaces: string\n        authenticationMethod: string\n        availableSsids: string\n        certificateGroupTag: string\n        displayLang: string\n        fallbackLanguage: string\n        fqdn: string\n        httpsPort: 0\n        idleTimeout: 0\n      postAccessBannerSettings:\n        includePostAccessBanner: true\n      postLoginBannerSettings:\n        includePostAccessBanner: true\n      sponsorChangePasswordSettings:\n        allowSponsorToChangePwd: true\n      supportInfoSettings:\n        defaultEmptyFieldValue: string\n        emptyFieldDisplay: string\n        includeBrowserUserAgent: true\n        includeFailureCode: true\n        includeIpAddress: true\n        includeMacAddr: true\n        includePolicyServer: true\n        includeSupportInfoPage: true\n\n- name: Delete by id\n  cisco.ise.sponsor_portal:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n- name: Create\n  cisco.ise.sponsor_portal:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    customizations:\n      globalCustomizations:\n        backgroundImage:\n          data: string\n        bannerImage:\n          data: string\n        bannerTitle: string\n        contactText: string\n        desktopLogoImage:\n          data: string\n        footerElement: string\n        mobileLogoImage:\n          data: string\n      language:\n        viewLanguage: string\n      pageCustomizations:\n        data:\n        - key: string\n          value: string\n      portalTheme:\n        id: string\n        name: string\n        themeData: string\n      portalTweakSettings:\n        bannerColor: string\n        bannerTextColor: string\n        pageBackgroundColor: string\n        pageLabelAndTextColor: string\n    description: string\n    name: string\n    portalTestUrl: string\n    portalType: string\n    settings:\n      aupSettings:\n        displayFrequency: string\n        displayFrequencyIntervalDays: 0\n        includeAup: true\n        requireScrolling: true\n      loginPageSettings:\n        aupDisplay: string\n        includeAup: true\n        maxFailedAttemptsBeforeRateLimit: 0\n        requireAupAcceptance: true\n        requireAupScrolling: true\n        socialConfigs: []\n        timeBetweenLoginsDuringRateLimit: 0\n      portalSettings:\n        allowedInterfaces: string\n        authenticationMethod: string\n        availableSsids: string\n        certificateGroupTag: string\n        displayLang: string\n        fallbackLanguage: string\n        fqdn: string\n        httpsPort: 0\n        idleTimeout: 0\n      postAccessBannerSettings:\n        includePostAccessBanner: true\n      postLoginBannerSettings:\n        includePostAccessBanner: true\n      sponsorChangePasswordSettings:\n        allowSponsorToChangePwd: true\n      supportInfoSettings:\n        defaultEmptyFieldValue: string\n        emptyFieldDisplay: string\n        includeBrowserUserAgent: true\n        includeFailureCode: true\n        includeIpAddress: true\n        includeMacAddr: true\n        includePolicyServer: true\n        includeSupportInfoPage: true\n\n"
  },
  "cisco.ise.sponsor_portal_info": {
    "doc": {
      "description": "Get all Sponsor Portal.\nGet Sponsor Portal by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter query parameter. <br/> **Simple filtering** should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the \"filterType=or\" query string parameter. Each resource Data model description should specify if an attribute is a filtered field. <br/> Operator | Description <br/> ------------|----------------- <br/> EQ | Equals <br/> NEQ | Not Equals <br/> GT | Greater Than <br/> LT | Less Then <br/> STARTSW | Starts With <br/> NSTARTSW | Not Starts With <br/> ENDSW | Ends With <br/> NENDSW | Not Ends With <br/> CONTAINS | Contains <br/> NCONTAINS | Not Contains <br/>.\n",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "filterType": {
          "aliases": [],
          "description": "FilterType query parameter. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sortasc": {
          "aliases": [],
          "description": "Sortasc query parameter. Sort asc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sortdsc": {
          "aliases": [],
          "description": "Sortdsc query parameter. Sort desc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Sponsor Portal",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Sponsor Portal\n  cisco.ise.sponsor_portal_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n    sortasc: string\n    sortdsc: string\n    filter: []\n    filterType: AND\n  register: result\n\n- name: Get Sponsor Portal by id\n  cisco.ise.sponsor_portal_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.sponsored_guest_portal": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Sponsored Guest Portal.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "customizations": {
          "aliases": [],
          "description": "Defines all of the Portal Customizations available.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "globalCustomizations": {
              "aliases": [],
              "description": "Sponsored Guest Portal's globalCustomizations.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "backgroundImage": {
                  "aliases": [],
                  "description": "Sponsored Guest Portal's backgroundImage.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "data": {
                      "aliases": [],
                      "description": "Represented as base 64 encoded string of the image byte array.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "bannerImage": {
                  "aliases": [],
                  "description": "Sponsored Guest Portal's bannerImage.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "data": {
                      "aliases": [],
                      "description": "Represented as base 64 encoded string of the image byte array.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "bannerTitle": {
                  "aliases": [],
                  "description": "Sponsored Guest Portal's bannerTitle.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "contactText": {
                  "aliases": [],
                  "description": "Sponsored Guest Portal's contactText.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "desktopLogoImage": {
                  "aliases": [],
                  "description": "Sponsored Guest Portal's desktopLogoImage.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "data": {
                      "aliases": [],
                      "description": "Represented as base 64 encoded string of the image byte array.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "footerElement": {
                  "aliases": [],
                  "description": "Sponsored Guest Portal's footerElement.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "mobileLogoImage": {
                  "aliases": [],
                  "description": "Sponsored Guest Portal's mobileLogoImage.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "data": {
                      "aliases": [],
                      "description": "Represented as base 64 encoded string of the image byte array.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                }
              }
            },
            "language": {
              "aliases": [],
              "description": "This property is supported only for Read operation and it allows to show the customizations in English. Other languages are not supported.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "viewLanguage": {
                  "aliases": [],
                  "description": "Sponsored Guest Portal's viewLanguage.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "pageCustomizations": {
              "aliases": [],
              "description": "Represent the entire page customization as a giant dictionary.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "data": {
                  "aliases": [],
                  "description": "The Dictionary will be exposed here as key value pair.",
                  "type": "list",
                  "required": false,
                  "suboptions": {
                    "key": {
                      "aliases": [],
                      "description": "Sponsored Guest Portal's key.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "value": {
                      "aliases": [],
                      "description": "Sponsored Guest Portal's value.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                }
              }
            },
            "portalTheme": {
              "aliases": [],
              "description": "Sponsored Guest Portal's portalTheme.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "id": {
                  "aliases": [],
                  "description": "Sponsored Guest Portal's id.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "name": {
                  "aliases": [],
                  "description": "The system- or user-assigned name of the portal theme.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "themeData": {
                  "aliases": [],
                  "description": "A CSS file, represented as a Base64-encoded byte array.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "portalTweakSettings": {
              "aliases": [],
              "description": "The Tweak Settings are a customization of the Portal Theme that has been selected for the portal. When the Portal Theme selection is changed, the Tweak Settings are overwritten to match the values in the theme. The Tweak Settings can subsequently be changed by the user.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "bannerColor": {
                  "aliases": [],
                  "description": "Hex value of color.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "bannerTextColor": {
                  "aliases": [],
                  "description": "Sponsored Guest Portal's bannerTextColor.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "pageBackgroundColor": {
                  "aliases": [],
                  "description": "Sponsored Guest Portal's pageBackgroundColor.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "pageLabelAndTextColor": {
                  "aliases": [],
                  "description": "Sponsored Guest Portal's pageLabelAndTextColor.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        },
        "description": {
          "aliases": [],
          "description": "Sponsored Guest Portal's description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Sponsored Guest Portal's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Sponsored Guest Portal's name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "portalTestUrl": {
          "aliases": [],
          "description": "URL to bring up a test page for this portal.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "portalType": {
          "aliases": [],
          "description": "Allowed values - BYOD, - HOTSPOTGUEST, - MYDEVICE, - SELFREGGUEST, - SPONSOR, - SPONSOREDGUEST.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "settings": {
          "aliases": [],
          "description": "Defines all of the settings groups available for a portal.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "aupSettings": {
              "aliases": [],
              "description": "Sponsored Guest Portal's aupSettings.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "displayFrequency": {
                  "aliases": [],
                  "description": "How the AUP should be displayed, either on page or as a link. Only valid if includeAup = true. Allowed Values - FIRSTLOGIN, - EVERYLOGIN, - RECURRING.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "displayFrequencyIntervalDays": {
                  "aliases": [],
                  "description": "Number of days between AUP confirmations (when displayFrequency = recurring).",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "includeAup": {
                  "aliases": [],
                  "description": "IncludeAup flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "requireAupScrolling": {
                  "aliases": [],
                  "description": "Require the portal user to scroll to the end of the AUP. Only valid if requireAupAcceptance = true.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "requireScrolling": {
                  "aliases": [],
                  "description": "RequireScrolling flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "skipAupForEmployees": {
                  "aliases": [],
                  "description": "Only valid if requireAupAcceptance = true.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "useDiffAupForEmployees": {
                  "aliases": [],
                  "description": "Only valid if requireAupAcceptance = true.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "authSuccessSettings": {
              "aliases": [],
              "description": "Sponsored Guest Portal's authSuccessSettings.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "redirectUrl": {
                  "aliases": [],
                  "description": "Target URL for redirection, used when successRedirect = URL.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "successRedirect": {
                  "aliases": [],
                  "description": "After an Authentication Success where should device be redirected. Allowed values - AUTHSUCCESSPAGE, - ORIGINATINGURL, - URL.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "byodSettings": {
              "aliases": [],
              "description": "Sponsored Guest Portal's byodSettings.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "byodRegistrationSettings": {
                  "aliases": [],
                  "description": "Configuration of BYOD endpoint Registration step configuration.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "endPointIdentityGroupId": {
                      "aliases": [],
                      "description": "Identity group id for which endpoint belongs.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "showDeviceID": {
                      "aliases": [],
                      "description": "Display Device ID field during registration.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "byodRegistrationSuccessSettings": {
                  "aliases": [],
                  "description": "Sponsored Guest Portal's byodRegistrationSuccessSettings.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "redirectUrl": {
                      "aliases": [],
                      "description": "Target URL for redirection, used when successRedirect = URL.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "successRedirect": {
                      "aliases": [],
                      "description": "After an Authentication Success where should device be redirected. Allowed values - AUTHSUCCESSPAGE, - ORIGINATINGURL, - URL.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "byodWelcomeSettings": {
                  "aliases": [],
                  "description": "Sponsored Guest Portal's byodWelcomeSettings.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "aupDisplay": {
                      "aliases": [],
                      "description": "How the AUP should be displayed, either on page or as a link. Only valid if includeAup = true. Allowed values - ONPAGE, - ASLINK.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "enableBYOD": {
                      "aliases": [],
                      "description": "EnableBYOD flag.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "enableGuestAccess": {
                      "aliases": [],
                      "description": "EnableGuestAccess flag.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "includeAup": {
                      "aliases": [],
                      "description": "IncludeAup flag.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "requireAupAcceptance": {
                      "aliases": [],
                      "description": "RequireAupAcceptance flag.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "requireMDM": {
                      "aliases": [],
                      "description": "RequireMDM flag.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "requireScrolling": {
                      "aliases": [],
                      "description": "Require BYOD devices to scroll down to the bottom of the AUP. Only valid if includeAup = true.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                }
              }
            },
            "guestChangePasswordSettings": {
              "aliases": [],
              "description": "Sponsored Guest Portal's guestChangePasswordSettings.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "allowChangePasswdAtFirstLogin": {
                  "aliases": [],
                  "description": "Allow guest to change their own passwords.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "guestDeviceRegistrationSettings": {
              "aliases": [],
              "description": "Sponsored Guest Portal's guestDeviceRegistrationSettings.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "allowGuestsToRegisterDevices": {
                  "aliases": [],
                  "description": "Allow guests to register devices.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "autoRegisterGuestDevices": {
                  "aliases": [],
                  "description": "Automatically register guest devices.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "loginPageSettings": {
              "aliases": [],
              "description": "Portal Login Page settings groups follow.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "accessCode": {
                  "aliases": [],
                  "description": "Access code that must be entered by the portal user (only valid if requireAccessCode = true).",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "allowAlternateGuestPortal": {
                  "aliases": [],
                  "description": "AllowAlternateGuestPortal flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "allowForgotPassword": {
                  "aliases": [],
                  "description": "AllowForgotPassword flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "allowGuestToChangePassword": {
                  "aliases": [],
                  "description": "Require the portal user to enter an access code.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "allowGuestToCreateAccounts": {
                  "aliases": [],
                  "description": "AllowGuestToCreateAccounts flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "aupDisplay": {
                  "aliases": [],
                  "description": "How the AUP should be displayed, either on page or as a link. Only valid if includeAup = true. Allowed values - ONPAGE, - ASLINK.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "includeAup": {
                  "aliases": [],
                  "description": "Include an Acceptable Use Policy (AUP) that should be displayed during login.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "maxFailedAttemptsBeforeRateLimit": {
                  "aliases": [],
                  "description": "Maximum failed login attempts before rate limiting.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "requireAccessCode": {
                  "aliases": [],
                  "description": "RequireAccessCode flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "requireAupAcceptance": {
                  "aliases": [],
                  "description": "Require the portal user to accept the AUP. Only valid if includeAup = true.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "socialConfigs": {
                  "aliases": [],
                  "description": "Sponsored Guest Portal's socialConfigs.",
                  "type": "list",
                  "required": false,
                  "suboptions": {
                    "socialMediaType": {
                      "aliases": [],
                      "description": "Sponsored Guest Portal's socialMediaType.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "socialMediaValue": {
                      "aliases": [],
                      "description": "Sponsored Guest Portal's socialMediaValue.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "timeBetweenLoginsDuringRateLimit": {
                  "aliases": [],
                  "description": "Time between login attempts when rate limiting.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "portalSettings": {
              "aliases": [],
              "description": "The port, interface, certificate, and other basic settings of a portal.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "allowedInterfaces": {
                  "aliases": [],
                  "description": "Interfaces that the portal will be reachable on. Allowed values - eth0, - eth1, - eth2, - eth3, - eth4, - eth5, - bond0, - bond1, - bond2.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "alwaysUsedLanguage": {
                  "aliases": [],
                  "description": "Sponsored Guest Portal's alwaysUsedLanguage.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "assignedGuestTypeForEmployee": {
                  "aliases": [],
                  "description": "Unique Id of a guest type. Employees using this portal as a guest inherit login options from the guest type.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "authenticationMethod": {
                  "aliases": [],
                  "description": "Unique Id of the identity source sequence.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "certificateGroupTag": {
                  "aliases": [],
                  "description": "Logical name of the x.509 server certificate that will be used for the portal.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "displayLang": {
                  "aliases": [],
                  "description": "Allowed values - USEBROWSERLOCALE, - ALWAYSUSE.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "fallbackLanguage": {
                  "aliases": [],
                  "description": "Used when displayLang = USEBROWSERLOCALE.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "httpsPort": {
                  "aliases": [],
                  "description": "The port number that the allowed interfaces will listen on. Range from 8000 to 8999.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "postAccessBannerSettings": {
              "aliases": [],
              "description": "Sponsored Guest Portal's postAccessBannerSettings.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "includePostAccessBanner": {
                  "aliases": [],
                  "description": "IncludePostAccessBanner flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "postLoginBannerSettings": {
              "aliases": [],
              "description": "Sponsored Guest Portal's postLoginBannerSettings.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "includePostAccessBanner": {
                  "aliases": [],
                  "description": "Include a Post-Login Banner page.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "supportInfoSettings": {
              "aliases": [],
              "description": "Sponsored Guest Portal's supportInfoSettings.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "defaultEmptyFieldValue": {
                  "aliases": [],
                  "description": "The default value displayed for an empty field. Only valid when emptyFieldDisplay = DISPLAYWITHDEFAULTVALUE.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "emptyFieldDisplay": {
                  "aliases": [],
                  "description": "Specifies how empty fields are handled on the Support Information Page. Allowed values - HIDE, - DISPLAYWITHNOVALUE, - DISPLAYWITHDEFAULTVALUE.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "includeBrowserUserAgent": {
                  "aliases": [],
                  "description": "IncludeBrowserUserAgent flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "includeFailureCode": {
                  "aliases": [],
                  "description": "IncludeFailureCode flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "includeIpAddress": {
                  "aliases": [],
                  "description": "IncludeIpAddress flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "includeMacAddr": {
                  "aliases": [],
                  "description": "IncludeMacAddr flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "includePolicyServer": {
                  "aliases": [],
                  "description": "IncludePolicyServer flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "includeSupportInfoPage": {
                  "aliases": [],
                  "description": "IncludeSupportInfoPage flag.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Sponsored Guest Portal",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.sponsored_guest_portal:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    customizations:\n      globalCustomizations:\n        backgroundImage:\n          data: string\n        bannerImage:\n          data: string\n        bannerTitle: string\n        contactText: string\n        desktopLogoImage:\n          data: string\n        footerElement: string\n        mobileLogoImage:\n          data: string\n      language:\n        viewLanguage: string\n      pageCustomizations:\n        data:\n        - key: string\n          value: string\n      portalTheme:\n        id: string\n        name: string\n        themeData: string\n      portalTweakSettings:\n        bannerColor: string\n        bannerTextColor: string\n        pageBackgroundColor: string\n        pageLabelAndTextColor: string\n    description: string\n    id: string\n    name: string\n    portalTestUrl: string\n    portalType: string\n    settings:\n      aupSettings:\n        displayFrequency: string\n        displayFrequencyIntervalDays: 0\n        includeAup: true\n        requireAupScrolling: true\n        requireScrolling: true\n        skipAupForEmployees: true\n        useDiffAupForEmployees: true\n      authSuccessSettings:\n        redirectUrl: string\n        successRedirect: string\n      byodSettings:\n        byodRegistrationSettings:\n          endPointIdentityGroupId: string\n          showDeviceID: true\n        byodRegistrationSuccessSettings:\n          redirectUrl: string\n          successRedirect: string\n        byodWelcomeSettings:\n          aupDisplay: string\n          enableBYOD: true\n          enableGuestAccess: true\n          includeAup: true\n          requireAupAcceptance: true\n          requireMDM: true\n          requireScrolling: true\n      guestChangePasswordSettings:\n        allowChangePasswdAtFirstLogin: true\n      guestDeviceRegistrationSettings:\n        allowGuestsToRegisterDevices: true\n        autoRegisterGuestDevices: true\n      loginPageSettings:\n        accessCode: string\n        allowAlternateGuestPortal: true\n        allowForgotPassword: true\n        allowGuestToChangePassword: true\n        allowGuestToCreateAccounts: true\n        aupDisplay: string\n        includeAup: true\n        maxFailedAttemptsBeforeRateLimit: 0\n        requireAccessCode: true\n        requireAupAcceptance: true\n        socialConfigs:\n        - socialMediaType: string\n          socialMediaValue: string\n        timeBetweenLoginsDuringRateLimit: 0\n      portalSettings:\n        allowedInterfaces: string\n        alwaysUsedLanguage: string\n        assignedGuestTypeForEmployee: string\n        authenticationMethod: string\n        certificateGroupTag: string\n        displayLang: string\n        fallbackLanguage: string\n        httpsPort: 0\n      postAccessBannerSettings:\n        includePostAccessBanner: true\n      postLoginBannerSettings:\n        includePostAccessBanner: true\n      supportInfoSettings:\n        defaultEmptyFieldValue: string\n        emptyFieldDisplay: string\n        includeBrowserUserAgent: true\n        includeFailureCode: true\n        includeIpAddress: true\n        includeMacAddr: true\n        includePolicyServer: true\n        includeSupportInfoPage: true\n\n- name: Delete by id\n  cisco.ise.sponsored_guest_portal:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n- name: Create\n  cisco.ise.sponsored_guest_portal:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    customizations:\n      globalCustomizations:\n        backgroundImage:\n          data: string\n        bannerImage:\n          data: string\n        bannerTitle: string\n        contactText: string\n        desktopLogoImage:\n          data: string\n        footerElement: string\n        mobileLogoImage:\n          data: string\n      language:\n        viewLanguage: string\n      pageCustomizations:\n        data:\n        - key: string\n          value: string\n      portalTheme:\n        id: string\n        name: string\n        themeData: string\n      portalTweakSettings:\n        bannerColor: string\n        bannerTextColor: string\n        pageBackgroundColor: string\n        pageLabelAndTextColor: string\n    description: string\n    name: string\n    portalTestUrl: string\n    portalType: string\n    settings:\n      aupSettings:\n        displayFrequency: string\n        displayFrequencyIntervalDays: 0\n        includeAup: true\n        requireAupScrolling: true\n        requireScrolling: true\n        skipAupForEmployees: true\n        useDiffAupForEmployees: true\n      authSuccessSettings:\n        redirectUrl: string\n        successRedirect: string\n      byodSettings:\n        byodRegistrationSettings:\n          endPointIdentityGroupId: string\n          showDeviceID: true\n        byodRegistrationSuccessSettings:\n          redirectUrl: string\n          successRedirect: string\n        byodWelcomeSettings:\n          aupDisplay: string\n          enableBYOD: true\n          enableGuestAccess: true\n          includeAup: true\n          requireAupAcceptance: true\n          requireMDM: true\n          requireScrolling: true\n      guestChangePasswordSettings:\n        allowChangePasswdAtFirstLogin: true\n      guestDeviceRegistrationSettings:\n        allowGuestsToRegisterDevices: true\n        autoRegisterGuestDevices: true\n      loginPageSettings:\n        accessCode: string\n        allowAlternateGuestPortal: true\n        allowForgotPassword: true\n        allowGuestToChangePassword: true\n        allowGuestToCreateAccounts: true\n        aupDisplay: string\n        includeAup: true\n        maxFailedAttemptsBeforeRateLimit: 0\n        requireAccessCode: true\n        requireAupAcceptance: true\n        socialConfigs:\n        - socialMediaType: string\n          socialMediaValue: string\n        timeBetweenLoginsDuringRateLimit: 0\n      portalSettings:\n        allowedInterfaces: string\n        alwaysUsedLanguage: string\n        assignedGuestTypeForEmployee: string\n        authenticationMethod: string\n        certificateGroupTag: string\n        displayLang: string\n        fallbackLanguage: string\n        httpsPort: 0\n      postAccessBannerSettings:\n        includePostAccessBanner: true\n      postLoginBannerSettings:\n        includePostAccessBanner: true\n      supportInfoSettings:\n        defaultEmptyFieldValue: string\n        emptyFieldDisplay: string\n        includeBrowserUserAgent: true\n        includeFailureCode: true\n        includeIpAddress: true\n        includeMacAddr: true\n        includePolicyServer: true\n        includeSupportInfoPage: true\n\n"
  },
  "cisco.ise.sponsored_guest_portal_info": {
    "doc": {
      "description": "Get all Sponsored Guest Portal.\nGet Sponsored Guest Portal by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter query parameter. <br/> **Simple filtering** should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the \"filterType=or\" query string parameter. Each resource Data model description should specify if an attribute is a filtered field. <br/> Operator | Description <br/> ------------|----------------- <br/> EQ | Equals <br/> NEQ | Not Equals <br/> GT | Greater Than <br/> LT | Less Then <br/> STARTSW | Starts With <br/> NSTARTSW | Not Starts With <br/> ENDSW | Ends With <br/> NENDSW | Not Ends With <br/> CONTAINS | Contains <br/> NCONTAINS | Not Contains <br/>.\n",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "filterType": {
          "aliases": [],
          "description": "FilterType query parameter. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sortasc": {
          "aliases": [],
          "description": "Sortasc query parameter. Sort asc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sortdsc": {
          "aliases": [],
          "description": "Sortdsc query parameter. Sort desc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Sponsored Guest Portal",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Sponsored Guest Portal\n  cisco.ise.sponsored_guest_portal_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n    sortasc: string\n    sortdsc: string\n    filter: []\n    filterType: AND\n  register: result\n\n- name: Get Sponsored Guest Portal by id\n  cisco.ise.sponsored_guest_portal_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.support_bundle": {
    "doc": {
      "description": "Manage operation create of the resource Support Bundle.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "description": {
          "aliases": [],
          "description": "Support Bundle's description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostName": {
          "aliases": [],
          "description": "This parameter is hostName only, xxxx of xxxx.yyy.zz.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Resource Name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "supportBundleIncludeOptions": {
          "aliases": [],
          "description": "Support Bundle's supportBundleIncludeOptions.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "fromDate": {
              "aliases": [],
              "description": "Date from where support bundle should include the logs.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "includeConfigDB": {
              "aliases": [],
              "description": "Set to include Config DB in Support Bundle.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "includeCoreFiles": {
              "aliases": [],
              "description": "Set to include Core files in Support Bundle.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "includeDebugLogs": {
              "aliases": [],
              "description": "Set to include Debug logs in Support Bundle.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "includeLocalLogs": {
              "aliases": [],
              "description": "Set to include Local logs in Support Bundle.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "includeSystemLogs": {
              "aliases": [],
              "description": "Set to include System logs in Support Bundle.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "mntLogs": {
              "aliases": [],
              "description": "Set to include Monitoring and troublshooting logs in Support Bundle.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "policyXml": {
              "aliases": [],
              "description": "Set to include Policy XML in Support Bundle.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "toDate": {
              "aliases": [],
              "description": "Date upto where support bundle should include the logs.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Support Bundle",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.support_bundle:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    description: string\n    hostName: string\n    name: string\n    supportBundleIncludeOptions:\n      fromDate: string\n      includeConfigDB: true\n      includeCoreFiles: true\n      includeDebugLogs: true\n      includeLocalLogs: true\n      includeSystemLogs: true\n      mntLogs: true\n      policyXml: true\n      toDate: string\n\n"
  },
  "cisco.ise.support_bundle_download": {
    "doc": {
      "description": "Manage operation update of the resource Support Bundle Download.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "dirPath": {
          "aliases": [],
          "description": "Directory absolute path. Defaults to the current working directory.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fileName": {
          "aliases": [],
          "description": "Support Bundle Download's fileName.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "saveFile": {
          "aliases": [],
          "description": "Enable or disable automatic file creation of raw response.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Support Bundle Download",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update all\n  cisco.ise.support_bundle_download:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    dirPath: /tmp/downloads/\n    fileName: string\n    saveFile: true\n\n"
  },
  "cisco.ise.support_bundle_status_info": {
    "doc": {
      "description": "Get all Support Bundle Status.\nGet Support Bundle Status by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Support Bundle Status",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Support Bundle Status\n  cisco.ise.support_bundle_status_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n  register: result\n\n- name: Get Support Bundle Status by id\n  cisco.ise.support_bundle_status_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.sxp_connections": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Sxp Connections.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "description": {
          "aliases": [],
          "description": "Sxp Connections's description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "Enabled flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Sxp Connections's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipAddress": {
          "aliases": [],
          "description": "Sxp Connections's ipAddress.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "sxpMode": {
          "aliases": [],
          "description": "Sxp Connections's sxpMode.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sxpNode": {
          "aliases": [],
          "description": "Sxp Connections's sxpNode.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sxpPeer": {
          "aliases": [],
          "description": "Sxp Connections's sxpPeer.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sxpVersion": {
          "aliases": [],
          "description": "Sxp Connections's sxpVersion.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sxpVpn": {
          "aliases": [],
          "description": "Sxp Connections's sxpVpn.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Sxp Connections",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.sxp_connections:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    description: string\n    enabled: true\n    id: string\n    ipAddress: string\n    sxpMode: string\n    sxpNode: string\n    sxpPeer: string\n    sxpVersion: string\n    sxpVpn: string\n\n- name: Delete by id\n  cisco.ise.sxp_connections:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n- name: Create\n  cisco.ise.sxp_connections:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    description: string\n    enabled: true\n    ipAddress: string\n    sxpMode: string\n    sxpNode: string\n    sxpPeer: string\n    sxpVersion: string\n    sxpVpn: string\n\n"
  },
  "cisco.ise.sxp_connections_bulk_monitor_status_info": {
    "doc": {
      "description": "Get Sxp Connections Bulk Monitor Status by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "bulkid": {
          "aliases": [],
          "description": "Bulkid path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Sxp Connections Bulk Monitor Status",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get Sxp Connections Bulk Monitor Status by id\n  cisco.ise.sxp_connections_bulk_monitor_status_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    bulkid: string\n  register: result\n\n"
  },
  "cisco.ise.sxp_connections_bulk_request": {
    "doc": {
      "description": "Manage operation update of the resource Sxp Connections Bulk Request.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "operationType": {
          "aliases": [],
          "description": "Sxp Connections Bulk Request's operationType.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "resourceMediaType": {
          "aliases": [],
          "description": "Sxp Connections Bulk Request's resourceMediaType.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Sxp Connections Bulk Request",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update all\n  cisco.ise.sxp_connections_bulk_request:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    operationType: string\n    resourceMediaType: string\n\n"
  },
  "cisco.ise.sxp_connections_info": {
    "doc": {
      "description": "Get all Sxp Connections.\nGet Sxp Connections by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter query parameter. <br/> **Simple filtering** should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the \"filterType=or\" query string parameter. Each resource Data model description should specify if an attribute is a filtered field. <br/> Operator | Description <br/> ------------|----------------- <br/> EQ | Equals <br/> NEQ | Not Equals <br/> GT | Greater Than <br/> LT | Less Then <br/> STARTSW | Starts With <br/> NSTARTSW | Not Starts With <br/> ENDSW | Ends With <br/> NENDSW | Not Ends With <br/> CONTAINS | Contains <br/> NCONTAINS | Not Contains <br/>.\n",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "filterType": {
          "aliases": [],
          "description": "FilterType query parameter. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sortasc": {
          "aliases": [],
          "description": "Sortasc query parameter. Sort asc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sortdsc": {
          "aliases": [],
          "description": "Sortdsc query parameter. Sort desc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Sxp Connections",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Sxp Connections\n  cisco.ise.sxp_connections_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n    sortasc: string\n    sortdsc: string\n    filter: []\n    filterType: AND\n  register: result\n\n- name: Get Sxp Connections by id\n  cisco.ise.sxp_connections_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.sxp_local_bindings": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Sxp Local Bindings.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "bindingName": {
          "aliases": [],
          "description": "This field is depricated from Cisco ISE 3.0.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Sxp Local Bindings's description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Sxp Local Bindings's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipAddressOrHost": {
          "aliases": [],
          "description": "IP address for static mapping (hostname is not supported).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "sgt": {
          "aliases": [],
          "description": "SGT name or ID.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sxpVpn": {
          "aliases": [],
          "description": "List of SXP Domains, separated with comma. At least one of sxpVpn or vns should be defined.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vns": {
          "aliases": [],
          "description": "List of Virtual Networks, separated with comma. At least one of sxpVpn or vns should be defined.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Sxp Local Bindings",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.sxp_local_bindings:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    bindingName: string\n    description: string\n    id: string\n    ipAddressOrHost: string\n    sgt: string\n    sxpVpn: string\n    vns: string\n\n- name: Delete by id\n  cisco.ise.sxp_local_bindings:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n- name: Create\n  cisco.ise.sxp_local_bindings:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    bindingName: string\n    description: string\n    id: string\n    ipAddressOrHost: string\n    sgt: string\n    sxpVpn: string\n    vns: string\n\n"
  },
  "cisco.ise.sxp_local_bindings_bulk_monitor_status_info": {
    "doc": {
      "description": "Get Sxp Local Bindings Bulk Monitor Status by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "bulkid": {
          "aliases": [],
          "description": "Bulkid path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Sxp Local Bindings Bulk Monitor Status",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get Sxp Local Bindings Bulk Monitor Status by id\n  cisco.ise.sxp_local_bindings_bulk_monitor_status_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    bulkid: string\n  register: result\n\n"
  },
  "cisco.ise.sxp_local_bindings_bulk_request": {
    "doc": {
      "description": "Manage operation update of the resource Sxp Local Bindings Bulk Request.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "operationType": {
          "aliases": [],
          "description": "Sxp Local Bindings Bulk Request's operationType.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "resourceMediaType": {
          "aliases": [],
          "description": "Sxp Local Bindings Bulk Request's resourceMediaType.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Sxp Local Bindings Bulk Request",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update all\n  cisco.ise.sxp_local_bindings_bulk_request:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    operationType: string\n    resourceMediaType: string\n\n"
  },
  "cisco.ise.sxp_local_bindings_info": {
    "doc": {
      "description": "Get all Sxp Local Bindings.\nGet Sxp Local Bindings by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter query parameter. <br/> **Simple filtering** should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the \"filterType=or\" query string parameter. Each resource Data model description should specify if an attribute is a filtered field. <br/> Operator | Description <br/> ------------|----------------- <br/> EQ | Equals <br/> NEQ | Not Equals <br/> GT | Greater Than <br/> LT | Less Then <br/> STARTSW | Starts With <br/> NSTARTSW | Not Starts With <br/> ENDSW | Ends With <br/> NENDSW | Not Ends With <br/> CONTAINS | Contains <br/> NCONTAINS | Not Contains <br/>.\n",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "filterType": {
          "aliases": [],
          "description": "FilterType query parameter. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sortasc": {
          "aliases": [],
          "description": "Sortasc query parameter. Sort asc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sortdsc": {
          "aliases": [],
          "description": "Sortdsc query parameter. Sort desc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Sxp Local Bindings",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Sxp Local Bindings\n  cisco.ise.sxp_local_bindings_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n    sortasc: string\n    sortdsc: string\n    filter: []\n    filterType: AND\n  register: result\n\n- name: Get Sxp Local Bindings by id\n  cisco.ise.sxp_local_bindings_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.sxp_vpns": {
    "doc": {
      "description": "Manage operations create and delete of the resource Sxp Vpns.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "sxpVpnName": {
          "aliases": [],
          "description": "Sxp Vpns's sxpVpnName.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Sxp Vpns",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Delete by id\n  cisco.ise.sxp_vpns:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n- name: Create\n  cisco.ise.sxp_vpns:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    sxpVpnName: string\n\n"
  },
  "cisco.ise.sxp_vpns_bulk_monitor_status_info": {
    "doc": {
      "description": "Get Sxp Vpns Bulk Monitor Status by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "bulkid": {
          "aliases": [],
          "description": "Bulkid path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Sxp Vpns Bulk Monitor Status",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get Sxp Vpns Bulk Monitor Status by id\n  cisco.ise.sxp_vpns_bulk_monitor_status_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    bulkid: string\n  register: result\n\n"
  },
  "cisco.ise.sxp_vpns_bulk_request": {
    "doc": {
      "description": "Manage operation update of the resource Sxp Vpns Bulk Request.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "operationType": {
          "aliases": [],
          "description": "Sxp Vpns Bulk Request's operationType.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "resourceMediaType": {
          "aliases": [],
          "description": "Sxp Vpns Bulk Request's resourceMediaType.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Sxp Vpns Bulk Request",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update all\n  cisco.ise.sxp_vpns_bulk_request:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    operationType: string\n    resourceMediaType: string\n\n"
  },
  "cisco.ise.sxp_vpns_info": {
    "doc": {
      "description": "Get all Sxp Vpns.\nGet Sxp Vpns by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter query parameter. <br/> **Simple filtering** should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the \"filterType=or\" query string parameter. Each resource Data model description should specify if an attribute is a filtered field. <br/> Operator | Description <br/> ------------|----------------- <br/> EQ | Equals <br/> NEQ | Not Equals <br/> GT | Greater Than <br/> LT | Less Then <br/> STARTSW | Starts With <br/> NSTARTSW | Not Starts With <br/> ENDSW | Ends With <br/> NENDSW | Not Ends With <br/> CONTAINS | Contains <br/> NCONTAINS | Not Contains <br/>.\n",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "filterType": {
          "aliases": [],
          "description": "FilterType query parameter. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sortasc": {
          "aliases": [],
          "description": "Sortasc query parameter. Sort asc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sortdsc": {
          "aliases": [],
          "description": "Sortdsc query parameter. Sort desc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Sxp Vpns",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Sxp Vpns\n  cisco.ise.sxp_vpns_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n    filter: []\n    filterType: AND\n    sortasc: string\n    sortdsc: string\n  register: result\n\n- name: Get Sxp Vpns by id\n  cisco.ise.sxp_vpns_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.system_certificate": {
    "doc": {
      "description": "Manage operations update and delete of the resource System Certificate.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "admin": {
          "aliases": [],
          "description": "Use certificate to authenticate the ISE Admin Portal.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "allowReplacementOfPortalGroupTag": {
          "aliases": [],
          "description": "Allow Replacement of Portal Group Tag (required).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of System Certificate.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "eap": {
          "aliases": [],
          "description": "Use certificate for EAP protocols that use SSL/TLS tunneling.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "expirationTTLPeriod": {
          "aliases": [],
          "description": "System Certificate's expirationTTLPeriod.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "expirationTTLUnits": {
          "aliases": [],
          "description": "System Certificate's expirationTTLUnits.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostName": {
          "aliases": [],
          "description": "HostName path parameter. Name of the host from which the System Certificate needs to be deleted.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter. The ID of the System Certificate to be deleted.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ims": {
          "aliases": [],
          "description": "Use certificate for the ISE Messaging Service.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the certificate.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "portal": {
          "aliases": [],
          "description": "Use for portal.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "portalGroupTag": {
          "aliases": [],
          "description": "Set Group tag.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pxgrid": {
          "aliases": [],
          "description": "Use certificate for the pxGrid Controller.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "radius": {
          "aliases": [],
          "description": "Use certificate for the RADSec server.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "renewSelfSignedCertificate": {
          "aliases": [],
          "description": "Renew Self Signed Certificate.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "saml": {
          "aliases": [],
          "description": "Use certificate for SAML Signing.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for System Certificate",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.system_certificate:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    admin: true\n    allowReplacementOfPortalGroupTag: true\n    description: string\n    eap: true\n    expirationTTLPeriod: 0\n    expirationTTLUnits: string\n    hostName: string\n    id: string\n    ims: true\n    name: string\n    portal: true\n    portalGroupTag: string\n    pxgrid: true\n    radius: true\n    renewSelfSignedCertificate: true\n    saml: true\n\n- name: Delete by id\n  cisco.ise.system_certificate:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    hostName: string\n    id: string\n\n"
  },
  "cisco.ise.system_certificate_create": {
    "doc": {
      "description": "Manage operation create of the resource System Certificate Create.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ersLocalCertStub": {
          "aliases": [],
          "description": "Inputs for certificate creation.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "allowWildcardCerts": {
              "aliases": [],
              "description": "System Certificate Create's allowWildcardCerts.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "certificatePolicies": {
              "aliases": [],
              "description": "System Certificate Create's certificatePolicies.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "certificateSanDns": {
              "aliases": [],
              "description": "System Certificate Create's certificateSanDns.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "certificateSanIp": {
              "aliases": [],
              "description": "System Certificate Create's certificateSanIp.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "certificateSanUri": {
              "aliases": [],
              "description": "System Certificate Create's certificateSanUri.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "digest": {
              "aliases": [],
              "description": "System Certificate Create's digest.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "ersSubjectStub": {
              "aliases": [],
              "description": "Subject data of certificate.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "commonName": {
                  "aliases": [],
                  "description": "System Certificate Create's commonName.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "countryName": {
                  "aliases": [],
                  "description": "System Certificate Create's countryName.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "localityName": {
                  "aliases": [],
                  "description": "System Certificate Create's localityName.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "organizationName": {
                  "aliases": [],
                  "description": "System Certificate Create's organizationName.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "organizationalUnitName": {
                  "aliases": [],
                  "description": "System Certificate Create's organizationalUnitName.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "stateOrProvinceName": {
                  "aliases": [],
                  "description": "System Certificate Create's stateOrProvinceName.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "expirationTTL": {
              "aliases": [],
              "description": "System Certificate Create's expirationTTL.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "friendlyName": {
              "aliases": [],
              "description": "System Certificate Create's friendlyName.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "groupTagDD": {
              "aliases": [],
              "description": "System Certificate Create's groupTagDD.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "keyLength": {
              "aliases": [],
              "description": "System Certificate Create's keyLength.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "keyType": {
              "aliases": [],
              "description": "System Certificate Create's keyType.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "samlCertificate": {
              "aliases": [],
              "description": "System Certificate Create's samlCertificate.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "selectedExpirationTTLUnit": {
              "aliases": [],
              "description": "System Certificate Create's selectedExpirationTTLUnit.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "xgridCertificate": {
              "aliases": [],
              "description": "System Certificate Create's xgridCertificate.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "nodeId": {
          "aliases": [],
          "description": "NodeId of Cisco ISE application.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for System Certificate Create",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.system_certificate_create:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    ersLocalCertStub:\n      allowWildcardCerts: string\n      certificatePolicies: string\n      certificateSanDns: string\n      certificateSanIp: string\n      certificateSanUri: string\n      digest: string\n      ersSubjectStub:\n        commonName: string\n        countryName: string\n        localityName: string\n        organizationName: string\n        organizationalUnitName: string\n        stateOrProvinceName: string\n      expirationTTL: 0\n      friendlyName: string\n      groupTagDD: string\n      keyLength: string\n      keyType: string\n      samlCertificate: string\n      selectedExpirationTTLUnit: string\n      xgridCertificate: string\n    nodeId: string\n\n"
  },
  "cisco.ise.system_certificate_export_info": {
    "doc": {
      "description": "Get System Certificate Export Info.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "dirPath": {
          "aliases": [],
          "description": "Directory absolute path. Defaults to the current working directory.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "export": {
          "aliases": [],
          "description": "System Certificate Export Info's export.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "System Certificate Export Info's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "System Certificate Export Info's password.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "saveFile": {
          "aliases": [],
          "description": "Enable or disable automatic file creation of raw response.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for System Certificate Export Info",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.system_certificate_export_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    dirPath: /tmp/downloads/\n    export: string\n    id: string\n    password: string\n    saveFile: true\n\n"
  },
  "cisco.ise.system_certificate_import": {
    "doc": {
      "description": "Manage operation create of the resource System Certificate Import.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "admin": {
          "aliases": [],
          "description": "Use certificate to authenticate the ISE Admin Portal.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "allowExtendedValidity": {
          "aliases": [],
          "description": "Allow import of certificates with validity greater than 398 days.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "allowOutOfDateCert": {
          "aliases": [],
          "description": "Allow out of date certificates (required).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "allowReplacementOfCertificates": {
          "aliases": [],
          "description": "Allow Replacement of certificates (required).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "allowReplacementOfPortalGroupTag": {
          "aliases": [],
          "description": "Allow Replacement of Portal Group Tag (required).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "allowSHA1Certificates": {
          "aliases": [],
          "description": "Allow SHA1 based certificates (required).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "allowWildCardCertificates": {
          "aliases": [],
          "description": "Allow Wildcard Certificates.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Certificate Content (required).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "eap": {
          "aliases": [],
          "description": "Use certificate for EAP protocols that use SSL/TLS tunneling.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ims": {
          "aliases": [],
          "description": "Use certificate for the ISE Messaging Service.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the certificate.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Certificate Password (required).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "portal": {
          "aliases": [],
          "description": "Use for portal.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "portalGroupTag": {
          "aliases": [],
          "description": "Set Group tag.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "privateKeyData": {
          "aliases": [],
          "description": "Private Key data (required).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pxgrid": {
          "aliases": [],
          "description": "Use certificate for the pxGrid Controller.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "radius": {
          "aliases": [],
          "description": "Use certificate for the RADSec server.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "saml": {
          "aliases": [],
          "description": "Use certificate for SAML Signing.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validateCertificateExtensions": {
          "aliases": [],
          "description": "Validate Certificate Extensions.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for System Certificate Import",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.system_certificate_import:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    admin: true\n    allowExtendedValidity: true\n    allowOutOfDateCert: true\n    allowReplacementOfCertificates: true\n    allowReplacementOfPortalGroupTag: true\n    allowSHA1Certificates: true\n    allowWildCardCertificates: true\n    data: string\n    eap: true\n    ims: true\n    name: string\n    password: string\n    portal: true\n    portalGroupTag: string\n    privateKeyData: string\n    pxgrid: true\n    radius: true\n    saml: true\n    validateCertificateExtensions: true\n\n"
  },
  "cisco.ise.system_certificate_info": {
    "doc": {
      "description": "Get System Certificate by id.\nGet System Certificate by name.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter query parameter. <div> <style type=\"text/css\" scoped> .apiServiceTable td, .apiServiceTable th { padding 5px 10px !important; text-align left; } </style> <span> <b>Simple filtering</b> should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the <i>\"filterType=or\"</i> query string parameter. Each resource Data model description should specify if an attribute is a filtered field. </span> <br /> <table class=\"apiServiceTable\"> <thead> <tr> <th>OPERATOR</th> <th>DESCRIPTION</th> </tr> </thead> <tbody> <tr> <td>EQ</td> <td>Equals</td> </tr> <tr> <td>NEQ</td> <td>Not Equals</td> </tr> <tr> <td>GT</td> <td>Greater Than</td> </tr> <tr> <td>LT</td> <td>Less Then</td> </tr> <tr> <td>STARTSW</td> <td>Starts With</td> </tr> <tr> <td>NSTARTSW</td> <td>Not Starts With</td> </tr> <tr> <td>ENDSW</td> <td>Ends With</td> </tr> <tr> <td>NENDSW</td> <td>Not Ends With</td> </tr> <tr> <td>CONTAINS</td> <td>Contains</td> </tr> <tr> <td>NCONTAINS</td> <td>Not Contains</td> </tr> </tbody> </table> </div>.\n",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "filterType": {
          "aliases": [],
          "description": "FilterType query parameter. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostName": {
          "aliases": [],
          "description": "HostName path parameter. Name of the host of which system certificates should be returned.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter. The id of the system certificate.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sort": {
          "aliases": [],
          "description": "Sort query parameter. Sort type - asc or desc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sortBy": {
          "aliases": [],
          "description": "SortBy query parameter. Sort column by which objects needs to be sorted.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for System Certificate",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get System Certificate by id\n  cisco.ise.system_certificate_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    hostName: string\n    id: string\n  register: result\n\n- name: Get System Certificate by name\n  cisco.ise.system_certificate_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n    sort: asc\n    sortBy: string\n    filter: []\n    filterType: AND\n    hostName: string\n  register: result\n\n"
  },
  "cisco.ise.system_config_version_info": {
    "doc": {
      "description": "Get all System Config Version.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for System Config Version",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all System Config Version\n  cisco.ise.system_config_version_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n"
  },
  "cisco.ise.tacacs_command_sets": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Tacacs Command Sets.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "commands": {
          "aliases": [],
          "description": "Tacacs Command Sets's commands.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "commandList": {
              "aliases": [],
              "description": "Tacacs Command Sets's commandList.",
              "type": "list",
              "required": false,
              "suboptions": {
                "arguments": {
                  "aliases": [],
                  "description": "Tacacs Command Sets's arguments.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "command": {
                  "aliases": [],
                  "description": "Tacacs Command Sets's command.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "grant": {
                  "aliases": [],
                  "description": "Allowed values PERMIT, DENY, DENY_ALWAYS.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        },
        "description": {
          "aliases": [],
          "description": "Tacacs Command Sets's description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Tacacs Command Sets's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Tacacs Command Sets's name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "permitUnmatched": {
          "aliases": [],
          "description": "PermitUnmatched flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Tacacs Command Sets",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.tacacs_command_sets:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    commands:\n      commandList:\n      - arguments: string\n        command: string\n        grant: string\n    description: string\n    id: string\n    name: string\n    permitUnmatched: true\n\n- name: Delete by id\n  cisco.ise.tacacs_command_sets:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n- name: Create\n  cisco.ise.tacacs_command_sets:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    commands:\n      commandList:\n      - arguments: string\n        command: string\n        grant: string\n    description: string\n    name: string\n    permitUnmatched: true\n\n"
  },
  "cisco.ise.tacacs_command_sets_info": {
    "doc": {
      "description": "Get all Tacacs Command Sets.\nGet Tacacs Command Sets by id.\nGet Tacacs Command Sets by name.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Tacacs Command Sets",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Tacacs Command Sets\n  cisco.ise.tacacs_command_sets_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n  register: result\n\n- name: Get Tacacs Command Sets by id\n  cisco.ise.tacacs_command_sets_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n- name: Get Tacacs Command Sets by name\n  cisco.ise.tacacs_command_sets_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    name: string\n  register: result\n\n"
  },
  "cisco.ise.tacacs_external_servers": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Tacacs External Servers.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "connectionPort": {
          "aliases": [],
          "description": "The port to connect the server.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Tacacs External Servers's description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostIP": {
          "aliases": [],
          "description": "The server IPV4 address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Tacacs External Servers's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Tacacs External Servers's name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sharedSecret": {
          "aliases": [],
          "description": "The server shared secret.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "singleConnect": {
          "aliases": [],
          "description": "Define the use of single connection.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The server timeout.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Tacacs External Servers",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.tacacs_external_servers:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    connectionPort: 0\n    description: string\n    hostIP: string\n    id: string\n    name: string\n    sharedSecret: string\n    singleConnect: true\n    timeout: 0\n\n- name: Delete by id\n  cisco.ise.tacacs_external_servers:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n- name: Create\n  cisco.ise.tacacs_external_servers:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    connectionPort: 0\n    description: string\n    hostIP: string\n    name: string\n    sharedSecret: string\n    singleConnect: true\n    timeout: 0\n\n"
  },
  "cisco.ise.tacacs_external_servers_info": {
    "doc": {
      "description": "Get all Tacacs External Servers.\nGet Tacacs External Servers by id.\nGet Tacacs External Servers by name.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Tacacs External Servers",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Tacacs External Servers\n  cisco.ise.tacacs_external_servers_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n  register: result\n\n- name: Get Tacacs External Servers by id\n  cisco.ise.tacacs_external_servers_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n- name: Get Tacacs External Servers by name\n  cisco.ise.tacacs_external_servers_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    name: string\n  register: result\n\n"
  },
  "cisco.ise.tacacs_profile": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Tacacs Profile.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "description": {
          "aliases": [],
          "description": "Tacacs Profile's description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Tacacs Profile's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Tacacs Profile's name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sessionAttributes": {
          "aliases": [],
          "description": "Holds list of session attributes. View type for GUI is Shell by default.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "sessionAttributeList": {
              "aliases": [],
              "description": "Tacacs Profile's sessionAttributeList.",
              "type": "list",
              "required": false,
              "suboptions": {
                "name": {
                  "aliases": [],
                  "description": "Tacacs Profile's name.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "type": {
                  "aliases": [],
                  "description": "Allowed values MANDATORY, OPTIONAL.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "value": {
                  "aliases": [],
                  "description": "Tacacs Profile's value.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Tacacs Profile",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.tacacs_profile:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    description: string\n    id: string\n    name: string\n    sessionAttributes:\n      sessionAttributeList:\n      - name: string\n        type: string\n        value: string\n\n- name: Delete by id\n  cisco.ise.tacacs_profile:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n- name: Create\n  cisco.ise.tacacs_profile:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    description: string\n    name: string\n    sessionAttributes:\n      sessionAttributeList:\n      - name: string\n        type: string\n        value: string\n\n"
  },
  "cisco.ise.tacacs_profile_info": {
    "doc": {
      "description": "Get all Tacacs Profile.\nGet Tacacs Profile by id.\nGet Tacacs Profile by name.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Tacacs Profile",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Tacacs Profile\n  cisco.ise.tacacs_profile_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n  register: result\n\n- name: Get Tacacs Profile by id\n  cisco.ise.tacacs_profile_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n- name: Get Tacacs Profile by name\n  cisco.ise.tacacs_profile_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    name: string\n  register: result\n\n"
  },
  "cisco.ise.tacacs_server_sequence": {
    "doc": {
      "description": "Manage operations create, update and delete of the resource Tacacs Server Sequence.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "description": {
          "aliases": [],
          "description": "Tacacs Server Sequence's description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Tacacs Server Sequence's id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "localAccounting": {
          "aliases": [],
          "description": "LocalAccounting flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Tacacs Server Sequence's name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "prefixDelimiter": {
          "aliases": [],
          "description": "The delimiter that will be used for prefix strip.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "prefixStrip": {
          "aliases": [],
          "description": "Define if a delimiter will be used for prefix strip.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "remoteAccounting": {
          "aliases": [],
          "description": "RemoteAccounting flag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "serverList": {
          "aliases": [],
          "description": "The names of Tacacs external servers separated by commas. The order of the names in the string is the order of servers that will be used during authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "suffixDelimiter": {
          "aliases": [],
          "description": "The delimiter that will be used for suffix strip.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "suffixStrip": {
          "aliases": [],
          "description": "Define if a delimiter will be used for suffix strip.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Tacacs Server Sequence",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.tacacs_server_sequence:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    description: string\n    id: string\n    localAccounting: true\n    name: string\n    prefixDelimiter: string\n    prefixStrip: true\n    remoteAccounting: true\n    serverList: string\n    suffixDelimiter: string\n    suffixStrip: true\n\n- name: Delete by id\n  cisco.ise.tacacs_server_sequence:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n- name: Create\n  cisco.ise.tacacs_server_sequence:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    description: string\n    localAccounting: true\n    name: string\n    prefixDelimiter: string\n    prefixStrip: true\n    remoteAccounting: true\n    serverList: string\n    suffixDelimiter: string\n    suffixStrip: true\n\n"
  },
  "cisco.ise.tacacs_server_sequence_info": {
    "doc": {
      "description": "Get all Tacacs Server Sequence.\nGet Tacacs Server Sequence by id.\nGet Tacacs Server Sequence by name.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Tacacs Server Sequence",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Tacacs Server Sequence\n  cisco.ise.tacacs_server_sequence_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n  register: result\n\n- name: Get Tacacs Server Sequence by id\n  cisco.ise.tacacs_server_sequence_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n- name: Get Tacacs Server Sequence by name\n  cisco.ise.tacacs_server_sequence_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    name: string\n  register: result\n\n"
  },
  "cisco.ise.tasks_info": {
    "doc": {
      "description": "Get all Tasks.\nGet Tasks by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "taskId": {
          "aliases": [],
          "description": "TaskId path parameter. The id of the task executed before.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Tasks",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Tasks\n  cisco.ise.tasks_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n  register: result\n\n- name: Get Tasks by id\n  cisco.ise.tasks_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    taskId: string\n  register: result\n\n"
  },
  "cisco.ise.telemetry_info": {
    "doc": {
      "description": "Get all Telemetry Info.\nGet Telemetry Info by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter query parameter. <br/> **Simple filtering** should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the \"filterType=or\" query string parameter. Each resource Data model description should specify if an attribute is a filtered field. <br/> Operator | Description <br/> ------------|----------------- <br/> EQ | Equals <br/> NEQ | Not Equals <br/> GT | Greater Than <br/> LT | Less Then <br/> STARTSW | Starts With <br/> NSTARTSW | Not Starts With <br/> ENDSW | Ends With <br/> NENDSW | Not Ends With <br/> CONTAINS | Contains <br/> NCONTAINS | Not Contains <br/>.\n",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "filterType": {
          "aliases": [],
          "description": "FilterType query parameter. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Telemetry Info",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Telemetry Info\n  cisco.ise.telemetry_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n    filter: []\n    filterType: AND\n  register: result\n\n- name: Get Telemetry Info by id\n  cisco.ise.telemetry_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.threat_vulnerabilities_clear": {
    "doc": {
      "description": "Manage operation update of the resource Threat Vulnerabilities Clear.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "macAddresses": {
          "aliases": [],
          "description": "Threat Vulnerabilities Clear's macAddresses.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Threat Vulnerabilities Clear",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update all\n  cisco.ise.threat_vulnerabilities_clear:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    macAddresses: string\n\n"
  },
  "cisco.ise.trusted_certificate": {
    "doc": {
      "description": "Manage operations update and delete of the resource Trusted Certificate.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "authenticateBeforeCRLReceived": {
          "aliases": [],
          "description": "Switch to enable/disable CRL Verification if CRL is not Received.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "automaticCRLUpdate": {
          "aliases": [],
          "description": "Switch to enable/disable automatic CRL update.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "automaticCRLUpdatePeriod": {
          "aliases": [],
          "description": "Automatic CRL update period.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "automaticCRLUpdateUnits": {
          "aliases": [],
          "description": "Unit of time for automatic CRL update.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "crlDistributionUrl": {
          "aliases": [],
          "description": "CRL Distribution URL.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "crlDownloadFailureRetries": {
          "aliases": [],
          "description": "If CRL download fails, wait time before retry.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "crlDownloadFailureRetriesUnits": {
          "aliases": [],
          "description": "Unit of time before retry if CRL download fails.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description for trust certificate.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "downloadCRL": {
          "aliases": [],
          "description": "Switch to enable/disable download of CRL.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "enableOCSPValidation": {
          "aliases": [],
          "description": "Switch to enable/disable OCSP Validation.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "enableServerIdentityCheck": {
          "aliases": [],
          "description": "Switch to enable/disable verification if HTTPS or LDAP server certificate name fits the configured server URL.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter. The ID of the Trusted Certificate to be deleted.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ignoreCRLExpiration": {
          "aliases": [],
          "description": "Switch to enable/disable ignore CRL Expiration.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Friendly name of the certificate.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "nonAutomaticCRLUpdatePeriod": {
          "aliases": [],
          "description": "Non automatic CRL update period.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "nonAutomaticCRLUpdateUnits": {
          "aliases": [],
          "description": "Unit of time of non automatic CRL update.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "rejectIfNoStatusFromOCSP": {
          "aliases": [],
          "description": "Switch to reject certificate if there is no status from OCSP.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "rejectIfUnreachableFromOCSP": {
          "aliases": [],
          "description": "Switch to reject certificate if unreachable from OCSP.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "selectedOCSPService": {
          "aliases": [],
          "description": "Name of selected OCSP Service.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "status": {
          "aliases": [],
          "description": "Trusted Certificate's status.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "trustForCertificateBasedAdminAuth": {
          "aliases": [],
          "description": "Trust for Certificate based Admin authentication.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "trustForCiscoServicesAuth": {
          "aliases": [],
          "description": "Trust for authentication of Cisco Services.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "trustForClientAuth": {
          "aliases": [],
          "description": "Trust for client authentication and Syslog.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "trustForIseAuth": {
          "aliases": [],
          "description": "Trust for authentication within ISE.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Trusted Certificate",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Update by id\n  cisco.ise.trusted_certificate:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: present\n    authenticateBeforeCRLReceived: true\n    automaticCRLUpdate: true\n    automaticCRLUpdatePeriod: 0\n    automaticCRLUpdateUnits: string\n    crlDistributionUrl: string\n    crlDownloadFailureRetries: 0\n    crlDownloadFailureRetriesUnits: string\n    description: string\n    downloadCRL: true\n    enableOCSPValidation: true\n    enableServerIdentityCheck: true\n    id: string\n    ignoreCRLExpiration: true\n    name: string\n    nonAutomaticCRLUpdatePeriod: 0\n    nonAutomaticCRLUpdateUnits: string\n    rejectIfNoStatusFromOCSP: true\n    rejectIfUnreachableFromOCSP: true\n    selectedOCSPService: string\n    status: string\n    trustForCertificateBasedAdminAuth: true\n    trustForCiscoServicesAuth: true\n    trustForClientAuth: true\n    trustForIseAuth: true\n\n- name: Delete by id\n  cisco.ise.trusted_certificate:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    state: absent\n    id: string\n\n"
  },
  "cisco.ise.trusted_certificate_export_info": {
    "doc": {
      "description": "Get Trusted Certificate Export by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "dirPath": {
          "aliases": [],
          "description": "Directory absolute path. Defaults to the current working directory.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter. The ID of the Trusted Certificate to be exported.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "saveFile": {
          "aliases": [],
          "description": "Enable or disable automatic file creation of raw response.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Trusted Certificate Export",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get Trusted Certificate Export by id\n  cisco.ise.trusted_certificate_export_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n"
  },
  "cisco.ise.trusted_certificate_import": {
    "doc": {
      "description": "Manage operation create of the resource Trusted Certificate Import.",
      "has_action": true,
      "notes": "Does not support C(check_mode)",
      "options": {
        "allowBasicConstraintCAFalse": {
          "aliases": [],
          "description": "Allow Certificates with Basic Constraints CA Field as False (required).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "allowOutOfDateCert": {
          "aliases": [],
          "description": "Allow out of date certificates (required).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "allowSHA1Certificates": {
          "aliases": [],
          "description": "Allow SHA1 based certificates (required).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Certificate content (required).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the certificate.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the certificate.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "trustForCertificateBasedAdminAuth": {
          "aliases": [],
          "description": "Trust for Certificate based Admin authentication.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "trustForCiscoServicesAuth": {
          "aliases": [],
          "description": "Trust for authentication of Cisco Services.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "trustForClientAuth": {
          "aliases": [],
          "description": "Trust for client authentication and Syslog.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "trustForIseAuth": {
          "aliases": [],
          "description": "Trust for authentication within ISE.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validateCertificateExtensions": {
          "aliases": [],
          "description": "Validate trust certificate extension.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Resource module for Trusted Certificate Import",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create\n  cisco.ise.trusted_certificate_import:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    allowBasicConstraintCAFalse: true\n    allowOutOfDateCert: true\n    allowSHA1Certificates: true\n    data: string\n    description: string\n    name: string\n    trustForCertificateBasedAdminAuth: true\n    trustForCiscoServicesAuth: true\n    trustForClientAuth: true\n    trustForIseAuth: true\n    validateCertificateExtensions: true\n\n"
  },
  "cisco.ise.trusted_certificate_info": {
    "doc": {
      "description": "Get all Trusted Certificate.\nGet Trusted Certificate by id.",
      "has_action": true,
      "notes": "Supports C(check_mode)",
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter query parameter. <div> <style type=\"text/css\" scoped> .apiServiceTable td, .apiServiceTable th { padding 5px 10px !important; text-align left; } </style> <span> <b>Simple filtering</b> should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the <i>\"filterType=or\"</i> query string parameter. Each resource Data model description should specify if an attribute is a filtered field. </span> <br /> <table class=\"apiServiceTable\"> <thead> <tr> <th>OPERATOR</th> <th>DESCRIPTION</th> </tr> </thead> <tbody> <tr> <td>EQ</td> <td>Equals</td> </tr> <tr> <td>NEQ</td> <td>Not Equals</td> </tr> <tr> <td>GT</td> <td>Greater Than</td> </tr> <tr> <td>LT</td> <td>Less Then</td> </tr> <tr> <td>STARTSW</td> <td>Starts With</td> </tr> <tr> <td>NSTARTSW</td> <td>Not Starts With</td> </tr> <tr> <td>ENDSW</td> <td>Ends With</td> </tr> <tr> <td>NENDSW</td> <td>Not Ends With</td> </tr> <tr> <td>CONTAINS</td> <td>Contains</td> </tr> <tr> <td>NCONTAINS</td> <td>Not Contains</td> </tr> </tbody> </table> </div>.\n",
          "type": "list",
          "required": false,
          "suboptions": {}
        },
        "filterType": {
          "aliases": [],
          "description": "FilterType query parameter. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter.\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "Id path parameter. The id of the trust certificate.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_debug": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable debugging.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_hostname": {
          "aliases": [],
          "description": "The Identity Services Engine hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_password": {
          "aliases": [],
          "description": "The Identity Services Engine password to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_username": {
          "aliases": [],
          "description": "The Identity Services Engine username to authenticate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ise_uses_api_gateway": {
          "aliases": [],
          "description": "Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests.\nIf it is true, it uses the ISE's API Gateway and sends requests to https://{{ise_hostname}}.\nIf it is false, it sends the requests to https://{{ise_hostname}}:{{port}}, where the port value depends on the Service used (ERS, Mnt, UI, PxGrid).",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "ise_verify": {
          "aliases": [],
          "description": "Flag to enable or disable SSL certificate verification.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ise_version": {
          "aliases": [],
          "description": "Informs the SDK which version of Identity Services Engine to use.",
          "default": "3.1.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ise_wait_on_rate_limit": {
          "aliases": [],
          "description": "Flag for Identity Services Engine SDK to enable automatic rate-limit handling.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page query parameter. Page number.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size query parameter. Number of objects returned per page.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sort": {
          "aliases": [],
          "description": "Sort query parameter. Sort type - asc or desc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sortBy": {
          "aliases": [],
          "description": "SortBy query parameter. Sort column by which objects needs to be sorted.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "ciscoisesdk >= 1.1.0",
        "python >= 3.5"
      ],
      "short_description": "Information module for Trusted Certificate",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get all Trusted Certificate\n  cisco.ise.trusted_certificate_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    page: 1\n    size: 20\n    sort: asc\n    sortBy: string\n    filter: []\n    filterType: AND\n  register: result\n\n- name: Get Trusted Certificate by id\n  cisco.ise.trusted_certificate_info:\n    ise_hostname: \"{{ise_hostname}}\"\n    ise_username: \"{{ise_username}}\"\n    ise_password: \"{{ise_password}}\"\n    ise_verify: \"{{ise_verify}}\"\n    id: string\n  register: result\n\n"
  }
}