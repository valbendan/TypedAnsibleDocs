{
  "openstack.cloud.address_scope": {
    "doc": {
      "description": "Create or Delete address scopes from OpenStack.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "extra_specs": {
          "aliases": [],
          "description": "Dictionary with extra key/value pairs passed to the API",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "ip_version": {
          "aliases": [],
          "description": "The IP version of the subnet 4 or 6",
          "default": "4",
          "type": "str",
          "required": false,
          "choices": [
            "4",
            "6"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name to be give to the address scope",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Unique name or ID of the project.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "shared": {
          "aliases": [],
          "description": "Whether this address scope is shared or not.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the resource",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Create or delete address scopes from OpenStack"
    },
    "examples": "\n# Create an IPv4 address scope.\n- openstack.cloud.address_scope:\n    cloud: mycloud\n    state: present\n    name: my_adress_scope\n\n# Create a shared IPv6 address scope for a given project.\n- openstack.cloud.address_scope:\n    cloud: mycloud\n    state: present\n    ip_version: 6\n    name: ipv6_address_scope\n    project: myproj\n\n# Delete address scope.\n- openstack.cloud.address_scope:\n    cloud: mycloud\n    state: absent\n    name: my_adress_scope\n"
  },
  "openstack.cloud.auth": {
    "doc": {
      "description": "Retrieve an auth token from an OpenStack Cloud",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Retrieve an auth token"
    },
    "examples": "\n- name: Authenticate to the cloud and retrieve the service catalog\n  openstack.cloud.auth:\n    cloud: rax-dfw\n\n- name: Show service catalog\n  debug:\n    var: service_catalog\n"
  },
  "openstack.cloud.baremetal_inspect": {
    "doc": {
      "description": "Requests Ironic to set a node into inspect state in order to collect metadata regarding the node. This command may be out of band or in-band depending on the ironic driver configuration. This is only possible on nodes in 'manageable' and 'available' state.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "ironic_url": {
          "aliases": [],
          "description": "If noauth mode is utilized, this is required to be set to the endpoint URL for the Ironic API. Use with \"auth\" and \"auth_type\" settings set to None.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mac": {
          "aliases": [],
          "description": "unique mac address that is used to attempt to identify the host.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "unique name identifier to identify the host in Ironic.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "A timeout in seconds to tell the role to wait for the node to complete introspection if wait is set to True.",
          "default": "1200",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "globally unique identifier (UUID) to identify the host.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Explicitly triggers baremetal node introspection in ironic."
    },
    "examples": "\n# Invoke node inspection\n- openstack.cloud.baremetal_inspect:\n    name: \"testnode1\"\n"
  },
  "openstack.cloud.baremetal_node": {
    "doc": {
      "description": "Create or Remove Ironic nodes from OpenStack.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "bios_interface": {
          "aliases": [],
          "description": "The bios interface for this node, e.g. \"no-bios\".",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "boot_interface": {
          "aliases": [],
          "description": "The boot interface for this node, e.g. \"pxe\".",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "chassis_uuid": {
          "aliases": [],
          "description": "Associate the node with a pre-defined chassis.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "console_interface": {
          "aliases": [],
          "description": "The console interface for this node, e.g. \"no-console\".",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "deploy_interface": {
          "aliases": [],
          "description": "The deploy interface for this node, e.g. \"iscsi\".",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "driver": {
          "aliases": [],
          "description": "The name of the Ironic Driver to use with this node.\nRequired when I(state=present)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "driver_info": {
          "aliases": [],
          "description": "Information for this server's driver. Will vary based on which driver is in use. Any sub-field which is populated will be validated during creation. For compatibility reasons sub-fields `power`, `deploy`, `management` and `console` are flattened.",
          "type": "dict",
          "required": true,
          "suboptions": {}
        },
        "inspect_interface": {
          "aliases": [],
          "description": "The interface used for node inspection, e.g. \"no-inspect\".",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "ironic_url": {
          "aliases": [],
          "description": "If noauth mode is utilized, this is required to be set to the endpoint URL for the Ironic API.  Use with \"auth\" and \"auth_type\" settings set to None.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "management_interface": {
          "aliases": [],
          "description": "The interface for out-of-band management of this node, e.g. \"ipmitool\".",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "unique name identifier to be given to the resource.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "network_interface": {
          "aliases": [],
          "description": "The network interface provider to use when describing connections for this node.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "nics": {
          "aliases": [],
          "description": "A list of network interface cards, eg, \" - mac: aa:bb:cc:aa:bb:cc\"",
          "type": "list",
          "required": true,
          "elements": "dict",
          "suboptions": {
            "mac": {
              "aliases": [],
              "description": "The MAC address of the network interface card.",
              "type": "str",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "power_interface": {
          "aliases": [],
          "description": "The interface used to manage power actions on this node, e.g. \"ipmitool\".",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "properties": {
          "aliases": [],
          "description": "Definition of the physical characteristics of this server, used for scheduling purposes",
          "type": "dict",
          "required": false,
          "suboptions": {
            "capabilities": {
              "aliases": [],
              "description": "special capabilities for the node, such as boot_option, node_role etc (see U(https://docs.openstack.org/ironic/latest/install/advanced.html) for more information)",
              "default": "",
              "required": false,
              "suboptions": {}
            },
            "cpu_arch": {
              "aliases": [],
              "description": "CPU architecture (x86_64, i686, ...)",
              "default": "x86_64",
              "required": false,
              "suboptions": {}
            },
            "cpus": {
              "aliases": [],
              "description": "Number of CPU cores this machine has",
              "default": "1",
              "required": false,
              "suboptions": {}
            },
            "disk_size": {
              "aliases": [],
              "description": "size of first storage device in this machine (typically /dev/sda), in GB",
              "default": "1",
              "required": false,
              "suboptions": {}
            },
            "ram": {
              "aliases": [],
              "description": "amount of RAM this machine has, in MB",
              "default": "1",
              "required": false,
              "suboptions": {}
            },
            "root_device": {
              "aliases": [],
              "description": "Root disk device hints for deployment.\nSee U(https://docs.openstack.org/ironic/latest/install/advanced.html#specifying-the-disk-for-deployment-root-device-hints) for allowed hints.",
              "default": "",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "raid_interface": {
          "aliases": [],
          "description": "Interface used for configuring raid on this node.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "rescue_interface": {
          "aliases": [],
          "description": "Interface used for node rescue, e.g. \"no-rescue\".",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "resource_class": {
          "aliases": [],
          "description": "The specific resource type to which this node belongs.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "skip_update_of_masked_password": {
          "aliases": [
            "skip_update_of_driver_password"
          ],
          "description": "Allows the code that would assert changes to nodes to skip the update if the change is a single line consisting of the password field.\nAs of Kilo, by default, passwords are always masked to API requests, which means the logic as a result always attempts to re-assert the password field.\nC(skip_update_of_driver_password) is deprecated alias and will be removed in openstack.cloud 2.0.0.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicates desired state of the resource",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "storage_interface": {
          "aliases": [],
          "description": "Interface used for attaching and detaching volumes on this node, e.g. \"cinder\".",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "globally unique identifier (UUID) to be given to the resource. Will be auto-generated if not specified, and name is specified.\nDefinition of a UUID will always take precedence to a name value.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vendor_interface": {
          "aliases": [],
          "description": "Interface for all vendor-specific actions on this node, e.g. \"no-vendor\".",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "jsonpatch",
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Create/Delete Bare Metal Resources from OpenStack"
    },
    "examples": "\n# Enroll a node with some basic properties and driver info\n- openstack.cloud.baremetal_node:\n    cloud: \"devstack\"\n    driver: \"pxe_ipmitool\"\n    uuid: \"00000000-0000-0000-0000-000000000002\"\n    properties:\n      cpus: 2\n      cpu_arch: \"x86_64\"\n      ram: 8192\n      disk_size: 64\n      capabilities: \"boot_option:local\"\n      root_device:\n        wwn: \"0x4000cca77fc4dba1\"\n    nics:\n      - mac: \"aa:bb:cc:aa:bb:cc\"\n      - mac: \"dd:ee:ff:dd:ee:ff\"\n    driver_info:\n      ipmi_address: \"1.2.3.4\"\n      ipmi_username: \"admin\"\n      ipmi_password: \"adminpass\"\n    chassis_uuid: \"00000000-0000-0000-0000-000000000001\"\n\n"
  },
  "openstack.cloud.baremetal_node_action": {
    "doc": {
      "description": "Deploy to nodes controlled by Ironic.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "config_drive": {
          "aliases": [],
          "description": "A configdrive file or HTTP(S) URL that will be passed along to the node.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "deploy": {
          "aliases": [],
          "description": "Indicates if the resource should be deployed. Allows for deployment logic to be disengaged and control of the node power or maintenance state to be changed.",
          "default": "yes",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "instance_info": {
          "aliases": [],
          "description": "Definition of the instance information which is used to deploy the node.  This information is only required when an instance is set to present.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "image_checksum": {
              "aliases": [],
              "description": "The checksum of image_source.",
              "required": false,
              "suboptions": {}
            },
            "image_disk_format": {
              "aliases": [],
              "description": "The type of image that has been requested to be deployed.",
              "required": false,
              "suboptions": {}
            },
            "image_source": {
              "aliases": [],
              "description": "An HTTP(S) URL where the image can be retrieved from.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "ironic_url": {
          "aliases": [],
          "description": "If noauth mode is utilized, this is required to be set to the endpoint URL for the Ironic API.  Use with \"auth\" and \"auth_type\" settings set to None.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "maintenance": {
          "aliases": [],
          "description": "A setting to allow the direct control if a node is in maintenance mode.\nI(maintenance) can be C('yes'), C('no'), C('True'), or C('False').",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "maintenance_reason": {
          "aliases": [],
          "description": "A string expression regarding the reason a node is in a maintenance mode.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the node to create.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "power": {
          "aliases": [],
          "description": "A setting to allow power state to be asserted allowing nodes that are not yet deployed to be powered on, and nodes that are deployed to be powered off.\nI(power) can be C('present'), C('absent'), C('maintenance') or C('off').",
          "default": "present",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicates desired state of the resource.\nI(state) can be C('present'), C('absent'), C('maintenance') or C('off').",
          "default": "present",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "An integer value representing the number of seconds to wait for the node activation or deactivation to complete.",
          "default": "1800",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "globally unique identifier (UUID) to be given to the resource.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "A boolean value instructing the module to wait for node activation or deactivation to complete before returning.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Activate/Deactivate Bare Metal Resources from OpenStack"
    },
    "examples": "\n# Activate a node by booting an image with a configdrive attached\n- openstack.cloud.baremetal_node_action:\n    cloud: \"openstack\"\n    uuid: \"d44666e1-35b3-4f6b-acb0-88ab7052da69\"\n    state: present\n    power: present\n    deploy: True\n    maintenance: False\n    config_drive: \"http://192.168.1.1/host-configdrive.iso\"\n    instance_info:\n      image_source: \"http://192.168.1.1/deploy_image.img\"\n      image_checksum: \"356a6b55ecc511a20c33c946c4e678af\"\n      image_disk_format: \"qcow\"\n    delegate_to: localhost\n\n# Activate a node by booting an image with a configdrive json object\n- openstack.cloud.baremetal_node_action:\n    uuid: \"d44666e1-35b3-4f6b-acb0-88ab7052da69\"\n    auth_type: None\n    ironic_url: \"http://192.168.1.1:6385/\"\n    config_drive:\n      meta_data:\n        hostname: node1\n        public_keys:\n          default: ssh-rsa AAA...BBB==\n    instance_info:\n      image_source: \"http://192.168.1.1/deploy_image.img\"\n      image_checksum: \"356a6b55ecc511a20c33c946c4e678af\"\n      image_disk_format: \"qcow\"\n    delegate_to: localhost\n"
  },
  "openstack.cloud.baremetal_node_info": {
    "doc": {
      "description": "Retrieve information about Bare Metal nodes from OpenStack.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "ironic_url": {
          "aliases": [],
          "description": "If noauth mode is utilized, this is required to be set to the endpoint URL for the Ironic API.  Use with \"auth\" and \"auth_type\" settings set to None.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mac": {
          "aliases": [],
          "description": "Unique mac address that is used to attempt to identify the host.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "node": {
          "aliases": [],
          "description": "Name or globally unique identifier (UUID) to identify the host.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Retrieve information about Bare Metal nodes from OpenStack"
    },
    "examples": "\n# Gather information about all baremeal nodes\n- openstack.cloud.baremetal_node_info:\n    cloud: \"devstack\"\n  register: result\n- debug:\n    msg: \"{{ result.baremetal_nodes }}\"\n# Gather information about a baremeal node\n- openstack.cloud.baremetal_node_info:\n    cloud: \"devstack\"\n    node: \"00000000-0000-0000-0000-000000000002\"\n  register: result\n- debug:\n    msg: \"{{ result.baremetal_nodes }}\"\n"
  },
  "openstack.cloud.baremetal_port": {
    "doc": {
      "description": "Create, Update and Remove ironic ports from OpenStack.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "address": {
          "aliases": [],
          "description": "Physical hardware address of this network Port, typically the hardware MAC address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "extra": {
          "aliases": [],
          "description": "A set of one or more arbitrary metadata key and value pairs.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "ironic_url": {
          "aliases": [],
          "description": "If noauth mode is utilized, this is required to be set to the endpoint URL for the Ironic API.  Use with \"auth\" and \"auth_type\" settings set to None.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "is_pxe_enabled": {
          "aliases": [],
          "description": "Whether PXE should be enabled or disabled on the Port.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "local_link_connection": {
          "aliases": [],
          "description": "The Port binding profile.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "port_id": {
              "aliases": [],
              "description": "Identifier of the physical port on the switch to which node's port is connected to.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "switch_id": {
              "aliases": [],
              "description": "A MAC address or an OpenFlow based datapath_id of the switch.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "switch_info": {
              "aliases": [],
              "description": "An optional string field to be used to store any vendor-specific information.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "node": {
          "aliases": [],
          "description": "UUID or Name of the Node this resource belongs to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "physical_network": {
          "aliases": [],
          "description": "The name of the physical network to which a port is connected.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "portgroup": {
          "aliases": [],
          "description": "UUID or Name of the Portgroup this resource belongs to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicates desired state of the resource",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "globally unique identifier (UUID) to be given to the resource. Will be auto-generated if not specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Create/Delete Bare Metal port Resources from OpenStack"
    },
    "examples": "\n# Create Bare Metal port\n- name: Create Bare Metal port\n  openstack.cloud.baremetal_port:\n    cloud: devstack\n    state: present\n    node: bm-0\n    address: fa:16:3e:aa:aa:aa\n    pxe_enabled: True\n    local_link_connection:\n      switch_id: 0a:1b:2c:3d:4e:5f\n      port_id: Ethernet3/1\n      switch_info: switch1\n    extra:\n      something: extra\n    physical_network: datacenter\n  register: result\n# Delete Bare Metal port\n- name: Delete Bare Metal port\n  openstack.cloud.baremetal_port:\n    cloud: devstack\n    state: absent\n    address: fa:16:3e:aa:aa:aa\n  register: result\n# Update Bare Metal port\n- name: Update Bare Metal port\n  openstack.cloud.baremetal_port:\n    cloud: devstack\n    state: present\n    uuid: 1a85ebca-22bf-42eb-ad9e-f640789b8098\n    pxe_enabled: False\n    local_link_connection:\n      switch_id: a0:b1:c2:d3:e4:f5\n      port_id: Ethernet4/12\n      switch_info: switch2\n"
  },
  "openstack.cloud.baremetal_port_info": {
    "doc": {
      "description": "Retrieve information about Bare Metal ports from OpenStack.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "address": {
          "aliases": [],
          "description": "Physical hardware address of this network Port, typically the hardware MAC address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "ironic_url": {
          "aliases": [],
          "description": "If noauth mode is utilized, this is required to be set to the endpoint URL for the Ironic API.  Use with \"auth\" and \"auth_type\" settings set to None.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "node": {
          "aliases": [],
          "description": "Name or globally unique identifier (UUID) to identify a Baremetal Node.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Name or globally unique identifier (UUID) to identify the port.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Retrieve information about Bare Metal ports from OpenStack"
    },
    "examples": "\n# Gather information about all baremetal ports\n- openstack.cloud.baremetal_port_info:\n    cloud: devstack\n  register: result\n# Gather information about a baremetal port by address\n- openstack.cloud.baremetal_port_info:\n    cloud: devstack\n    address: fa:16:3e:aa:aa:aa\n  register: result\n# Gather information about a baremetal port by address\n- openstack.cloud.baremetal_port_info:\n    cloud: devstack\n    uuid: a2b6bd99-77b9-43f0-9ddc-826568e68dec\n  register: result\n# Gather information about a baremetal ports associated with a baremetal node\n- openstack.cloud.baremetal_port_info:\n    cloud: devstack\n    node: bm-0\n  register: result\n"
  },
  "openstack.cloud.catalog_service": {
    "doc": {
      "description": "Create, update, or delete OpenStack Identity service. If a service with the supplied name already exists, it will be updated with the new description and enabled attributes.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the service",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "Is the service enabled",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the service",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "service_type": {
          "aliases": [],
          "description": "The type of service",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Manage OpenStack Identity services"
    },
    "examples": "\n# Create a service for glance\n- openstack.cloud.catalog_service:\n     cloud: mycloud\n     state: present\n     name: glance\n     service_type: image\n     description: OpenStack Image Service\n# Delete a service\n- openstack.cloud.catalog_service:\n     cloud: mycloud\n     state: absent\n     name: glance\n     service_type: image\n"
  },
  "openstack.cloud.coe_cluster": {
    "doc": {
      "description": "Add or Remove COE cluster from the OpenStack Container Infra service.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "cluster_template_id": {
          "aliases": [],
          "description": "The template ID of cluster template.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "discovery_url": {
          "aliases": [],
          "description": "Url used for cluster node discovery",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "docker_volume_size": {
          "aliases": [],
          "description": "The size in GB of the docker volume",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "flavor_id": {
          "aliases": [],
          "description": "The flavor of the minion node for this ClusterTemplate",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "keypair": {
          "aliases": [],
          "description": "Name of the keypair to use.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "labels": {
          "aliases": [],
          "description": "One or more key/value pairs",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "master_count": {
          "aliases": [],
          "description": "The number of master nodes for this cluster",
          "default": "1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "master_flavor_id": {
          "aliases": [],
          "description": "The flavor of the master node for this ClusterTemplate",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name that has to be given to the cluster template",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "node_count": {
          "aliases": [],
          "description": "The number of nodes for this cluster",
          "default": "1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Timeout for creating the cluster in minutes. Default to 60 mins if not set",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Add/Remove COE cluster from OpenStack Cloud"
    },
    "examples": "\n# Create a new Kubernetes cluster\n- openstack.cloud.coe_cluster:\n    name: k8s\n    cluster_template_id: k8s-ha\n    keypair: mykey\n    master_count: 3\n    node_count: 5\n"
  },
  "openstack.cloud.coe_cluster_template": {
    "doc": {
      "description": "Add or Remove COE cluster template from the OpenStack Container Infra service.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "coe": {
          "aliases": [],
          "description": "The Container Orchestration Engine for this clustertemplate",
          "type": "str",
          "required": true,
          "choices": [
            "kubernetes",
            "swarm",
            "mesos"
          ],
          "suboptions": {}
        },
        "dns_nameserver": {
          "aliases": [],
          "description": "The DNS nameserver address",
          "default": "8.8.8.8",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "docker_storage_driver": {
          "aliases": [],
          "description": "Docker storage driver",
          "type": "str",
          "required": false,
          "choices": [
            "devicemapper",
            "overlay",
            "overlay2"
          ],
          "suboptions": {}
        },
        "docker_volume_size": {
          "aliases": [],
          "description": "The size in GB of the docker volume",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "external_network_id": {
          "aliases": [],
          "description": "The external network to attach to the Cluster",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fixed_network": {
          "aliases": [],
          "description": "The fixed network name to attach to the Cluster",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fixed_subnet": {
          "aliases": [],
          "description": "The fixed subnet name to attach to the Cluster",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "flavor_id": {
          "aliases": [],
          "description": "The flavor of the minion node for this ClusterTemplate",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "floating_ip_enabled": {
          "aliases": [],
          "description": "Indicates whether created clusters should have a floating ip or not",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "http_proxy": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTP requests and relay them The format is a URL including a port number",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "https_proxy": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them. The format is a URL including a port number",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "image_id": {
          "aliases": [],
          "description": "Image id the cluster will be based on",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "keypair_id": {
          "aliases": [],
          "description": "Name or ID of the keypair to use.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "labels": {
          "aliases": [],
          "description": "One or more key/value pairs",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "master_flavor_id": {
          "aliases": [],
          "description": "The flavor of the master node for this ClusterTemplate",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "master_lb_enabled": {
          "aliases": [],
          "description": "Indicates whether created clusters should have a load balancer for master nodes or not",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name that has to be given to the cluster template",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "network_driver": {
          "aliases": [],
          "description": "The name of the driver used for instantiating container networks",
          "type": "str",
          "required": false,
          "choices": [
            "flannel",
            "calico",
            "docker"
          ],
          "suboptions": {}
        },
        "no_proxy": {
          "aliases": [],
          "description": "A comma separated list of IPs for which proxies should not be used in the cluster",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "public": {
          "aliases": [],
          "description": "Indicates whether the ClusterTemplate is public or not",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "registry_enabled": {
          "aliases": [],
          "description": "Indicates whether the docker registry is enabled",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "server_type": {
          "aliases": [],
          "description": "Server type for this ClusterTemplate",
          "default": "vm",
          "type": "str",
          "required": false,
          "choices": [
            "vm",
            "bm"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "tls_disabled": {
          "aliases": [],
          "description": "Indicates whether the TLS should be disabled",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "volume_driver": {
          "aliases": [],
          "description": "The name of the driver used for instantiating container volumes",
          "type": "str",
          "required": false,
          "choices": [
            "cinder",
            "rexray"
          ],
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Add/Remove COE cluster template from OpenStack Cloud"
    },
    "examples": "\n# Create a new Kubernetes cluster template\n- openstack.cloud.coe_cluster_template:\n    name: k8s\n    coe: kubernetes\n    keypair_id: mykey\n    image_id: 2a8c9888-9054-4b06-a1ca-2bb61f9adb72\n    public: no\n"
  },
  "openstack.cloud.compute_flavor": {
    "doc": {
      "description": "Add or remove flavors from OpenStack.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "disk": {
          "aliases": [],
          "description": "Size of local disk, in GB.",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ephemeral": {
          "aliases": [],
          "description": "Ephemeral space size, in GB.",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "extra_specs": {
          "aliases": [],
          "description": "Metadata dictionary",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "flavorid": {
          "aliases": [],
          "description": "ID for the flavor. This is optional as a unique UUID will be assigned if a value is not specified.",
          "default": "auto",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "is_public": {
          "aliases": [],
          "description": "Make flavor accessible to the public.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Flavor name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ram": {
          "aliases": [],
          "description": "Amount of memory, in MB.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "rxtx_factor": {
          "aliases": [],
          "description": "RX/TX factor.",
          "default": "1.0",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the resource. When I(state) is 'present', then I(ram), I(vcpus), and I(disk) are all required. There are no default values for those parameters.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "swap": {
          "aliases": [],
          "description": "Swap space size, in MB.",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vcpus": {
          "aliases": [],
          "description": "Number of virtual CPUs.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Manage OpenStack compute flavors"
    },
    "examples": "\n- name: \"Create 'tiny' flavor with 1024MB of RAM, 1 virtual CPU, and 10GB of local disk, and 10GB of ephemeral.\"\n  openstack.cloud.compute_flavor:\n    cloud: mycloud\n    state: present\n    name: tiny\n    ram: 1024\n    vcpus: 1\n    disk: 10\n    ephemeral: 10\n\n- name: \"Delete 'tiny' flavor\"\n  openstack.cloud.compute_flavor:\n    cloud: mycloud\n    state: absent\n    name: tiny\n\n- name: Create flavor with metadata\n  openstack.cloud.compute_flavor:\n    cloud: mycloud\n    state: present\n    name: tiny\n    ram: 1024\n    vcpus: 1\n    disk: 10\n    extra_specs:\n      \"quota:disk_read_iops_sec\": 5000\n      \"aggregate_instance_extra_specs:pinned\": false\n"
  },
  "openstack.cloud.compute_flavor_info": {
    "doc": {
      "description": "Retrieve information about available OpenStack instance flavors. By default, information about ALL flavors are retrieved. Filters can be applied to get information for only matching flavors. For example, you can filter on the amount of RAM available to the flavor, or the number of virtual CPUs available to the flavor, or both. When specifying multiple filters, *ALL* filters must match on a flavor before that flavor is returned as a fact.\nThis module was called C(openstack.cloud.compute_flavor_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(openstack.cloud.compute_flavor_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "The result contains a list of unsorted flavors.\nThe standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "ephemeral": {
          "aliases": [],
          "description": "A string used for filtering flavors based on the amount of ephemeral storage. Format is the same as the I(ram) parameter",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "limit": {
          "aliases": [],
          "description": "Limits the number of flavors returned. All matching flavors are returned by default.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "A flavor name. Cannot be used with I(ram) or I(vcpus) or I(ephemeral).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ram": {
          "aliases": [],
          "description": "A string used for filtering flavors based on the amount of RAM (in MB) desired. This string accepts the following special values: 'MIN' (return flavors with the minimum amount of RAM), and 'MAX' (return flavors with the maximum amount of RAM).\nA specific amount of RAM may also be specified. Any flavors with this exact amount of RAM will be returned.\nA range of acceptable RAM may be given using a special syntax. Simply prefix the amount of RAM with one of these acceptable range values: '<', '>', '<=', '>='. These values represent less than, greater than, less than or equal to, and greater than or equal to, respectively.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vcpus": {
          "aliases": [],
          "description": "A string used for filtering flavors based on the number of virtual CPUs desired. Format is the same as the I(ram) parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Retrieve information about one or more flavors"
    },
    "examples": "\n# Gather information about all available flavors\n- openstack.cloud.compute_flavor_info:\n    cloud: mycloud\n  register: result\n\n- debug:\n    msg: \"{{ result.openstack_flavors }}\"\n\n# Gather information for the flavor named \"xlarge-flavor\"\n- openstack.cloud.compute_flavor_info:\n    cloud: mycloud\n    name: \"xlarge-flavor\"\n\n# Get all flavors that have exactly 512 MB of RAM.\n- openstack.cloud.compute_flavor_info:\n    cloud: mycloud\n    ram: \"512\"\n\n# Get all flavors that have 1024 MB or more of RAM.\n- openstack.cloud.compute_flavor_info:\n    cloud: mycloud\n    ram: \">=1024\"\n\n# Get a single flavor that has the minimum amount of RAM. Using the 'limit'\n# option will guarantee only a single flavor is returned.\n- openstack.cloud.compute_flavor_info:\n    cloud: mycloud\n    ram: \"MIN\"\n    limit: 1\n\n# Get all flavors with 1024 MB of RAM or more, AND exactly 2 virtual CPUs.\n- openstack.cloud.compute_flavor_info:\n    cloud: mycloud\n    ram: \">=1024\"\n    vcpus: \"2\"\n\n# Get all flavors with 1024 MB of RAM or more, exactly 2 virtual CPUs, and\n# less than 30gb of ephemeral storage.\n- openstack.cloud.compute_flavor_info:\n    cloud: mycloud\n    ram: \">=1024\"\n    vcpus: \"2\"\n    ephemeral: \"<30\"\n"
  },
  "openstack.cloud.compute_service_info": {
    "doc": {
      "description": "Retrieve information about nova compute services",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "binary": {
          "aliases": [],
          "description": "Filter by service binary type",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Filter by service host",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Retrieve information about one or more OpenStack compute services"
    },
    "examples": "\n# Gather information about compute services\n- openstack.cloud.compute_service_info:\n    cloud: awesomecloud\n    binary: \"nova-compute\"\n    host: \"localhost\"\n  register: result\n- openstack.cloud.compute_service_info:\n    cloud: awesomecloud\n  register: result\n- debug:\n    msg: \"{{ result.openstack_compute_services }}\"\n"
  },
  "openstack.cloud.config": {
    "doc": {
      "description": "Get I(openstack) client config data from clouds.yaml or environment",
      "has_action": false,
      "notes": "Facts are placed in the C(openstack.clouds) variable.",
      "options": {
        "clouds": {
          "aliases": [],
          "description": "List of clouds to limit the return list to. No value means return information on all configured clouds",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 3.6",
        "openstacksdk"
      ],
      "short_description": "Get OpenStack Client config"
    },
    "examples": "\n- name: Get list of clouds that do not support security groups\n  openstack.cloud.config:\n\n- debug:\n    var: \"{{ item }}\"\n  with_items: \"{{ openstack.clouds | rejectattr('secgroup_source', 'none') | list }}\"\n\n- name: Get the information back just about the mordred cloud\n  openstack.cloud.config:\n    clouds:\n      - mordred\n"
  },
  "openstack.cloud.container": {
    "doc": {
      "description": "Manage Swift container.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "container": {
          "aliases": [],
          "description": "Name of a container in Swift.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "delete_with_all_objects": {
          "aliases": [],
          "description": "Whether the container should be deleted with all objects or not.\nWithout this parameter set to \"true\", an attempt to delete a container that contains objects will fail.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "keys": {
          "aliases": [],
          "description": "Keys from 'metadata' to be deleted.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "metadata": {
          "aliases": [],
          "description": "Key/value pairs to be set as metadata on the container.\nIf a container doesn't exist, it will be created.\nBoth custom and system metadata can be set.\nCustom metadata are keys and values defined by the user.\nThe system metadata keys are content_type, content_encoding, content_disposition, delete_after,         delete_at, is_content_type_detected",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether resource should be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Manage Swift container."
    },
    "examples": "\n# Create empty container\n - openstack.cloud.object_container:\n    container: \"new-container\"\n    state: present\n\n# Set metadata for container\n - openstack.cloud.object_container:\n    container: \"new-container\"\n    metadata: \"Cache-Control='no-cache'\"\n\n# Delete some keys from metadata of a container\n - openstack.cloud.object_container:\n    container: \"new-container\"\n    keys:\n        - content_type\n\n# Delete container\n - openstack.cloud.object_container:\n    container: \"new-container\"\n    state: absent\n\n# Delete container and its objects\n - openstack.cloud.object_container:\n    container: \"new-container\"\n    delete_with_all_objects: true\n    state: absent\n"
  },
  "openstack.cloud.dns_zone": {
    "doc": {
      "description": "Manage OpenStack DNS zones. Zones can be created, deleted or updated. Only the I(email), I(description), I(ttl) and I(masters) values can be updated.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Zone description",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "email": {
          "aliases": [],
          "description": "Email of the zone owner (only applies if zone_type is primary)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "masters": {
          "aliases": [],
          "description": "Master nameservers (only applies if zone_type is secondary)",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Zone name",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ttl": {
          "aliases": [],
          "description": "TTL (Time To Live) value in seconds",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "zone_type": {
          "aliases": [],
          "description": "Zone type",
          "type": "str",
          "required": false,
          "choices": [
            "primary",
            "secondary"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Manage OpenStack DNS zones"
    },
    "examples": "\n# Create a zone named \"example.net\"\n- openstack.cloud.dns_zone:\n    cloud: mycloud\n    state: present\n    name: example.net.\n    zone_type: primary\n    email: test@example.net\n    description: Test zone\n    ttl: 3600\n\n# Update the TTL on existing \"example.net.\" zone\n- openstack.cloud.dns_zone:\n    cloud: mycloud\n    state: present\n    name: example.net.\n    ttl: 7200\n\n# Delete zone named \"example.net.\"\n- openstack.cloud.dns_zone:\n    cloud: mycloud\n    state: absent\n    name: example.net.\n"
  },
  "openstack.cloud.dns_zone_info": {
    "doc": {
      "description": "Getting information about dns zones. Output can be filtered.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Zone description.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "email": {
          "aliases": [],
          "description": "Email of the zone owner (only applies if zone_type is primary).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Zone name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ttl": {
          "aliases": [],
          "description": "TTL (Time To Live) value in seconds.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "Zone type.",
          "type": "str",
          "required": false,
          "choices": [
            "primary",
            "secondary"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Getting information about dns zones"
    },
    "examples": "\n# Create a zone named \"example.net\"\n- openstack.cloud.dns_zones:\n\n"
  },
  "openstack.cloud.endpoint": {
    "doc": {
      "description": "Create, update, or delete OpenStack Identity service endpoints. If a service with the same combination of I(service), I(interface) and I(region) exist, the I(url) and I(state) (C(present) or C(absent)) will be updated.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "Is the service enabled.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "endpoint_interface": {
          "aliases": [],
          "description": "Interface of the service.",
          "type": "str",
          "required": true,
          "choices": [
            "admin",
            "public",
            "internal"
          ],
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "Region that the service belongs to. Note that I(region_name) is used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "service": {
          "aliases": [],
          "description": "Name or id of the service.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be C(present) or C(absent).",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "URL of the service.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk >= 0.12.0",
        "openstacksdk >= 0.13.0",
        "python >= 3.6"
      ],
      "short_description": "Manage OpenStack Identity service endpoints"
    },
    "examples": "\n- name: Create a service for glance\n  openstack.cloud.endpoint:\n     cloud: mycloud\n     service: glance\n     endpoint_interface: public\n     url: http://controller:9292\n     region: RegionOne\n     state: present\n\n- name: Delete a service for nova\n  openstack.cloud.endpoint:\n     cloud: mycloud\n     service: nova\n     endpoint_interface: public\n     region: RegionOne\n     state: absent\n"
  },
  "openstack.cloud.federation_idp": {
    "doc": {
      "description": "Manage a federation Identity Provider.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "The description of the Identity Provider.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain_id": {
          "aliases": [],
          "description": "The ID of a domain that is associated with the Identity Provider. Federated users that authenticate with the Identity Provider will be created under the domain specified.\nRequired when creating a new Identity Provider.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [
            "is_enabled"
          ],
          "description": "Whether the Identity Provider is enabled or not.\nWill default to C(true) when creating a new Identity Provider.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "id"
          ],
          "description": "The name of the Identity Provider.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "remote_ids": {
          "aliases": [],
          "description": "List of the unique Identity Provider's remote IDs.\nWill default to an empty list when creating a new Identity Provider.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the Identity Provider should be C(present) or C(absent).",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk >= 0.12.0",
        "openstacksdk >= 0.44",
        "python >= 3.6"
      ],
      "short_description": "manage a federation Identity Provider"
    },
    "examples": "\n- name: Create an identity provider\n  openstack.cloud.federation_idp:\n    cloud: example_cloud\n    name: example_provider\n    domain_id: 0123456789abcdef0123456789abcdef\n    description: 'My example IDP'\n    remote_ids:\n    - 'https://auth.example.com/auth/realms/ExampleRealm'\n\n- name: Delete an identity provider\n  openstack.cloud.federation_idp:\n    cloud: example_cloud\n    name: example_provider\n    state: absent\n"
  },
  "openstack.cloud.federation_idp_info": {
    "doc": {
      "description": "Fetch a federation identity provider.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "id"
          ],
          "description": "The name of the identity provider to fetch.\nIf I(name) is specified, the module will return failed if the identity provider doesn't exist.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk >= 0.12.0",
        "openstacksdk >= 0.44",
        "python >= 3.6"
      ],
      "short_description": "Get the information about the available federation identity providers"
    },
    "examples": "\n- name: Fetch a specific identity provider\n  openstack.cloud.federation_idp_info:\n    cloud: example_cloud\n    name: example_provider\n\n- name: Fetch all providers\n  openstack.cloud.federation_idp_info:\n    cloud: example_cloud\n"
  },
  "openstack.cloud.federation_mapping": {
    "doc": {
      "description": "Manage a federation mapping.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "id"
          ],
          "description": "The name of the mapping to manage.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "rules": {
          "aliases": [],
          "description": "The rules that comprise the mapping.  These are pairs of I(local) and I(remote) definitions.  For more details on how these work please see the OpenStack documentation U(https://docs.openstack.org/keystone/latest/admin/federation/mapping_combinations.html).\nRequired if I(state=present)",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "local": {
              "aliases": [],
              "description": "Information on what local attributes will be mapped.",
              "type": "list",
              "required": true,
              "elements": "dict",
              "suboptions": {}
            },
            "remote": {
              "aliases": [],
              "description": "Information on what remote attributes will be mapped.",
              "type": "list",
              "required": true,
              "elements": "dict",
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Whether the mapping should be C(present) or C(absent).",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk >= 0.12.0",
        "openstacksdk >= 0.44",
        "python >= 3.6"
      ],
      "short_description": "Manage a federation mapping"
    },
    "examples": "\n- name: Create a new mapping\n  openstack.cloud.federation_mapping:\n    cloud: example_cloud\n    name: example_mapping\n    rules:\n    - local:\n      - user:\n          name: '{0}'\n      - group:\n          id: '0cd5e9'\n      remote:\n      - type: UserName\n      - type: orgPersonType\n        any_one_of:\n        - Contractor\n        - SubContractor\n\n- name: Delete a mapping\n  openstack.cloud.federation_mapping:\n    name: example_mapping\n    state: absent\n"
  },
  "openstack.cloud.federation_mapping_info": {
    "doc": {
      "description": "Fetch a federation mapping.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "id"
          ],
          "description": "The name of the mapping to fetch.\nIf I(name) is specified, the module will return failed if the mapping doesn't exist.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk >= 0.12.0",
        "openstacksdk >= 0.44",
        "python >= 3.6"
      ],
      "short_description": "Get the information about the available federation mappings"
    },
    "examples": "\n- name: Fetch a specific mapping\n  openstack.cloud.federation_mapping_info:\n    cloud: example_cloud\n    name: example_mapping\n\n- name: Fetch all mappings\n  openstack.cloud.federation_mapping_info:\n    cloud: example_cloud\n"
  },
  "openstack.cloud.floating_ip": {
    "doc": {
      "description": "Add or Remove a floating IP to an instance.\nReturns the floating IP when attaching only if I(wait=true).\nWhen detaching a floating IP there might be a delay until an instance does not list the floating IP any more.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "fixed_address": {
          "aliases": [],
          "description": "To which fixed IP of server the floating IP address should be attached to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "floating_ip_address": {
          "aliases": [],
          "description": "A floating IP address to attach or to detach. When I(state) is present can be used to specify a IP address to attach. I(floating_ip_address) requires I(network) to be set.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "nat_destination": {
          "aliases": [
            "fixed_network",
            "internal_network"
          ],
          "description": "The name or id of a neutron private network that the fixed IP to attach floating IP is on",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "network": {
          "aliases": [],
          "description": "The name or ID of a neutron external network or a nova pool name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "purge": {
          "aliases": [],
          "description": "When I(state) is absent, indicates whether or not to delete the floating IP completely, or only detach it from the server. Default is to detach only.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "reuse": {
          "aliases": [],
          "description": "When I(state) is present, and I(floating_ip_address) is not present, this parameter can be used to specify whether we should try to reuse a floating IP address already allocated to the project.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "server": {
          "aliases": [],
          "description": "The name or ID of the instance to which the IP address should be assigned.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to wait for an IP address to appear as attached. See wait.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "When attaching a floating IP address, specify whether to wait for it to appear as attached.\nMust be set to C(yes) for the module to return the value of the floating IP when attaching.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Add/Remove floating IP from an instance"
    },
    "examples": "\n# Assign a floating IP to the first interface of `cattle001` from an existing\n# external network or nova pool. A new floating IP from the first available\n# external network is allocated to the project.\n- openstack.cloud.floating_ip:\n     cloud: dguerri\n     server: cattle001\n\n# Assign a new floating IP to the instance fixed ip `192.0.2.3` of\n# `cattle001`. If a free floating IP is already allocated to the project, it is\n# reused; if not, a new one is created.\n- openstack.cloud.floating_ip:\n     cloud: dguerri\n     state: present\n     reuse: yes\n     server: cattle001\n     network: ext_net\n     fixed_address: 192.0.2.3\n     wait: true\n     timeout: 180\n\n# Assign a new floating IP from the network `ext_net` to the instance fixed\n# ip in network `private_net` of `cattle001`.\n- openstack.cloud.floating_ip:\n     cloud: dguerri\n     state: present\n     server: cattle001\n     network: ext_net\n     nat_destination: private_net\n     wait: true\n     timeout: 180\n\n# Detach a floating IP address from a server\n- openstack.cloud.floating_ip:\n     cloud: dguerri\n     state: absent\n     floating_ip_address: 203.0.113.2\n     server: cattle001\n"
  },
  "openstack.cloud.floating_ip_info": {
    "doc": {
      "description": "Get a generator of floating ips.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "The description of a floating IP.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fixed_ip_address": {
          "aliases": [],
          "description": "The fixed IP address associated with a floating IP address.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "floating_ip_address": {
          "aliases": [],
          "description": "The IP address of a floating IP.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "floating_network": {
          "aliases": [],
          "description": "The name or id of the network associated with a floating IP.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The name or id of the port to which a floating IP is associated.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "project_id": {
          "aliases": [],
          "description": "The ID of the project a floating IP is associated with.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "router": {
          "aliases": [],
          "description": "The name or id of an associated router.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "status": {
          "aliases": [],
          "description": "The status of a floating IP, which can be ``ACTIVE``or ``DOWN``.",
          "type": "str",
          "required": false,
          "choices": [
            "active",
            "down"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Get information about floating ips"
    },
    "examples": "\n# Getting all floating ips\n- openstack.cloud.floating_ip_info:\n  register: fips\n\n# Getting fip by associated fixed IP address.\n- openstack.cloud.floating_ip_info:\n    fixed_ip_address: 192.168.10.8\n  register: fip\n\n# Getting fip by associated router.\n- openstack.cloud.floating_ip_info:\n    router: my-router\n  register: fip\n"
  },
  "openstack.cloud.group_assignment": {
    "doc": {
      "description": "Add and remove users from groups",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "group": {
          "aliases": [],
          "description": "Name or id for the group.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the user be present or absent in the group",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "Name or id for the user",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Associate OpenStack Identity users and groups"
    },
    "examples": "\n# Add the demo user to the demo group\n- openstack.cloud.group_assignment:\n  cloud: mycloud\n  user: demo\n  group: demo\n"
  },
  "openstack.cloud.host_aggregate": {
    "doc": {
      "description": "Create, update, or delete OpenStack host aggregates. If a aggregate with the supplied name already exists, it will be updated with the new name, new availability zone, new metadata and new list of hosts.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Availability zone to create aggregate into.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "hosts": {
          "aliases": [],
          "description": "List of hosts to set for an aggregate.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "metadata": {
          "aliases": [],
          "description": "Metadata dict.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the aggregate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "purge_hosts": {
          "aliases": [],
          "description": "Whether hosts not in I(hosts) should be removed from the aggregate",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Manage OpenStack host aggregates"
    },
    "examples": "\n# Create a host aggregate\n- openstack.cloud.host_aggregate:\n    cloud: mycloud\n    state: present\n    name: db_aggregate\n    hosts:\n      - host1\n      - host2\n    metadata:\n      type: dbcluster\n\n# Add an additional host to the aggregate\n- openstack.cloud.host_aggregate:\n    cloud: mycloud\n    state: present\n    name: db_aggregate\n    hosts:\n      - host3\n    purge_hosts: false\n    metadata:\n      type: dbcluster\n\n# Delete an aggregate\n- openstack.cloud.host_aggregate:\n    cloud: mycloud\n    state: absent\n    name: db_aggregate\n"
  },
  "openstack.cloud.identity_domain": {
    "doc": {
      "description": "Create, update, or delete OpenStack Identity domains. If a domain with the supplied name already exists, it will be updated with the new description and enabled attributes.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the domain",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "Is the domain enabled",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name that has to be given to the instance",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Manage OpenStack Identity Domains"
    },
    "examples": "\n# Create a domain\n- openstack.cloud.identity_domain:\n     cloud: mycloud\n     state: present\n     name: demo\n     description: Demo Domain\n\n# Delete a domain\n- openstack.cloud.identity_domain:\n     cloud: mycloud\n     state: absent\n     name: demo\n"
  },
  "openstack.cloud.identity_domain_info": {
    "doc": {
      "description": "Retrieve information about a one or more OpenStack domains\nThis module was called C(openstack.cloud.identity_domain_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(openstack.cloud.identity_domain_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "filters": {
          "aliases": [],
          "description": "A dictionary of meta data to use for further filtering.  Elements of this dictionary may be additional dictionaries.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name or ID of the domain",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Retrieve information about one or more OpenStack domains"
    },
    "examples": "\n# Gather information about previously created domain\n- openstack.cloud.identity_domain_info:\n    cloud: awesomecloud\n  register: result\n- debug:\n    msg: \"{{ result.openstack_domains }}\"\n\n# Gather information about a previously created domain by name\n- openstack.cloud.identity_domain_info:\n    cloud: awesomecloud\n    name: demodomain\n  register: result\n- debug:\n    msg: \"{{ result.openstack_domains }}\"\n\n# Gather information about a previously created domain with filter\n- openstack.cloud.identity_domain_info:\n    cloud: awesomecloud\n    name: demodomain\n    filters:\n      enabled: false\n  register: result\n- debug:\n    msg: \"{{ result.openstack_domains }}\"\n"
  },
  "openstack.cloud.identity_group": {
    "doc": {
      "description": "Manage OpenStack Identity Groups. Groups can be created, deleted or updated. Only the I(description) value can be updated.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Group description",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain_id": {
          "aliases": [],
          "description": "Domain id to create the group in if the cloud supports domains.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Group name",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Manage OpenStack Identity Groups"
    },
    "examples": "\n# Create a group named \"demo\"\n- openstack.cloud.identity_group:\n    cloud: mycloud\n    state: present\n    name: demo\n    description: \"Demo Group\"\n    domain_id: demoid\n\n# Update the description on existing \"demo\" group\n- openstack.cloud.identity_group:\n    cloud: mycloud\n    state: present\n    name: demo\n    description: \"Something else\"\n    domain_id: demoid\n\n# Delete group named \"demo\"\n- openstack.cloud.identity_group:\n    cloud: mycloud\n    state: absent\n    name: demo\n"
  },
  "openstack.cloud.identity_group_info": {
    "doc": {
      "description": "Retrieve info about a one or more OpenStack groups.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Name or ID of the domain containing the group if the cloud supports domains",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "filters": {
          "aliases": [],
          "description": "A dictionary of meta data to use for further filtering.  Elements of this dictionary may be additional dictionaries.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name or ID of the group.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Retrieve info about one or more OpenStack groups"
    },
    "examples": "\n# Gather info about previously created groups\n- name: gather info\n  hosts: localhost\n  tasks:\n    - name: Gather info about previously created groups\n      openstack.cloud.identity_group_info:\n        cloud: awesomecloud\n      register: openstack_groups\n    - debug:\n        var: openstack_groups\n\n# Gather info about a previously created group by name\n- name: gather info\n  hosts: localhost\n  tasks:\n    - name: Gather info about a previously created group by name\n      openstack.cloud.identity_group_info:\n        cloud: awesomecloud\n        name: demogroup\n      register: openstack_groups\n    - debug:\n        var: openstack_groups\n\n# Gather info about a previously created group in a specific domain\n- name: gather info\n  hosts: localhost\n  tasks:\n    - name: Gather info about a previously created group in a specific domain\n      openstack.cloud.identity_group_info:\n        cloud: awesomecloud\n        name: demogroup\n        domain: admindomain\n      register: openstack_groups\n    - debug:\n        var: openstack_groups\n\n# Gather info about a previously created group in a specific domain with filter\n- name: gather info\n  hosts: localhost\n  tasks:\n    - name: Gather info about a previously created group in a specific domain with filter\n      openstack.cloud.identity_group_info:\n        cloud: awesomecloud\n        name: demogroup\n        domain: admindomain\n        filters:\n          enabled: False\n      register: openstack_groups\n    - debug:\n        var: openstack_groups\n"
  },
  "openstack.cloud.identity_role": {
    "doc": {
      "description": "Manage OpenStack Identity Roles.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Role Name",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Manage OpenStack Identity Roles"
    },
    "examples": "\n# Create a role named \"demo\"\n- openstack.cloud.identity_role:\n    cloud: mycloud\n    state: present\n    name: demo\n\n# Delete the role named \"demo\"\n- openstack.cloud.identity_role:\n    cloud: mycloud\n    state: absent\n    name: demo\n"
  },
  "openstack.cloud.identity_role_info": {
    "doc": {
      "description": "Get information about identity roles in Openstack",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "domain_id": {
          "aliases": [],
          "description": "List roles in specified domain only",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "List role speficied by name",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Retrive information about roles"
    },
    "examples": "\n# Retrieve info about all roles\n- openstack.cloud.identity_role_info:\n    cloud: mycloud\n\n# Retrieve info about all roles in specific domain\n- openstack.cloud.identity_role_info:\n    cloud: mycloud\n    domain_id: some_domain_id\n\n# Retrieve info about role 'admin'\n- openstack.cloud.identity_role_info:\n    cloud: mycloud\n    name: admin\n\n"
  },
  "openstack.cloud.identity_user": {
    "doc": {
      "description": "Manage OpenStack Identity users. Users can be created, updated or deleted using this module. A user will be updated if I(name) matches an existing user and I(state) is present. The value for I(name) cannot be updated without deleting and re-creating the user.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "default_project": {
          "aliases": [],
          "description": "Project name or ID that the user should be associated with by default",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description about the user",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain to create the user in if the cloud supports domains",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "email": {
          "aliases": [],
          "description": "Email address for the user",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "Is the user enabled",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Username for the user",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password for the user",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "update_password": {
          "aliases": [],
          "description": "C(always) will attempt to update password.  C(on_create) will only set the password for newly created users.",
          "type": "str",
          "required": false,
          "choices": [
            "always",
            "on_create"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Manage OpenStack Identity Users"
    },
    "examples": "\n# Create a user\n- openstack.cloud.identity_user:\n    cloud: mycloud\n    state: present\n    name: demouser\n    password: secret\n    email: demo@example.com\n    domain: default\n    default_project: demo\n\n# Delete a user\n- openstack.cloud.identity_user:\n    cloud: mycloud\n    state: absent\n    name: demouser\n\n# Create a user but don't update password if user exists\n- openstack.cloud.identity_user:\n    cloud: mycloud\n    state: present\n    name: demouser\n    password: secret\n    update_password: on_create\n    email: demo@example.com\n    domain: default\n    default_project: demo\n\n# Create a user without password\n- openstack.cloud.identity_user:\n    cloud: mycloud\n    state: present\n    name: demouser\n    email: demo@example.com\n    domain: default\n    default_project: demo\n"
  },
  "openstack.cloud.identity_user_info": {
    "doc": {
      "description": "Retrieve information about a one or more OpenStack users\nThis module was called C(openstack.cloud.identity_user_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(openstack.cloud.identity_user_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Name or ID of the domain containing the user if the cloud supports domains",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "filters": {
          "aliases": [],
          "description": "A dictionary of meta data to use for further filtering.  Elements of this dictionary may be additional dictionaries.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name or ID of the user",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Retrieve information about one or more OpenStack users"
    },
    "examples": "\n# Gather information about previously created users\n- openstack.cloud.identity_user_info:\n    cloud: awesomecloud\n  register: result\n- debug:\n    msg: \"{{ result.openstack_users }}\"\n\n# Gather information about a previously created user by name\n- openstack.cloud.identity_user_info:\n    cloud: awesomecloud\n    name: demouser\n  register: result\n- debug:\n    msg: \"{{ result.openstack_users }}\"\n\n# Gather information about a previously created user in a specific domain\n- openstack.cloud.identity_user_info:\n    cloud: awesomecloud\n    name: demouser\n    domain: admindomain\n  register: result\n- debug:\n    msg: \"{{ result.openstack_users }}\"\n\n# Gather information about a previously created user in a specific domain with filter\n- openstack.cloud.identity_user_info:\n    cloud: awesomecloud\n    name: demouser\n    domain: admindomain\n    filters:\n      enabled: False\n  register: result\n- debug:\n    msg: \"{{ result.openstack_users }}\"\n"
  },
  "openstack.cloud.image": {
    "doc": {
      "description": "Add or Remove images from the OpenStack Image Repository",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "checksum": {
          "aliases": [],
          "description": "The checksum of the image",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "container_format": {
          "aliases": [],
          "description": "The format of the container",
          "default": "bare",
          "type": "str",
          "required": false,
          "choices": [
            "ami",
            "aki",
            "ari",
            "bare",
            "ovf",
            "ova",
            "docker"
          ],
          "suboptions": {}
        },
        "disk_format": {
          "aliases": [],
          "description": "The format of the disk that is getting uploaded",
          "default": "qcow2",
          "type": "str",
          "required": false,
          "choices": [
            "ami",
            "ari",
            "aki",
            "vhd",
            "vmdk",
            "raw",
            "qcow2",
            "vdi",
            "iso",
            "vhdx",
            "ploop"
          ],
          "suboptions": {}
        },
        "filename": {
          "aliases": [],
          "description": "The path to the file which has to be uploaded",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "The ID of the image when uploading an image",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "is_public": {
          "aliases": [],
          "description": "Whether the image can be accessed publicly. Note that publicizing an image requires admin role by default.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "kernel": {
          "aliases": [],
          "description": "The name of an existing kernel image that will be associated with this image",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "min_disk": {
          "aliases": [],
          "description": "The minimum disk space (in GB) required to boot this image",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "min_ram": {
          "aliases": [],
          "description": "The minimum ram (in MB) required to boot this image",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the image when uploading - or the name/ID of the image if deleting",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "owner": {
          "aliases": [],
          "description": "The owner of the image",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "properties": {
          "aliases": [],
          "description": "Additional properties to be associated with this image",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "protected": {
          "aliases": [],
          "description": "Prevent image from being deleted",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ramdisk": {
          "aliases": [],
          "description": "The name of an existing ramdisk image that will be associated with this image",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tags": {
          "aliases": [],
          "description": "List of tags to be applied to the image",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "volume": {
          "aliases": [],
          "description": "ID of a volume to create an image from.\nThe volume must be in AVAILABLE state.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Add/Delete images from OpenStack Cloud"
    },
    "examples": "\n# Upload an image from a local file named cirros-0.3.0-x86_64-disk.img\n- openstack.cloud.image:\n    auth:\n      auth_url: https://identity.example.com\n      username: admin\n      password: passme\n      project_name: admin\n      openstack.cloud.identity_user_domain_name: Default\n      openstack.cloud.project_domain_name: Default\n    name: cirros\n    container_format: bare\n    disk_format: qcow2\n    state: present\n    filename: cirros-0.3.0-x86_64-disk.img\n    kernel: cirros-vmlinuz\n    ramdisk: cirros-initrd\n    tags:\n      - custom\n    properties:\n      cpu_arch: x86_64\n      distro: ubuntu\n\n# Create image from volume attached to an instance\n- name: create volume snapshot\n  openstack.cloud.volume_snapshot:\n    auth:\n      \"{{ auth }}\"\n    display_name: myvol_snapshot\n    volume: myvol\n    force: yes\n  register: myvol_snapshot\n\n- name: create volume from snapshot\n  openstack.cloud.volume:\n    auth:\n      \"{{ auth }}\"\n    size: \"{{ myvol_snapshot.snapshot.size }}\"\n    snapshot_id: \"{{ myvol_snapshot.snapshot.id }}\"\n    display_name: myvol_snapshot_volume\n    wait: yes\n  register: myvol_snapshot_volume\n\n- name: create image from volume snapshot\n  openstack.cloud.image:\n    auth:\n      \"{{ auth }}\"\n    volume: \"{{ myvol_snapshot_volume.volume.id }}\"\n    name: myvol_image\n"
  },
  "openstack.cloud.image_info": {
    "doc": {
      "description": "Retrieve information about a image image from OpenStack.\nThis module was called C(openstack.cloud.image_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(openstack.cloud.image_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "image": {
          "aliases": [],
          "description": "Name or ID of the image",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "properties": {
          "aliases": [],
          "description": "Dict of properties of the images used for query",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Retrieve information about an image within OpenStack."
    },
    "examples": "\n- name: Gather information about a previously created image named image1\n  openstack.cloud.image_info:\n    auth:\n      auth_url: https://identity.example.com\n      username: user\n      password: password\n      project_name: someproject\n    image: image1\n  register: result\n\n- name: Show openstack information\n  debug:\n    msg: \"{{ result.openstack_image }}\"\n\n# Show all available Openstack images\n- name: Retrieve all available Openstack images\n  openstack.cloud.image_info:\n  register: result\n\n- name: Show images\n  debug:\n    msg: \"{{ result.openstack_image }}\"\n\n# Show images matching requested properties\n- name: Retrieve images having properties with desired values\n  openstack.cloud.image_facts:\n    properties:\n      some_property: some_value\n      OtherProp: OtherVal\n\n- name: Show images\n  debug:\n    msg: \"{{ result.openstack_image }}\"\n"
  },
  "openstack.cloud.keypair": {
    "doc": {
      "description": "Add or Remove key pair from OpenStack",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name that has to be given to the key pair",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "public_key": {
          "aliases": [],
          "description": "The public key that would be uploaded to nova and injected into VMs upon creation.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "public_key_file": {
          "aliases": [],
          "description": "Path to local file containing ssh public key. Mutually exclusive with public_key.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent. If state is replace and the key exists but has different content, delete it and recreate it with the new content.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "replace"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Add/Delete a keypair from OpenStack"
    },
    "examples": "\n# Creates a key pair with the running users public key\n- openstack.cloud.keypair:\n      cloud: mordred\n      state: present\n      name: ansible_key\n      public_key_file: /home/me/.ssh/id_rsa.pub\n\n# Creates a new key pair and the private key returned after the run.\n- openstack.cloud.keypair:\n      cloud: rax-dfw\n      state: present\n      name: ansible_key\n"
  },
  "openstack.cloud.keypair_info": {
    "doc": {
      "description": "Get information about keypairs that are associated with the account",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "limit": {
          "aliases": [],
          "description": "Requests a page size of items.\nReturns a number of items up to a limit value.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "marker": {
          "aliases": [],
          "description": "The last-seen item.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name or ID of the keypair",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "user_id": {
          "aliases": [],
          "description": "It allows admin users to operate key-pairs of specified user ID.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Get information about keypairs from OpenStack"
    },
    "examples": "\n- name: Get information about keypairs\n  openstack.cloud.keypair_info:\n  register: result\n\n- name: Get information about keypairs using optional parameters\n  openstack.cloud.keypair_info:\n    name: \"test\"\n    user_id: \"fed75b36fd7a4078a769178d2b1bd844\"\n    limit: 10\n    marker: \"jdksl\"\n  register: result\n"
  },
  "openstack.cloud.keystone_federation_protocol": {
    "doc": {
      "description": "Manage a federation Protocol.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "idp_id": {
          "aliases": [
            "idp_name"
          ],
          "description": "The name of the Identity Provider this Protocol is associated with.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "mapping_id": {
          "aliases": [
            "mapping_name"
          ],
          "description": "The name of the Mapping to use for this Protocol.'\nRequired when creating a new Protocol.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "id"
          ],
          "description": "The name of the Protocol.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the protocol should be C(present) or C(absent).",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk >= 0.12.0",
        "openstacksdk >= 0.44",
        "python >= 3.6"
      ],
      "short_description": "manage a federation Protocol"
    },
    "examples": "\n- name: Create a protocol\n  openstack.cloud.keystone_federation_protocol:\n    cloud: example_cloud\n    name: example_protocol\n    idp_id: example_idp\n    mapping_id: example_mapping\n\n- name: Delete a protocol\n  openstack.cloud.keystone_federation_protocol:\n    cloud: example_cloud\n    name: example_protocol\n    idp_id: example_idp\n    state: absent\n"
  },
  "openstack.cloud.keystone_federation_protocol_info": {
    "doc": {
      "description": "Get information about federation Protocols.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "idp_id": {
          "aliases": [
            "idp_name"
          ],
          "description": "The name of the Identity Provider this Protocol is associated with.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "id"
          ],
          "description": "The name of the Protocol.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk >= 0.12.0",
        "openstacksdk >= 0.44",
        "python >= 3.6"
      ],
      "short_description": "get information about federation Protocols"
    },
    "examples": "\n- name: Describe a protocol\n  openstack.cloud.keystone_federation_protocol_info:\n    cloud: example_cloud\n    name: example_protocol\n    idp_id: example_idp\n    mapping_name: example_mapping\n\n- name: Describe all protocols attached to an IDP\n  openstack.cloud.keystone_federation_protocol_info:\n    cloud: example_cloud\n    idp_id: example_idp\n"
  },
  "openstack.cloud.lb_health_monitor": {
    "doc": {
      "description": "Add or Remove a health monitor to/from a pool in the OpenStack load-balancer service.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "admin_state_up": {
          "aliases": [],
          "description": "The admin state of the helath monitor true for up or false for down",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "delay": {
          "aliases": [],
          "description": "the interval, in seconds, between health checks.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "expected_codes": {
          "aliases": [],
          "description": "The list of HTTP status codes expected in response from the member to declare it healthy. Specify one of the following values A single value, such as 200 A list, such as 200, 202 A range, such as 200-204",
          "default": "200",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "http_method": {
          "aliases": [],
          "description": "The HTTP method that the health monitor uses for requests. One of CONNECT, DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT, or TRACE. The default is GET.",
          "default": "GET",
          "type": "str",
          "required": false,
          "choices": [
            "GET",
            "CONNECT",
            "DELETE",
            "HEAD",
            "OPTIONS",
            "PATCH",
            "POST",
            "PUT",
            "TRACE"
          ],
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "max_retries": {
          "aliases": [],
          "description": "The number of successful checks before changing the operating status of the member to ONLINE.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "max_retries_down": {
          "aliases": [],
          "description": "The number of allowed check failures before changing the operating status of the member to ERROR. A valid value is from 1 to 10. The default is 3.",
          "default": "3",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name that has to be given to the health monitor",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "pool": {
          "aliases": [],
          "description": "The pool name or id to monitor by the health monitor.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "resp_timeout": {
          "aliases": [],
          "description": "The time, in seconds, after which a health check times out. Must be less than delay",
          "type": "int",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "One of HTTP, HTTPS, PING, SCTP, TCP, TLS-HELLO, or UDP-CONNECT.",
          "default": "HTTP",
          "type": "str",
          "required": false,
          "choices": [
            "HTTP",
            "HTTPS",
            "PING",
            "SCTP",
            "TCP",
            "TLS-HELLO",
            "UDP-CONNECT"
          ],
          "suboptions": {}
        },
        "url_path": {
          "aliases": [],
          "description": "The HTTP URL path of the request sent by the monitor to test the health of a backend member. Must be a string that begins with a forward slash (/). The default URL path is /.",
          "default": "/",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Add/Delete a health m nonitor to a pool in the load balancing service from OpenStack Cloud"
    },
    "examples": "\n#Create a healtmonitor named healthmonitor01 with method HEAD url_path /status and expect code 200\n- openstack.cloud.lb_health_monitor:\n    auth:\n      auth_url: \"{{keystone_url}}\"\n      username: \"{{username}}\"\n      password: \"{{password}}\"\n      project_domain_name: \"{{domain_name}}\"\n      user_domain_name: \"{{domain_name}}\"\n      project_name: \"{{project_name}}\"\n    wait: true\n    admin_state_up: True\n    expected_codes: '200'\n    max_retries_down: '4'\n    http_method: GET\n    url_path: \"/status\"\n    pool: '{{pool_id}}'\n    name: 'healthmonitor01'\n    delay: '10'\n    max_retries: '3'\n    resp_timeout: '5'\n    state: present\n"
  },
  "openstack.cloud.lb_listener": {
    "doc": {
      "description": "Add or Remove a listener for a load balancer from the OpenStack load-balancer service.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "loadbalancer": {
          "aliases": [],
          "description": "The name or id of the load balancer that this listener belongs to.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name that has to be given to the listener",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "The protocol for the listener.",
          "default": "HTTP",
          "type": "str",
          "required": false,
          "choices": [
            "HTTP",
            "HTTPS",
            "TCP",
            "TERMINATED_HTTPS",
            "UDP",
            "SCTP"
          ],
          "suboptions": {}
        },
        "protocol_port": {
          "aliases": [],
          "description": "The protocol port number for the listener.",
          "default": "80",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The amount of time the module should wait for the load balancer to get into ACTIVE state.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "timeout_client_data": {
          "aliases": [],
          "description": "Client inactivity timeout in milliseconds.",
          "default": "50000",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "timeout_member_data": {
          "aliases": [],
          "description": "Member inactivity timeout in milliseconds.",
          "default": "50000",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "If the module should wait for the load balancer to be ACTIVE.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Add/Delete a listener for a load balancer from OpenStack Cloud"
    },
    "examples": "\n# Create a listener, wait for the loadbalancer to be active.\n- openstack.cloud.lb_listener:\n    cloud: mycloud\n    endpoint_type: admin\n    state: present\n    name: test-listener\n    loadbalancer: test-loadbalancer\n    protocol: HTTP\n    protocol_port: 8080\n\n# Create a listener, do not wait for the loadbalancer to be active.\n- openstack.cloud.lb_listener:\n    cloud: mycloud\n    endpoint_type: admin\n    state: present\n    name: test-listener\n    loadbalancer: test-loadbalancer\n    protocol: HTTP\n    protocol_port: 8080\n    wait: no\n\n# Delete a listener\n- openstack.cloud.lb_listener:\n    cloud: mycloud\n    endpoint_type: admin\n    state: absent\n    name: test-listener\n    loadbalancer: test-loadbalancer\n\n# Create a listener, increase timeouts for connection persistence (for SSH for example).\n- openstack.cloud.lb_listener:\n    cloud: mycloud\n    endpoint_type: admin\n    state: present\n    name: test-listener\n    loadbalancer: test-loadbalancer\n    protocol: TCP\n    protocol_port: 22\n    timeout_client_data: 1800000\n    timeout_member_data: 1800000\n"
  },
  "openstack.cloud.lb_member": {
    "doc": {
      "description": "Add or Remove a member for a pool from the OpenStack load-balancer service.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "address": {
          "aliases": [],
          "description": "The IP address of the member.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name that has to be given to the member",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "pool": {
          "aliases": [],
          "description": "The name or id of the pool that this member belongs to.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "protocol_port": {
          "aliases": [],
          "description": "The protocol port number for the member.",
          "default": "80",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "subnet_id": {
          "aliases": [],
          "description": "The subnet ID the member service is accessible from.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The amount of time the module should wait for the load balancer to get into ACTIVE state.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "If the module should wait for the load balancer to be ACTIVE.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Add/Delete a member for a pool in load balancer from OpenStack Cloud"
    },
    "examples": "\n# Create a member, wait for the member to be created.\n- openstack.cloud.lb_member:\n    cloud: mycloud\n    endpoint_type: admin\n    state: present\n    name: test-member\n    pool: test-pool\n    address: 192.168.10.3\n    protocol_port: 8080\n\n# Delete a listener\n- openstack.cloud.lb_member:\n    cloud: mycloud\n    endpoint_type: admin\n    state: absent\n    name: test-member\n    pool: test-pool\n"
  },
  "openstack.cloud.lb_pool": {
    "doc": {
      "description": "Add or Remove a pool from the OpenStack load-balancer service.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "lb_algorithm": {
          "aliases": [],
          "description": "The load balancing algorithm for the pool.",
          "default": "ROUND_ROBIN",
          "type": "str",
          "required": false,
          "choices": [
            "LEAST_CONNECTIONS",
            "ROUND_ROBIN",
            "SOURCE_IP"
          ],
          "suboptions": {}
        },
        "listener": {
          "aliases": [],
          "description": "The name or id of the listener that this pool belongs to. Either loadbalancer or listener must be specified for pool creation.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "loadbalancer": {
          "aliases": [],
          "description": "The name or id of the load balancer that this pool belongs to. Either loadbalancer or listener must be specified for pool creation.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name that has to be given to the pool",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "The protocol for the pool.",
          "default": "HTTP",
          "type": "str",
          "required": false,
          "choices": [
            "HTTP",
            "HTTPS",
            "PROXY",
            "TCP",
            "UDP"
          ],
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The amount of time the module should wait for the pool to get into ACTIVE state.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "If the module should wait for the pool to be ACTIVE.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Add/Delete a pool in the load balancing service from OpenStack Cloud"
    },
    "examples": "\n# Create a pool, wait for the pool to be active.\n- openstack.cloud.lb_pool:\n    cloud: mycloud\n    endpoint_type: admin\n    state: present\n    name: test-pool\n    loadbalancer: test-loadbalancer\n    protocol: HTTP\n    lb_algorithm: ROUND_ROBIN\n\n# Delete a pool\n- openstack.cloud.lb_pool:\n    cloud: mycloud\n    endpoint_type: admin\n    state: absent\n    name: test-pool\n"
  },
  "openstack.cloud.loadbalancer": {
    "doc": {
      "description": "Add or Remove load balancer from the OpenStack load-balancer service(Octavia). Load balancer update is not supported for now.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auto_public_ip": {
          "aliases": [],
          "description": "Allocate a public IP address and associate with the VIP automatically.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "delete_public_ip": {
          "aliases": [],
          "description": "When C(state=absent) and this option is true, any public IP address associated with the VIP will be deleted along with the load balancer.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "flavor": {
          "aliases": [],
          "description": "The flavor of the load balancer.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "listeners": {
          "aliases": [],
          "description": "A list of listeners that attached to the load balancer.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "allowed_cidrs": {
              "aliases": [],
              "description": "A list of IPv4, IPv6 or mix of both CIDRs to be allowed access to the listener. The default is all allowed. When a list of CIDRs is provided, the default switches to deny all. Ignored on unsupported Octavia versions (less than 2.12)",
              "default": "[]",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The listener name or ID.",
              "required": false,
              "suboptions": {}
            },
            "pool": {
              "aliases": [],
              "description": "The pool attached to the listener.",
              "required": false,
              "suboptions": {
                "lb_algorithm": {
                  "aliases": [],
                  "description": "The load balancing algorithm for the pool.",
                  "default": "ROUND_ROBIN",
                  "required": false,
                  "suboptions": {}
                },
                "members": {
                  "aliases": [],
                  "description": "A list of members that added to the pool.",
                  "required": false,
                  "suboptions": {
                    "address": {
                      "aliases": [],
                      "description": "The IP address of the member.",
                      "required": false,
                      "suboptions": {}
                    },
                    "name": {
                      "aliases": [],
                      "description": "The member name or ID.",
                      "required": false,
                      "suboptions": {}
                    },
                    "protocol_port": {
                      "aliases": [],
                      "description": "The protocol port number for the member.",
                      "default": "80",
                      "required": false,
                      "suboptions": {}
                    },
                    "subnet": {
                      "aliases": [],
                      "description": "The name or ID of the subnet the member service is accessible from.",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "name": {
                  "aliases": [],
                  "description": "The pool name or ID.",
                  "required": false,
                  "suboptions": {}
                },
                "protocol": {
                  "aliases": [],
                  "description": "The protocol for the pool.",
                  "default": "HTTP",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "protocol": {
              "aliases": [],
              "description": "The protocol for the listener.",
              "default": "HTTP",
              "required": false,
              "suboptions": {}
            },
            "protocol_port": {
              "aliases": [],
              "description": "The protocol port number for the listener.",
              "default": "80",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "The name of the load balancer.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "public_ip_address": {
          "aliases": [],
          "description": "Public IP address associated with the VIP.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "public_network": {
          "aliases": [],
          "description": "The name or ID of a Neutron external network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The amount of time the module should wait.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vip_address": {
          "aliases": [],
          "description": "IP address of the load balancer virtual IP.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vip_network": {
          "aliases": [],
          "description": "The name or id of the network for the virtual IP of the load balancer. One of I(vip_network), I(vip_subnet), or I(vip_port) must be specified for creation.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vip_port": {
          "aliases": [],
          "description": "The name or id of the load balancer virtual IP port. One of I(vip_network), I(vip_subnet), or I(vip_port) must be specified for creation.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vip_subnet": {
          "aliases": [],
          "description": "The name or id of the subnet for the virtual IP of the load balancer. One of I(vip_network), I(vip_subnet), or I(vip_port) must be specified for creation.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "If the module should wait for the load balancer to be created or deleted.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Add/Delete load balancer from OpenStack Cloud"
    },
    "examples": "\n# Create a load balancer by specifying the VIP subnet.\n- openstack.cloud.loadbalancer:\n    auth:\n      auth_url: https://identity.example.com\n      username: admin\n      password: passme\n      project_name: admin\n    state: present\n    name: my_lb\n    vip_subnet: my_subnet\n    timeout: 150\n\n# Create a load balancer by specifying the VIP network and the IP address.\n- openstack.cloud.loadbalancer:\n    auth:\n      auth_url: https://identity.example.com\n      username: admin\n      password: passme\n      project_name: admin\n    state: present\n    name: my_lb\n    vip_network: my_network\n    vip_address: 192.168.0.11\n\n# Create a load balancer together with its sub-resources in the 'all in one'\n# way. A public IP address is also allocated to the load balancer VIP.\n- openstack.cloud.loadbalancer:\n    auth:\n      auth_url: https://identity.example.com\n      username: admin\n      password: passme\n      project_name: admin\n    name: lingxian_test\n    state: present\n    vip_subnet: kong_subnet\n    auto_public_ip: yes\n    public_network: public\n    listeners:\n      - name: lingxian_80\n        protocol: TCP\n        protocol_port: 80\n        pool:\n          name: lingxian_80_pool\n          protocol: TCP\n          members:\n            - name: mywebserver1\n              address: 192.168.2.81\n              protocol_port: 80\n              subnet: webserver_subnet\n      - name: lingxian_8080\n        protocol: TCP\n        protocol_port: 8080\n        pool:\n          name: lingxian_8080-pool\n          protocol: TCP\n          members:\n            - name: mywebserver2\n              address: 192.168.2.82\n              protocol_port: 8080\n    wait: yes\n    timeout: 600\n\n# Delete a load balancer(and all its related resources)\n- openstack.cloud.loadbalancer:\n    auth:\n      auth_url: https://identity.example.com\n      username: admin\n      password: passme\n      project_name: admin\n    state: absent\n    name: my_lb\n\n# Delete a load balancer(and all its related resources) together with the\n# public IP address(if any) attached to it.\n- openstack.cloud.loadbalancer:\n    auth:\n      auth_url: https://identity.example.com\n      username: admin\n      password: passme\n      project_name: admin\n    state: absent\n    name: my_lb\n    delete_public_ip: yes\n"
  },
  "openstack.cloud.network": {
    "doc": {
      "description": "Add or remove network from OpenStack.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "admin_state_up": {
          "aliases": [],
          "description": "Whether the state should be marked as up or down.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "dns_domain": {
          "aliases": [],
          "description": "The DNS domain value to set. Requires openstacksdk>=0.29. Network will use Openstack defaults if this option is not provided.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "external": {
          "aliases": [],
          "description": "Whether this network is externally accessible.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "mtu_size": {
          "aliases": [
            "mtu"
          ],
          "description": "The maximum transmission unit (MTU) value to address fragmentation. Network will use OpenStack defaults if this option is not provided. Requires openstacksdk>=0.18.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name to be assigned to the network.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port_security_enabled": {
          "aliases": [],
          "description": "Whether port security is enabled on the network or not. Network will use OpenStack defaults if this option is not utilised. Requires openstacksdk>=0.18.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Project name or ID containing the network (name admin-only)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "provider_network_type": {
          "aliases": [],
          "description": "The type of physical network that maps to this network resource.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "provider_physical_network": {
          "aliases": [],
          "description": "The physical network where this network object is implemented.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "provider_segmentation_id": {
          "aliases": [],
          "description": "An isolated segment on the physical network. The I(network_type) attribute defines the segmentation model. For example, if the I(network_type) value is vlan, this ID is a vlan identifier. If the I(network_type) value is gre, this ID is a gre key.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "shared": {
          "aliases": [],
          "description": "Whether this network is shared or not.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Creates/removes networks from OpenStack"
    },
    "examples": "\n# Create an externally accessible network named 'ext_network'.\n- openstack.cloud.network:\n    cloud: mycloud\n    state: present\n    name: ext_network\n    external: true\n"
  },
  "openstack.cloud.networks_info": {
    "doc": {
      "description": "Retrieve information about one or more networks from OpenStack.\nThis module was called C(openstack.cloud.networks_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(openstack.cloud.networks_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "filters": {
          "aliases": [],
          "description": "A dictionary of meta data to use for further filtering.  Elements of this dictionary may be additional dictionaries.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name or ID of the Network",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Retrieve information about one or more OpenStack networks."
    },
    "examples": "\n- name: Gather information about previously created networks\n  openstack.cloud.networks_info:\n    auth:\n      auth_url: https://identity.example.com\n      username: user\n      password: password\n      project_name: someproject\n  register: result\n\n- name: Show openstack networks\n  debug:\n    msg: \"{{ result.openstack_networks }}\"\n\n- name: Gather information about a previously created network by name\n  openstack.cloud.networks_info:\n    auth:\n      auth_url: https://identity.example.com\n      username: user\n      password: password\n      project_name: someproject\n    name:  network1\n  register: result\n\n- name: Show openstack networks\n  debug:\n    msg: \"{{ result.openstack_networks }}\"\n\n- name: Gather information about a previously created network with filter\n  # Note: name and filters parameters are Not mutually exclusive\n  openstack.cloud.networks_info:\n    auth:\n      auth_url: https://identity.example.com\n      username: user\n      password: password\n      project_name: someproject\n    filters:\n      tenant_id: 55e2ce24b2a245b09f181bf025724cbe\n      subnets:\n        - 057d4bdf-6d4d-4728-bb0f-5ac45a6f7400\n        - 443d4dc0-91d4-4998-b21c-357d10433483\n  register: result\n\n- name: Show openstack networks\n  debug:\n    msg: \"{{ result.openstack_networks }}\"\n"
  },
  "openstack.cloud.neutron_rbac_policies_info": {
    "doc": {
      "description": "Get RBAC policies against a network, security group or a QoS Policy for one or more projects.\nIf a C(policy_id) was not provided, this module will attempt to fetch all available policies.\nAccepts same arguments as OpenStackSDK network proxy C(find_rbac_policy) and C(rbac_policies) functions which are ultimately passed over to C(RBACPolicy)\nAll parameters passed in to this module act as a filter for when no C(policy_id) was provided, otherwise they're ignored.\nReturns None if no matching policy was found as opposed to failing.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "action": {
          "aliases": [],
          "description": "Can be either of the following options C(access_as_shared) | C(access_as_external)\nLogically AND'ed with other filters",
          "type": "str",
          "required": false,
          "choices": [
            "access_as_shared",
            "access_as_external"
          ],
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "object_id": {
          "aliases": [],
          "description": "The object ID (the subject of the policy) to which the RBAC rules applies\nThis would be the ID of a network, security group or a qos policy\nMutually exclusive with the C(object_type)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "object_type": {
          "aliases": [],
          "description": "Can be one of the following object types C(network), C(security_group) or C(qos_policy)\nMutually exclusive with the C(object_id)",
          "type": "str",
          "required": false,
          "choices": [
            "network",
            "security_group",
            "qos_policy"
          ],
          "suboptions": {}
        },
        "policy_id": {
          "aliases": [],
          "description": "The RBAC policy ID\nIf provided, all other filters are ignored",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Filters the RBAC rules based on the project name\nLogically AND'ed with other filters",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "project_id": {
          "aliases": [],
          "description": "Filters the RBAC rules based on the project id to which the object belongs to\nLogically AND'ed with other filters\nMutually exclusive with C(target_project_id)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "target_project_id": {
          "aliases": [],
          "description": "Filters the RBAC rules based on the target project id\nLogically AND'ed with other filters\nMutually exclusive with C(project_id)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 3.6",
        "openstacksdk >= 0.12.0"
      ],
      "short_description": "Fetch Neutron policies."
    },
    "examples": "\n# Gather all rbac policies for a project\n- name: Get all rbac policies for {{ project }}\n  openstack.cloud.neutron_rbac_policies_info:\n    project_id: \"{{ project.id }}\"\n"
  },
  "openstack.cloud.neutron_rbac_policy": {
    "doc": {
      "description": "Create a policy to apply a RBAC rule against a network, security group or a QoS Policy or update/delete an existing policy.\nIf a C(policy_id) was provided but not found, this module will attempt to create a new policy rather than error out when updating an existing rule.\nAccepts same arguments as OpenStackSDK network proxy C(find_rbac_policy) and C(rbac_policies) functions which are ultimately passed over to C(RBACPolicy)",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "action": {
          "aliases": [],
          "description": "Can be either of the following options C(access_as_shared) | C(access_as_external)\nCannot be changed when updating an existing policy\nRequired when creating a RBAC policy rule, ignored when deleting a policy",
          "type": "str",
          "required": false,
          "choices": [
            "access_as_shared",
            "access_as_external"
          ],
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "object_id": {
          "aliases": [],
          "description": "The object ID (the subject of the policy) to which the RBAC rule applies\nCannot be changed when updating an existing policy\nRequired when creating a RBAC policy rule, ignored when deleting a policy",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "object_type": {
          "aliases": [],
          "description": "Can be one of the following object types C(network), C(security_group) or C(qos_policy)\nCannot be changed when updating an existing policy\nRequired when creating a RBAC policy rule, ignored when deleting a policy",
          "type": "str",
          "required": false,
          "choices": [
            "network",
            "security_group",
            "qos_policy"
          ],
          "suboptions": {}
        },
        "policy_id": {
          "aliases": [],
          "description": "The RBAC policy ID\nRequired when deleting or updating an existing RBAC policy rule, ignored otherwise",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "project_id": {
          "aliases": [],
          "description": "The project to which the object_id belongs\nCannot be changed when updating an existing policy\nRequired when creating a RBAC policy rule, ignored when deleting a policy",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the RBAC rule should be C(present) or C(absent).",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "target_project_id": {
          "aliases": [],
          "description": "The project to which access to be allowed or revoked/disallowed\nCan be specified/changed when updating an existing policy\nRequired when creating or updating a RBAC policy rule, ignored when deleting a policy",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 3.6",
        "openstacksdk >= 0.12.0"
      ],
      "short_description": "Create or delete a Neutron policy to apply a RBAC rule against an object."
    },
    "examples": "\n# Ensure network RBAC policy exists\n- name: Create a new network RBAC policy\n  neutron_rbac_policy:\n    object_id: '7422172b-2961-475c-ac68-bd0f2a9960ad'\n    object_type: 'network'\n    target_project_id: 'a12f9ce1de0645e0a0b01c2e679f69ec'\n    project_id: '84b8774d595b41e89f3dfaa1fd76932d'\n\n# Update network RBAC policy\n- name: Update an existing network RBAC policy\n  neutron_rbac_policy:\n    policy_id: 'f625242a-6a73-47ac-8d1f-91440b2c617f'\n    target_project_id: '163c89e065a94e069064e551e15daf0e'\n\n# Delete an existing RBAC policy\n- name: Delete RBAC policy\n  openstack.cloud.openstack.neutron_rbac_policy:\n    policy_id: 'f625242a-6a73-47ac-8d1f-91440b2c617f'\n    state: absent\n"
  },
  "openstack.cloud.object": {
    "doc": {
      "description": "Create or Delete objects and containers from OpenStack",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "container": {
          "aliases": [],
          "description": "The name of the container in which to create the object",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "container_access": {
          "aliases": [],
          "description": "desired container access level.",
          "default": "private",
          "type": "str",
          "required": false,
          "choices": [
            "private",
            "public"
          ],
          "suboptions": {}
        },
        "filename": {
          "aliases": [],
          "description": "Path to local file to be uploaded.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name to be give to the object. If omitted, operations will be on the entire container",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Create or Delete objects and containers from OpenStack"
    },
    "examples": "\n- name: \"Create a object named 'fstab' in the 'config' container\"\n  openstack.cloud.object:\n    cloud: mordred\n    state: present\n    name: fstab\n    container: config\n    filename: /etc/fstab\n\n- name: Delete a container called config and all of its contents\n  openstack.cloud.object:\n    cloud: rax-iad\n    state: absent\n    container: config\n"
  },
  "openstack.cloud.object_container": {
    "doc": {
      "description": "Manage Swift container.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "container": {
          "aliases": [],
          "description": "Name of a container in Swift.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "delete_with_all_objects": {
          "aliases": [],
          "description": "Whether the container should be deleted with all objects or not.\nWithout this parameter set to \"true\", an attempt to delete a container that contains objects will fail.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "keys": {
          "aliases": [],
          "description": "Keys from 'metadata' to be deleted.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "metadata": {
          "aliases": [],
          "description": "Key/value pairs to be set as metadata on the container.\nIf a container doesn't exist, it will be created.\nBoth custom and system metadata can be set.\nCustom metadata are keys and values defined by the user.\nThe system metadata keys are content_type, content_encoding, content_disposition, delete_after,         delete_at, is_content_type_detected",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether resource should be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Manage Swift container."
    },
    "examples": "\n# Create empty container\n - openstack.cloud.object_container:\n    container: \"new-container\"\n    state: present\n\n# Set metadata for container\n - openstack.cloud.object_container:\n    container: \"new-container\"\n    metadata: \"Cache-Control='no-cache'\"\n\n# Delete some keys from metadata of a container\n - openstack.cloud.object_container:\n    container: \"new-container\"\n    keys:\n        - content_type\n\n# Delete container\n - openstack.cloud.object_container:\n    container: \"new-container\"\n    state: absent\n\n# Delete container and its objects\n - openstack.cloud.object_container:\n    container: \"new-container\"\n    delete_with_all_objects: true\n    state: absent\n"
  },
  "openstack.cloud.os_auth": {
    "doc": {
      "description": "Retrieve an auth token from an OpenStack Cloud",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Retrieve an auth token"
    },
    "examples": "\n- name: Authenticate to the cloud and retrieve the service catalog\n  openstack.cloud.auth:\n    cloud: rax-dfw\n\n- name: Show service catalog\n  debug:\n    var: service_catalog\n"
  },
  "openstack.cloud.os_client_config": {
    "doc": {
      "description": "Get I(openstack) client config data from clouds.yaml or environment",
      "has_action": false,
      "notes": "Facts are placed in the C(openstack.clouds) variable.",
      "options": {
        "clouds": {
          "aliases": [],
          "description": "List of clouds to limit the return list to. No value means return information on all configured clouds",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 3.6",
        "openstacksdk"
      ],
      "short_description": "Get OpenStack Client config"
    },
    "examples": "\n- name: Get list of clouds that do not support security groups\n  openstack.cloud.config:\n\n- debug:\n    var: \"{{ item }}\"\n  with_items: \"{{ openstack.clouds | rejectattr('secgroup_source', 'none') | list }}\"\n\n- name: Get the information back just about the mordred cloud\n  openstack.cloud.config:\n    clouds:\n      - mordred\n"
  },
  "openstack.cloud.os_coe_cluster": {
    "doc": {
      "description": "Add or Remove COE cluster from the OpenStack Container Infra service.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "cluster_template_id": {
          "aliases": [],
          "description": "The template ID of cluster template.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "discovery_url": {
          "aliases": [],
          "description": "Url used for cluster node discovery",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "docker_volume_size": {
          "aliases": [],
          "description": "The size in GB of the docker volume",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "flavor_id": {
          "aliases": [],
          "description": "The flavor of the minion node for this ClusterTemplate",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "keypair": {
          "aliases": [],
          "description": "Name of the keypair to use.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "labels": {
          "aliases": [],
          "description": "One or more key/value pairs",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "master_count": {
          "aliases": [],
          "description": "The number of master nodes for this cluster",
          "default": "1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "master_flavor_id": {
          "aliases": [],
          "description": "The flavor of the master node for this ClusterTemplate",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name that has to be given to the cluster template",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "node_count": {
          "aliases": [],
          "description": "The number of nodes for this cluster",
          "default": "1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Timeout for creating the cluster in minutes. Default to 60 mins if not set",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Add/Remove COE cluster from OpenStack Cloud"
    },
    "examples": "\n# Create a new Kubernetes cluster\n- openstack.cloud.coe_cluster:\n    name: k8s\n    cluster_template_id: k8s-ha\n    keypair: mykey\n    master_count: 3\n    node_count: 5\n"
  },
  "openstack.cloud.os_coe_cluster_template": {
    "doc": {
      "description": "Add or Remove COE cluster template from the OpenStack Container Infra service.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "coe": {
          "aliases": [],
          "description": "The Container Orchestration Engine for this clustertemplate",
          "type": "str",
          "required": true,
          "choices": [
            "kubernetes",
            "swarm",
            "mesos"
          ],
          "suboptions": {}
        },
        "dns_nameserver": {
          "aliases": [],
          "description": "The DNS nameserver address",
          "default": "8.8.8.8",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "docker_storage_driver": {
          "aliases": [],
          "description": "Docker storage driver",
          "type": "str",
          "required": false,
          "choices": [
            "devicemapper",
            "overlay",
            "overlay2"
          ],
          "suboptions": {}
        },
        "docker_volume_size": {
          "aliases": [],
          "description": "The size in GB of the docker volume",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "external_network_id": {
          "aliases": [],
          "description": "The external network to attach to the Cluster",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fixed_network": {
          "aliases": [],
          "description": "The fixed network name to attach to the Cluster",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fixed_subnet": {
          "aliases": [],
          "description": "The fixed subnet name to attach to the Cluster",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "flavor_id": {
          "aliases": [],
          "description": "The flavor of the minion node for this ClusterTemplate",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "floating_ip_enabled": {
          "aliases": [],
          "description": "Indicates whether created clusters should have a floating ip or not",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "http_proxy": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTP requests and relay them The format is a URL including a port number",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "https_proxy": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them. The format is a URL including a port number",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "image_id": {
          "aliases": [],
          "description": "Image id the cluster will be based on",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "keypair_id": {
          "aliases": [],
          "description": "Name or ID of the keypair to use.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "labels": {
          "aliases": [],
          "description": "One or more key/value pairs",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "master_flavor_id": {
          "aliases": [],
          "description": "The flavor of the master node for this ClusterTemplate",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "master_lb_enabled": {
          "aliases": [],
          "description": "Indicates whether created clusters should have a load balancer for master nodes or not",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name that has to be given to the cluster template",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "network_driver": {
          "aliases": [],
          "description": "The name of the driver used for instantiating container networks",
          "type": "str",
          "required": false,
          "choices": [
            "flannel",
            "calico",
            "docker"
          ],
          "suboptions": {}
        },
        "no_proxy": {
          "aliases": [],
          "description": "A comma separated list of IPs for which proxies should not be used in the cluster",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "public": {
          "aliases": [],
          "description": "Indicates whether the ClusterTemplate is public or not",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "registry_enabled": {
          "aliases": [],
          "description": "Indicates whether the docker registry is enabled",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "server_type": {
          "aliases": [],
          "description": "Server type for this ClusterTemplate",
          "default": "vm",
          "type": "str",
          "required": false,
          "choices": [
            "vm",
            "bm"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "tls_disabled": {
          "aliases": [],
          "description": "Indicates whether the TLS should be disabled",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "volume_driver": {
          "aliases": [],
          "description": "The name of the driver used for instantiating container volumes",
          "type": "str",
          "required": false,
          "choices": [
            "cinder",
            "rexray"
          ],
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Add/Remove COE cluster template from OpenStack Cloud"
    },
    "examples": "\n# Create a new Kubernetes cluster template\n- openstack.cloud.coe_cluster_template:\n    name: k8s\n    coe: kubernetes\n    keypair_id: mykey\n    image_id: 2a8c9888-9054-4b06-a1ca-2bb61f9adb72\n    public: no\n"
  },
  "openstack.cloud.os_flavor_info": {
    "doc": {
      "description": "Retrieve information about available OpenStack instance flavors. By default, information about ALL flavors are retrieved. Filters can be applied to get information for only matching flavors. For example, you can filter on the amount of RAM available to the flavor, or the number of virtual CPUs available to the flavor, or both. When specifying multiple filters, *ALL* filters must match on a flavor before that flavor is returned as a fact.\nThis module was called C(openstack.cloud.compute_flavor_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(openstack.cloud.compute_flavor_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "The result contains a list of unsorted flavors.\nThe standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "ephemeral": {
          "aliases": [],
          "description": "A string used for filtering flavors based on the amount of ephemeral storage. Format is the same as the I(ram) parameter",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "limit": {
          "aliases": [],
          "description": "Limits the number of flavors returned. All matching flavors are returned by default.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "A flavor name. Cannot be used with I(ram) or I(vcpus) or I(ephemeral).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ram": {
          "aliases": [],
          "description": "A string used for filtering flavors based on the amount of RAM (in MB) desired. This string accepts the following special values: 'MIN' (return flavors with the minimum amount of RAM), and 'MAX' (return flavors with the maximum amount of RAM).\nA specific amount of RAM may also be specified. Any flavors with this exact amount of RAM will be returned.\nA range of acceptable RAM may be given using a special syntax. Simply prefix the amount of RAM with one of these acceptable range values: '<', '>', '<=', '>='. These values represent less than, greater than, less than or equal to, and greater than or equal to, respectively.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vcpus": {
          "aliases": [],
          "description": "A string used for filtering flavors based on the number of virtual CPUs desired. Format is the same as the I(ram) parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Retrieve information about one or more flavors"
    },
    "examples": "\n# Gather information about all available flavors\n- openstack.cloud.compute_flavor_info:\n    cloud: mycloud\n  register: result\n\n- debug:\n    msg: \"{{ result.openstack_flavors }}\"\n\n# Gather information for the flavor named \"xlarge-flavor\"\n- openstack.cloud.compute_flavor_info:\n    cloud: mycloud\n    name: \"xlarge-flavor\"\n\n# Get all flavors that have exactly 512 MB of RAM.\n- openstack.cloud.compute_flavor_info:\n    cloud: mycloud\n    ram: \"512\"\n\n# Get all flavors that have 1024 MB or more of RAM.\n- openstack.cloud.compute_flavor_info:\n    cloud: mycloud\n    ram: \">=1024\"\n\n# Get a single flavor that has the minimum amount of RAM. Using the 'limit'\n# option will guarantee only a single flavor is returned.\n- openstack.cloud.compute_flavor_info:\n    cloud: mycloud\n    ram: \"MIN\"\n    limit: 1\n\n# Get all flavors with 1024 MB of RAM or more, AND exactly 2 virtual CPUs.\n- openstack.cloud.compute_flavor_info:\n    cloud: mycloud\n    ram: \">=1024\"\n    vcpus: \"2\"\n\n# Get all flavors with 1024 MB of RAM or more, exactly 2 virtual CPUs, and\n# less than 30gb of ephemeral storage.\n- openstack.cloud.compute_flavor_info:\n    cloud: mycloud\n    ram: \">=1024\"\n    vcpus: \"2\"\n    ephemeral: \"<30\"\n"
  },
  "openstack.cloud.os_floating_ip": {
    "doc": {
      "description": "Add or Remove a floating IP to an instance.\nReturns the floating IP when attaching only if I(wait=true).\nWhen detaching a floating IP there might be a delay until an instance does not list the floating IP any more.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "fixed_address": {
          "aliases": [],
          "description": "To which fixed IP of server the floating IP address should be attached to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "floating_ip_address": {
          "aliases": [],
          "description": "A floating IP address to attach or to detach. When I(state) is present can be used to specify a IP address to attach. I(floating_ip_address) requires I(network) to be set.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "nat_destination": {
          "aliases": [
            "fixed_network",
            "internal_network"
          ],
          "description": "The name or id of a neutron private network that the fixed IP to attach floating IP is on",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "network": {
          "aliases": [],
          "description": "The name or ID of a neutron external network or a nova pool name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "purge": {
          "aliases": [],
          "description": "When I(state) is absent, indicates whether or not to delete the floating IP completely, or only detach it from the server. Default is to detach only.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "reuse": {
          "aliases": [],
          "description": "When I(state) is present, and I(floating_ip_address) is not present, this parameter can be used to specify whether we should try to reuse a floating IP address already allocated to the project.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "server": {
          "aliases": [],
          "description": "The name or ID of the instance to which the IP address should be assigned.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Time to wait for an IP address to appear as attached. See wait.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "When attaching a floating IP address, specify whether to wait for it to appear as attached.\nMust be set to C(yes) for the module to return the value of the floating IP when attaching.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Add/Remove floating IP from an instance"
    },
    "examples": "\n# Assign a floating IP to the first interface of `cattle001` from an existing\n# external network or nova pool. A new floating IP from the first available\n# external network is allocated to the project.\n- openstack.cloud.floating_ip:\n     cloud: dguerri\n     server: cattle001\n\n# Assign a new floating IP to the instance fixed ip `192.0.2.3` of\n# `cattle001`. If a free floating IP is already allocated to the project, it is\n# reused; if not, a new one is created.\n- openstack.cloud.floating_ip:\n     cloud: dguerri\n     state: present\n     reuse: yes\n     server: cattle001\n     network: ext_net\n     fixed_address: 192.0.2.3\n     wait: true\n     timeout: 180\n\n# Assign a new floating IP from the network `ext_net` to the instance fixed\n# ip in network `private_net` of `cattle001`.\n- openstack.cloud.floating_ip:\n     cloud: dguerri\n     state: present\n     server: cattle001\n     network: ext_net\n     nat_destination: private_net\n     wait: true\n     timeout: 180\n\n# Detach a floating IP address from a server\n- openstack.cloud.floating_ip:\n     cloud: dguerri\n     state: absent\n     floating_ip_address: 203.0.113.2\n     server: cattle001\n"
  },
  "openstack.cloud.os_group": {
    "doc": {
      "description": "Manage OpenStack Identity Groups. Groups can be created, deleted or updated. Only the I(description) value can be updated.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Group description",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain_id": {
          "aliases": [],
          "description": "Domain id to create the group in if the cloud supports domains.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Group name",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Manage OpenStack Identity Groups"
    },
    "examples": "\n# Create a group named \"demo\"\n- openstack.cloud.identity_group:\n    cloud: mycloud\n    state: present\n    name: demo\n    description: \"Demo Group\"\n    domain_id: demoid\n\n# Update the description on existing \"demo\" group\n- openstack.cloud.identity_group:\n    cloud: mycloud\n    state: present\n    name: demo\n    description: \"Something else\"\n    domain_id: demoid\n\n# Delete group named \"demo\"\n- openstack.cloud.identity_group:\n    cloud: mycloud\n    state: absent\n    name: demo\n"
  },
  "openstack.cloud.os_group_info": {
    "doc": {
      "description": "Retrieve info about a one or more OpenStack groups.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Name or ID of the domain containing the group if the cloud supports domains",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "filters": {
          "aliases": [],
          "description": "A dictionary of meta data to use for further filtering.  Elements of this dictionary may be additional dictionaries.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name or ID of the group.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Retrieve info about one or more OpenStack groups"
    },
    "examples": "\n# Gather info about previously created groups\n- name: gather info\n  hosts: localhost\n  tasks:\n    - name: Gather info about previously created groups\n      openstack.cloud.identity_group_info:\n        cloud: awesomecloud\n      register: openstack_groups\n    - debug:\n        var: openstack_groups\n\n# Gather info about a previously created group by name\n- name: gather info\n  hosts: localhost\n  tasks:\n    - name: Gather info about a previously created group by name\n      openstack.cloud.identity_group_info:\n        cloud: awesomecloud\n        name: demogroup\n      register: openstack_groups\n    - debug:\n        var: openstack_groups\n\n# Gather info about a previously created group in a specific domain\n- name: gather info\n  hosts: localhost\n  tasks:\n    - name: Gather info about a previously created group in a specific domain\n      openstack.cloud.identity_group_info:\n        cloud: awesomecloud\n        name: demogroup\n        domain: admindomain\n      register: openstack_groups\n    - debug:\n        var: openstack_groups\n\n# Gather info about a previously created group in a specific domain with filter\n- name: gather info\n  hosts: localhost\n  tasks:\n    - name: Gather info about a previously created group in a specific domain with filter\n      openstack.cloud.identity_group_info:\n        cloud: awesomecloud\n        name: demogroup\n        domain: admindomain\n        filters:\n          enabled: False\n      register: openstack_groups\n    - debug:\n        var: openstack_groups\n"
  },
  "openstack.cloud.os_image": {
    "doc": {
      "description": "Add or Remove images from the OpenStack Image Repository",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "checksum": {
          "aliases": [],
          "description": "The checksum of the image",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "container_format": {
          "aliases": [],
          "description": "The format of the container",
          "default": "bare",
          "type": "str",
          "required": false,
          "choices": [
            "ami",
            "aki",
            "ari",
            "bare",
            "ovf",
            "ova",
            "docker"
          ],
          "suboptions": {}
        },
        "disk_format": {
          "aliases": [],
          "description": "The format of the disk that is getting uploaded",
          "default": "qcow2",
          "type": "str",
          "required": false,
          "choices": [
            "ami",
            "ari",
            "aki",
            "vhd",
            "vmdk",
            "raw",
            "qcow2",
            "vdi",
            "iso",
            "vhdx",
            "ploop"
          ],
          "suboptions": {}
        },
        "filename": {
          "aliases": [],
          "description": "The path to the file which has to be uploaded",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "The ID of the image when uploading an image",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "is_public": {
          "aliases": [],
          "description": "Whether the image can be accessed publicly. Note that publicizing an image requires admin role by default.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "kernel": {
          "aliases": [],
          "description": "The name of an existing kernel image that will be associated with this image",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "min_disk": {
          "aliases": [],
          "description": "The minimum disk space (in GB) required to boot this image",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "min_ram": {
          "aliases": [],
          "description": "The minimum ram (in MB) required to boot this image",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the image when uploading - or the name/ID of the image if deleting",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "owner": {
          "aliases": [],
          "description": "The owner of the image",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "properties": {
          "aliases": [],
          "description": "Additional properties to be associated with this image",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "protected": {
          "aliases": [],
          "description": "Prevent image from being deleted",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ramdisk": {
          "aliases": [],
          "description": "The name of an existing ramdisk image that will be associated with this image",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tags": {
          "aliases": [],
          "description": "List of tags to be applied to the image",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "volume": {
          "aliases": [],
          "description": "ID of a volume to create an image from.\nThe volume must be in AVAILABLE state.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Add/Delete images from OpenStack Cloud"
    },
    "examples": "\n# Upload an image from a local file named cirros-0.3.0-x86_64-disk.img\n- openstack.cloud.image:\n    auth:\n      auth_url: https://identity.example.com\n      username: admin\n      password: passme\n      project_name: admin\n      openstack.cloud.identity_user_domain_name: Default\n      openstack.cloud.project_domain_name: Default\n    name: cirros\n    container_format: bare\n    disk_format: qcow2\n    state: present\n    filename: cirros-0.3.0-x86_64-disk.img\n    kernel: cirros-vmlinuz\n    ramdisk: cirros-initrd\n    tags:\n      - custom\n    properties:\n      cpu_arch: x86_64\n      distro: ubuntu\n\n# Create image from volume attached to an instance\n- name: create volume snapshot\n  openstack.cloud.volume_snapshot:\n    auth:\n      \"{{ auth }}\"\n    display_name: myvol_snapshot\n    volume: myvol\n    force: yes\n  register: myvol_snapshot\n\n- name: create volume from snapshot\n  openstack.cloud.volume:\n    auth:\n      \"{{ auth }}\"\n    size: \"{{ myvol_snapshot.snapshot.size }}\"\n    snapshot_id: \"{{ myvol_snapshot.snapshot.id }}\"\n    display_name: myvol_snapshot_volume\n    wait: yes\n  register: myvol_snapshot_volume\n\n- name: create image from volume snapshot\n  openstack.cloud.image:\n    auth:\n      \"{{ auth }}\"\n    volume: \"{{ myvol_snapshot_volume.volume.id }}\"\n    name: myvol_image\n"
  },
  "openstack.cloud.os_image_info": {
    "doc": {
      "description": "Retrieve information about a image image from OpenStack.\nThis module was called C(openstack.cloud.image_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(openstack.cloud.image_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "image": {
          "aliases": [],
          "description": "Name or ID of the image",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "properties": {
          "aliases": [],
          "description": "Dict of properties of the images used for query",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Retrieve information about an image within OpenStack."
    },
    "examples": "\n- name: Gather information about a previously created image named image1\n  openstack.cloud.image_info:\n    auth:\n      auth_url: https://identity.example.com\n      username: user\n      password: password\n      project_name: someproject\n    image: image1\n  register: result\n\n- name: Show openstack information\n  debug:\n    msg: \"{{ result.openstack_image }}\"\n\n# Show all available Openstack images\n- name: Retrieve all available Openstack images\n  openstack.cloud.image_info:\n  register: result\n\n- name: Show images\n  debug:\n    msg: \"{{ result.openstack_image }}\"\n\n# Show images matching requested properties\n- name: Retrieve images having properties with desired values\n  openstack.cloud.image_facts:\n    properties:\n      some_property: some_value\n      OtherProp: OtherVal\n\n- name: Show images\n  debug:\n    msg: \"{{ result.openstack_image }}\"\n"
  },
  "openstack.cloud.os_ironic": {
    "doc": {
      "description": "Create or Remove Ironic nodes from OpenStack.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "bios_interface": {
          "aliases": [],
          "description": "The bios interface for this node, e.g. \"no-bios\".",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "boot_interface": {
          "aliases": [],
          "description": "The boot interface for this node, e.g. \"pxe\".",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "chassis_uuid": {
          "aliases": [],
          "description": "Associate the node with a pre-defined chassis.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "console_interface": {
          "aliases": [],
          "description": "The console interface for this node, e.g. \"no-console\".",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "deploy_interface": {
          "aliases": [],
          "description": "The deploy interface for this node, e.g. \"iscsi\".",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "driver": {
          "aliases": [],
          "description": "The name of the Ironic Driver to use with this node.\nRequired when I(state=present)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "driver_info": {
          "aliases": [],
          "description": "Information for this server's driver. Will vary based on which driver is in use. Any sub-field which is populated will be validated during creation. For compatibility reasons sub-fields `power`, `deploy`, `management` and `console` are flattened.",
          "type": "dict",
          "required": true,
          "suboptions": {}
        },
        "inspect_interface": {
          "aliases": [],
          "description": "The interface used for node inspection, e.g. \"no-inspect\".",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "ironic_url": {
          "aliases": [],
          "description": "If noauth mode is utilized, this is required to be set to the endpoint URL for the Ironic API.  Use with \"auth\" and \"auth_type\" settings set to None.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "management_interface": {
          "aliases": [],
          "description": "The interface for out-of-band management of this node, e.g. \"ipmitool\".",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "unique name identifier to be given to the resource.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "network_interface": {
          "aliases": [],
          "description": "The network interface provider to use when describing connections for this node.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "nics": {
          "aliases": [],
          "description": "A list of network interface cards, eg, \" - mac: aa:bb:cc:aa:bb:cc\"",
          "type": "list",
          "required": true,
          "elements": "dict",
          "suboptions": {
            "mac": {
              "aliases": [],
              "description": "The MAC address of the network interface card.",
              "type": "str",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "power_interface": {
          "aliases": [],
          "description": "The interface used to manage power actions on this node, e.g. \"ipmitool\".",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "properties": {
          "aliases": [],
          "description": "Definition of the physical characteristics of this server, used for scheduling purposes",
          "type": "dict",
          "required": false,
          "suboptions": {
            "capabilities": {
              "aliases": [],
              "description": "special capabilities for the node, such as boot_option, node_role etc (see U(https://docs.openstack.org/ironic/latest/install/advanced.html) for more information)",
              "default": "",
              "required": false,
              "suboptions": {}
            },
            "cpu_arch": {
              "aliases": [],
              "description": "CPU architecture (x86_64, i686, ...)",
              "default": "x86_64",
              "required": false,
              "suboptions": {}
            },
            "cpus": {
              "aliases": [],
              "description": "Number of CPU cores this machine has",
              "default": "1",
              "required": false,
              "suboptions": {}
            },
            "disk_size": {
              "aliases": [],
              "description": "size of first storage device in this machine (typically /dev/sda), in GB",
              "default": "1",
              "required": false,
              "suboptions": {}
            },
            "ram": {
              "aliases": [],
              "description": "amount of RAM this machine has, in MB",
              "default": "1",
              "required": false,
              "suboptions": {}
            },
            "root_device": {
              "aliases": [],
              "description": "Root disk device hints for deployment.\nSee U(https://docs.openstack.org/ironic/latest/install/advanced.html#specifying-the-disk-for-deployment-root-device-hints) for allowed hints.",
              "default": "",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "raid_interface": {
          "aliases": [],
          "description": "Interface used for configuring raid on this node.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "rescue_interface": {
          "aliases": [],
          "description": "Interface used for node rescue, e.g. \"no-rescue\".",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "resource_class": {
          "aliases": [],
          "description": "The specific resource type to which this node belongs.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "skip_update_of_masked_password": {
          "aliases": [
            "skip_update_of_driver_password"
          ],
          "description": "Allows the code that would assert changes to nodes to skip the update if the change is a single line consisting of the password field.\nAs of Kilo, by default, passwords are always masked to API requests, which means the logic as a result always attempts to re-assert the password field.\nC(skip_update_of_driver_password) is deprecated alias and will be removed in openstack.cloud 2.0.0.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicates desired state of the resource",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "storage_interface": {
          "aliases": [],
          "description": "Interface used for attaching and detaching volumes on this node, e.g. \"cinder\".",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "globally unique identifier (UUID) to be given to the resource. Will be auto-generated if not specified, and name is specified.\nDefinition of a UUID will always take precedence to a name value.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vendor_interface": {
          "aliases": [],
          "description": "Interface for all vendor-specific actions on this node, e.g. \"no-vendor\".",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "jsonpatch",
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Create/Delete Bare Metal Resources from OpenStack"
    },
    "examples": "\n# Enroll a node with some basic properties and driver info\n- openstack.cloud.baremetal_node:\n    cloud: \"devstack\"\n    driver: \"pxe_ipmitool\"\n    uuid: \"00000000-0000-0000-0000-000000000002\"\n    properties:\n      cpus: 2\n      cpu_arch: \"x86_64\"\n      ram: 8192\n      disk_size: 64\n      capabilities: \"boot_option:local\"\n      root_device:\n        wwn: \"0x4000cca77fc4dba1\"\n    nics:\n      - mac: \"aa:bb:cc:aa:bb:cc\"\n      - mac: \"dd:ee:ff:dd:ee:ff\"\n    driver_info:\n      ipmi_address: \"1.2.3.4\"\n      ipmi_username: \"admin\"\n      ipmi_password: \"adminpass\"\n    chassis_uuid: \"00000000-0000-0000-0000-000000000001\"\n\n"
  },
  "openstack.cloud.os_ironic_inspect": {
    "doc": {
      "description": "Requests Ironic to set a node into inspect state in order to collect metadata regarding the node. This command may be out of band or in-band depending on the ironic driver configuration. This is only possible on nodes in 'manageable' and 'available' state.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "ironic_url": {
          "aliases": [],
          "description": "If noauth mode is utilized, this is required to be set to the endpoint URL for the Ironic API. Use with \"auth\" and \"auth_type\" settings set to None.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mac": {
          "aliases": [],
          "description": "unique mac address that is used to attempt to identify the host.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "unique name identifier to identify the host in Ironic.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "A timeout in seconds to tell the role to wait for the node to complete introspection if wait is set to True.",
          "default": "1200",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "globally unique identifier (UUID) to identify the host.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Explicitly triggers baremetal node introspection in ironic."
    },
    "examples": "\n# Invoke node inspection\n- openstack.cloud.baremetal_inspect:\n    name: \"testnode1\"\n"
  },
  "openstack.cloud.os_ironic_node": {
    "doc": {
      "description": "Deploy to nodes controlled by Ironic.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "config_drive": {
          "aliases": [],
          "description": "A configdrive file or HTTP(S) URL that will be passed along to the node.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "deploy": {
          "aliases": [],
          "description": "Indicates if the resource should be deployed. Allows for deployment logic to be disengaged and control of the node power or maintenance state to be changed.",
          "default": "yes",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "instance_info": {
          "aliases": [],
          "description": "Definition of the instance information which is used to deploy the node.  This information is only required when an instance is set to present.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "image_checksum": {
              "aliases": [],
              "description": "The checksum of image_source.",
              "required": false,
              "suboptions": {}
            },
            "image_disk_format": {
              "aliases": [],
              "description": "The type of image that has been requested to be deployed.",
              "required": false,
              "suboptions": {}
            },
            "image_source": {
              "aliases": [],
              "description": "An HTTP(S) URL where the image can be retrieved from.",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "ironic_url": {
          "aliases": [],
          "description": "If noauth mode is utilized, this is required to be set to the endpoint URL for the Ironic API.  Use with \"auth\" and \"auth_type\" settings set to None.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "maintenance": {
          "aliases": [],
          "description": "A setting to allow the direct control if a node is in maintenance mode.\nI(maintenance) can be C('yes'), C('no'), C('True'), or C('False').",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "maintenance_reason": {
          "aliases": [],
          "description": "A string expression regarding the reason a node is in a maintenance mode.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the node to create.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "power": {
          "aliases": [],
          "description": "A setting to allow power state to be asserted allowing nodes that are not yet deployed to be powered on, and nodes that are deployed to be powered off.\nI(power) can be C('present'), C('absent'), C('maintenance') or C('off').",
          "default": "present",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicates desired state of the resource.\nI(state) can be C('present'), C('absent'), C('maintenance') or C('off').",
          "default": "present",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "An integer value representing the number of seconds to wait for the node activation or deactivation to complete.",
          "default": "1800",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "globally unique identifier (UUID) to be given to the resource.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "A boolean value instructing the module to wait for node activation or deactivation to complete before returning.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Activate/Deactivate Bare Metal Resources from OpenStack"
    },
    "examples": "\n# Activate a node by booting an image with a configdrive attached\n- openstack.cloud.baremetal_node_action:\n    cloud: \"openstack\"\n    uuid: \"d44666e1-35b3-4f6b-acb0-88ab7052da69\"\n    state: present\n    power: present\n    deploy: True\n    maintenance: False\n    config_drive: \"http://192.168.1.1/host-configdrive.iso\"\n    instance_info:\n      image_source: \"http://192.168.1.1/deploy_image.img\"\n      image_checksum: \"356a6b55ecc511a20c33c946c4e678af\"\n      image_disk_format: \"qcow\"\n    delegate_to: localhost\n\n# Activate a node by booting an image with a configdrive json object\n- openstack.cloud.baremetal_node_action:\n    uuid: \"d44666e1-35b3-4f6b-acb0-88ab7052da69\"\n    auth_type: None\n    ironic_url: \"http://192.168.1.1:6385/\"\n    config_drive:\n      meta_data:\n        hostname: node1\n        public_keys:\n          default: ssh-rsa AAA...BBB==\n    instance_info:\n      image_source: \"http://192.168.1.1/deploy_image.img\"\n      image_checksum: \"356a6b55ecc511a20c33c946c4e678af\"\n      image_disk_format: \"qcow\"\n    delegate_to: localhost\n"
  },
  "openstack.cloud.os_keypair": {
    "doc": {
      "description": "Add or Remove key pair from OpenStack",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name that has to be given to the key pair",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "public_key": {
          "aliases": [],
          "description": "The public key that would be uploaded to nova and injected into VMs upon creation.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "public_key_file": {
          "aliases": [],
          "description": "Path to local file containing ssh public key. Mutually exclusive with public_key.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent. If state is replace and the key exists but has different content, delete it and recreate it with the new content.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "replace"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Add/Delete a keypair from OpenStack"
    },
    "examples": "\n# Creates a key pair with the running users public key\n- openstack.cloud.keypair:\n      cloud: mordred\n      state: present\n      name: ansible_key\n      public_key_file: /home/me/.ssh/id_rsa.pub\n\n# Creates a new key pair and the private key returned after the run.\n- openstack.cloud.keypair:\n      cloud: rax-dfw\n      state: present\n      name: ansible_key\n"
  },
  "openstack.cloud.os_keystone_domain": {
    "doc": {
      "description": "Create, update, or delete OpenStack Identity domains. If a domain with the supplied name already exists, it will be updated with the new description and enabled attributes.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the domain",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "Is the domain enabled",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name that has to be given to the instance",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Manage OpenStack Identity Domains"
    },
    "examples": "\n# Create a domain\n- openstack.cloud.identity_domain:\n     cloud: mycloud\n     state: present\n     name: demo\n     description: Demo Domain\n\n# Delete a domain\n- openstack.cloud.identity_domain:\n     cloud: mycloud\n     state: absent\n     name: demo\n"
  },
  "openstack.cloud.os_keystone_domain_info": {
    "doc": {
      "description": "Retrieve information about a one or more OpenStack domains\nThis module was called C(openstack.cloud.identity_domain_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(openstack.cloud.identity_domain_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "filters": {
          "aliases": [],
          "description": "A dictionary of meta data to use for further filtering.  Elements of this dictionary may be additional dictionaries.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name or ID of the domain",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Retrieve information about one or more OpenStack domains"
    },
    "examples": "\n# Gather information about previously created domain\n- openstack.cloud.identity_domain_info:\n    cloud: awesomecloud\n  register: result\n- debug:\n    msg: \"{{ result.openstack_domains }}\"\n\n# Gather information about a previously created domain by name\n- openstack.cloud.identity_domain_info:\n    cloud: awesomecloud\n    name: demodomain\n  register: result\n- debug:\n    msg: \"{{ result.openstack_domains }}\"\n\n# Gather information about a previously created domain with filter\n- openstack.cloud.identity_domain_info:\n    cloud: awesomecloud\n    name: demodomain\n    filters:\n      enabled: false\n  register: result\n- debug:\n    msg: \"{{ result.openstack_domains }}\"\n"
  },
  "openstack.cloud.os_keystone_endpoint": {
    "doc": {
      "description": "Create, update, or delete OpenStack Identity service endpoints. If a service with the same combination of I(service), I(interface) and I(region) exist, the I(url) and I(state) (C(present) or C(absent)) will be updated.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "Is the service enabled.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "endpoint_interface": {
          "aliases": [],
          "description": "Interface of the service.",
          "type": "str",
          "required": true,
          "choices": [
            "admin",
            "public",
            "internal"
          ],
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "region": {
          "aliases": [],
          "description": "Region that the service belongs to. Note that I(region_name) is used for authentication.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "service": {
          "aliases": [],
          "description": "Name or id of the service.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be C(present) or C(absent).",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "URL of the service.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk >= 0.12.0",
        "openstacksdk >= 0.13.0",
        "python >= 3.6"
      ],
      "short_description": "Manage OpenStack Identity service endpoints"
    },
    "examples": "\n- name: Create a service for glance\n  openstack.cloud.endpoint:\n     cloud: mycloud\n     service: glance\n     endpoint_interface: public\n     url: http://controller:9292\n     region: RegionOne\n     state: present\n\n- name: Delete a service for nova\n  openstack.cloud.endpoint:\n     cloud: mycloud\n     service: nova\n     endpoint_interface: public\n     region: RegionOne\n     state: absent\n"
  },
  "openstack.cloud.os_keystone_federation_protocol": {
    "doc": {
      "description": "Manage a federation Protocol.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "idp_id": {
          "aliases": [
            "idp_name"
          ],
          "description": "The name of the Identity Provider this Protocol is associated with.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "mapping_id": {
          "aliases": [
            "mapping_name"
          ],
          "description": "The name of the Mapping to use for this Protocol.'\nRequired when creating a new Protocol.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "id"
          ],
          "description": "The name of the Protocol.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the protocol should be C(present) or C(absent).",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk >= 0.12.0",
        "openstacksdk >= 0.44",
        "python >= 3.6"
      ],
      "short_description": "manage a federation Protocol"
    },
    "examples": "\n- name: Create a protocol\n  openstack.cloud.keystone_federation_protocol:\n    cloud: example_cloud\n    name: example_protocol\n    idp_id: example_idp\n    mapping_id: example_mapping\n\n- name: Delete a protocol\n  openstack.cloud.keystone_federation_protocol:\n    cloud: example_cloud\n    name: example_protocol\n    idp_id: example_idp\n    state: absent\n"
  },
  "openstack.cloud.os_keystone_federation_protocol_info": {
    "doc": {
      "description": "Get information about federation Protocols.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "idp_id": {
          "aliases": [
            "idp_name"
          ],
          "description": "The name of the Identity Provider this Protocol is associated with.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "id"
          ],
          "description": "The name of the Protocol.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk >= 0.12.0",
        "openstacksdk >= 0.44",
        "python >= 3.6"
      ],
      "short_description": "get information about federation Protocols"
    },
    "examples": "\n- name: Describe a protocol\n  openstack.cloud.keystone_federation_protocol_info:\n    cloud: example_cloud\n    name: example_protocol\n    idp_id: example_idp\n    mapping_name: example_mapping\n\n- name: Describe all protocols attached to an IDP\n  openstack.cloud.keystone_federation_protocol_info:\n    cloud: example_cloud\n    idp_id: example_idp\n"
  },
  "openstack.cloud.os_keystone_identity_provider": {
    "doc": {
      "description": "Manage a federation Identity Provider.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "The description of the Identity Provider.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain_id": {
          "aliases": [],
          "description": "The ID of a domain that is associated with the Identity Provider. Federated users that authenticate with the Identity Provider will be created under the domain specified.\nRequired when creating a new Identity Provider.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [
            "is_enabled"
          ],
          "description": "Whether the Identity Provider is enabled or not.\nWill default to C(true) when creating a new Identity Provider.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "id"
          ],
          "description": "The name of the Identity Provider.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "remote_ids": {
          "aliases": [],
          "description": "List of the unique Identity Provider's remote IDs.\nWill default to an empty list when creating a new Identity Provider.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the Identity Provider should be C(present) or C(absent).",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk >= 0.12.0",
        "openstacksdk >= 0.44",
        "python >= 3.6"
      ],
      "short_description": "manage a federation Identity Provider"
    },
    "examples": "\n- name: Create an identity provider\n  openstack.cloud.federation_idp:\n    cloud: example_cloud\n    name: example_provider\n    domain_id: 0123456789abcdef0123456789abcdef\n    description: 'My example IDP'\n    remote_ids:\n    - 'https://auth.example.com/auth/realms/ExampleRealm'\n\n- name: Delete an identity provider\n  openstack.cloud.federation_idp:\n    cloud: example_cloud\n    name: example_provider\n    state: absent\n"
  },
  "openstack.cloud.os_keystone_identity_provider_info": {
    "doc": {
      "description": "Fetch a federation identity provider.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "id"
          ],
          "description": "The name of the identity provider to fetch.\nIf I(name) is specified, the module will return failed if the identity provider doesn't exist.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk >= 0.12.0",
        "openstacksdk >= 0.44",
        "python >= 3.6"
      ],
      "short_description": "Get the information about the available federation identity providers"
    },
    "examples": "\n- name: Fetch a specific identity provider\n  openstack.cloud.federation_idp_info:\n    cloud: example_cloud\n    name: example_provider\n\n- name: Fetch all providers\n  openstack.cloud.federation_idp_info:\n    cloud: example_cloud\n"
  },
  "openstack.cloud.os_keystone_mapping": {
    "doc": {
      "description": "Manage a federation mapping.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "id"
          ],
          "description": "The name of the mapping to manage.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "rules": {
          "aliases": [],
          "description": "The rules that comprise the mapping.  These are pairs of I(local) and I(remote) definitions.  For more details on how these work please see the OpenStack documentation U(https://docs.openstack.org/keystone/latest/admin/federation/mapping_combinations.html).\nRequired if I(state=present)",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "local": {
              "aliases": [],
              "description": "Information on what local attributes will be mapped.",
              "type": "list",
              "required": true,
              "elements": "dict",
              "suboptions": {}
            },
            "remote": {
              "aliases": [],
              "description": "Information on what remote attributes will be mapped.",
              "type": "list",
              "required": true,
              "elements": "dict",
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Whether the mapping should be C(present) or C(absent).",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk >= 0.12.0",
        "openstacksdk >= 0.44",
        "python >= 3.6"
      ],
      "short_description": "Manage a federation mapping"
    },
    "examples": "\n- name: Create a new mapping\n  openstack.cloud.federation_mapping:\n    cloud: example_cloud\n    name: example_mapping\n    rules:\n    - local:\n      - user:\n          name: '{0}'\n      - group:\n          id: '0cd5e9'\n      remote:\n      - type: UserName\n      - type: orgPersonType\n        any_one_of:\n        - Contractor\n        - SubContractor\n\n- name: Delete a mapping\n  openstack.cloud.federation_mapping:\n    name: example_mapping\n    state: absent\n"
  },
  "openstack.cloud.os_keystone_mapping_info": {
    "doc": {
      "description": "Fetch a federation mapping.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "id"
          ],
          "description": "The name of the mapping to fetch.\nIf I(name) is specified, the module will return failed if the mapping doesn't exist.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk >= 0.12.0",
        "openstacksdk >= 0.44",
        "python >= 3.6"
      ],
      "short_description": "Get the information about the available federation mappings"
    },
    "examples": "\n- name: Fetch a specific mapping\n  openstack.cloud.federation_mapping_info:\n    cloud: example_cloud\n    name: example_mapping\n\n- name: Fetch all mappings\n  openstack.cloud.federation_mapping_info:\n    cloud: example_cloud\n"
  },
  "openstack.cloud.os_keystone_role": {
    "doc": {
      "description": "Manage OpenStack Identity Roles.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Role Name",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Manage OpenStack Identity Roles"
    },
    "examples": "\n# Create a role named \"demo\"\n- openstack.cloud.identity_role:\n    cloud: mycloud\n    state: present\n    name: demo\n\n# Delete the role named \"demo\"\n- openstack.cloud.identity_role:\n    cloud: mycloud\n    state: absent\n    name: demo\n"
  },
  "openstack.cloud.os_keystone_service": {
    "doc": {
      "description": "Create, update, or delete OpenStack Identity service. If a service with the supplied name already exists, it will be updated with the new description and enabled attributes.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the service",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "Is the service enabled",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the service",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "service_type": {
          "aliases": [],
          "description": "The type of service",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Manage OpenStack Identity services"
    },
    "examples": "\n# Create a service for glance\n- openstack.cloud.catalog_service:\n     cloud: mycloud\n     state: present\n     name: glance\n     service_type: image\n     description: OpenStack Image Service\n# Delete a service\n- openstack.cloud.catalog_service:\n     cloud: mycloud\n     state: absent\n     name: glance\n     service_type: image\n"
  },
  "openstack.cloud.os_listener": {
    "doc": {
      "description": "Add or Remove a listener for a load balancer from the OpenStack load-balancer service.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "loadbalancer": {
          "aliases": [],
          "description": "The name or id of the load balancer that this listener belongs to.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name that has to be given to the listener",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "The protocol for the listener.",
          "default": "HTTP",
          "type": "str",
          "required": false,
          "choices": [
            "HTTP",
            "HTTPS",
            "TCP",
            "TERMINATED_HTTPS",
            "UDP",
            "SCTP"
          ],
          "suboptions": {}
        },
        "protocol_port": {
          "aliases": [],
          "description": "The protocol port number for the listener.",
          "default": "80",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The amount of time the module should wait for the load balancer to get into ACTIVE state.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "timeout_client_data": {
          "aliases": [],
          "description": "Client inactivity timeout in milliseconds.",
          "default": "50000",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "timeout_member_data": {
          "aliases": [],
          "description": "Member inactivity timeout in milliseconds.",
          "default": "50000",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "If the module should wait for the load balancer to be ACTIVE.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Add/Delete a listener for a load balancer from OpenStack Cloud"
    },
    "examples": "\n# Create a listener, wait for the loadbalancer to be active.\n- openstack.cloud.lb_listener:\n    cloud: mycloud\n    endpoint_type: admin\n    state: present\n    name: test-listener\n    loadbalancer: test-loadbalancer\n    protocol: HTTP\n    protocol_port: 8080\n\n# Create a listener, do not wait for the loadbalancer to be active.\n- openstack.cloud.lb_listener:\n    cloud: mycloud\n    endpoint_type: admin\n    state: present\n    name: test-listener\n    loadbalancer: test-loadbalancer\n    protocol: HTTP\n    protocol_port: 8080\n    wait: no\n\n# Delete a listener\n- openstack.cloud.lb_listener:\n    cloud: mycloud\n    endpoint_type: admin\n    state: absent\n    name: test-listener\n    loadbalancer: test-loadbalancer\n\n# Create a listener, increase timeouts for connection persistence (for SSH for example).\n- openstack.cloud.lb_listener:\n    cloud: mycloud\n    endpoint_type: admin\n    state: present\n    name: test-listener\n    loadbalancer: test-loadbalancer\n    protocol: TCP\n    protocol_port: 22\n    timeout_client_data: 1800000\n    timeout_member_data: 1800000\n"
  },
  "openstack.cloud.os_loadbalancer": {
    "doc": {
      "description": "Add or Remove load balancer from the OpenStack load-balancer service(Octavia). Load balancer update is not supported for now.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auto_public_ip": {
          "aliases": [],
          "description": "Allocate a public IP address and associate with the VIP automatically.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "delete_public_ip": {
          "aliases": [],
          "description": "When C(state=absent) and this option is true, any public IP address associated with the VIP will be deleted along with the load balancer.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "flavor": {
          "aliases": [],
          "description": "The flavor of the load balancer.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "listeners": {
          "aliases": [],
          "description": "A list of listeners that attached to the load balancer.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "allowed_cidrs": {
              "aliases": [],
              "description": "A list of IPv4, IPv6 or mix of both CIDRs to be allowed access to the listener. The default is all allowed. When a list of CIDRs is provided, the default switches to deny all. Ignored on unsupported Octavia versions (less than 2.12)",
              "default": "[]",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The listener name or ID.",
              "required": false,
              "suboptions": {}
            },
            "pool": {
              "aliases": [],
              "description": "The pool attached to the listener.",
              "required": false,
              "suboptions": {
                "lb_algorithm": {
                  "aliases": [],
                  "description": "The load balancing algorithm for the pool.",
                  "default": "ROUND_ROBIN",
                  "required": false,
                  "suboptions": {}
                },
                "members": {
                  "aliases": [],
                  "description": "A list of members that added to the pool.",
                  "required": false,
                  "suboptions": {
                    "address": {
                      "aliases": [],
                      "description": "The IP address of the member.",
                      "required": false,
                      "suboptions": {}
                    },
                    "name": {
                      "aliases": [],
                      "description": "The member name or ID.",
                      "required": false,
                      "suboptions": {}
                    },
                    "protocol_port": {
                      "aliases": [],
                      "description": "The protocol port number for the member.",
                      "default": "80",
                      "required": false,
                      "suboptions": {}
                    },
                    "subnet": {
                      "aliases": [],
                      "description": "The name or ID of the subnet the member service is accessible from.",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "name": {
                  "aliases": [],
                  "description": "The pool name or ID.",
                  "required": false,
                  "suboptions": {}
                },
                "protocol": {
                  "aliases": [],
                  "description": "The protocol for the pool.",
                  "default": "HTTP",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "protocol": {
              "aliases": [],
              "description": "The protocol for the listener.",
              "default": "HTTP",
              "required": false,
              "suboptions": {}
            },
            "protocol_port": {
              "aliases": [],
              "description": "The protocol port number for the listener.",
              "default": "80",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "The name of the load balancer.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "public_ip_address": {
          "aliases": [],
          "description": "Public IP address associated with the VIP.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "public_network": {
          "aliases": [],
          "description": "The name or ID of a Neutron external network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The amount of time the module should wait.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vip_address": {
          "aliases": [],
          "description": "IP address of the load balancer virtual IP.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vip_network": {
          "aliases": [],
          "description": "The name or id of the network for the virtual IP of the load balancer. One of I(vip_network), I(vip_subnet), or I(vip_port) must be specified for creation.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vip_port": {
          "aliases": [],
          "description": "The name or id of the load balancer virtual IP port. One of I(vip_network), I(vip_subnet), or I(vip_port) must be specified for creation.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vip_subnet": {
          "aliases": [],
          "description": "The name or id of the subnet for the virtual IP of the load balancer. One of I(vip_network), I(vip_subnet), or I(vip_port) must be specified for creation.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "If the module should wait for the load balancer to be created or deleted.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Add/Delete load balancer from OpenStack Cloud"
    },
    "examples": "\n# Create a load balancer by specifying the VIP subnet.\n- openstack.cloud.loadbalancer:\n    auth:\n      auth_url: https://identity.example.com\n      username: admin\n      password: passme\n      project_name: admin\n    state: present\n    name: my_lb\n    vip_subnet: my_subnet\n    timeout: 150\n\n# Create a load balancer by specifying the VIP network and the IP address.\n- openstack.cloud.loadbalancer:\n    auth:\n      auth_url: https://identity.example.com\n      username: admin\n      password: passme\n      project_name: admin\n    state: present\n    name: my_lb\n    vip_network: my_network\n    vip_address: 192.168.0.11\n\n# Create a load balancer together with its sub-resources in the 'all in one'\n# way. A public IP address is also allocated to the load balancer VIP.\n- openstack.cloud.loadbalancer:\n    auth:\n      auth_url: https://identity.example.com\n      username: admin\n      password: passme\n      project_name: admin\n    name: lingxian_test\n    state: present\n    vip_subnet: kong_subnet\n    auto_public_ip: yes\n    public_network: public\n    listeners:\n      - name: lingxian_80\n        protocol: TCP\n        protocol_port: 80\n        pool:\n          name: lingxian_80_pool\n          protocol: TCP\n          members:\n            - name: mywebserver1\n              address: 192.168.2.81\n              protocol_port: 80\n              subnet: webserver_subnet\n      - name: lingxian_8080\n        protocol: TCP\n        protocol_port: 8080\n        pool:\n          name: lingxian_8080-pool\n          protocol: TCP\n          members:\n            - name: mywebserver2\n              address: 192.168.2.82\n              protocol_port: 8080\n    wait: yes\n    timeout: 600\n\n# Delete a load balancer(and all its related resources)\n- openstack.cloud.loadbalancer:\n    auth:\n      auth_url: https://identity.example.com\n      username: admin\n      password: passme\n      project_name: admin\n    state: absent\n    name: my_lb\n\n# Delete a load balancer(and all its related resources) together with the\n# public IP address(if any) attached to it.\n- openstack.cloud.loadbalancer:\n    auth:\n      auth_url: https://identity.example.com\n      username: admin\n      password: passme\n      project_name: admin\n    state: absent\n    name: my_lb\n    delete_public_ip: yes\n"
  },
  "openstack.cloud.os_member": {
    "doc": {
      "description": "Add or Remove a member for a pool from the OpenStack load-balancer service.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "address": {
          "aliases": [],
          "description": "The IP address of the member.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name that has to be given to the member",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "pool": {
          "aliases": [],
          "description": "The name or id of the pool that this member belongs to.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "protocol_port": {
          "aliases": [],
          "description": "The protocol port number for the member.",
          "default": "80",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "subnet_id": {
          "aliases": [],
          "description": "The subnet ID the member service is accessible from.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The amount of time the module should wait for the load balancer to get into ACTIVE state.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "If the module should wait for the load balancer to be ACTIVE.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Add/Delete a member for a pool in load balancer from OpenStack Cloud"
    },
    "examples": "\n# Create a member, wait for the member to be created.\n- openstack.cloud.lb_member:\n    cloud: mycloud\n    endpoint_type: admin\n    state: present\n    name: test-member\n    pool: test-pool\n    address: 192.168.10.3\n    protocol_port: 8080\n\n# Delete a listener\n- openstack.cloud.lb_member:\n    cloud: mycloud\n    endpoint_type: admin\n    state: absent\n    name: test-member\n    pool: test-pool\n"
  },
  "openstack.cloud.os_network": {
    "doc": {
      "description": "Add or remove network from OpenStack.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "admin_state_up": {
          "aliases": [],
          "description": "Whether the state should be marked as up or down.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "dns_domain": {
          "aliases": [],
          "description": "The DNS domain value to set. Requires openstacksdk>=0.29. Network will use Openstack defaults if this option is not provided.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "external": {
          "aliases": [],
          "description": "Whether this network is externally accessible.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "mtu_size": {
          "aliases": [
            "mtu"
          ],
          "description": "The maximum transmission unit (MTU) value to address fragmentation. Network will use OpenStack defaults if this option is not provided. Requires openstacksdk>=0.18.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name to be assigned to the network.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port_security_enabled": {
          "aliases": [],
          "description": "Whether port security is enabled on the network or not. Network will use OpenStack defaults if this option is not utilised. Requires openstacksdk>=0.18.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Project name or ID containing the network (name admin-only)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "provider_network_type": {
          "aliases": [],
          "description": "The type of physical network that maps to this network resource.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "provider_physical_network": {
          "aliases": [],
          "description": "The physical network where this network object is implemented.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "provider_segmentation_id": {
          "aliases": [],
          "description": "An isolated segment on the physical network. The I(network_type) attribute defines the segmentation model. For example, if the I(network_type) value is vlan, this ID is a vlan identifier. If the I(network_type) value is gre, this ID is a gre key.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "shared": {
          "aliases": [],
          "description": "Whether this network is shared or not.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Creates/removes networks from OpenStack"
    },
    "examples": "\n# Create an externally accessible network named 'ext_network'.\n- openstack.cloud.network:\n    cloud: mycloud\n    state: present\n    name: ext_network\n    external: true\n"
  },
  "openstack.cloud.os_networks_info": {
    "doc": {
      "description": "Retrieve information about one or more networks from OpenStack.\nThis module was called C(openstack.cloud.networks_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(openstack.cloud.networks_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "filters": {
          "aliases": [],
          "description": "A dictionary of meta data to use for further filtering.  Elements of this dictionary may be additional dictionaries.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name or ID of the Network",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Retrieve information about one or more OpenStack networks."
    },
    "examples": "\n- name: Gather information about previously created networks\n  openstack.cloud.networks_info:\n    auth:\n      auth_url: https://identity.example.com\n      username: user\n      password: password\n      project_name: someproject\n  register: result\n\n- name: Show openstack networks\n  debug:\n    msg: \"{{ result.openstack_networks }}\"\n\n- name: Gather information about a previously created network by name\n  openstack.cloud.networks_info:\n    auth:\n      auth_url: https://identity.example.com\n      username: user\n      password: password\n      project_name: someproject\n    name:  network1\n  register: result\n\n- name: Show openstack networks\n  debug:\n    msg: \"{{ result.openstack_networks }}\"\n\n- name: Gather information about a previously created network with filter\n  # Note: name and filters parameters are Not mutually exclusive\n  openstack.cloud.networks_info:\n    auth:\n      auth_url: https://identity.example.com\n      username: user\n      password: password\n      project_name: someproject\n    filters:\n      tenant_id: 55e2ce24b2a245b09f181bf025724cbe\n      subnets:\n        - 057d4bdf-6d4d-4728-bb0f-5ac45a6f7400\n        - 443d4dc0-91d4-4998-b21c-357d10433483\n  register: result\n\n- name: Show openstack networks\n  debug:\n    msg: \"{{ result.openstack_networks }}\"\n"
  },
  "openstack.cloud.os_nova_flavor": {
    "doc": {
      "description": "Add or remove flavors from OpenStack.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "disk": {
          "aliases": [],
          "description": "Size of local disk, in GB.",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ephemeral": {
          "aliases": [],
          "description": "Ephemeral space size, in GB.",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "extra_specs": {
          "aliases": [],
          "description": "Metadata dictionary",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "flavorid": {
          "aliases": [],
          "description": "ID for the flavor. This is optional as a unique UUID will be assigned if a value is not specified.",
          "default": "auto",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "is_public": {
          "aliases": [],
          "description": "Make flavor accessible to the public.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Flavor name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ram": {
          "aliases": [],
          "description": "Amount of memory, in MB.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "rxtx_factor": {
          "aliases": [],
          "description": "RX/TX factor.",
          "default": "1.0",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the resource. When I(state) is 'present', then I(ram), I(vcpus), and I(disk) are all required. There are no default values for those parameters.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "swap": {
          "aliases": [],
          "description": "Swap space size, in MB.",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vcpus": {
          "aliases": [],
          "description": "Number of virtual CPUs.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Manage OpenStack compute flavors"
    },
    "examples": "\n- name: \"Create 'tiny' flavor with 1024MB of RAM, 1 virtual CPU, and 10GB of local disk, and 10GB of ephemeral.\"\n  openstack.cloud.compute_flavor:\n    cloud: mycloud\n    state: present\n    name: tiny\n    ram: 1024\n    vcpus: 1\n    disk: 10\n    ephemeral: 10\n\n- name: \"Delete 'tiny' flavor\"\n  openstack.cloud.compute_flavor:\n    cloud: mycloud\n    state: absent\n    name: tiny\n\n- name: Create flavor with metadata\n  openstack.cloud.compute_flavor:\n    cloud: mycloud\n    state: present\n    name: tiny\n    ram: 1024\n    vcpus: 1\n    disk: 10\n    extra_specs:\n      \"quota:disk_read_iops_sec\": 5000\n      \"aggregate_instance_extra_specs:pinned\": false\n"
  },
  "openstack.cloud.os_nova_host_aggregate": {
    "doc": {
      "description": "Create, update, or delete OpenStack host aggregates. If a aggregate with the supplied name already exists, it will be updated with the new name, new availability zone, new metadata and new list of hosts.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Availability zone to create aggregate into.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "hosts": {
          "aliases": [],
          "description": "List of hosts to set for an aggregate.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "metadata": {
          "aliases": [],
          "description": "Metadata dict.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the aggregate.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "purge_hosts": {
          "aliases": [],
          "description": "Whether hosts not in I(hosts) should be removed from the aggregate",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Manage OpenStack host aggregates"
    },
    "examples": "\n# Create a host aggregate\n- openstack.cloud.host_aggregate:\n    cloud: mycloud\n    state: present\n    name: db_aggregate\n    hosts:\n      - host1\n      - host2\n    metadata:\n      type: dbcluster\n\n# Add an additional host to the aggregate\n- openstack.cloud.host_aggregate:\n    cloud: mycloud\n    state: present\n    name: db_aggregate\n    hosts:\n      - host3\n    purge_hosts: false\n    metadata:\n      type: dbcluster\n\n# Delete an aggregate\n- openstack.cloud.host_aggregate:\n    cloud: mycloud\n    state: absent\n    name: db_aggregate\n"
  },
  "openstack.cloud.os_object": {
    "doc": {
      "description": "Create or Delete objects and containers from OpenStack",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "container": {
          "aliases": [],
          "description": "The name of the container in which to create the object",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "container_access": {
          "aliases": [],
          "description": "desired container access level.",
          "default": "private",
          "type": "str",
          "required": false,
          "choices": [
            "private",
            "public"
          ],
          "suboptions": {}
        },
        "filename": {
          "aliases": [],
          "description": "Path to local file to be uploaded.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name to be give to the object. If omitted, operations will be on the entire container",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Create or Delete objects and containers from OpenStack"
    },
    "examples": "\n- name: \"Create a object named 'fstab' in the 'config' container\"\n  openstack.cloud.object:\n    cloud: mordred\n    state: present\n    name: fstab\n    container: config\n    filename: /etc/fstab\n\n- name: Delete a container called config and all of its contents\n  openstack.cloud.object:\n    cloud: rax-iad\n    state: absent\n    container: config\n"
  },
  "openstack.cloud.os_pool": {
    "doc": {
      "description": "Add or Remove a pool from the OpenStack load-balancer service.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "lb_algorithm": {
          "aliases": [],
          "description": "The load balancing algorithm for the pool.",
          "default": "ROUND_ROBIN",
          "type": "str",
          "required": false,
          "choices": [
            "LEAST_CONNECTIONS",
            "ROUND_ROBIN",
            "SOURCE_IP"
          ],
          "suboptions": {}
        },
        "listener": {
          "aliases": [],
          "description": "The name or id of the listener that this pool belongs to. Either loadbalancer or listener must be specified for pool creation.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "loadbalancer": {
          "aliases": [],
          "description": "The name or id of the load balancer that this pool belongs to. Either loadbalancer or listener must be specified for pool creation.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name that has to be given to the pool",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "The protocol for the pool.",
          "default": "HTTP",
          "type": "str",
          "required": false,
          "choices": [
            "HTTP",
            "HTTPS",
            "PROXY",
            "TCP",
            "UDP"
          ],
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The amount of time the module should wait for the pool to get into ACTIVE state.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "If the module should wait for the pool to be ACTIVE.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Add/Delete a pool in the load balancing service from OpenStack Cloud"
    },
    "examples": "\n# Create a pool, wait for the pool to be active.\n- openstack.cloud.lb_pool:\n    cloud: mycloud\n    endpoint_type: admin\n    state: present\n    name: test-pool\n    loadbalancer: test-loadbalancer\n    protocol: HTTP\n    lb_algorithm: ROUND_ROBIN\n\n# Delete a pool\n- openstack.cloud.lb_pool:\n    cloud: mycloud\n    endpoint_type: admin\n    state: absent\n    name: test-pool\n"
  },
  "openstack.cloud.os_port": {
    "doc": {
      "description": "Add, Update or Remove ports from an OpenStack cloud. A I(state) of 'present' will ensure the port is created or updated if required.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "admin_state_up": {
          "aliases": [],
          "description": "Sets admin state.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "allowed_address_pairs": {
          "aliases": [],
          "description": "Allowed address pairs list.  Allowed address pairs are supported with dictionary structure. e.g.  allowed_address_pairs: - ip_address: 10.1.0.12 mac_address: ab:cd:ef:12:34:56 - ip_address: ...",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "ip_address": {
              "aliases": [],
              "description": "The IP address.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "mac_address": {
              "aliases": [],
              "description": "The MAC address.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "binding_profile": {
          "aliases": [],
          "description": "Binding profile dict that the port should be created with.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "device_id": {
          "aliases": [],
          "description": "Device ID of device using this port.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "device_owner": {
          "aliases": [],
          "description": "The ID of the entity that uses this port.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dns_domain": {
          "aliases": [],
          "description": "The dns domain of the port ( only with dns-integration enabled )",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dns_name": {
          "aliases": [],
          "description": "The dns name of the port ( only with dns-integration enabled )",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "extra_dhcp_opts": {
          "aliases": [],
          "description": "Extra dhcp options to be assigned to this port. Extra options are supported with dictionary structure. Note that options cannot be removed only updated. e.g.  extra_dhcp_opts: - opt_name: opt name1 opt_value: value1 ip_version: 4 - opt_name: ...",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "ip_version": {
              "aliases": [],
              "description": "The IP version this DHCP option is for.",
              "type": "int",
              "required": true,
              "suboptions": {}
            },
            "opt_name": {
              "aliases": [],
              "description": "The name of the DHCP option to set.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "opt_value": {
              "aliases": [],
              "description": "The value of the DHCP option to set.",
              "type": "str",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "fixed_ips": {
          "aliases": [],
          "description": "Desired IP and/or subnet for this port.  Subnet is referenced by subnet_id and IP is referenced by ip_address.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "ip_address": {
              "aliases": [],
              "description": "The fixed IP address to attempt to allocate.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "subnet_id": {
              "aliases": [],
              "description": "The subnet to attach the IP address to.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "mac_address": {
          "aliases": [],
          "description": "MAC address of this port.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name that has to be given to the port.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "network": {
          "aliases": [],
          "description": "Network ID or name this port belongs to.\nRequired when creating a new port.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "no_security_groups": {
          "aliases": [],
          "description": "Do not associate a security group with this port.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "port_security_enabled": {
          "aliases": [],
          "description": "Whether to enable or disable the port security on the network.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "security_groups": {
          "aliases": [],
          "description": "Security group(s) ID(s) or name(s) associated with the port (comma separated string or YAML list)",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vnic_type": {
          "aliases": [],
          "description": "The type of the port that should be created",
          "type": "str",
          "required": false,
          "choices": [
            "normal",
            "direct",
            "direct-physical",
            "macvtap",
            "baremetal",
            "virtio-forwarder"
          ],
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Add/Update/Delete ports from an OpenStack cloud."
    },
    "examples": "\n# Create a port\n- openstack.cloud.port:\n    state: present\n    auth:\n      auth_url: https://identity.example.com\n      username: admin\n      password: admin\n      project_name: admin\n    name: port1\n    network: foo\n\n# Create a port with a static IP\n- openstack.cloud.port:\n    state: present\n    auth:\n      auth_url: https://identity.example.com\n      username: admin\n      password: admin\n      project_name: admin\n    name: port1\n    network: foo\n    fixed_ips:\n      - ip_address: 10.1.0.21\n\n# Create a port with No security groups\n- openstack.cloud.port:\n    state: present\n    auth:\n      auth_url: https://identity.example.com\n      username: admin\n      password: admin\n      project_name: admin\n    name: port1\n    network: foo\n    no_security_groups: True\n\n# Update the existing 'port1' port with multiple security groups (version 1)\n- openstack.cloud.port:\n    state: present\n    auth:\n      auth_url: https://identity.example.com\n      username: admin\n      password: admin\n      project_name: admin\n    name: port1\n    security_groups: 1496e8c7-4918-482a-9172-f4f00fc4a3a5,057d4bdf-6d4d-472...\n\n# Update the existing 'port1' port with multiple security groups (version 2)\n- openstack.cloud.port:\n    state: present\n    auth:\n      auth_url: https://identity.example.com\n      username: admin\n      password: admin\n      project_name: admin\n    name: port1\n    security_groups:\n      - 1496e8c7-4918-482a-9172-f4f00fc4a3a5\n      - 057d4bdf-6d4d-472...\n\n# Create port of type 'direct'\n- openstack.cloud.port:\n    state: present\n    auth:\n      auth_url: https://identity.example.com\n      username: admin\n      password: admin\n      project_name: admin\n    name: port1\n    network: foo\n    vnic_type: direct\n\n# Create a port with binding profile\n- openstack.cloud.port:\n    state: present\n    auth:\n      auth_url: https://identity.example.com\n      username: admin\n      password: admin\n      project_name: admin\n    name: port1\n    network: foo\n    binding_profile:\n      \"pci_slot\": \"0000:03:11.1\"\n      \"physical_network\": \"provider\"\n"
  },
  "openstack.cloud.os_port_info": {
    "doc": {
      "description": "Retrieve information about ports from OpenStack.\nThis module was called C(openstack.cloud.port_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(openstack.cloud.port_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "filters": {
          "aliases": [],
          "description": "A dictionary of meta data to use for further filtering. Elements of this dictionary will be matched against the returned port dictionaries. Matching is currently limited to strings within the port dictionary, or strings within nested dictionaries.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "Unique name or ID of a port.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Retrieve information about ports within OpenStack."
    },
    "examples": "\n# Gather information about all ports\n- openstack.cloud.port_info:\n    cloud: mycloud\n  register: result\n\n- debug:\n    msg: \"{{ result.openstack_ports }}\"\n\n# Gather information about a single port\n- openstack.cloud.port_info:\n    cloud: mycloud\n    port: 6140317d-e676-31e1-8a4a-b1913814a471\n\n# Gather information about all ports that have device_id set to a specific value\n# and with a status of ACTIVE.\n- openstack.cloud.port_info:\n    cloud: mycloud\n    filters:\n      device_id: 1038a010-3a37-4a9d-82ea-652f1da36597\n      status: ACTIVE\n"
  },
  "openstack.cloud.os_project": {
    "doc": {
      "description": "Manage OpenStack Projects. Projects can be created, updated or deleted using this module. A project will be updated if I(name) matches an existing project and I(state) is present. The value for I(name) cannot be updated without deleting and re-creating the project.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description for the project",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain_id": {
          "aliases": [
            "domain"
          ],
          "description": "Domain id to create the project in if the cloud supports domains.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "Is the project enabled",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name for the project",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "properties": {
          "aliases": [],
          "description": "Additional properties to be associated with this project. Requires openstacksdk>0.45.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Manage OpenStack Projects"
    },
    "examples": "\n# Create a project\n- openstack.cloud.project:\n    cloud: mycloud\n    endpoint_type: admin\n    state: present\n    name: demoproject\n    description: demodescription\n    domain_id: demoid\n    enabled: True\n    properties:\n      internal_alias: demo_project\n\n# Delete a project\n- openstack.cloud.project:\n    cloud: mycloud\n    endpoint_type: admin\n    state: absent\n    name: demoproject\n"
  },
  "openstack.cloud.os_project_access": {
    "doc": {
      "description": "Add or remove flavor, volume_type or other resources access from OpenStack.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "resource_name": {
          "aliases": [],
          "description": "The resource name (eg. tiny).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "resource_type": {
          "aliases": [],
          "description": "The resource type (eg. nova_flavor, cinder_volume_type).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "target_project_id": {
          "aliases": [],
          "description": "Project id.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Manage OpenStack compute flavors access"
    },
    "examples": "\n- name: \"Enable access to tiny flavor to your tenant.\"\n  openstack.cloud.project_access:\n    cloud: mycloud\n    state: present\n    target_project_id: f0f1f2f3f4f5f67f8f9e0e1\n    resource_name: tiny\n    resource_type: nova_flavor\n\n\n- name: \"Disable access to the given flavor to project\"\n  openstack.cloud.project_access:\n    cloud: mycloud\n    state: absent\n    target_project_id: f0f1f2f3f4f5f67f8f9e0e1\n    resource_name: tiny\n    resource_type: nova_flavor\n"
  },
  "openstack.cloud.os_project_info": {
    "doc": {
      "description": "Retrieve information about a one or more OpenStack projects\nThis module was called C(openstack.cloud.project_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(openstack.cloud.project_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Name or ID of the domain containing the project if the cloud supports domains",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "filters": {
          "aliases": [],
          "description": "A dictionary of meta data to use for further filtering.  Elements of this dictionary may be additional dictionaries.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name or ID of the project",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Retrieve information about one or more OpenStack projects"
    },
    "examples": "\n# Gather information about previously created projects\n- openstack.cloud.project_info:\n    cloud: awesomecloud\n  register: result\n- debug:\n    msg: \"{{ result.openstack_projects }}\"\n\n# Gather information about a previously created project by name\n- openstack.cloud.project_info:\n    cloud: awesomecloud\n    name: demoproject\n  register: result\n- debug:\n    msg: \"{{ result.openstack_projects }}\"\n\n# Gather information about a previously created project in a specific domain\n- openstack.cloud.project_info:\n    cloud: awesomecloud\n    name: demoproject\n    domain: admindomain\n  register: result\n- debug:\n    msg: \"{{ result.openstack_projects }}\"\n\n# Gather information about a previously created project in a specific domain with filter\n- openstack.cloud.project_info:\n    cloud: awesomecloud\n    name: demoproject\n    domain: admindomain\n    filters:\n      enabled: False\n  register: result\n- debug:\n    msg: \"{{ result.openstack_projects }}\"\n"
  },
  "openstack.cloud.os_quota": {
    "doc": {
      "description": "Manage OpenStack Quotas. Quotas can be created, updated or deleted using this module. A quota will be updated if matches an existing project and is present.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "backup_gigabytes": {
          "aliases": [],
          "description": "Maximum size of backups in GB's.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "backups": {
          "aliases": [],
          "description": "Maximum number of backups allowed.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "cores": {
          "aliases": [],
          "description": "Maximum number of CPU's per project.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "fixed_ips": {
          "aliases": [],
          "description": "Number of fixed IP's to allow.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "floating_ips": {
          "aliases": [
            "compute_floating_ips"
          ],
          "description": "Number of floating IP's to allow in Compute.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "floatingip": {
          "aliases": [
            "network_floating_ips"
          ],
          "description": "Number of floating IP's to allow in Network.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "gigabytes": {
          "aliases": [],
          "description": "Maximum volume storage allowed for project.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "gigabytes_types": {
          "aliases": [],
          "description": "Per driver volume storage quotas.  Keys should be prefixed with C(gigabytes_) values should be ints.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "injected_file_size": {
          "aliases": [],
          "description": "Maximum file size in bytes.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "injected_files": {
          "aliases": [],
          "description": "Number of injected files to allow.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "injected_path_size": {
          "aliases": [],
          "description": "Maximum path size.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "instances": {
          "aliases": [],
          "description": "Maximum number of instances allowed.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "key_pairs": {
          "aliases": [],
          "description": "Number of key pairs to allow.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "loadbalancer": {
          "aliases": [],
          "description": "Number of load balancers to allow.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "metadata_items": {
          "aliases": [],
          "description": "Number of metadata items allowed per instance.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the OpenStack Project to manage.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "network": {
          "aliases": [],
          "description": "Number of networks to allow.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "per_volume_gigabytes": {
          "aliases": [],
          "description": "Maximum size in GB's of individual volumes.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "pool": {
          "aliases": [],
          "description": "Number of load balancer pools to allow.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "Number of Network ports to allow, this needs to be greater than the instances limit.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Unused, kept for compatability",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "properties": {
          "aliases": [],
          "description": "Number of properties to allow.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ram": {
          "aliases": [],
          "description": "Maximum amount of ram in MB to allow.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "rbac_policy": {
          "aliases": [],
          "description": "Number of policies to allow.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "router": {
          "aliases": [],
          "description": "Number of routers to allow.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "security_group": {
          "aliases": [],
          "description": "Number of security groups to allow.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "security_group_rule": {
          "aliases": [],
          "description": "Number of rules per security group to allow.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "server_group_members": {
          "aliases": [],
          "description": "Number of server group members to allow.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "server_groups": {
          "aliases": [],
          "description": "Number of server groups to allow.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "snapshots": {
          "aliases": [],
          "description": "Number of snapshots to allow.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "snapshots_types": {
          "aliases": [],
          "description": "Per-driver volume snapshot quotas.  Keys should be prefixed with C(snapshots_) values should be ints.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "A value of present sets the quota and a value of absent resets the quota to system defaults.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "subnet": {
          "aliases": [],
          "description": "Number of subnets to allow.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "subnetpool": {
          "aliases": [],
          "description": "Number of subnet pools to allow.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "volumes": {
          "aliases": [],
          "description": "Number of volumes to allow.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "volumes_types": {
          "aliases": [],
          "description": "Per-driver volume count quotas.  Keys should be prefixed with C(gigabytes_) values should be ints.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "keystoneauth1 >= 3.4.0",
        "openstacksdk >= 0.12.0",
        "openstacksdk >= 0.13.0",
        "python >= 3.6"
      ],
      "short_description": "Manage OpenStack Quotas"
    },
    "examples": "\n# List a Project Quota\n- openstack.cloud.quota:\n    cloud: mycloud\n    name: demoproject\n\n# Set a Project back to the defaults\n- openstack.cloud.quota:\n    cloud: mycloud\n    name: demoproject\n    state: absent\n\n# Update a Project Quota for cores\n- openstack.cloud.quota:\n    cloud: mycloud\n    name: demoproject\n    cores: 100\n\n# Update a Project Quota\n- openstack.cloud.quota:\n    name: demoproject\n    cores: 1000\n    volumes: 20\n    volumes_type:\n      - volume_lvm: 10\n\n# Complete example based on list of projects\n- name: Update quotas\n  openstack.cloud.quota:\n    name: \"{{ item.name }}\"\n    backup_gigabytes: \"{{ item.backup_gigabytes }}\"\n    backups: \"{{ item.backups }}\"\n    cores: \"{{ item.cores }}\"\n    fixed_ips: \"{{ item.fixed_ips }}\"\n    floating_ips: \"{{ item.floating_ips }}\"\n    floatingip: \"{{ item.floatingip }}\"\n    gigabytes: \"{{ item.gigabytes }}\"\n    injected_file_size: \"{{ item.injected_file_size }}\"\n    injected_files: \"{{ item.injected_files }}\"\n    injected_path_size: \"{{ item.injected_path_size }}\"\n    instances: \"{{ item.instances }}\"\n    key_pairs: \"{{ item.key_pairs }}\"\n    loadbalancer: \"{{ item.loadbalancer }}\"\n    metadata_items: \"{{ item.metadata_items }}\"\n    per_volume_gigabytes: \"{{ item.per_volume_gigabytes }}\"\n    pool: \"{{ item.pool }}\"\n    port: \"{{ item.port }}\"\n    properties: \"{{ item.properties }}\"\n    ram: \"{{ item.ram }}\"\n    security_group_rule: \"{{ item.security_group_rule }}\"\n    security_group: \"{{ item.security_group }}\"\n    server_group_members: \"{{ item.server_group_members }}\"\n    server_groups: \"{{ item.server_groups }}\"\n    snapshots: \"{{ item.snapshots }}\"\n    volumes: \"{{ item.volumes }}\"\n    volumes_types:\n      volumes_lvm: \"{{ item.volumes_lvm }}\"\n    snapshots_types:\n      snapshots_lvm: \"{{ item.snapshots_lvm }}\"\n    gigabytes_types:\n      gigabytes_lvm: \"{{ item.gigabytes_lvm }}\"\n  with_items:\n    - \"{{ projects }}\"\n  when: item.state == \"present\"\n"
  },
  "openstack.cloud.os_recordset": {
    "doc": {
      "description": "Manage OpenStack DNS recordsets. Recordsets can be created, deleted or updated. Only the I(records), I(description), and I(ttl) values can be updated.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the recordset",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the recordset. It must be ended with name of dns zone.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "records": {
          "aliases": [],
          "description": "List of recordset definitions.\nRequired when I(state=present).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "recordset_type": {
          "aliases": [],
          "description": "Recordset type\nRequired when I(state=present).",
          "type": "str",
          "required": false,
          "choices": [
            "a",
            "aaaa",
            "mx",
            "cname",
            "txt",
            "ns",
            "srv",
            "ptr",
            "caa"
          ],
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ttl": {
          "aliases": [],
          "description": "TTL (Time To Live) value in seconds",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "zone": {
          "aliases": [],
          "description": "Zone managing the recordset",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Manage OpenStack DNS recordsets"
    },
    "examples": "\n# Create a recordset named \"www.example.net.\"\n- openstack.cloud.recordset:\n    cloud: mycloud\n    state: present\n    zone: example.net.\n    name: www.example.net.\n    recordset_type: \"a\"\n    records: ['10.1.1.1']\n    description: test recordset\n    ttl: 3600\n\n# Update the TTL on existing \"www.example.net.\" recordset\n- openstack.cloud.recordset:\n    cloud: mycloud\n    state: present\n    zone: example.net.\n    name: www.example.net.\n    recordset_type: \"a\"\n    records: ['10.1.1.1']\n    ttl: 7200\n\n# Delete recordset named \"www.example.net.\"\n- openstack.cloud.recordset:\n    cloud: mycloud\n    state: absent\n    zone: example.net.\n    name: www.example.net.\n"
  },
  "openstack.cloud.os_router": {
    "doc": {
      "description": "Create or Delete routers from OpenStack. Although Neutron allows routers to share the same name, this module enforces name uniqueness to be more user friendly.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "admin_state_up": {
          "aliases": [],
          "description": "Desired admin state of the created or existing router.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "enable_snat": {
          "aliases": [],
          "description": "Enable Source NAT (SNAT) attribute.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "external_fixed_ips": {
          "aliases": [],
          "description": "The IP address parameters for the external gateway network. Each is a dictionary with the subnet name or ID (subnet) and the IP address to assign on the subnet (ip). If no IP is specified, one is automatically assigned from that subnet.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "ip": {
              "aliases": [],
              "description": "The fixed IP address to attempt to allocate.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "subnet": {
              "aliases": [],
              "description": "The subnet to attach the IP address to.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "interfaces": {
          "aliases": [],
          "description": "List of subnets to attach to the router internal interface. Default gateway associated with the subnet will be automatically attached with the router's internal interface. In order to provide an ip address different from the default gateway,parameters are passed as dictionary with keys as network name or ID (I(net)), subnet name or ID (I(subnet)) and the IP of port (I(portip)) from the network. User defined portip is often required when a multiple router need to be connected to a single subnet for which the default gateway has been already used.",
          "type": "list",
          "required": false,
          "elements": "raw",
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name to be give to the router",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "network": {
          "aliases": [],
          "description": "Unique name or ID of the external gateway network.\nrequired I(interfaces) or I(enable_snat) are provided.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Unique name or ID of the project.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the resource",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Create or delete routers from OpenStack"
    },
    "examples": "\n# Create a simple router, not attached to a gateway or subnets.\n- openstack.cloud.router:\n    cloud: mycloud\n    state: present\n    name: simple_router\n\n# Create a simple router, not attached to a gateway or subnets for a given project.\n- openstack.cloud.router:\n    cloud: mycloud\n    state: present\n    name: simple_router\n    project: myproj\n\n# Creates a router attached to ext_network1 on an IPv4 subnet and one\n# internal subnet interface.\n- openstack.cloud.router:\n    cloud: mycloud\n    state: present\n    name: router1\n    network: ext_network1\n    external_fixed_ips:\n      - subnet: public-subnet\n        ip: 172.24.4.2\n    interfaces:\n      - private-subnet\n\n# Create another router with two internal subnet interfaces.One with user defined port\n# ip and another with default gateway.\n- openstack.cloud.router:\n    cloud: mycloud\n    state: present\n    name: router2\n    network: ext_network1\n    interfaces:\n      - net: private-net\n        subnet: private-subnet\n        portip: 10.1.1.10\n      - project-subnet\n\n# Create another router with two internal subnet interface.One with user defined port\n# ip and and another with default gateway.\n- openstack.cloud.router:\n    cloud: mycloud\n    state: present\n    name: router2\n    network: ext_network1\n    interfaces:\n      - net: private-net\n        subnet: private-subnet\n        portip: 10.1.1.10\n      - project-subnet\n\n# Create another router with two internal subnet interface. one with  user defined port\n# ip and and another  with default gateway.\n- openstack.cloud.router:\n    cloud: mycloud\n    state: present\n    name: router2\n    network: ext_network1\n    interfaces:\n      - net: private-net\n        subnet: private-subnet\n        portip: 10.1.1.10\n      - project-subnet\n\n# Update existing router1 external gateway to include the IPv6 subnet.\n# Note that since 'interfaces' is not provided, any existing internal\n# interfaces on an existing router will be left intact.\n- openstack.cloud.router:\n    cloud: mycloud\n    state: present\n    name: router1\n    network: ext_network1\n    external_fixed_ips:\n      - subnet: public-subnet\n        ip: 172.24.4.2\n      - subnet: ipv6-public-subnet\n        ip: 2001:db8::3\n\n# Delete router1\n- openstack.cloud.router:\n    cloud: mycloud\n    state: absent\n    name: router1\n"
  },
  "openstack.cloud.os_routers_info": {
    "doc": {
      "description": "Retrieve information about one or more routers from OpenStack.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "filters": {
          "aliases": [],
          "description": "A dictionary of meta data to use for further filtering.  Elements of this dictionary may be additional dictionaries.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "admin_state_up": {
              "aliases": [],
              "description": "Filter the list result by the administrative state of the resource, which is up (true) or down (false).",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "description": {
              "aliases": [],
              "description": "Filter the list result by the human-readable description of the resource.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Filter the list result by the human-readable name of the resource.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "project_id": {
              "aliases": [
                "tenant_id"
              ],
              "description": "Filter the list result by the ID of the project that owns the resource.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "revision_number": {
              "aliases": [],
              "description": "Filter the list result by the revision number of the resource.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "tags": {
              "aliases": [],
              "description": "A list of tags to filter the list result by. Resources that match all tags in this list will be returned.",
              "type": "list",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name or ID of the router",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Retrieve information about one or more OpenStack routers."
    },
    "examples": "\n- name: Gather information about routers\n  openstack.cloud.routers_info:\n    auth:\n      auth_url: https://identity.example.com\n      username: user\n      password: password\n      project_name: someproject\n  register: result\n\n- name: Show openstack routers\n  debug:\n    msg: \"{{ result.openstack_routers }}\"\n\n- name: Gather information about a router by name\n  openstack.cloud.routers_info:\n    auth:\n      auth_url: https://identity.example.com\n      username: user\n      password: password\n      project_name: someproject\n    name: router1\n  register: result\n\n- name: Show openstack routers\n  debug:\n    msg: \"{{ result.openstack_routers }}\"\n\n- name: Gather information about a router with filter\n  openstack.cloud.routers_info:\n    auth:\n      auth_url: https://identity.example.com\n      username: user\n      password: password\n      project_name: someproject\n    filters:\n      tenant_id: bc3ea709c96849d6b81f54640400a19f\n  register: result\n\n- name: Show openstack routers\n  debug:\n    msg: \"{{ result.openstack_routers }}\"\n"
  },
  "openstack.cloud.os_security_group": {
    "doc": {
      "description": "Add or Remove security groups from an OpenStack cloud.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Long description of the purpose of the security group",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name that has to be given to the security group. This module requires that security group names be unique.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Unique name or ID of the project.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Add/Delete security groups from an OpenStack cloud."
    },
    "examples": "\n# Create a security group\n- openstack.cloud.security_group:\n    cloud: mordred\n    state: present\n    name: foo\n    description: security group for foo servers\n\n# Update the existing 'foo' security group description\n- openstack.cloud.security_group:\n    cloud: mordred\n    state: present\n    name: foo\n    description: updated description for the foo security group\n\n# Create a security group for a given project\n- openstack.cloud.security_group:\n    cloud: mordred\n    state: present\n    name: foo\n    project: myproj\n"
  },
  "openstack.cloud.os_security_group_rule": {
    "doc": {
      "description": "Add or Remove rule from an existing security group",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "direction": {
          "aliases": [],
          "description": "The direction in which the security group rule is applied. Not all providers support egress.",
          "default": "ingress",
          "type": "str",
          "required": false,
          "choices": [
            "egress",
            "ingress"
          ],
          "suboptions": {}
        },
        "ethertype": {
          "aliases": [],
          "description": "Must be IPv4 or IPv6, and addresses represented in CIDR must match the ingress or egress rules. Not all providers support IPv6.",
          "default": "IPv4",
          "type": "str",
          "required": false,
          "choices": [
            "IPv4",
            "IPv6"
          ],
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "port_range_max": {
          "aliases": [],
          "description": "Ending port",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "port_range_min": {
          "aliases": [],
          "description": "Starting port",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Unique name or ID of the project.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "IP protocols ANY TCP UDP ICMP and others, also number in range 0-255",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "remote_group": {
          "aliases": [],
          "description": "Name or ID of the Security group to link (exclusive with remote_ip_prefix)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "remote_ip_prefix": {
          "aliases": [],
          "description": "Source IP address(es) in CIDR notation (exclusive with remote_group)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "security_group": {
          "aliases": [],
          "description": "Name or ID of the security group",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Add/Delete rule from an existing security group"
    },
    "examples": "\n# Create a security group rule\n- openstack.cloud.security_group_rule:\n    cloud: mordred\n    security_group: foo\n    protocol: tcp\n    port_range_min: 80\n    port_range_max: 80\n    remote_ip_prefix: 0.0.0.0/0\n\n# Create a security group rule for ping\n- openstack.cloud.security_group_rule:\n    cloud: mordred\n    security_group: foo\n    protocol: icmp\n    remote_ip_prefix: 0.0.0.0/0\n\n# Another way to create the ping rule\n- openstack.cloud.security_group_rule:\n    cloud: mordred\n    security_group: foo\n    protocol: icmp\n    port_range_min: -1\n    port_range_max: -1\n    remote_ip_prefix: 0.0.0.0/0\n\n# Create a TCP rule covering all ports\n- openstack.cloud.security_group_rule:\n    cloud: mordred\n    security_group: foo\n    protocol: tcp\n    port_range_min: 1\n    port_range_max: 65535\n    remote_ip_prefix: 0.0.0.0/0\n\n# Another way to create the TCP rule above (defaults to all ports)\n- openstack.cloud.security_group_rule:\n    cloud: mordred\n    security_group: foo\n    protocol: tcp\n    remote_ip_prefix: 0.0.0.0/0\n\n# Create a rule for VRRP with numbered protocol 112\n- openstack.cloud.security_group_rule:\n    security_group: loadbalancer_sg\n    protocol: 112\n    remote_group: loadbalancer-node_sg\n\n# Create a security group rule for a given project\n- openstack.cloud.security_group_rule:\n    cloud: mordred\n    security_group: foo\n    protocol: icmp\n    remote_ip_prefix: 0.0.0.0/0\n    project: myproj\n\n# Remove the default created egress rule for IPv4\n- openstack.cloud.security_group_rule:\n   cloud: mordred\n   security_group: foo\n   protocol: any\n   remote_ip_prefix: 0.0.0.0/0\n"
  },
  "openstack.cloud.os_server": {
    "doc": {
      "description": "Create or Remove compute instances from OpenStack.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auto_ip": {
          "aliases": [
            "auto_floating_ip",
            "public_ip"
          ],
          "description": "Ensure instance has public ip however the cloud wants to do that",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Availability zone in which to create the server.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "boot_from_volume": {
          "aliases": [],
          "description": "Should the instance boot from a persistent volume created based on the image given. Mutually exclusive with boot_volume.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "boot_volume": {
          "aliases": [
            "root_volume"
          ],
          "description": "Volume name or id to use as the volume to boot from. Implies boot_from_volume. Mutually exclusive with image and boot_from_volume.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "config_drive": {
          "aliases": [],
          "description": "Whether to boot the server with config drive enabled",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "delete_fip": {
          "aliases": [],
          "description": "When I(state) is absent and this option is true, any floating IP associated with the instance will be deleted along with the instance.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the server.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "flavor": {
          "aliases": [],
          "description": "The name or id of the flavor in which the new instance has to be created.\nExactly one of I(flavor) and I(flavor_ram) must be defined when I(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "flavor_include": {
          "aliases": [],
          "description": "Text to use to filter flavor names, for the case, such as Rackspace, where there are multiple flavors that have the same ram count. flavor_include is a positive match filter - it must exist in the flavor name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "flavor_ram": {
          "aliases": [],
          "description": "The minimum amount of ram in MB that the flavor in which the new instance has to be created must have.\nExactly one of I(flavor) and I(flavor_ram) must be defined when I(state=present).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "floating_ip_pools": {
          "aliases": [],
          "description": "Name of floating IP pool from which to choose a floating IP",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "floating_ips": {
          "aliases": [],
          "description": "list of valid floating IPs that pre-exist to assign to this node",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "image": {
          "aliases": [],
          "description": "The name or id of the base image to boot.\nRequired when I(boot_from_volume=true)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "image_exclude": {
          "aliases": [],
          "description": "Text to use to filter image names, for the case, such as HP, where there are multiple image names matching the common identifying portions. image_exclude is a negative match filter - it is text that may not exist in the image name.",
          "default": "(deprecated)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "key_name": {
          "aliases": [],
          "description": "The key pair name to be used when creating a instance",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "meta": {
          "aliases": [],
          "description": "A list of key value pairs that should be provided as a metadata to the new instance or a string containing a list of key-value pairs. Eg:  meta: \"key1=value1,key2=value2\"",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name that has to be given to the instance. It is also possible to specify the ID of the instance instead of its name if I(state) is I(absent).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "network": {
          "aliases": [],
          "description": "Name or ID of a network to attach this instance to. A simpler version of the nics parameter, only one of network or nics should be supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "nics": {
          "aliases": [],
          "description": "A list of networks to which the instance's interface should be attached. Networks may be referenced by net-id/net-name/port-id or port-name.\nAlso this accepts a string containing a list of (net/port)-(id/name) Eg: nics: \"net-id=uuid-1,port-name=myport\" Only one of network or nics should be supplied.",
          "type": "list",
          "required": false,
          "elements": "raw",
          "suboptions": {
            "tag": {
              "aliases": [],
              "description": "A \"tag\" for the specific port to be passed via metadata. Eg: tag: test_tag",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "reuse_ips": {
          "aliases": [],
          "description": "When I(auto_ip) is true and this option is true, the I(auto_ip) code will attempt to re-use unassigned floating ips in the project before creating a new one. It is important to note that it is impossible to safely do this concurrently, so if your use case involves concurrent server creation, it is highly recommended to set this to false and to delete the floating ip associated with a server when the server is deleted using I(delete_fip).",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "scheduler_hints": {
          "aliases": [],
          "description": "Arbitrary key/value pairs to the scheduler for custom use",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "security_groups": {
          "aliases": [],
          "description": "Names of the security groups to which the instance should be added. This may be a YAML list or a comma separated string.",
          "default": "['default']",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "terminate_volume": {
          "aliases": [],
          "description": "If C(yes), delete volume when deleting instance (if booted from volume)",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The amount of time the module should wait for the instance to get into active state.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "userdata": {
          "aliases": [
            "user_data"
          ],
          "description": "Opaque blob of data which is made available to the instance",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "volume_size": {
          "aliases": [],
          "description": "The size of the volume to create in GB if booting from volume based on an image.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "volumes": {
          "aliases": [],
          "description": "A list of preexisting volumes names or ids to attach to the instance",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "If the module should wait for the instance to be created.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Create/Delete Compute Instances from OpenStack"
    },
    "examples": "\n- name: Create a new instance and attaches to a network and passes metadata to the instance\n  openstack.cloud.server:\n       state: present\n       auth:\n         auth_url: https://identity.example.com\n         username: admin\n         password: admin\n         project_name: admin\n       name: vm1\n       image: 4f905f38-e52a-43d2-b6ec-754a13ffb529\n       key_name: ansible_key\n       timeout: 200\n       flavor: 4\n       nics:\n         - net-id: 34605f38-e52a-25d2-b6ec-754a13ffb723\n         - net-name: another_network\n       meta:\n         hostname: test1\n         group: uge_master\n\n# Create a new instance in HP Cloud AE1 region availability zone az2 and\n# automatically assigns a floating IP\n- name: launch a compute instance\n  hosts: localhost\n  tasks:\n    - name: launch an instance\n      openstack.cloud.server:\n        state: present\n        auth:\n          auth_url: https://identity.example.com\n          username: username\n          password: Equality7-2521\n          project_name: username-project1\n        name: vm1\n        region_name: region-b.geo-1\n        availability_zone: az2\n        image: 9302692b-b787-4b52-a3a6-daebb79cb498\n        key_name: test\n        timeout: 200\n        flavor: 101\n        security_groups: default\n        auto_ip: yes\n\n# Create a new instance in named cloud mordred availability zone az2\n# and assigns a pre-known floating IP\n- name: launch a compute instance\n  hosts: localhost\n  tasks:\n    - name: launch an instance\n      openstack.cloud.server:\n        state: present\n        cloud: mordred\n        name: vm1\n        availability_zone: az2\n        image: 9302692b-b787-4b52-a3a6-daebb79cb498\n        key_name: test\n        timeout: 200\n        flavor: 101\n        floating_ips:\n          - 12.34.56.79\n\n# Create a new instance with 4G of RAM on Ubuntu Trusty, ignoring\n# deprecated images\n- name: launch a compute instance\n  hosts: localhost\n  tasks:\n    - name: launch an instance\n      openstack.cloud.server:\n        name: vm1\n        state: present\n        cloud: mordred\n        region_name: region-b.geo-1\n        image: Ubuntu Server 14.04\n        image_exclude: deprecated\n        flavor_ram: 4096\n\n# Create a new instance with 4G of RAM on Ubuntu Trusty on a Performance node\n- name: launch a compute instance\n  hosts: localhost\n  tasks:\n    - name: launch an instance\n      openstack.cloud.server:\n        name: vm1\n        cloud: rax-dfw\n        state: present\n        image: Ubuntu 14.04 LTS (Trusty Tahr) (PVHVM)\n        flavor_ram: 4096\n        flavor_include: Performance\n\n# Creates a new instance and attaches to multiple network\n- name: launch a compute instance\n  hosts: localhost\n  tasks:\n    - name: launch an instance with a string\n      openstack.cloud.server:\n        auth:\n           auth_url: https://identity.example.com\n           username: admin\n           password: admin\n           project_name: admin\n        name: vm1\n        image: 4f905f38-e52a-43d2-b6ec-754a13ffb529\n        key_name: ansible_key\n        timeout: 200\n        flavor: 4\n        nics: \"net-id=4cb08b20-62fe-11e5-9d70-feff819cdc9f,net-id=542f0430-62fe-11e5-9d70-feff819cdc9f...\"\n\n- name: Creates a new instance and attaches to a network and passes metadata to the instance\n  openstack.cloud.server:\n       state: present\n       auth:\n         auth_url: https://identity.example.com\n         username: admin\n         password: admin\n         project_name: admin\n       name: vm1\n       image: 4f905f38-e52a-43d2-b6ec-754a13ffb529\n       key_name: ansible_key\n       timeout: 200\n       flavor: 4\n       nics:\n         - net-id: 34605f38-e52a-25d2-b6ec-754a13ffb723\n         - net-name: another_network\n       meta: \"hostname=test1,group=uge_master\"\n\n- name:  Creates a new instance and attaches to a specific network\n  openstack.cloud.server:\n    state: present\n    auth:\n      auth_url: https://identity.example.com\n      username: admin\n      password: admin\n      project_name: admin\n    name: vm1\n    image: 4f905f38-e52a-43d2-b6ec-754a13ffb529\n    key_name: ansible_key\n    timeout: 200\n    flavor: 4\n    network: another_network\n\n# Create a new instance with 4G of RAM on a 75G Ubuntu Trusty volume\n- name: launch a compute instance\n  hosts: localhost\n  tasks:\n    - name: launch an instance\n      openstack.cloud.server:\n        name: vm1\n        state: present\n        cloud: mordred\n        region_name: ams01\n        image: Ubuntu Server 14.04\n        flavor_ram: 4096\n        boot_from_volume: True\n        volume_size: 75\n\n# Creates a new instance with 2 volumes attached\n- name: launch a compute instance\n  hosts: localhost\n  tasks:\n    - name: launch an instance\n      openstack.cloud.server:\n        name: vm1\n        state: present\n        cloud: mordred\n        region_name: ams01\n        image: Ubuntu Server 14.04\n        flavor_ram: 4096\n        volumes:\n        - photos\n        - music\n\n# Creates a new instance with provisioning userdata using Cloud-Init\n- name: launch a compute instance\n  hosts: localhost\n  tasks:\n    - name: launch an instance\n      openstack.cloud.server:\n        name: vm1\n        state: present\n        image: \"Ubuntu Server 14.04\"\n        flavor: \"P-1\"\n        network: \"Production\"\n        userdata: |\n          #cloud-config\n          chpasswd:\n            list: |\n              ubuntu:{{ default_password }}\n            expire: False\n          packages:\n            - ansible\n          package_upgrade: true\n\n# Creates a new instance with provisioning userdata using Bash Scripts\n- name: launch a compute instance\n  hosts: localhost\n  tasks:\n    - name: launch an instance\n      openstack.cloud.server:\n        name: vm1\n        state: present\n        image: \"Ubuntu Server 14.04\"\n        flavor: \"P-1\"\n        network: \"Production\"\n        userdata: |\n          {%- raw -%}#!/bin/bash\n          echo \"  up ip route add 10.0.0.0/8 via {% endraw -%}{{ intra_router }}{%- raw -%}\" >> /etc/network/interfaces.d/eth0.conf\n          echo \"  down ip route del 10.0.0.0/8\" >> /etc/network/interfaces.d/eth0.conf\n          ifdown eth0 && ifup eth0\n          {% endraw %}\n\n# Create a new instance with server group for (anti-)affinity\n# server group ID is returned from openstack.cloud.server_group module.\n- name: launch a compute instance\n  hosts: localhost\n  tasks:\n    - name: launch an instance\n      openstack.cloud.server:\n        state: present\n        name: vm1\n        image: 4f905f38-e52a-43d2-b6ec-754a13ffb529\n        flavor: 4\n        scheduler_hints:\n          group: f5c8c61a-9230-400a-8ed2-3b023c190a7f\n\n# Create an instance with \"tags\" for the nic\n- name: Create instance with nics \"tags\"\n  openstack.cloud.server:\n    state: present\n    auth:\n        auth_url: https://identity.example.com\n        username: admin\n        password: admin\n        project_name: admin\n    name: vm1\n    image: 4f905f38-e52a-43d2-b6ec-754a13ffb529\n    key_name: ansible_key\n    flavor: 4\n    nics:\n      - port-name: net1_port1\n        tag: test_tag\n      - net-name: another_network\n\n# Deletes an instance via its ID\n- name: remove an instance\n  hosts: localhost\n  tasks:\n    - name: remove an instance\n      openstack.cloud.server:\n        name: abcdef01-2345-6789-0abc-def0123456789\n        state: absent\n\n"
  },
  "openstack.cloud.os_server_action": {
    "doc": {
      "description": "Perform server actions on an existing compute instance from OpenStack. This module does not return any data other than changed true/false. When I(action) is 'rebuild', then I(image) parameter is required.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "action": {
          "aliases": [],
          "description": "Perform the given action. The lock and unlock actions always return changed as the servers API does not provide lock status.",
          "type": "str",
          "required": true,
          "choices": [
            "stop",
            "start",
            "pause",
            "unpause",
            "lock",
            "unlock",
            "suspend",
            "resume",
            "rebuild",
            "shelve",
            "shelve_offload",
            "unshelve"
          ],
          "suboptions": {}
        },
        "admin_password": {
          "aliases": [],
          "description": "Admin password for server to rebuild",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "image": {
          "aliases": [],
          "description": "Image the server should be rebuilt with",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "server": {
          "aliases": [],
          "description": "Name or ID of the instance",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The amount of time the module should wait for the instance to perform the requested action.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "If the module should wait for the instance action to be performed.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Perform actions on Compute Instances from OpenStack"
    },
    "examples": "\n# Pauses a compute instance\n- openstack.cloud.server_action:\n      action: pause\n      auth:\n        auth_url: https://identity.example.com\n        username: admin\n        password: admin\n        project_name: admin\n      server: vm1\n      timeout: 200\n"
  },
  "openstack.cloud.os_server_group": {
    "doc": {
      "description": "Add or remove server groups from OpenStack.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Server group name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "policies": {
          "aliases": [],
          "description": "A list of one or more policy names to associate with the server group. The list must contain at least one policy name. The current valid policy names are anti-affinity, affinity, soft-anti-affinity and soft-affinity.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the resource. When I(state) is 'present', then I(policies) is required.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Manage OpenStack server groups"
    },
    "examples": "\n# Create a server group with 'affinity' policy.\n- openstack.cloud.server_group:\n    state: present\n    auth:\n      auth_url: https://identity.example.com\n      username: admin\n      password: admin\n      project_name: admin\n    name: my_server_group\n    policies:\n      - affinity\n\n# Delete 'my_server_group' server group.\n- openstack.cloud.server_group:\n    state: absent\n    auth:\n      auth_url: https://identity.example.com\n      username: admin\n      password: admin\n      project_name: admin\n    name: my_server_group\n"
  },
  "openstack.cloud.os_server_info": {
    "doc": {
      "description": "Retrieve information about server instances from OpenStack.\nThis module was called C(os_server_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(openstack.cloud.server_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "The result contains a list of servers.\nThe standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "all_projects": {
          "aliases": [],
          "description": "Whether to list servers from all projects or just the current auth scoped project.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "detailed": {
          "aliases": [],
          "description": "when true, return additional detail about servers at the expense of additional API calls.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "filters": {
          "aliases": [],
          "description": "restrict results to servers matching a dictionary of filters",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "server": {
          "aliases": [],
          "description": "restrict results to servers with names or UUID matching this glob expression (e.g., <web*>).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Retrieve information about one or more compute instances"
    },
    "examples": "\n# Gather information about all servers named <web*> that are in an active state:\n- openstack.cloud.server_info:\n    cloud: rax-dfw\n    server: web*\n    filters:\n      vm_state: active\n  register: result\n- debug:\n    msg: \"{{ result.openstack_servers }}\"\n"
  },
  "openstack.cloud.os_server_metadata": {
    "doc": {
      "description": "Add, Update or Remove metadata in compute instances from OpenStack.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Availability zone in which to create the snapshot.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "meta": {
          "aliases": [],
          "description": "A list of key value pairs that should be provided as a metadata to the instance or a string containing a list of key-value pairs. Eg:  meta: \"key1=value1,key2=value2\"",
          "type": "dict",
          "required": true,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "server": {
          "aliases": [
            "name"
          ],
          "description": "Name of the instance to update the metadata",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Add/Update/Delete Metadata in Compute Instances from OpenStack"
    },
    "examples": "\n# Creates or updates hostname=test1 as metadata of the server instance vm1\n- name: add metadata to compute instance\n  hosts: localhost\n  tasks:\n  - name: add metadata to instance\n    openstack.cloud.server_metadata:\n        state: present\n        auth:\n            auth_url: https://openstack-api.example.com:35357/v2.0/\n            username: admin\n            password: admin\n            project_name: admin\n        name: vm1\n        meta:\n            hostname: test1\n            group: group1\n\n# Removes the keys under meta from the instance named vm1\n- name: delete metadata from compute instance\n  hosts: localhost\n  tasks:\n  - name: delete metadata from instance\n    openstack.cloud.server_metadata:\n        state: absent\n        auth:\n            auth_url: https://openstack-api.example.com:35357/v2.0/\n            username: admin\n            password: admin\n            project_name: admin\n        name: vm1\n        meta:\n            hostname:\n            group:\n"
  },
  "openstack.cloud.os_server_volume": {
    "doc": {
      "description": "Attach or Detach volumes from OpenStack VM's",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "device": {
          "aliases": [],
          "description": "Device you want to attach. Defaults to auto finding a device name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "server": {
          "aliases": [],
          "description": "Name or ID of server you want to attach a volume to",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "volume": {
          "aliases": [],
          "description": "Name or id of volume you want to attach to a server",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Attach/Detach Volumes from OpenStack VM's"
    },
    "examples": "\n# Attaches a volume to a compute host\n- name: attach a volume\n  hosts: localhost\n  tasks:\n  - name: attach volume to host\n    openstack.cloud.server_volume:\n      state: present\n      cloud: mordred\n      server: Mysql-server\n      volume: mysql-data\n      device: /dev/vdb\n"
  },
  "openstack.cloud.os_stack": {
    "doc": {
      "description": "Add or Remove a Stack to an OpenStack Heat",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "environment": {
          "aliases": [],
          "description": "List of environment files that should be used for the stack creation",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the stack that should be created, name could be char and digit, no space",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "parameters": {
          "aliases": [],
          "description": "Dictionary of parameters for the stack creation",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "rollback": {
          "aliases": [],
          "description": "Rollback stack creation",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the resource",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tag": {
          "aliases": [],
          "description": "Tag for the stack that should be created, name could be char and digit, no space",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "template": {
          "aliases": [],
          "description": "Path of the template file to use for the stack creation",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Maximum number of seconds to wait for the stack creation",
          "default": "3600",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Add/Remove Heat Stack"
    },
    "examples": "\n---\n- name: create stack\n  ignore_errors: True\n  register: stack_create\n  openstack.cloud.stack:\n    name: \"{{ stack_name }}\"\n    tag: \"{{ tag_name }}\"\n    state: present\n    template: \"/path/to/my_stack.yaml\"\n    environment:\n    - /path/to/resource-registry.yaml\n    - /path/to/environment.yaml\n    parameters:\n        bmc_flavor: m1.medium\n        bmc_image: CentOS\n        key_name: default\n        private_net: \"{{ private_net_param }}\"\n        node_count: 2\n        name: undercloud\n        image: CentOS\n        my_flavor: m1.large\n        external_net: \"{{ external_net_param }}\"\n"
  },
  "openstack.cloud.os_subnet": {
    "doc": {
      "description": "Add or Remove a subnet to an OpenStack network",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "allocation_pool_end": {
          "aliases": [],
          "description": "From the subnet pool the last IP that should be assigned to the virtual machines.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "allocation_pool_start": {
          "aliases": [],
          "description": "From the subnet pool the starting address from which the IP should be allocated.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cidr": {
          "aliases": [],
          "description": "The CIDR representation of the subnet that should be assigned to the subnet. Required when I(state) is 'present' and a subnetpool is not specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "dns_nameservers": {
          "aliases": [],
          "description": "List of DNS nameservers for this subnet.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "enable_dhcp": {
          "aliases": [],
          "description": "Whether DHCP should be enabled for this subnet.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "extra_specs": {
          "aliases": [],
          "description": "Dictionary with extra key/value pairs passed to the API",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "gateway_ip": {
          "aliases": [],
          "description": "The ip that would be assigned to the gateway for this subnet",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host_routes": {
          "aliases": [],
          "description": "A list of host route dictionaries for the subnet.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "destination": {
              "aliases": [],
              "description": "The destination network (CIDR).",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "nexthop": {
              "aliases": [],
              "description": "The next hop (aka gateway) for the I(destination).",
              "type": "str",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "ip_version": {
          "aliases": [],
          "description": "The IP version of the subnet 4 or 6",
          "default": "4",
          "type": "str",
          "required": false,
          "choices": [
            "4",
            "6"
          ],
          "suboptions": {}
        },
        "ipv6_address_mode": {
          "aliases": [],
          "description": "IPv6 address mode",
          "type": "str",
          "required": false,
          "choices": [
            "dhcpv6-stateful",
            "dhcpv6-stateless",
            "slaac"
          ],
          "suboptions": {}
        },
        "ipv6_ra_mode": {
          "aliases": [],
          "description": "IPv6 router advertisement mode",
          "type": "str",
          "required": false,
          "choices": [
            "dhcpv6-stateful",
            "dhcpv6-stateless",
            "slaac"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the subnet that should be created. Although Neutron allows for non-unique subnet names, this module enforces subnet name uniqueness.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "network_name": {
          "aliases": [],
          "description": "Name of the network to which the subnet should be attached\nRequired when I(state) is 'present'",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "no_gateway_ip": {
          "aliases": [],
          "description": "The gateway IP would not be assigned for this subnet",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Project name or ID containing the subnet (name admin-only)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the resource",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_default_subnetpool": {
          "aliases": [],
          "description": "Use the default subnetpool for I(ip_version) to obtain a CIDR.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Add/Remove subnet to an OpenStack network"
    },
    "examples": "\n# Create a new (or update an existing) subnet on the specified network\n- openstack.cloud.subnet:\n    state: present\n    network_name: network1\n    name: net1subnet\n    cidr: 192.168.0.0/24\n    dns_nameservers:\n       - 8.8.8.7\n       - 8.8.8.8\n    host_routes:\n       - destination: 0.0.0.0/0\n         nexthop: 12.34.56.78\n       - destination: 192.168.0.0/24\n         nexthop: 192.168.0.1\n\n# Delete a subnet\n- openstack.cloud.subnet:\n    state: absent\n    name: net1subnet\n\n# Create an ipv6 stateless subnet\n- openstack.cloud.subnet:\n    state: present\n    name: intv6\n    network_name: internal\n    ip_version: 6\n    cidr: 2db8:1::/64\n    dns_nameservers:\n        - 2001:4860:4860::8888\n        - 2001:4860:4860::8844\n    ipv6_ra_mode: dhcpv6-stateless\n    ipv6_address_mode: dhcpv6-stateless\n"
  },
  "openstack.cloud.os_subnets_info": {
    "doc": {
      "description": "Retrieve information about one or more subnets from OpenStack.\nThis module was called C(openstack.cloud.subnets_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(openstack.cloud.subnets_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "filters": {
          "aliases": [],
          "description": "A dictionary of meta data to use for further filtering.  Elements of this dictionary may be additional dictionaries.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "subnet"
          ],
          "description": "Name or ID of the subnet.\nAlias 'subnet' added in version 2.8.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Retrieve information about one or more OpenStack subnets."
    },
    "examples": "\n- name: Gather information about previously created subnets\n  openstack.cloud.subnets_info:\n    auth:\n      auth_url: https://identity.example.com\n      username: user\n      password: password\n      project_name: someproject\n  register: result\n\n- name: Show openstack subnets\n  debug:\n    msg: \"{{ result.openstack_subnets }}\"\n\n- name: Gather information about a previously created subnet by name\n  openstack.cloud.subnets_info:\n    auth:\n      auth_url: https://identity.example.com\n      username: user\n      password: password\n      project_name: someproject\n    name: subnet1\n  register: result\n\n- name: Show openstack subnets\n  debug:\n    msg: \"{{ result.openstack_subnets }}\"\n\n- name: Gather information about a previously created subnet with filter\n  # Note: name and filters parameters are not mutually exclusive\n  openstack.cloud.subnets_info:\n    auth:\n      auth_url: https://identity.example.com\n      username: user\n      password: password\n      project_name: someproject\n    filters:\n      tenant_id: 55e2ce24b2a245b09f181bf025724cbe\n  register: result\n\n- name: Show openstack subnets\n  debug:\n    msg: \"{{ result.openstack_subnets }}\"\n"
  },
  "openstack.cloud.os_user": {
    "doc": {
      "description": "Manage OpenStack Identity users. Users can be created, updated or deleted using this module. A user will be updated if I(name) matches an existing user and I(state) is present. The value for I(name) cannot be updated without deleting and re-creating the user.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "default_project": {
          "aliases": [],
          "description": "Project name or ID that the user should be associated with by default",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description about the user",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain to create the user in if the cloud supports domains",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "email": {
          "aliases": [],
          "description": "Email address for the user",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "Is the user enabled",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Username for the user",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password for the user",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "update_password": {
          "aliases": [],
          "description": "C(always) will attempt to update password.  C(on_create) will only set the password for newly created users.",
          "type": "str",
          "required": false,
          "choices": [
            "always",
            "on_create"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Manage OpenStack Identity Users"
    },
    "examples": "\n# Create a user\n- openstack.cloud.identity_user:\n    cloud: mycloud\n    state: present\n    name: demouser\n    password: secret\n    email: demo@example.com\n    domain: default\n    default_project: demo\n\n# Delete a user\n- openstack.cloud.identity_user:\n    cloud: mycloud\n    state: absent\n    name: demouser\n\n# Create a user but don't update password if user exists\n- openstack.cloud.identity_user:\n    cloud: mycloud\n    state: present\n    name: demouser\n    password: secret\n    update_password: on_create\n    email: demo@example.com\n    domain: default\n    default_project: demo\n\n# Create a user without password\n- openstack.cloud.identity_user:\n    cloud: mycloud\n    state: present\n    name: demouser\n    email: demo@example.com\n    domain: default\n    default_project: demo\n"
  },
  "openstack.cloud.os_user_group": {
    "doc": {
      "description": "Add and remove users from groups",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "group": {
          "aliases": [],
          "description": "Name or id for the group.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the user be present or absent in the group",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "Name or id for the user",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Associate OpenStack Identity users and groups"
    },
    "examples": "\n# Add the demo user to the demo group\n- openstack.cloud.group_assignment:\n  cloud: mycloud\n  user: demo\n  group: demo\n"
  },
  "openstack.cloud.os_user_info": {
    "doc": {
      "description": "Retrieve information about a one or more OpenStack users\nThis module was called C(openstack.cloud.identity_user_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(openstack.cloud.identity_user_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Name or ID of the domain containing the user if the cloud supports domains",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "filters": {
          "aliases": [],
          "description": "A dictionary of meta data to use for further filtering.  Elements of this dictionary may be additional dictionaries.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name or ID of the user",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Retrieve information about one or more OpenStack users"
    },
    "examples": "\n# Gather information about previously created users\n- openstack.cloud.identity_user_info:\n    cloud: awesomecloud\n  register: result\n- debug:\n    msg: \"{{ result.openstack_users }}\"\n\n# Gather information about a previously created user by name\n- openstack.cloud.identity_user_info:\n    cloud: awesomecloud\n    name: demouser\n  register: result\n- debug:\n    msg: \"{{ result.openstack_users }}\"\n\n# Gather information about a previously created user in a specific domain\n- openstack.cloud.identity_user_info:\n    cloud: awesomecloud\n    name: demouser\n    domain: admindomain\n  register: result\n- debug:\n    msg: \"{{ result.openstack_users }}\"\n\n# Gather information about a previously created user in a specific domain with filter\n- openstack.cloud.identity_user_info:\n    cloud: awesomecloud\n    name: demouser\n    domain: admindomain\n    filters:\n      enabled: False\n  register: result\n- debug:\n    msg: \"{{ result.openstack_users }}\"\n"
  },
  "openstack.cloud.os_user_role": {
    "doc": {
      "description": "Grant and revoke roles in either project or domain context for OpenStack Identity Users.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Name or ID of the domain to scope the role association to. Valid only with keystone version 3, and required if I(project) is not specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "group": {
          "aliases": [],
          "description": "Name or ID for the group. Valid only with keystone version 3. If I(group) is not specified, then I(user) is required. Both may not be specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Name or ID of the project to scope the role association to. If you are using keystone version 2, then this value is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "role": {
          "aliases": [],
          "description": "Name or ID for the role.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the roles be present or absent on the user.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "Name or ID for the user. If I(user) is not specified, then I(group) is required. Both may not be specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Associate OpenStack Identity users and roles"
    },
    "examples": "\n# Grant an admin role on the user admin in the project project1\n- openstack.cloud.role_assignment:\n    cloud: mycloud\n    user: admin\n    role: admin\n    project: project1\n\n# Revoke the admin role from the user barney in the newyork domain\n- openstack.cloud.role_assignment:\n    cloud: mycloud\n    state: absent\n    user: barney\n    role: admin\n    domain: newyork\n"
  },
  "openstack.cloud.os_volume": {
    "doc": {
      "description": "Create or Remove cinder block storage volumes",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "bootable": {
          "aliases": [],
          "description": "Bootable flag for volume.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "display_description": {
          "aliases": [
            "description"
          ],
          "description": "String describing the volume",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "display_name": {
          "aliases": [
            "name"
          ],
          "description": "Name of volume",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "image": {
          "aliases": [],
          "description": "Image name or id for boot from volume",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "metadata": {
          "aliases": [],
          "description": "Metadata for the volume",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "scheduler_hints": {
          "aliases": [],
          "description": "Scheduler hints passed to volume API in form of dict",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size of volume in GB. This parameter is required when the I(state) parameter is 'present'.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "snapshot_id": {
          "aliases": [],
          "description": "Volume snapshot id to create from",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "volume": {
          "aliases": [],
          "description": "Volume name or id to create from",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "volume_type": {
          "aliases": [],
          "description": "Volume type for volume",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Create/Delete Cinder Volumes"
    },
    "examples": "\n# Creates a new volume\n- name: create a volume\n  hosts: localhost\n  tasks:\n  - name: create 40g test volume\n    openstack.cloud.volume:\n      state: present\n      cloud: mordred\n      availability_zone: az2\n      size: 40\n      display_name: test_volume\n      scheduler_hints:\n        same_host: 243e8d3c-8f47-4a61-93d6-7215c344b0c0\n"
  },
  "openstack.cloud.os_volume_snapshot": {
    "doc": {
      "description": "Create or Delete cinder block storage volume snapshots",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "display_description": {
          "aliases": [
            "description"
          ],
          "description": "String describing the snapshot",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "display_name": {
          "aliases": [
            "name"
          ],
          "description": "Name of the snapshot",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Allows or disallows snapshot of a volume to be created when the volume is attached to an instance.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "volume": {
          "aliases": [],
          "description": "The volume name or id to create/delete the snapshot",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Create/Delete Cinder Volume Snapshots"
    },
    "examples": "\n# Creates a snapshot on volume 'test_volume'\n- name: create and delete snapshot\n  hosts: localhost\n  tasks:\n  - name: create snapshot\n    openstack.cloud.volume_snapshot:\n      state: present\n      cloud: mordred\n      availability_zone: az2\n      display_name: test_snapshot\n      volume: test_volume\n  - name: delete snapshot\n    openstack.cloud.volume_snapshot:\n      state: absent\n      cloud: mordred\n      availability_zone: az2\n      display_name: test_snapshot\n      volume: test_volume\n"
  },
  "openstack.cloud.os_zone": {
    "doc": {
      "description": "Manage OpenStack DNS zones. Zones can be created, deleted or updated. Only the I(email), I(description), I(ttl) and I(masters) values can be updated.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Zone description",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "email": {
          "aliases": [],
          "description": "Email of the zone owner (only applies if zone_type is primary)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "masters": {
          "aliases": [],
          "description": "Master nameservers (only applies if zone_type is secondary)",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Zone name",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ttl": {
          "aliases": [],
          "description": "TTL (Time To Live) value in seconds",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "zone_type": {
          "aliases": [],
          "description": "Zone type",
          "type": "str",
          "required": false,
          "choices": [
            "primary",
            "secondary"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Manage OpenStack DNS zones"
    },
    "examples": "\n# Create a zone named \"example.net\"\n- openstack.cloud.dns_zone:\n    cloud: mycloud\n    state: present\n    name: example.net.\n    zone_type: primary\n    email: test@example.net\n    description: Test zone\n    ttl: 3600\n\n# Update the TTL on existing \"example.net.\" zone\n- openstack.cloud.dns_zone:\n    cloud: mycloud\n    state: present\n    name: example.net.\n    ttl: 7200\n\n# Delete zone named \"example.net.\"\n- openstack.cloud.dns_zone:\n    cloud: mycloud\n    state: absent\n    name: example.net.\n"
  },
  "openstack.cloud.port": {
    "doc": {
      "description": "Add, Update or Remove ports from an OpenStack cloud. A I(state) of 'present' will ensure the port is created or updated if required.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "admin_state_up": {
          "aliases": [],
          "description": "Sets admin state.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "allowed_address_pairs": {
          "aliases": [],
          "description": "Allowed address pairs list.  Allowed address pairs are supported with dictionary structure. e.g.  allowed_address_pairs: - ip_address: 10.1.0.12 mac_address: ab:cd:ef:12:34:56 - ip_address: ...",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "ip_address": {
              "aliases": [],
              "description": "The IP address.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "mac_address": {
              "aliases": [],
              "description": "The MAC address.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "binding_profile": {
          "aliases": [],
          "description": "Binding profile dict that the port should be created with.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "device_id": {
          "aliases": [],
          "description": "Device ID of device using this port.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "device_owner": {
          "aliases": [],
          "description": "The ID of the entity that uses this port.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dns_domain": {
          "aliases": [],
          "description": "The dns domain of the port ( only with dns-integration enabled )",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dns_name": {
          "aliases": [],
          "description": "The dns name of the port ( only with dns-integration enabled )",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "extra_dhcp_opts": {
          "aliases": [],
          "description": "Extra dhcp options to be assigned to this port. Extra options are supported with dictionary structure. Note that options cannot be removed only updated. e.g.  extra_dhcp_opts: - opt_name: opt name1 opt_value: value1 ip_version: 4 - opt_name: ...",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "ip_version": {
              "aliases": [],
              "description": "The IP version this DHCP option is for.",
              "type": "int",
              "required": true,
              "suboptions": {}
            },
            "opt_name": {
              "aliases": [],
              "description": "The name of the DHCP option to set.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "opt_value": {
              "aliases": [],
              "description": "The value of the DHCP option to set.",
              "type": "str",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "fixed_ips": {
          "aliases": [],
          "description": "Desired IP and/or subnet for this port.  Subnet is referenced by subnet_id and IP is referenced by ip_address.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "ip_address": {
              "aliases": [],
              "description": "The fixed IP address to attempt to allocate.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "subnet_id": {
              "aliases": [],
              "description": "The subnet to attach the IP address to.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "mac_address": {
          "aliases": [],
          "description": "MAC address of this port.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name that has to be given to the port.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "network": {
          "aliases": [],
          "description": "Network ID or name this port belongs to.\nRequired when creating a new port.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "no_security_groups": {
          "aliases": [],
          "description": "Do not associate a security group with this port.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "port_security_enabled": {
          "aliases": [],
          "description": "Whether to enable or disable the port security on the network.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "security_groups": {
          "aliases": [],
          "description": "Security group(s) ID(s) or name(s) associated with the port (comma separated string or YAML list)",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vnic_type": {
          "aliases": [],
          "description": "The type of the port that should be created",
          "type": "str",
          "required": false,
          "choices": [
            "normal",
            "direct",
            "direct-physical",
            "macvtap",
            "baremetal",
            "virtio-forwarder"
          ],
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Add/Update/Delete ports from an OpenStack cloud."
    },
    "examples": "\n# Create a port\n- openstack.cloud.port:\n    state: present\n    auth:\n      auth_url: https://identity.example.com\n      username: admin\n      password: admin\n      project_name: admin\n    name: port1\n    network: foo\n\n# Create a port with a static IP\n- openstack.cloud.port:\n    state: present\n    auth:\n      auth_url: https://identity.example.com\n      username: admin\n      password: admin\n      project_name: admin\n    name: port1\n    network: foo\n    fixed_ips:\n      - ip_address: 10.1.0.21\n\n# Create a port with No security groups\n- openstack.cloud.port:\n    state: present\n    auth:\n      auth_url: https://identity.example.com\n      username: admin\n      password: admin\n      project_name: admin\n    name: port1\n    network: foo\n    no_security_groups: True\n\n# Update the existing 'port1' port with multiple security groups (version 1)\n- openstack.cloud.port:\n    state: present\n    auth:\n      auth_url: https://identity.example.com\n      username: admin\n      password: admin\n      project_name: admin\n    name: port1\n    security_groups: 1496e8c7-4918-482a-9172-f4f00fc4a3a5,057d4bdf-6d4d-472...\n\n# Update the existing 'port1' port with multiple security groups (version 2)\n- openstack.cloud.port:\n    state: present\n    auth:\n      auth_url: https://identity.example.com\n      username: admin\n      password: admin\n      project_name: admin\n    name: port1\n    security_groups:\n      - 1496e8c7-4918-482a-9172-f4f00fc4a3a5\n      - 057d4bdf-6d4d-472...\n\n# Create port of type 'direct'\n- openstack.cloud.port:\n    state: present\n    auth:\n      auth_url: https://identity.example.com\n      username: admin\n      password: admin\n      project_name: admin\n    name: port1\n    network: foo\n    vnic_type: direct\n\n# Create a port with binding profile\n- openstack.cloud.port:\n    state: present\n    auth:\n      auth_url: https://identity.example.com\n      username: admin\n      password: admin\n      project_name: admin\n    name: port1\n    network: foo\n    binding_profile:\n      \"pci_slot\": \"0000:03:11.1\"\n      \"physical_network\": \"provider\"\n"
  },
  "openstack.cloud.port_info": {
    "doc": {
      "description": "Retrieve information about ports from OpenStack.\nThis module was called C(openstack.cloud.port_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(openstack.cloud.port_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "filters": {
          "aliases": [],
          "description": "A dictionary of meta data to use for further filtering. Elements of this dictionary will be matched against the returned port dictionaries. Matching is currently limited to strings within the port dictionary, or strings within nested dictionaries.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "Unique name or ID of a port.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Retrieve information about ports within OpenStack."
    },
    "examples": "\n# Gather information about all ports\n- openstack.cloud.port_info:\n    cloud: mycloud\n  register: result\n\n- debug:\n    msg: \"{{ result.openstack_ports }}\"\n\n# Gather information about a single port\n- openstack.cloud.port_info:\n    cloud: mycloud\n    port: 6140317d-e676-31e1-8a4a-b1913814a471\n\n# Gather information about all ports that have device_id set to a specific value\n# and with a status of ACTIVE.\n- openstack.cloud.port_info:\n    cloud: mycloud\n    filters:\n      device_id: 1038a010-3a37-4a9d-82ea-652f1da36597\n      status: ACTIVE\n"
  },
  "openstack.cloud.project": {
    "doc": {
      "description": "Manage OpenStack Projects. Projects can be created, updated or deleted using this module. A project will be updated if I(name) matches an existing project and I(state) is present. The value for I(name) cannot be updated without deleting and re-creating the project.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description for the project",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain_id": {
          "aliases": [
            "domain"
          ],
          "description": "Domain id to create the project in if the cloud supports domains.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "Is the project enabled",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name for the project",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "properties": {
          "aliases": [],
          "description": "Additional properties to be associated with this project. Requires openstacksdk>0.45.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Manage OpenStack Projects"
    },
    "examples": "\n# Create a project\n- openstack.cloud.project:\n    cloud: mycloud\n    endpoint_type: admin\n    state: present\n    name: demoproject\n    description: demodescription\n    domain_id: demoid\n    enabled: True\n    properties:\n      internal_alias: demo_project\n\n# Delete a project\n- openstack.cloud.project:\n    cloud: mycloud\n    endpoint_type: admin\n    state: absent\n    name: demoproject\n"
  },
  "openstack.cloud.project_access": {
    "doc": {
      "description": "Add or remove flavor, volume_type or other resources access from OpenStack.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "resource_name": {
          "aliases": [],
          "description": "The resource name (eg. tiny).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "resource_type": {
          "aliases": [],
          "description": "The resource type (eg. nova_flavor, cinder_volume_type).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "target_project_id": {
          "aliases": [],
          "description": "Project id.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Manage OpenStack compute flavors access"
    },
    "examples": "\n- name: \"Enable access to tiny flavor to your tenant.\"\n  openstack.cloud.project_access:\n    cloud: mycloud\n    state: present\n    target_project_id: f0f1f2f3f4f5f67f8f9e0e1\n    resource_name: tiny\n    resource_type: nova_flavor\n\n\n- name: \"Disable access to the given flavor to project\"\n  openstack.cloud.project_access:\n    cloud: mycloud\n    state: absent\n    target_project_id: f0f1f2f3f4f5f67f8f9e0e1\n    resource_name: tiny\n    resource_type: nova_flavor\n"
  },
  "openstack.cloud.project_info": {
    "doc": {
      "description": "Retrieve information about a one or more OpenStack projects\nThis module was called C(openstack.cloud.project_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(openstack.cloud.project_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Name or ID of the domain containing the project if the cloud supports domains",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "filters": {
          "aliases": [],
          "description": "A dictionary of meta data to use for further filtering.  Elements of this dictionary may be additional dictionaries.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name or ID of the project",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Retrieve information about one or more OpenStack projects"
    },
    "examples": "\n# Gather information about previously created projects\n- openstack.cloud.project_info:\n    cloud: awesomecloud\n  register: result\n- debug:\n    msg: \"{{ result.openstack_projects }}\"\n\n# Gather information about a previously created project by name\n- openstack.cloud.project_info:\n    cloud: awesomecloud\n    name: demoproject\n  register: result\n- debug:\n    msg: \"{{ result.openstack_projects }}\"\n\n# Gather information about a previously created project in a specific domain\n- openstack.cloud.project_info:\n    cloud: awesomecloud\n    name: demoproject\n    domain: admindomain\n  register: result\n- debug:\n    msg: \"{{ result.openstack_projects }}\"\n\n# Gather information about a previously created project in a specific domain with filter\n- openstack.cloud.project_info:\n    cloud: awesomecloud\n    name: demoproject\n    domain: admindomain\n    filters:\n      enabled: False\n  register: result\n- debug:\n    msg: \"{{ result.openstack_projects }}\"\n"
  },
  "openstack.cloud.quota": {
    "doc": {
      "description": "Manage OpenStack Quotas. Quotas can be created, updated or deleted using this module. A quota will be updated if matches an existing project and is present.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "backup_gigabytes": {
          "aliases": [],
          "description": "Maximum size of backups in GB's.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "backups": {
          "aliases": [],
          "description": "Maximum number of backups allowed.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "cores": {
          "aliases": [],
          "description": "Maximum number of CPU's per project.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "fixed_ips": {
          "aliases": [],
          "description": "Number of fixed IP's to allow.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "floating_ips": {
          "aliases": [
            "compute_floating_ips"
          ],
          "description": "Number of floating IP's to allow in Compute.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "floatingip": {
          "aliases": [
            "network_floating_ips"
          ],
          "description": "Number of floating IP's to allow in Network.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "gigabytes": {
          "aliases": [],
          "description": "Maximum volume storage allowed for project.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "gigabytes_types": {
          "aliases": [],
          "description": "Per driver volume storage quotas.  Keys should be prefixed with C(gigabytes_) values should be ints.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "injected_file_size": {
          "aliases": [],
          "description": "Maximum file size in bytes.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "injected_files": {
          "aliases": [],
          "description": "Number of injected files to allow.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "injected_path_size": {
          "aliases": [],
          "description": "Maximum path size.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "instances": {
          "aliases": [],
          "description": "Maximum number of instances allowed.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "key_pairs": {
          "aliases": [],
          "description": "Number of key pairs to allow.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "loadbalancer": {
          "aliases": [],
          "description": "Number of load balancers to allow.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "metadata_items": {
          "aliases": [],
          "description": "Number of metadata items allowed per instance.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the OpenStack Project to manage.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "network": {
          "aliases": [],
          "description": "Number of networks to allow.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "per_volume_gigabytes": {
          "aliases": [],
          "description": "Maximum size in GB's of individual volumes.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "pool": {
          "aliases": [],
          "description": "Number of load balancer pools to allow.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "Number of Network ports to allow, this needs to be greater than the instances limit.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Unused, kept for compatability",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "properties": {
          "aliases": [],
          "description": "Number of properties to allow.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ram": {
          "aliases": [],
          "description": "Maximum amount of ram in MB to allow.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "rbac_policy": {
          "aliases": [],
          "description": "Number of policies to allow.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "router": {
          "aliases": [],
          "description": "Number of routers to allow.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "security_group": {
          "aliases": [],
          "description": "Number of security groups to allow.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "security_group_rule": {
          "aliases": [],
          "description": "Number of rules per security group to allow.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "server_group_members": {
          "aliases": [],
          "description": "Number of server group members to allow.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "server_groups": {
          "aliases": [],
          "description": "Number of server groups to allow.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "snapshots": {
          "aliases": [],
          "description": "Number of snapshots to allow.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "snapshots_types": {
          "aliases": [],
          "description": "Per-driver volume snapshot quotas.  Keys should be prefixed with C(snapshots_) values should be ints.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "A value of present sets the quota and a value of absent resets the quota to system defaults.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "subnet": {
          "aliases": [],
          "description": "Number of subnets to allow.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "subnetpool": {
          "aliases": [],
          "description": "Number of subnet pools to allow.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "volumes": {
          "aliases": [],
          "description": "Number of volumes to allow.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "volumes_types": {
          "aliases": [],
          "description": "Per-driver volume count quotas.  Keys should be prefixed with C(gigabytes_) values should be ints.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "keystoneauth1 >= 3.4.0",
        "openstacksdk >= 0.12.0",
        "openstacksdk >= 0.13.0",
        "python >= 3.6"
      ],
      "short_description": "Manage OpenStack Quotas"
    },
    "examples": "\n# List a Project Quota\n- openstack.cloud.quota:\n    cloud: mycloud\n    name: demoproject\n\n# Set a Project back to the defaults\n- openstack.cloud.quota:\n    cloud: mycloud\n    name: demoproject\n    state: absent\n\n# Update a Project Quota for cores\n- openstack.cloud.quota:\n    cloud: mycloud\n    name: demoproject\n    cores: 100\n\n# Update a Project Quota\n- openstack.cloud.quota:\n    name: demoproject\n    cores: 1000\n    volumes: 20\n    volumes_type:\n      - volume_lvm: 10\n\n# Complete example based on list of projects\n- name: Update quotas\n  openstack.cloud.quota:\n    name: \"{{ item.name }}\"\n    backup_gigabytes: \"{{ item.backup_gigabytes }}\"\n    backups: \"{{ item.backups }}\"\n    cores: \"{{ item.cores }}\"\n    fixed_ips: \"{{ item.fixed_ips }}\"\n    floating_ips: \"{{ item.floating_ips }}\"\n    floatingip: \"{{ item.floatingip }}\"\n    gigabytes: \"{{ item.gigabytes }}\"\n    injected_file_size: \"{{ item.injected_file_size }}\"\n    injected_files: \"{{ item.injected_files }}\"\n    injected_path_size: \"{{ item.injected_path_size }}\"\n    instances: \"{{ item.instances }}\"\n    key_pairs: \"{{ item.key_pairs }}\"\n    loadbalancer: \"{{ item.loadbalancer }}\"\n    metadata_items: \"{{ item.metadata_items }}\"\n    per_volume_gigabytes: \"{{ item.per_volume_gigabytes }}\"\n    pool: \"{{ item.pool }}\"\n    port: \"{{ item.port }}\"\n    properties: \"{{ item.properties }}\"\n    ram: \"{{ item.ram }}\"\n    security_group_rule: \"{{ item.security_group_rule }}\"\n    security_group: \"{{ item.security_group }}\"\n    server_group_members: \"{{ item.server_group_members }}\"\n    server_groups: \"{{ item.server_groups }}\"\n    snapshots: \"{{ item.snapshots }}\"\n    volumes: \"{{ item.volumes }}\"\n    volumes_types:\n      volumes_lvm: \"{{ item.volumes_lvm }}\"\n    snapshots_types:\n      snapshots_lvm: \"{{ item.snapshots_lvm }}\"\n    gigabytes_types:\n      gigabytes_lvm: \"{{ item.gigabytes_lvm }}\"\n  with_items:\n    - \"{{ projects }}\"\n  when: item.state == \"present\"\n"
  },
  "openstack.cloud.recordset": {
    "doc": {
      "description": "Manage OpenStack DNS recordsets. Recordsets can be created, deleted or updated. Only the I(records), I(description), and I(ttl) values can be updated.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the recordset",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the recordset. It must be ended with name of dns zone.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "records": {
          "aliases": [],
          "description": "List of recordset definitions.\nRequired when I(state=present).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "recordset_type": {
          "aliases": [],
          "description": "Recordset type\nRequired when I(state=present).",
          "type": "str",
          "required": false,
          "choices": [
            "a",
            "aaaa",
            "mx",
            "cname",
            "txt",
            "ns",
            "srv",
            "ptr",
            "caa"
          ],
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ttl": {
          "aliases": [],
          "description": "TTL (Time To Live) value in seconds",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "zone": {
          "aliases": [],
          "description": "Zone managing the recordset",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Manage OpenStack DNS recordsets"
    },
    "examples": "\n# Create a recordset named \"www.example.net.\"\n- openstack.cloud.recordset:\n    cloud: mycloud\n    state: present\n    zone: example.net.\n    name: www.example.net.\n    recordset_type: \"a\"\n    records: ['10.1.1.1']\n    description: test recordset\n    ttl: 3600\n\n# Update the TTL on existing \"www.example.net.\" recordset\n- openstack.cloud.recordset:\n    cloud: mycloud\n    state: present\n    zone: example.net.\n    name: www.example.net.\n    recordset_type: \"a\"\n    records: ['10.1.1.1']\n    ttl: 7200\n\n# Delete recordset named \"www.example.net.\"\n- openstack.cloud.recordset:\n    cloud: mycloud\n    state: absent\n    zone: example.net.\n    name: www.example.net.\n"
  },
  "openstack.cloud.role_assignment": {
    "doc": {
      "description": "Grant and revoke roles in either project or domain context for OpenStack Identity Users.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Name or ID of the domain to scope the role association to. Valid only with keystone version 3, and required if I(project) is not specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "group": {
          "aliases": [],
          "description": "Name or ID for the group. Valid only with keystone version 3. If I(group) is not specified, then I(user) is required. Both may not be specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Name or ID of the project to scope the role association to. If you are using keystone version 2, then this value is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "role": {
          "aliases": [],
          "description": "Name or ID for the role.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the roles be present or absent on the user.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "Name or ID for the user. If I(user) is not specified, then I(group) is required. Both may not be specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Associate OpenStack Identity users and roles"
    },
    "examples": "\n# Grant an admin role on the user admin in the project project1\n- openstack.cloud.role_assignment:\n    cloud: mycloud\n    user: admin\n    role: admin\n    project: project1\n\n# Revoke the admin role from the user barney in the newyork domain\n- openstack.cloud.role_assignment:\n    cloud: mycloud\n    state: absent\n    user: barney\n    role: admin\n    domain: newyork\n"
  },
  "openstack.cloud.router": {
    "doc": {
      "description": "Create or Delete routers from OpenStack. Although Neutron allows routers to share the same name, this module enforces name uniqueness to be more user friendly.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "admin_state_up": {
          "aliases": [],
          "description": "Desired admin state of the created or existing router.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "enable_snat": {
          "aliases": [],
          "description": "Enable Source NAT (SNAT) attribute.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "external_fixed_ips": {
          "aliases": [],
          "description": "The IP address parameters for the external gateway network. Each is a dictionary with the subnet name or ID (subnet) and the IP address to assign on the subnet (ip). If no IP is specified, one is automatically assigned from that subnet.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "ip": {
              "aliases": [],
              "description": "The fixed IP address to attempt to allocate.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "subnet": {
              "aliases": [],
              "description": "The subnet to attach the IP address to.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "interfaces": {
          "aliases": [],
          "description": "List of subnets to attach to the router internal interface. Default gateway associated with the subnet will be automatically attached with the router's internal interface. In order to provide an ip address different from the default gateway,parameters are passed as dictionary with keys as network name or ID (I(net)), subnet name or ID (I(subnet)) and the IP of port (I(portip)) from the network. User defined portip is often required when a multiple router need to be connected to a single subnet for which the default gateway has been already used.",
          "type": "list",
          "required": false,
          "elements": "raw",
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name to be give to the router",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "network": {
          "aliases": [],
          "description": "Unique name or ID of the external gateway network.\nrequired I(interfaces) or I(enable_snat) are provided.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Unique name or ID of the project.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the resource",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Create or delete routers from OpenStack"
    },
    "examples": "\n# Create a simple router, not attached to a gateway or subnets.\n- openstack.cloud.router:\n    cloud: mycloud\n    state: present\n    name: simple_router\n\n# Create a simple router, not attached to a gateway or subnets for a given project.\n- openstack.cloud.router:\n    cloud: mycloud\n    state: present\n    name: simple_router\n    project: myproj\n\n# Creates a router attached to ext_network1 on an IPv4 subnet and one\n# internal subnet interface.\n- openstack.cloud.router:\n    cloud: mycloud\n    state: present\n    name: router1\n    network: ext_network1\n    external_fixed_ips:\n      - subnet: public-subnet\n        ip: 172.24.4.2\n    interfaces:\n      - private-subnet\n\n# Create another router with two internal subnet interfaces.One with user defined port\n# ip and another with default gateway.\n- openstack.cloud.router:\n    cloud: mycloud\n    state: present\n    name: router2\n    network: ext_network1\n    interfaces:\n      - net: private-net\n        subnet: private-subnet\n        portip: 10.1.1.10\n      - project-subnet\n\n# Create another router with two internal subnet interface.One with user defined port\n# ip and and another with default gateway.\n- openstack.cloud.router:\n    cloud: mycloud\n    state: present\n    name: router2\n    network: ext_network1\n    interfaces:\n      - net: private-net\n        subnet: private-subnet\n        portip: 10.1.1.10\n      - project-subnet\n\n# Create another router with two internal subnet interface. one with  user defined port\n# ip and and another  with default gateway.\n- openstack.cloud.router:\n    cloud: mycloud\n    state: present\n    name: router2\n    network: ext_network1\n    interfaces:\n      - net: private-net\n        subnet: private-subnet\n        portip: 10.1.1.10\n      - project-subnet\n\n# Update existing router1 external gateway to include the IPv6 subnet.\n# Note that since 'interfaces' is not provided, any existing internal\n# interfaces on an existing router will be left intact.\n- openstack.cloud.router:\n    cloud: mycloud\n    state: present\n    name: router1\n    network: ext_network1\n    external_fixed_ips:\n      - subnet: public-subnet\n        ip: 172.24.4.2\n      - subnet: ipv6-public-subnet\n        ip: 2001:db8::3\n\n# Delete router1\n- openstack.cloud.router:\n    cloud: mycloud\n    state: absent\n    name: router1\n"
  },
  "openstack.cloud.routers_info": {
    "doc": {
      "description": "Retrieve information about one or more routers from OpenStack.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "filters": {
          "aliases": [],
          "description": "A dictionary of meta data to use for further filtering.  Elements of this dictionary may be additional dictionaries.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "admin_state_up": {
              "aliases": [],
              "description": "Filter the list result by the administrative state of the resource, which is up (true) or down (false).",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "description": {
              "aliases": [],
              "description": "Filter the list result by the human-readable description of the resource.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Filter the list result by the human-readable name of the resource.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "project_id": {
              "aliases": [
                "tenant_id"
              ],
              "description": "Filter the list result by the ID of the project that owns the resource.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "revision_number": {
              "aliases": [],
              "description": "Filter the list result by the revision number of the resource.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "tags": {
              "aliases": [],
              "description": "A list of tags to filter the list result by. Resources that match all tags in this list will be returned.",
              "type": "list",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name or ID of the router",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Retrieve information about one or more OpenStack routers."
    },
    "examples": "\n- name: Gather information about routers\n  openstack.cloud.routers_info:\n    auth:\n      auth_url: https://identity.example.com\n      username: user\n      password: password\n      project_name: someproject\n  register: result\n\n- name: Show openstack routers\n  debug:\n    msg: \"{{ result.openstack_routers }}\"\n\n- name: Gather information about a router by name\n  openstack.cloud.routers_info:\n    auth:\n      auth_url: https://identity.example.com\n      username: user\n      password: password\n      project_name: someproject\n    name: router1\n  register: result\n\n- name: Show openstack routers\n  debug:\n    msg: \"{{ result.openstack_routers }}\"\n\n- name: Gather information about a router with filter\n  openstack.cloud.routers_info:\n    auth:\n      auth_url: https://identity.example.com\n      username: user\n      password: password\n      project_name: someproject\n    filters:\n      tenant_id: bc3ea709c96849d6b81f54640400a19f\n  register: result\n\n- name: Show openstack routers\n  debug:\n    msg: \"{{ result.openstack_routers }}\"\n"
  },
  "openstack.cloud.security_group": {
    "doc": {
      "description": "Add or Remove security groups from an OpenStack cloud.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Long description of the purpose of the security group",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name that has to be given to the security group. This module requires that security group names be unique.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Unique name or ID of the project.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Add/Delete security groups from an OpenStack cloud."
    },
    "examples": "\n# Create a security group\n- openstack.cloud.security_group:\n    cloud: mordred\n    state: present\n    name: foo\n    description: security group for foo servers\n\n# Update the existing 'foo' security group description\n- openstack.cloud.security_group:\n    cloud: mordred\n    state: present\n    name: foo\n    description: updated description for the foo security group\n\n# Create a security group for a given project\n- openstack.cloud.security_group:\n    cloud: mordred\n    state: present\n    name: foo\n    project: myproj\n"
  },
  "openstack.cloud.security_group_info": {
    "doc": {
      "description": "List security groups",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "any_tags": {
          "aliases": [],
          "description": "A list of tags to filter the list result by.\nResources that match any tag in this list will be returned.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the security group",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name or id of the security group.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "not_any_tags": {
          "aliases": [],
          "description": "A list of tags to filter the list result by.\nResources that match any tag in this list will be excluded.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "not_tags": {
          "aliases": [],
          "description": "A list of tags to filter the list result by.\nResources that match all tags in this list will be excluded.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "project_id": {
          "aliases": [],
          "description": "Specifies the project id as filter criteria",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "revision_number": {
          "aliases": [],
          "description": "Filter the list result by the revision number of the\nresource.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "tags": {
          "aliases": [],
          "description": "A list of tags to filter the list result by.\nResources that match all tags in this list will be returned.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Lists security groups"
    },
    "examples": "\n# Get specific security group\n- openstack.cloud.security_group_info:\n    cloud: \"{{ cloud }}\"\n    name: \"{{ my_sg }}\"\n  register: sg\n# Get all security groups\n- openstack.cloud.security_group_info:\n    cloud: \"{{ cloud }}\"\n  register: sg\n"
  },
  "openstack.cloud.security_group_rule": {
    "doc": {
      "description": "Add or Remove rule from an existing security group",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "direction": {
          "aliases": [],
          "description": "The direction in which the security group rule is applied. Not all providers support egress.",
          "default": "ingress",
          "type": "str",
          "required": false,
          "choices": [
            "egress",
            "ingress"
          ],
          "suboptions": {}
        },
        "ethertype": {
          "aliases": [],
          "description": "Must be IPv4 or IPv6, and addresses represented in CIDR must match the ingress or egress rules. Not all providers support IPv6.",
          "default": "IPv4",
          "type": "str",
          "required": false,
          "choices": [
            "IPv4",
            "IPv6"
          ],
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "port_range_max": {
          "aliases": [],
          "description": "Ending port",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "port_range_min": {
          "aliases": [],
          "description": "Starting port",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Unique name or ID of the project.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "IP protocols ANY TCP UDP ICMP and others, also number in range 0-255",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "remote_group": {
          "aliases": [],
          "description": "Name or ID of the Security group to link (exclusive with remote_ip_prefix)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "remote_ip_prefix": {
          "aliases": [],
          "description": "Source IP address(es) in CIDR notation (exclusive with remote_group)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "security_group": {
          "aliases": [],
          "description": "Name or ID of the security group",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Add/Delete rule from an existing security group"
    },
    "examples": "\n# Create a security group rule\n- openstack.cloud.security_group_rule:\n    cloud: mordred\n    security_group: foo\n    protocol: tcp\n    port_range_min: 80\n    port_range_max: 80\n    remote_ip_prefix: 0.0.0.0/0\n\n# Create a security group rule for ping\n- openstack.cloud.security_group_rule:\n    cloud: mordred\n    security_group: foo\n    protocol: icmp\n    remote_ip_prefix: 0.0.0.0/0\n\n# Another way to create the ping rule\n- openstack.cloud.security_group_rule:\n    cloud: mordred\n    security_group: foo\n    protocol: icmp\n    port_range_min: -1\n    port_range_max: -1\n    remote_ip_prefix: 0.0.0.0/0\n\n# Create a TCP rule covering all ports\n- openstack.cloud.security_group_rule:\n    cloud: mordred\n    security_group: foo\n    protocol: tcp\n    port_range_min: 1\n    port_range_max: 65535\n    remote_ip_prefix: 0.0.0.0/0\n\n# Another way to create the TCP rule above (defaults to all ports)\n- openstack.cloud.security_group_rule:\n    cloud: mordred\n    security_group: foo\n    protocol: tcp\n    remote_ip_prefix: 0.0.0.0/0\n\n# Create a rule for VRRP with numbered protocol 112\n- openstack.cloud.security_group_rule:\n    security_group: loadbalancer_sg\n    protocol: 112\n    remote_group: loadbalancer-node_sg\n\n# Create a security group rule for a given project\n- openstack.cloud.security_group_rule:\n    cloud: mordred\n    security_group: foo\n    protocol: icmp\n    remote_ip_prefix: 0.0.0.0/0\n    project: myproj\n\n# Remove the default created egress rule for IPv4\n- openstack.cloud.security_group_rule:\n   cloud: mordred\n   security_group: foo\n   protocol: any\n   remote_ip_prefix: 0.0.0.0/0\n"
  },
  "openstack.cloud.security_group_rule_info": {
    "doc": {
      "description": "Querying security group rules",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Filter the list result by the human-readable description of the resource.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "direction": {
          "aliases": [],
          "description": "Filter the security group rule list result by the direction in which the security group rule is applied.",
          "type": "str",
          "required": false,
          "choices": [
            "egress",
            "ingress"
          ],
          "suboptions": {}
        },
        "ethertype": {
          "aliases": [],
          "description": "Filter the security group rule list result by the ethertype of network traffic. The value must be IPv4 or IPv6.",
          "type": "str",
          "required": false,
          "choices": [
            "IPv4",
            "IPv6"
          ],
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "port_range_max": {
          "aliases": [],
          "description": "Ending port",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "port_range_min": {
          "aliases": [],
          "description": "Starting port",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Unique name or ID of the project.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "Filter the security group rule list result by the IP protocol.",
          "type": "str",
          "required": false,
          "choices": [
            "any",
            "tcp",
            "udp",
            "icmp",
            "112",
            "132"
          ],
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "remote_group": {
          "aliases": [],
          "description": "Filter the security group rule list result by the name or ID of the remote group that associates with this security group rule.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "remote_ip_prefix": {
          "aliases": [],
          "description": "Source IP address(es) in CIDR notation (exclusive with remote_group)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "revision_number": {
          "aliases": [],
          "description": "Filter the list result by the revision number of the resource.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "rule": {
          "aliases": [],
          "description": "Filter the list result by the ID of the security group rule.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "security_group": {
          "aliases": [],
          "description": "Name or ID of the security group",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Querying security group rules"
    },
    "examples": "\n# Get all security group rules\n- openstack.cloud.security_group_rule_info:\n    cloud: \"{{ cloud }}\"\n  register: sg\n\n# Filter security group rules for port 80 and name\n- openstack.cloud.security_group_rule_info:\n    cloud: \"{{ cloud }}\"\n    security_group: \"{{ rule_name }}\"\n    protocol: tcp\n    port_range_min: 80\n    port_range_max: 80\n    remote_ip_prefix: 0.0.0.0/0\n\n# Filter for ICMP rules\n- openstack.cloud.security_group_rule_info:\n    cloud: \"{{ cloud }}\"\n    protocol: icmp\n"
  },
  "openstack.cloud.server": {
    "doc": {
      "description": "Create or Remove compute instances from OpenStack.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auto_ip": {
          "aliases": [
            "auto_floating_ip",
            "public_ip"
          ],
          "description": "Ensure instance has public ip however the cloud wants to do that",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Availability zone in which to create the server.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "boot_from_volume": {
          "aliases": [],
          "description": "Should the instance boot from a persistent volume created based on the image given. Mutually exclusive with boot_volume.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "boot_volume": {
          "aliases": [
            "root_volume"
          ],
          "description": "Volume name or id to use as the volume to boot from. Implies boot_from_volume. Mutually exclusive with image and boot_from_volume.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "config_drive": {
          "aliases": [],
          "description": "Whether to boot the server with config drive enabled",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "delete_fip": {
          "aliases": [],
          "description": "When I(state) is absent and this option is true, any floating IP associated with the instance will be deleted along with the instance.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the server.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "flavor": {
          "aliases": [],
          "description": "The name or id of the flavor in which the new instance has to be created.\nExactly one of I(flavor) and I(flavor_ram) must be defined when I(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "flavor_include": {
          "aliases": [],
          "description": "Text to use to filter flavor names, for the case, such as Rackspace, where there are multiple flavors that have the same ram count. flavor_include is a positive match filter - it must exist in the flavor name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "flavor_ram": {
          "aliases": [],
          "description": "The minimum amount of ram in MB that the flavor in which the new instance has to be created must have.\nExactly one of I(flavor) and I(flavor_ram) must be defined when I(state=present).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "floating_ip_pools": {
          "aliases": [],
          "description": "Name of floating IP pool from which to choose a floating IP",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "floating_ips": {
          "aliases": [],
          "description": "list of valid floating IPs that pre-exist to assign to this node",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "image": {
          "aliases": [],
          "description": "The name or id of the base image to boot.\nRequired when I(boot_from_volume=true)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "image_exclude": {
          "aliases": [],
          "description": "Text to use to filter image names, for the case, such as HP, where there are multiple image names matching the common identifying portions. image_exclude is a negative match filter - it is text that may not exist in the image name.",
          "default": "(deprecated)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "key_name": {
          "aliases": [],
          "description": "The key pair name to be used when creating a instance",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "meta": {
          "aliases": [],
          "description": "A list of key value pairs that should be provided as a metadata to the new instance or a string containing a list of key-value pairs. Eg:  meta: \"key1=value1,key2=value2\"",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name that has to be given to the instance. It is also possible to specify the ID of the instance instead of its name if I(state) is I(absent).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "network": {
          "aliases": [],
          "description": "Name or ID of a network to attach this instance to. A simpler version of the nics parameter, only one of network or nics should be supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "nics": {
          "aliases": [],
          "description": "A list of networks to which the instance's interface should be attached. Networks may be referenced by net-id/net-name/port-id or port-name.\nAlso this accepts a string containing a list of (net/port)-(id/name) Eg: nics: \"net-id=uuid-1,port-name=myport\" Only one of network or nics should be supplied.",
          "type": "list",
          "required": false,
          "elements": "raw",
          "suboptions": {
            "tag": {
              "aliases": [],
              "description": "A \"tag\" for the specific port to be passed via metadata. Eg: tag: test_tag",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "reuse_ips": {
          "aliases": [],
          "description": "When I(auto_ip) is true and this option is true, the I(auto_ip) code will attempt to re-use unassigned floating ips in the project before creating a new one. It is important to note that it is impossible to safely do this concurrently, so if your use case involves concurrent server creation, it is highly recommended to set this to false and to delete the floating ip associated with a server when the server is deleted using I(delete_fip).",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "scheduler_hints": {
          "aliases": [],
          "description": "Arbitrary key/value pairs to the scheduler for custom use",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "security_groups": {
          "aliases": [],
          "description": "Names of the security groups to which the instance should be added. This may be a YAML list or a comma separated string.",
          "default": "['default']",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "terminate_volume": {
          "aliases": [],
          "description": "If C(yes), delete volume when deleting instance (if booted from volume)",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The amount of time the module should wait for the instance to get into active state.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "userdata": {
          "aliases": [
            "user_data"
          ],
          "description": "Opaque blob of data which is made available to the instance",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "volume_size": {
          "aliases": [],
          "description": "The size of the volume to create in GB if booting from volume based on an image.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "volumes": {
          "aliases": [],
          "description": "A list of preexisting volumes names or ids to attach to the instance",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "If the module should wait for the instance to be created.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Create/Delete Compute Instances from OpenStack"
    },
    "examples": "\n- name: Create a new instance and attaches to a network and passes metadata to the instance\n  openstack.cloud.server:\n       state: present\n       auth:\n         auth_url: https://identity.example.com\n         username: admin\n         password: admin\n         project_name: admin\n       name: vm1\n       image: 4f905f38-e52a-43d2-b6ec-754a13ffb529\n       key_name: ansible_key\n       timeout: 200\n       flavor: 4\n       nics:\n         - net-id: 34605f38-e52a-25d2-b6ec-754a13ffb723\n         - net-name: another_network\n       meta:\n         hostname: test1\n         group: uge_master\n\n# Create a new instance in HP Cloud AE1 region availability zone az2 and\n# automatically assigns a floating IP\n- name: launch a compute instance\n  hosts: localhost\n  tasks:\n    - name: launch an instance\n      openstack.cloud.server:\n        state: present\n        auth:\n          auth_url: https://identity.example.com\n          username: username\n          password: Equality7-2521\n          project_name: username-project1\n        name: vm1\n        region_name: region-b.geo-1\n        availability_zone: az2\n        image: 9302692b-b787-4b52-a3a6-daebb79cb498\n        key_name: test\n        timeout: 200\n        flavor: 101\n        security_groups: default\n        auto_ip: yes\n\n# Create a new instance in named cloud mordred availability zone az2\n# and assigns a pre-known floating IP\n- name: launch a compute instance\n  hosts: localhost\n  tasks:\n    - name: launch an instance\n      openstack.cloud.server:\n        state: present\n        cloud: mordred\n        name: vm1\n        availability_zone: az2\n        image: 9302692b-b787-4b52-a3a6-daebb79cb498\n        key_name: test\n        timeout: 200\n        flavor: 101\n        floating_ips:\n          - 12.34.56.79\n\n# Create a new instance with 4G of RAM on Ubuntu Trusty, ignoring\n# deprecated images\n- name: launch a compute instance\n  hosts: localhost\n  tasks:\n    - name: launch an instance\n      openstack.cloud.server:\n        name: vm1\n        state: present\n        cloud: mordred\n        region_name: region-b.geo-1\n        image: Ubuntu Server 14.04\n        image_exclude: deprecated\n        flavor_ram: 4096\n\n# Create a new instance with 4G of RAM on Ubuntu Trusty on a Performance node\n- name: launch a compute instance\n  hosts: localhost\n  tasks:\n    - name: launch an instance\n      openstack.cloud.server:\n        name: vm1\n        cloud: rax-dfw\n        state: present\n        image: Ubuntu 14.04 LTS (Trusty Tahr) (PVHVM)\n        flavor_ram: 4096\n        flavor_include: Performance\n\n# Creates a new instance and attaches to multiple network\n- name: launch a compute instance\n  hosts: localhost\n  tasks:\n    - name: launch an instance with a string\n      openstack.cloud.server:\n        auth:\n           auth_url: https://identity.example.com\n           username: admin\n           password: admin\n           project_name: admin\n        name: vm1\n        image: 4f905f38-e52a-43d2-b6ec-754a13ffb529\n        key_name: ansible_key\n        timeout: 200\n        flavor: 4\n        nics: \"net-id=4cb08b20-62fe-11e5-9d70-feff819cdc9f,net-id=542f0430-62fe-11e5-9d70-feff819cdc9f...\"\n\n- name: Creates a new instance and attaches to a network and passes metadata to the instance\n  openstack.cloud.server:\n       state: present\n       auth:\n         auth_url: https://identity.example.com\n         username: admin\n         password: admin\n         project_name: admin\n       name: vm1\n       image: 4f905f38-e52a-43d2-b6ec-754a13ffb529\n       key_name: ansible_key\n       timeout: 200\n       flavor: 4\n       nics:\n         - net-id: 34605f38-e52a-25d2-b6ec-754a13ffb723\n         - net-name: another_network\n       meta: \"hostname=test1,group=uge_master\"\n\n- name:  Creates a new instance and attaches to a specific network\n  openstack.cloud.server:\n    state: present\n    auth:\n      auth_url: https://identity.example.com\n      username: admin\n      password: admin\n      project_name: admin\n    name: vm1\n    image: 4f905f38-e52a-43d2-b6ec-754a13ffb529\n    key_name: ansible_key\n    timeout: 200\n    flavor: 4\n    network: another_network\n\n# Create a new instance with 4G of RAM on a 75G Ubuntu Trusty volume\n- name: launch a compute instance\n  hosts: localhost\n  tasks:\n    - name: launch an instance\n      openstack.cloud.server:\n        name: vm1\n        state: present\n        cloud: mordred\n        region_name: ams01\n        image: Ubuntu Server 14.04\n        flavor_ram: 4096\n        boot_from_volume: True\n        volume_size: 75\n\n# Creates a new instance with 2 volumes attached\n- name: launch a compute instance\n  hosts: localhost\n  tasks:\n    - name: launch an instance\n      openstack.cloud.server:\n        name: vm1\n        state: present\n        cloud: mordred\n        region_name: ams01\n        image: Ubuntu Server 14.04\n        flavor_ram: 4096\n        volumes:\n        - photos\n        - music\n\n# Creates a new instance with provisioning userdata using Cloud-Init\n- name: launch a compute instance\n  hosts: localhost\n  tasks:\n    - name: launch an instance\n      openstack.cloud.server:\n        name: vm1\n        state: present\n        image: \"Ubuntu Server 14.04\"\n        flavor: \"P-1\"\n        network: \"Production\"\n        userdata: |\n          #cloud-config\n          chpasswd:\n            list: |\n              ubuntu:{{ default_password }}\n            expire: False\n          packages:\n            - ansible\n          package_upgrade: true\n\n# Creates a new instance with provisioning userdata using Bash Scripts\n- name: launch a compute instance\n  hosts: localhost\n  tasks:\n    - name: launch an instance\n      openstack.cloud.server:\n        name: vm1\n        state: present\n        image: \"Ubuntu Server 14.04\"\n        flavor: \"P-1\"\n        network: \"Production\"\n        userdata: |\n          {%- raw -%}#!/bin/bash\n          echo \"  up ip route add 10.0.0.0/8 via {% endraw -%}{{ intra_router }}{%- raw -%}\" >> /etc/network/interfaces.d/eth0.conf\n          echo \"  down ip route del 10.0.0.0/8\" >> /etc/network/interfaces.d/eth0.conf\n          ifdown eth0 && ifup eth0\n          {% endraw %}\n\n# Create a new instance with server group for (anti-)affinity\n# server group ID is returned from openstack.cloud.server_group module.\n- name: launch a compute instance\n  hosts: localhost\n  tasks:\n    - name: launch an instance\n      openstack.cloud.server:\n        state: present\n        name: vm1\n        image: 4f905f38-e52a-43d2-b6ec-754a13ffb529\n        flavor: 4\n        scheduler_hints:\n          group: f5c8c61a-9230-400a-8ed2-3b023c190a7f\n\n# Create an instance with \"tags\" for the nic\n- name: Create instance with nics \"tags\"\n  openstack.cloud.server:\n    state: present\n    auth:\n        auth_url: https://identity.example.com\n        username: admin\n        password: admin\n        project_name: admin\n    name: vm1\n    image: 4f905f38-e52a-43d2-b6ec-754a13ffb529\n    key_name: ansible_key\n    flavor: 4\n    nics:\n      - port-name: net1_port1\n        tag: test_tag\n      - net-name: another_network\n\n# Deletes an instance via its ID\n- name: remove an instance\n  hosts: localhost\n  tasks:\n    - name: remove an instance\n      openstack.cloud.server:\n        name: abcdef01-2345-6789-0abc-def0123456789\n        state: absent\n\n"
  },
  "openstack.cloud.server_action": {
    "doc": {
      "description": "Perform server actions on an existing compute instance from OpenStack. This module does not return any data other than changed true/false. When I(action) is 'rebuild', then I(image) parameter is required.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "action": {
          "aliases": [],
          "description": "Perform the given action. The lock and unlock actions always return changed as the servers API does not provide lock status.",
          "type": "str",
          "required": true,
          "choices": [
            "stop",
            "start",
            "pause",
            "unpause",
            "lock",
            "unlock",
            "suspend",
            "resume",
            "rebuild",
            "shelve",
            "shelve_offload",
            "unshelve"
          ],
          "suboptions": {}
        },
        "admin_password": {
          "aliases": [],
          "description": "Admin password for server to rebuild",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "image": {
          "aliases": [],
          "description": "Image the server should be rebuilt with",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "server": {
          "aliases": [],
          "description": "Name or ID of the instance",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The amount of time the module should wait for the instance to perform the requested action.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "If the module should wait for the instance action to be performed.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Perform actions on Compute Instances from OpenStack"
    },
    "examples": "\n# Pauses a compute instance\n- openstack.cloud.server_action:\n      action: pause\n      auth:\n        auth_url: https://identity.example.com\n        username: admin\n        password: admin\n        project_name: admin\n      server: vm1\n      timeout: 200\n"
  },
  "openstack.cloud.server_group": {
    "doc": {
      "description": "Add or remove server groups from OpenStack.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Server group name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "policies": {
          "aliases": [],
          "description": "A list of one or more policy names to associate with the server group. The list must contain at least one policy name. The current valid policy names are anti-affinity, affinity, soft-anti-affinity and soft-affinity.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the resource. When I(state) is 'present', then I(policies) is required.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Manage OpenStack server groups"
    },
    "examples": "\n# Create a server group with 'affinity' policy.\n- openstack.cloud.server_group:\n    state: present\n    auth:\n      auth_url: https://identity.example.com\n      username: admin\n      password: admin\n      project_name: admin\n    name: my_server_group\n    policies:\n      - affinity\n\n# Delete 'my_server_group' server group.\n- openstack.cloud.server_group:\n    state: absent\n    auth:\n      auth_url: https://identity.example.com\n      username: admin\n      password: admin\n      project_name: admin\n    name: my_server_group\n"
  },
  "openstack.cloud.server_info": {
    "doc": {
      "description": "Retrieve information about server instances from OpenStack.\nThis module was called C(os_server_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(openstack.cloud.server_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "The result contains a list of servers.\nThe standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "all_projects": {
          "aliases": [],
          "description": "Whether to list servers from all projects or just the current auth scoped project.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "detailed": {
          "aliases": [],
          "description": "when true, return additional detail about servers at the expense of additional API calls.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "filters": {
          "aliases": [],
          "description": "restrict results to servers matching a dictionary of filters",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "server": {
          "aliases": [],
          "description": "restrict results to servers with names or UUID matching this glob expression (e.g., <web*>).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Retrieve information about one or more compute instances"
    },
    "examples": "\n# Gather information about all servers named <web*> that are in an active state:\n- openstack.cloud.server_info:\n    cloud: rax-dfw\n    server: web*\n    filters:\n      vm_state: active\n  register: result\n- debug:\n    msg: \"{{ result.openstack_servers }}\"\n"
  },
  "openstack.cloud.server_metadata": {
    "doc": {
      "description": "Add, Update or Remove metadata in compute instances from OpenStack.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Availability zone in which to create the snapshot.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "meta": {
          "aliases": [],
          "description": "A list of key value pairs that should be provided as a metadata to the instance or a string containing a list of key-value pairs. Eg:  meta: \"key1=value1,key2=value2\"",
          "type": "dict",
          "required": true,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "server": {
          "aliases": [
            "name"
          ],
          "description": "Name of the instance to update the metadata",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Add/Update/Delete Metadata in Compute Instances from OpenStack"
    },
    "examples": "\n# Creates or updates hostname=test1 as metadata of the server instance vm1\n- name: add metadata to compute instance\n  hosts: localhost\n  tasks:\n  - name: add metadata to instance\n    openstack.cloud.server_metadata:\n        state: present\n        auth:\n            auth_url: https://openstack-api.example.com:35357/v2.0/\n            username: admin\n            password: admin\n            project_name: admin\n        name: vm1\n        meta:\n            hostname: test1\n            group: group1\n\n# Removes the keys under meta from the instance named vm1\n- name: delete metadata from compute instance\n  hosts: localhost\n  tasks:\n  - name: delete metadata from instance\n    openstack.cloud.server_metadata:\n        state: absent\n        auth:\n            auth_url: https://openstack-api.example.com:35357/v2.0/\n            username: admin\n            password: admin\n            project_name: admin\n        name: vm1\n        meta:\n            hostname:\n            group:\n"
  },
  "openstack.cloud.server_volume": {
    "doc": {
      "description": "Attach or Detach volumes from OpenStack VM's",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "device": {
          "aliases": [],
          "description": "Device you want to attach. Defaults to auto finding a device name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "server": {
          "aliases": [],
          "description": "Name or ID of server you want to attach a volume to",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "volume": {
          "aliases": [],
          "description": "Name or id of volume you want to attach to a server",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Attach/Detach Volumes from OpenStack VM's"
    },
    "examples": "\n# Attaches a volume to a compute host\n- name: attach a volume\n  hosts: localhost\n  tasks:\n  - name: attach volume to host\n    openstack.cloud.server_volume:\n      state: present\n      cloud: mordred\n      server: Mysql-server\n      volume: mysql-data\n      device: /dev/vdb\n"
  },
  "openstack.cloud.stack": {
    "doc": {
      "description": "Add or Remove a Stack to an OpenStack Heat",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "environment": {
          "aliases": [],
          "description": "List of environment files that should be used for the stack creation",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the stack that should be created, name could be char and digit, no space",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "parameters": {
          "aliases": [],
          "description": "Dictionary of parameters for the stack creation",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "rollback": {
          "aliases": [],
          "description": "Rollback stack creation",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the resource",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tag": {
          "aliases": [],
          "description": "Tag for the stack that should be created, name could be char and digit, no space",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "template": {
          "aliases": [],
          "description": "Path of the template file to use for the stack creation",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Maximum number of seconds to wait for the stack creation",
          "default": "3600",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Add/Remove Heat Stack"
    },
    "examples": "\n---\n- name: create stack\n  ignore_errors: True\n  register: stack_create\n  openstack.cloud.stack:\n    name: \"{{ stack_name }}\"\n    tag: \"{{ tag_name }}\"\n    state: present\n    template: \"/path/to/my_stack.yaml\"\n    environment:\n    - /path/to/resource-registry.yaml\n    - /path/to/environment.yaml\n    parameters:\n        bmc_flavor: m1.medium\n        bmc_image: CentOS\n        key_name: default\n        private_net: \"{{ private_net_param }}\"\n        node_count: 2\n        name: undercloud\n        image: CentOS\n        my_flavor: m1.large\n        external_net: \"{{ external_net_param }}\"\n"
  },
  "openstack.cloud.stack_info": {
    "doc": {
      "description": "Get information about Heat stack in openstack",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the stack as a string.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "owner_id": {
          "aliases": [],
          "description": "Owner (parent) of the stack to be used as a filter",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "project_id": {
          "aliases": [],
          "description": "Project ID to be used as filter",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "status": {
          "aliases": [],
          "description": "Value of the status of the stack so that you can filter on \"available\" for example",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Retrive information about Heat stacks"
    },
    "examples": "\n# Get backups.\n- openstack.cloud.stack_info:\n  register: stack\n\n- openstack.cloud.stack_info:\n    name: my_stack\n  register: stack\n"
  },
  "openstack.cloud.subnet": {
    "doc": {
      "description": "Add or Remove a subnet to an OpenStack network",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "allocation_pool_end": {
          "aliases": [],
          "description": "From the subnet pool the last IP that should be assigned to the virtual machines.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "allocation_pool_start": {
          "aliases": [],
          "description": "From the subnet pool the starting address from which the IP should be allocated.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cidr": {
          "aliases": [],
          "description": "The CIDR representation of the subnet that should be assigned to the subnet. Required when I(state) is 'present' and a subnetpool is not specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "dns_nameservers": {
          "aliases": [],
          "description": "List of DNS nameservers for this subnet.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "enable_dhcp": {
          "aliases": [],
          "description": "Whether DHCP should be enabled for this subnet.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "extra_specs": {
          "aliases": [],
          "description": "Dictionary with extra key/value pairs passed to the API",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "gateway_ip": {
          "aliases": [],
          "description": "The ip that would be assigned to the gateway for this subnet",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host_routes": {
          "aliases": [],
          "description": "A list of host route dictionaries for the subnet.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "destination": {
              "aliases": [],
              "description": "The destination network (CIDR).",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "nexthop": {
              "aliases": [],
              "description": "The next hop (aka gateway) for the I(destination).",
              "type": "str",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "ip_version": {
          "aliases": [],
          "description": "The IP version of the subnet 4 or 6",
          "default": "4",
          "type": "str",
          "required": false,
          "choices": [
            "4",
            "6"
          ],
          "suboptions": {}
        },
        "ipv6_address_mode": {
          "aliases": [],
          "description": "IPv6 address mode",
          "type": "str",
          "required": false,
          "choices": [
            "dhcpv6-stateful",
            "dhcpv6-stateless",
            "slaac"
          ],
          "suboptions": {}
        },
        "ipv6_ra_mode": {
          "aliases": [],
          "description": "IPv6 router advertisement mode",
          "type": "str",
          "required": false,
          "choices": [
            "dhcpv6-stateful",
            "dhcpv6-stateless",
            "slaac"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the subnet that should be created. Although Neutron allows for non-unique subnet names, this module enforces subnet name uniqueness.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "network_name": {
          "aliases": [],
          "description": "Name of the network to which the subnet should be attached\nRequired when I(state) is 'present'",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "no_gateway_ip": {
          "aliases": [],
          "description": "The gateway IP would not be assigned for this subnet",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Project name or ID containing the subnet (name admin-only)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the resource",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_default_subnetpool": {
          "aliases": [],
          "description": "Use the default subnetpool for I(ip_version) to obtain a CIDR.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Add/Remove subnet to an OpenStack network"
    },
    "examples": "\n# Create a new (or update an existing) subnet on the specified network\n- openstack.cloud.subnet:\n    state: present\n    network_name: network1\n    name: net1subnet\n    cidr: 192.168.0.0/24\n    dns_nameservers:\n       - 8.8.8.7\n       - 8.8.8.8\n    host_routes:\n       - destination: 0.0.0.0/0\n         nexthop: 12.34.56.78\n       - destination: 192.168.0.0/24\n         nexthop: 192.168.0.1\n\n# Delete a subnet\n- openstack.cloud.subnet:\n    state: absent\n    name: net1subnet\n\n# Create an ipv6 stateless subnet\n- openstack.cloud.subnet:\n    state: present\n    name: intv6\n    network_name: internal\n    ip_version: 6\n    cidr: 2db8:1::/64\n    dns_nameservers:\n        - 2001:4860:4860::8888\n        - 2001:4860:4860::8844\n    ipv6_ra_mode: dhcpv6-stateless\n    ipv6_address_mode: dhcpv6-stateless\n"
  },
  "openstack.cloud.subnets_info": {
    "doc": {
      "description": "Retrieve information about one or more subnets from OpenStack.\nThis module was called C(openstack.cloud.subnets_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(openstack.cloud.subnets_info) module no longer returns C(ansible_facts)!",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "filters": {
          "aliases": [],
          "description": "A dictionary of meta data to use for further filtering.  Elements of this dictionary may be additional dictionaries.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "subnet"
          ],
          "description": "Name or ID of the subnet.\nAlias 'subnet' added in version 2.8.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Retrieve information about one or more OpenStack subnets."
    },
    "examples": "\n- name: Gather information about previously created subnets\n  openstack.cloud.subnets_info:\n    auth:\n      auth_url: https://identity.example.com\n      username: user\n      password: password\n      project_name: someproject\n  register: result\n\n- name: Show openstack subnets\n  debug:\n    msg: \"{{ result.openstack_subnets }}\"\n\n- name: Gather information about a previously created subnet by name\n  openstack.cloud.subnets_info:\n    auth:\n      auth_url: https://identity.example.com\n      username: user\n      password: password\n      project_name: someproject\n    name: subnet1\n  register: result\n\n- name: Show openstack subnets\n  debug:\n    msg: \"{{ result.openstack_subnets }}\"\n\n- name: Gather information about a previously created subnet with filter\n  # Note: name and filters parameters are not mutually exclusive\n  openstack.cloud.subnets_info:\n    auth:\n      auth_url: https://identity.example.com\n      username: user\n      password: password\n      project_name: someproject\n    filters:\n      tenant_id: 55e2ce24b2a245b09f181bf025724cbe\n  register: result\n\n- name: Show openstack subnets\n  debug:\n    msg: \"{{ result.openstack_subnets }}\"\n"
  },
  "openstack.cloud.volume": {
    "doc": {
      "description": "Create or Remove cinder block storage volumes",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "bootable": {
          "aliases": [],
          "description": "Bootable flag for volume.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "display_description": {
          "aliases": [
            "description"
          ],
          "description": "String describing the volume",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "display_name": {
          "aliases": [
            "name"
          ],
          "description": "Name of volume",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "image": {
          "aliases": [],
          "description": "Image name or id for boot from volume",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "metadata": {
          "aliases": [],
          "description": "Metadata for the volume",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "scheduler_hints": {
          "aliases": [],
          "description": "Scheduler hints passed to volume API in form of dict",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size of volume in GB. This parameter is required when the I(state) parameter is 'present'.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "snapshot_id": {
          "aliases": [],
          "description": "Volume snapshot id to create from",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "volume": {
          "aliases": [],
          "description": "Volume name or id to create from",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "volume_type": {
          "aliases": [],
          "description": "Volume type for volume",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Create/Delete Cinder Volumes"
    },
    "examples": "\n# Creates a new volume\n- name: create a volume\n  hosts: localhost\n  tasks:\n  - name: create 40g test volume\n    openstack.cloud.volume:\n      state: present\n      cloud: mordred\n      availability_zone: az2\n      size: 40\n      display_name: test_volume\n      scheduler_hints:\n        same_host: 243e8d3c-8f47-4a61-93d6-7215c344b0c0\n"
  },
  "openstack.cloud.volume_backup": {
    "doc": {
      "description": "Add or Remove Volume Backup in OTC.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "display_description": {
          "aliases": [
            "description"
          ],
          "description": "String describing the backup",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "display_name": {
          "aliases": [
            "name"
          ],
          "description": "Name that has to be given to the backup",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Indicates whether to backup, even if the volume is attached.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "incremental": {
          "aliases": [],
          "description": "The backup mode",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "metadata": {
          "aliases": [],
          "description": "Metadata for the backup",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "snapshot": {
          "aliases": [],
          "description": "Name or ID of the Snapshot to take backup of",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "volume": {
          "aliases": [],
          "description": "Name or ID of the volume. Required when state is True.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Add/Delete Volume backup"
    },
    "examples": "\n- name: Create backup\n  openstack.cloud.volume_backup:\n    display_name: test_volume_backup\n    volume: \"test_volume\"\n\n- name: Create backup from snapshot\n  openstack.cloud.volume_backup:\n    display_name: test_volume_backup\n    volume: \"test_volume\"\n    snapshot: \"test_snapshot\"\n\n- name: Delete volume backup\n  openstack.cloud.volume_backup:\n    display_name: test_volume_backup\n    state: absent\n"
  },
  "openstack.cloud.volume_backup_info": {
    "doc": {
      "description": "Get Backup info from the Openstack cloud.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the Backup.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "volume": {
          "aliases": [],
          "description": "Name of the volume.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Get Backups"
    },
    "examples": "\n# Get backups.\n- openstack.cloud.volume_backup_info:\n  register: backup\n\n- openstack.cloud.volume_backup_info:\n    name: my_fake_backup\n  register: backup\n"
  },
  "openstack.cloud.volume_info": {
    "doc": {
      "description": "Get information about block storage in openstack",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "all_projects": {
          "aliases": [],
          "description": "Whether return the volumes in all projects",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "details": {
          "aliases": [],
          "description": "Whether to provide additional information about volumes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the volume as a string.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "status": {
          "aliases": [],
          "description": "Value of the status of the volume so that you can filter on \"available\" for example",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Retrive information about volumes"
    },
    "examples": "\n- openstack.cloud.volume_info:\n\n- openstack.cloud.volume_info:\n    name: myvolume\n\n- openstack.cloud.volume_info:\n    all_projects: true\n\n- openstack.cloud.volume_info:\n    all_projects: true\n    details: true\n"
  },
  "openstack.cloud.volume_snapshot": {
    "doc": {
      "description": "Create or Delete cinder block storage volume snapshots",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "display_description": {
          "aliases": [
            "description"
          ],
          "description": "String describing the snapshot",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "display_name": {
          "aliases": [
            "name"
          ],
          "description": "Name of the snapshot",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Allows or disallows snapshot of a volume to be created when the volume is attached to an instance.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the resource be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "volume": {
          "aliases": [],
          "description": "The volume name or id to create/delete the snapshot",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Create/Delete Cinder Volume Snapshots"
    },
    "examples": "\n# Creates a snapshot on volume 'test_volume'\n- name: create and delete snapshot\n  hosts: localhost\n  tasks:\n  - name: create snapshot\n    openstack.cloud.volume_snapshot:\n      state: present\n      cloud: mordred\n      availability_zone: az2\n      display_name: test_snapshot\n      volume: test_volume\n  - name: delete snapshot\n    openstack.cloud.volume_snapshot:\n      state: absent\n      cloud: mordred\n      availability_zone: az2\n      display_name: test_snapshot\n      volume: test_volume\n"
  },
  "openstack.cloud.volume_snapshot_info": {
    "doc": {
      "description": "Get Volume Snapshot info from the Openstack cloud.",
      "has_action": false,
      "notes": "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.\nAuth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)",
      "options": {
        "api_timeout": {
          "aliases": [],
          "description": "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth": {
          "aliases": [],
          "description": "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "auth_type": {
          "aliases": [],
          "description": "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability_zone": {
          "aliases": [],
          "description": "Ignored. Present for backwards compatibility",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "cacert"
          ],
          "description": "A path to a CA Cert bundle that can be used as part of verifying SSL API requests.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "cert"
          ],
          "description": "A path to a client certificate to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "key"
          ],
          "description": "A path to a client key to use as part of the SSL transaction.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cloud": {
          "aliases": [],
          "description": "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "details": {
          "aliases": [],
          "description": "More detailed output",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "interface": {
          "aliases": [
            "endpoint_type"
          ],
          "description": "Endpoint URL type to fetch from the service catalog.",
          "default": "public",
          "type": "str",
          "required": false,
          "choices": [
            "admin",
            "internal",
            "public"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the Snapshot.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "region_name": {
          "aliases": [],
          "description": "Name of the region.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "status": {
          "aliases": [],
          "description": "Specifies the snapshot status.",
          "type": "str",
          "required": false,
          "choices": [
            "creating",
            "available",
            "error",
            "deleting",
            "error_deleting",
            "rollbacking",
            "backing-up"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "How long should ansible wait for the requested resource.",
          "default": "180",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify"
          ],
          "description": "Whether or not SSL API requests should be verified.\nBefore Ansible 2.3 this defaulted to C(yes).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "volume": {
          "aliases": [],
          "description": "Name of the volume.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Should ansible wait until the requested resource is complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "openstacksdk",
        "openstacksdk >= 0.12.0",
        "python >= 3.6"
      ],
      "short_description": "Get volume snapshots"
    },
    "examples": "\n# Get snapshots.\n- openstack.cloud.volume_snapshot_info:\n  register: snapshots\n\n- openstack.cloud.volume_snapshotbackup_info:\n    name: my_fake_snapshot\n  register: snapshot\n"
  }
}