{
  "ansible.utils.cli_parse": {
    "doc": {
      "description": "Parse cli output or text using a variety of parsers",
      "has_action": true,
      "notes": "The default search path for a parser template is templates/{{ short_os }}_{{ command }}.{{ extension }}\n=> short_os derived from ansible_network_os or ansible_distribution and set to lower case\n=> command is the command passed to the module with spaces replaced with _\n=> extension is specific to the parser used (native=yaml, textfsm=textfsm, ttp=ttp)\nThe default Ansible search path for the templates directory is used for parser templates as well\nSome parsers may have additional configuration options available. See the parsers/vars key and the parser's documentation\nSome parsers require third-party python libraries be installed on the Ansible control node and a specific python version\nexample Pyats requires pyats and genie and requires Python 3\nexample ntc_templates requires ntc_templates\nexample textfsm requires textfsm\nexample ttp requires ttp\nexample xml requires xml_to_dict\nSupport of 3rd party python libraries is limited to the use of their public APIs as documented\nAdditional information and examples can be found in the parsing user guide:\nhttps://docs.ansible.com/ansible/latest/network/user_guide/cli_parsing.html",
      "options": {
        "command": {
          "aliases": [],
          "description": "The command to run on the host",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "parser": {
          "aliases": [],
          "description": "Parser specific parameters",
          "type": "dict",
          "required": true,
          "suboptions": {
            "command": {
              "aliases": [],
              "description": "The command used to locate the parser's template",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The name of the parser to use",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "os": {
              "aliases": [],
              "description": "Provide an operating system value to the parser\nFor `ntc_templates` parser, this should be in the supported `<vendor>_<os>` format.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "template_path": {
              "aliases": [],
              "description": "Path of the parser template on the Ansible controller\nThis can be a relative or an absolute path",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "vars": {
              "aliases": [],
              "description": "Additional parser specific parameters\nSee the cli_parse user guide for examples of parser specific variables\nU(https://docs.ansible.com/ansible/latest/network/user_guide/cli_parsing.html)",
              "type": "dict",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "set_fact": {
          "aliases": [],
          "description": "Set the resulting parsed data as a fact",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "text": {
          "aliases": [],
          "description": "Text to be parsed",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Parse cli output or text using a variety of parsers",
      "version_added": "1.0.0"
    },
    "examples": "\n\n# Using the native parser\n\n# -------------\n# templates/nxos_show_interface.yaml\n# - example: Ethernet1/1 is up\n#   getval: '(?P<name>\\S+) is (?P<oper_state>\\S+)'\n#   result:\n#     \"{{ name }}\":\n#         name: \"{{ name }}\"\n#         state:\n#         operating: \"{{ oper_state }}\"\n#   shared: True\n#\n# - example: admin state is up, Dedicated Interface\n#   getval: 'admin state is (?P<admin_state>\\S+)'\n#   result:\n#     \"{{ name }}\":\n#         name: \"{{ name }}\"\n#         state:\n#         admin: \"{{ admin_state }}\"\n#\n# - example: \"  Hardware: Ethernet, address: 0000.5E00.5301 (bia 0000.5E00.5301)\"\n#   getval: '\\s+Hardware: (?P<hardware>.*), address: (?P<mac>\\S+)'\n#   result:\n#     \"{{ name }}\":\n#         hardware: \"{{ hardware }}\"\n#         mac_address: \"{{ mac }}\"\n\n- name: Run command and parse with native\n  ansible.utils.cli_parse:\n    command: \"show interface\"\n    parser:\n      name: ansible.netcommon.native\n    set_fact: interfaces_fact\n\n\n- name: Pass text and template_path\n  ansible.utils.cli_parse:\n    text: \"{{ previous_command['stdout'] }}\"\n    parser:\n      name: ansible.netcommon.native\n      template_path: \"{{ role_path }}/templates/nxos_show_interface.yaml\"\n\n\n# Using the ntc_templates parser\n\n# -------------\n# The ntc_templates use 'vendor_platform' for the file name\n# it will be derived from ansible_network_os if not provided\n# example cisco.ios.ios => cisco_ios\n\n- name: Run command and parse with ntc_templates\n  ansible.utils.cli_parse:\n    command: \"show interface\"\n    parser:\n      name: ansible.netcommon.ntc_templates\n  register: parser_output\n\n- name: Pass text and command\n  ansible.utils.cli_parse:\n    text: \"{{ previous_command['stdout'] }}\"\n    parser:\n      name: ansible.netcommon.ntc_templates\n      command: show interface\n  register: parser_output\n\n\n# Using the pyats parser\n\n# -------------\n# The pyats parser uses 'os' to locate the appropriate parser\n# it will be derived from ansible_network_os if not provided\n# in the case of pyats: cisco.ios.ios => iosxe\n\n- name: Run command and parse with pyats\n  ansible.utils.cli_parse:\n    command: \"show interface\"\n    parser:\n        name: ansible.netcommon.pyats\n  register: parser_output\n\n- name: Pass text and command\n  ansible.utils.cli_parse:\n    text: \"{{ previous_command['stdout'] }}\"\n    parser:\n        name: ansible.netcommon.pyats\n        command: show interface\n  register: parser_output\n\n- name: Provide an OS to pyats to use an ios parser\n  ansible.utils.cli_parse:\n    text: \"{{ previous_command['stdout'] }}\"\n    parser:\n        name: ansible.netcommon.pyats\n        command: show interface\n        os: ios\n  register: parser_output\n\n\n# Using the textfsm parser\n\n# -------------\n# templates/nxos_show_version.textfsm\n#\n# Value UPTIME ((\\d+\\s\\w+.s.,?\\s?){4})\n# Value LAST_REBOOT_REASON (.+)\n# Value OS (\\d+.\\d+(.+)?)\n# Value BOOT_IMAGE (.*)\n# Value PLATFORM (\\w+)\n#\n# Start\n#   ^\\s+(NXOS: version|system:\\s+version)\\s+${OS}\\s*$$\n#   ^\\s+(NXOS|kickstart)\\s+image\\s+file\\s+is:\\s+${BOOT_IMAGE}\\s*$$\n#   ^\\s+cisco\\s+${PLATFORM}\\s+[cC]hassis\n#   ^\\s+cisco\\s+Nexus\\d+\\s+${PLATFORM}\n#   # Cisco N5K platform\n#   ^\\s+cisco\\s+Nexus\\s+${PLATFORM}\\s+[cC]hassis\n#   ^\\s+cisco\\s+.+-${PLATFORM}\\s*\n#   ^Kernel\\s+uptime\\s+is\\s+${UPTIME}\n#   ^\\s+Reason:\\s${LAST_REBOOT_REASON} -> Record\n\n- name: Run command and parse with textfsm\n  ansible.utils.cli_parse:\n    command: \"show version\"\n    parser:\n      name: ansible.utils.textfsm\n  register: parser_output\n\n- name: Pass text and command\n  ansible.utils.cli_parse:\n    text: \"{{ previous_command['stdout'] }}\"\n    parser:\n      name: ansible.utils.textfsm\n      command: show version\n  register: parser_output\n\n# Using the ttp parser\n\n# -------------\n# templates/nxos_show_interface.ttp\n#\n# {{ interface }} is {{ state }}\n# admin state is {{ admin_state }}{{ ignore(\".*\") }}\n\n- name: Run command and parse with ttp\n  ansible.utils.cli_parse:\n    command: \"show interface\"\n    parser:\n      name: ansible.utils.ttp\n    set_fact: new_fact_key\n\n- name: Pass text and template_path\n  ansible.utils.cli_parse:\n    text: \"{{ previous_command['stdout'] }}\"\n    parser:\n      name: ansible.utils.ttp\n      template_path: \"{{ role_path }}/templates/nxos_show_interface.ttp\"\n  register: parser_output\n\n# Using the XML parser\n\n# -------------\n- name: Run command and parse with xml\n  ansible.utils.cli_parse:\n    command: \"show interface | xml\"\n    parser:\n      name: ansible.utils.xml\n  register: parser_output\n\n- name: Pass text and parse with xml\n  ansible.utils.cli_parse:\n    text: \"{{ previous_command['stdout'] }}\"\n    parser:\n      name: ansible.utils.xml\n  register: parser_output\n"
  },
  "ansible.utils.fact_diff": {
    "doc": {
      "description": "Compare two facts or variables and get a diff.",
      "has_action": true,
      "options": {
        "after": {
          "aliases": [],
          "description": "The second fact to be used in the comparison.",
          "type": "raw",
          "required": true,
          "suboptions": {}
        },
        "before": {
          "aliases": [],
          "description": "The first fact to be used in the comparison.",
          "type": "raw",
          "required": true,
          "suboptions": {}
        },
        "plugin": {
          "aliases": [],
          "description": "Configure and specify the diff plugin to use",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "The diff plugin to use, in fully qualified collection name format.",
              "default": "ansible.utils.native",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "vars": {
              "aliases": [],
              "description": "Parameters passed to the diff plugin.",
              "default": "{}",
              "type": "dict",
              "required": false,
              "suboptions": {
                "skip_lines": {
                  "aliases": [],
                  "description": "Skip lines matching these regular expressions.\nMatches will be removed prior to the diff.\nIf the provided I(before) and I(after) are a string, they will be split.\nEach entry in each list will be cast to a string for the comparison",
                  "type": "list",
                  "required": false,
                  "elements": "str",
                  "suboptions": {}
                }
              }
            }
          }
        }
      },
      "short_description": "Find the difference between currently set facts",
      "version_added": "1.0.0"
    },
    "examples": "\n- ansible.builtin.set_fact:\n    before:\n      a:\n        b:\n          c:\n            d:\n            - 0\n            - 1\n    after:\n      a:\n        b:\n          c:\n            d:\n            - 2\n            - 3\n\n- name: Show the difference in json format\n  ansible.utils.fact_diff:\n    before: \"{{ before }}\"\n    after: \"{{ after }}\"\n\n# TASK [ansible.utils.fact_diff] **************************************\n# --- before\n# +++ after\n# @@ -3,8 +3,8 @@\n#          \"b\": {\n#              \"c\": {\n#                  \"d\": [\n# -                    0,\n# -                    1\n# +                    2,\n# +                    3\n#                  ]\n#              }\n#          }\n#\n# changed: [localhost]\n\n- name: Show the difference in path format\n  ansible.utils.fact_diff:\n    before: \"{{ before|ansible.utils.to_paths }}\"\n    after: \"{{ after|ansible.utils.to_paths }}\"\n\n# TASK [ansible.utils.fact_diff] **************************************\n# --- before\n# +++ after\n# @@ -1,4 +1,4 @@\n#  {\n# -    \"a.b.c.d[0]\": 0,\n# -    \"a.b.c.d[1]\": 1\n# +    \"a.b.c.d[0]\": 2,\n# +    \"a.b.c.d[1]\": 3\n#  }\n#\n# changed: [localhost]\n\n- name: Show the difference in yaml format\n  ansible.utils.fact_diff:\n    before: \"{{ before|to_nice_yaml }}\"\n    after: \"{{ after|to_nice_yaml }}\"\n\n# TASK [ansible.utils.fact_diff] **************************************\n# --- before\n# +++ after\n# @@ -2,5 +2,5 @@\n#      b:\n#          c:\n#              d:\n# -            - 0\n# -            - 1\n# +            - 2\n# +            - 3\n\n# changed: [localhost]\n\n\n#### Show the difference between complex object using restconf\n#  ansible_connection: ansible.netcommon.httpapi\n#  ansible_httpapi_use_ssl: True\n#  ansible_httpapi_validate_certs: False\n#  ansible_network_os: ansible.netcommon.restconf\n\n- name: Get the current interface config prior to changes\n  ansible.netcommon.restconf_get:\n    content: config\n    path: /data/Cisco-NX-OS-device:System/intf-items/phys-items\n  register: pre\n\n- name: Update the description of eth1/100\n  ansible.utils.update_fact:\n    updates:\n    - path: \"pre['response']['phys-items']['PhysIf-list'][{{ index }}]['descr']\"\n      value: \"Configured by ansible {{ 100 | random }}\"\n  vars:\n    index: \"{{ pre['response']['phys-items']['PhysIf-list']|ansible.utils.index_of('eq', 'eth1/100', 'id') }}\"\n  register: updated\n\n- name: Apply the configuration\n  ansible.netcommon.restconf_config:\n    path: 'data/Cisco-NX-OS-device:System/intf-items/'\n    content: \"{{ updated.pre.response}}\"\n    method: patch\n\n- name: Get the current interface config after changes\n  ansible.netcommon.restconf_get:\n    content: config\n    path: /data/Cisco-NX-OS-device:System/intf-items/phys-items\n  register: post\n\n- name: Show the difference\n  ansible.utils.fact_diff:\n    before: \"{{ pre.response|ansible.utils.to_paths }}\"\n    after: \"{{ post.response|ansible.utils.to_paths }}\"\n\n# TASK [ansible.utils.fact_diff] *********************************************\n# --- before\n# +++ after\n# @@ -3604,7 +3604,7 @@\n#      \"phys-items['PhysIf-list'][37].bw\": \"0\",\n#      \"phys-items['PhysIf-list'][37].controllerId\": \"\",\n#      \"phys-items['PhysIf-list'][37].delay\": \"1\",\n# -    \"phys-items['PhysIf-list'][37].descr\": \"Configured by ansible 95\",\n# +    \"phys-items['PhysIf-list'][37].descr\": \"Configured by ansible 20\",\n#      \"phys-items['PhysIf-list'][37].dot1qEtherType\": \"0x8100\",\n#      \"phys-items['PhysIf-list'][37].duplex\": \"auto\",\n#      \"phys-items['PhysIf-list'][37].id\": \"eth1/100\",\n\n# changed: [nxos101]\n\n"
  },
  "ansible.utils.update_fact": {
    "doc": {
      "description": "This module allows updating existing variables.\nVariables are updated on a host-by-host basis.\nVariables are not modified in place, instead they are returned by the module.",
      "has_action": true,
      "options": {
        "updates": {
          "aliases": [],
          "description": "A list of dictionaries, each a desired update to make.",
          "type": "list",
          "required": true,
          "elements": "dict",
          "suboptions": {
            "path": {
              "aliases": [],
              "description": "The path in a currently set variable to update.\nThe path can be in dot or bracket notation.\nIt should be a valid jinja reference.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "value": {
              "aliases": [],
              "description": "The value to be set at the path.\nCan be a simple or complex data structure.",
              "type": "raw",
              "required": true,
              "suboptions": {}
            }
          }
        }
      },
      "short_description": "Update currently set facts",
      "version_added": "1.0.0"
    },
    "examples": "\n\n# Update an exisitng fact, dot or bracket notation\n- name: Set a fact\n  ansible.builtin.set_fact:\n    a:\n      b:\n        c:\n        - 1\n        - 2\n\n- name: Update the fact\n  ansible.utils.update_fact:\n    updates:\n    - path: a.b.c.0\n      value: 10\n    - path: \"a['b']['c'][1]\"\n      value: 20\n  register: updated\n\n- debug:\n    var: updated.a\n\n# updated:\n#   a:\n#     b:\n#       c:\n#       - 10\n#       - 20\n#   changed: true\n\n\n# Lists can be appended, new keys added to dictionaries\n\n- name: Set a fact\n  ansible.builtin.set_fact:\n    a:\n      b:\n        b1:\n        - 1\n        - 2\n\n- name: Update, add to list, add new key\n  ansible.utils.update_fact:\n    updates:\n    - path: a.b.b1.2\n      value: 3\n    - path: a.b.b2\n      value:\n      - 10\n      - 20\n      - 30\n  register: updated\n\n- debug:\n    var: updated.a\n\n# updated:\n#   a:\n#     b:\n#       b1:\n#       - 1\n#       - 2\n#       - 3\n#       b2:\n#       - 10\n#       - 20\n#       - 30\n#   changed: true\n\n#####################################################################\n# Update every item in a list of dictionaries\n# build the update list ahead of time using a loop\n# and then apply the changes to the fact\n#####################################################################\n\n- name: Set fact\n  ansible.builtin.set_fact:\n    addresses:\n    - raw: 10.1.1.0/255.255.255.0\n      name: servers\n    - raw: 192.168.1.0/255.255.255.0\n      name: printers\n    - raw: 8.8.8.8\n      name: dns\n\n- name: Build a list of updates\n  ansible.builtin.set_fact:\n    update_list: \"{{ update_list + update }}\"\n  loop: \"{{ addresses }}\"\n  loop_control:\n    index_var: idx\n  vars:\n    update_list: []\n    update:\n    - path: addresses[{{ idx }}].network\n      value: \"{{ item['raw'] | ansible.netcommon.ipaddr('network') }}\"\n    - path: addresses[{{ idx }}].prefix\n      value: \"{{ item['raw'] | ansible.netcommon.ipaddr('prefix') }}\"\n\n- debug:\n    var: update_list\n\n# TASK [debug] *******************\n# ok: [localhost] =>\n#   update_list:\n#   - path: addresses[0].network\n#     value: 10.1.1.0\n#   - path: addresses[0].prefix\n#     value: '24'\n#   - path: addresses[1].network\n#     value: 192.168.1.0\n#   - path: addresses[1].prefix\n#     value: '24'\n#   - path: addresses[2].network\n#     value: 8.8.8.8\n#   - path: addresses[2].prefix\n#     value: '32'\n\n- name: Make the updates\n  ansible.utils.update_fact:\n    updates: \"{{ update_list }}\"\n  register: updated\n\n- debug:\n    var: updated\n\n# TASK [debug] ***********************\n# ok: [localhost] =>\n#   updated:\n#     addresses:\n#     - name: servers\n#       network: 10.1.1.0\n#       prefix: '24'\n#       raw: 10.1.1.0/255.255.255.0\n#     - name: printers\n#       network: 192.168.1.0\n#       prefix: '24'\n#       raw: 192.168.1.0/255.255.255.0\n#     - name: dns\n#       network: 8.8.8.8\n#       prefix: '32'\n#       raw: 8.8.8.8\n#     changed: true\n#     failed: false\n\n\n#####################################################################\n# Retrieve, update, and apply interface description change\n# use index_of to locate Etherent1/1\n#####################################################################\n\n- name: Get the current interface config\n  cisco.nxos.nxos_interfaces:\n    state: gathered\n  register: interfaces\n\n- name: Update the description of Ethernet1/1\n  ansible.utils.update_fact:\n    updates:\n    - path: \"interfaces.gathered[{{ index }}].description\"\n      value: \"Configured by ansible\"\n  vars:\n    index: \"{{ interfaces.gathered|ansible.utils.index_of('eq', 'Ethernet1/1', 'name') }}\"\n  register: updated\n\n- name: Update the configuration\n  cisco.nxos.nxos_interfaces:\n    config: \"{{ updated.interfaces.gathered }}\"\n    state: overridden\n  register: result\n\n- name: Show the commands issued\n  debug:\n    msg: \"{{ result['commands'] }}\"\n\n# TASK [Show the commands issued] *************************************\n# ok: [nxos101] => {\n#     \"msg\": [\n#         \"interface Ethernet1/1\",\n#         \"description Configured by ansible\"\n#     ]\n# }\n\n\n#####################################################################\n# Retrieve, update, and apply an ipv4 ACL change\n# finding the index of AFI ipv4 acls\n# finding the index of the ACL named 'test1'\n# finding the index of sequence 10\n#####################################################################\n\n- name: Retrieve the current acls\n  arista.eos.eos_acls:\n    state: gathered\n  register: current\n\n- name: Update the source of sequence 10 in the IPv4 ACL named test1\n  ansible.utils.update_fact:\n    updates:\n    - path: current.gathered[{{ afi }}].acls[{{ acl }}].aces[{{ ace }}].source\n      value:\n        subnet_address: \"192.168.2.0/24\"\n  vars:\n    afi: \"{{ current.gathered|ansible.utils.index_of('eq', 'ipv4', 'afi') }}\"\n    acl: \"{{ current.gathered[afi|int].acls|ansible.utils.index_of('eq', 'test1', 'name') }}\"\n    ace: \"{{ current.gathered[afi|int].acls[acl|int].aces|ansible.utils.index_of('eq', 10, 'sequence') }}\"\n  register: updated\n\n- name: Apply the changes\n  arista.eos.eos_acls:\n    config: \"{{ updated.current.gathered }}\"\n    state: overridden\n  register: changes\n\n- name: Show the commands issued\n  debug:\n    msg: \"{{ changes['commands'] }}\"\n\n# TASK [Show the commands issued] *************************************\n# ok: [eos101] => {\n#     \"msg\": [\n#         \"ip access-list test1\",\n#         \"no 10\",\n#         \"10 permit ip 192.168.2.0/24 host 10.1.1.2\"\n#     ]\n# }\n\n\n#####################################################################\n# Disable ip redirects on any layer3 interface\n# find the layer 3 interfaces\n# use each name to find their index in l3 interface\n# build an 'update' list and apply the updates\n#####################################################################\n\n- name: Get the current interface and L3 interface configuration\n  cisco.nxos.nxos_facts:\n    gather_subset: min\n    gather_network_resources:\n    - interfaces\n    - l3_interfaces\n\n- name: Build the list of updates to make\n  ansible.builtin.set_fact:\n    updates: \"{{ updates + [entry] }}\"\n  vars:\n    updates: []\n    entry:\n      path: \"ansible_network_resources.l3_interfaces[{{ item }}].redirects\"\n      value: False\n    w_mode: \"{{ ansible_network_resources.interfaces|selectattr('mode', 'defined') }}\"\n    m_l3: \"{{ w_mode|selectattr('mode', 'eq', 'layer3') }}\"\n    names: \"{{ m_l3|map(attribute='name')|list }}\"\n    l3_indicies: \"{{ ansible_network_resources.l3_interfaces|ansible.utils.index_of('in', names, 'name', wantlist=True) }}\"\n  loop: \"{{ l3_indicies }}\"\n\n# TASK [Build the list of updates to make] ****************************\n# ok: [nxos101] => (item=99) => changed=false\n#   ansible_facts:\n#     updates:\n#     - path: ansible_network_resources.l3_interfaces[99].redirects\n#       value: false\n#   ansible_loop_var: item\n#   item: 99\n\n- name: Update the l3 interfaces\n  ansible.utils.update_fact:\n    updates: \"{{ updates }}\"\n  register: updated\n\n# TASK [Update the l3 interfaces] *************************************\n# changed: [nxos101] => changed=true\n#   ansible_network_resources:\n#     l3_interfaces:\n#     <...>\n#     - ipv4:\n#       - address: 10.1.1.1/24\n#       name: Ethernet1/100\n#       redirects: false\n\n- name: Apply the configuration changes\n  cisco.nxos.l3_interfaces:\n    config: \"{{ updated.ansible_network_resources.l3_interfaces }}\"\n    state: overridden\n  register: changes\n\n# TASK [Apply the configuration changes] ******************************\n# changed: [nxos101] => changed=true\n#   commands:\n#   - interface Ethernet1/100\n#   - no ip redirects\n\n"
  },
  "ansible.utils.validate": {
    "doc": {
      "description": "Validate data with provided criteria based on the validation engine.",
      "has_action": true,
      "notes": "For the type of options I(data) and I(criteria) refer to the individual validate plugin documentation that is represented in the value of I(engine) option.\nFor additional plugin configuration options refer to the individual validate plugin documentation that is represented by the value of I(engine) option.\nThe plugin configuration option can be either passed as task or environment variables.\nThe precedence of the validate plugin configurable option is task variables followed by the environment variables.",
      "options": {
        "criteria": {
          "aliases": [],
          "description": "The criteria used for validation of I(data). For the type of criteria refer to the documentation of individual validate plugins.",
          "type": "raw",
          "required": true,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "Data that will be validated against I(criteria). For the type of data refer to the documentation of individual validate plugins.",
          "type": "raw",
          "required": true,
          "suboptions": {}
        },
        "engine": {
          "aliases": [],
          "description": "The name of the validate plugin to use. The engine value should follow the fully qualified collection name format, that is <org-name>.<collection-name>.<validate-plugin-name>.",
          "default": "ansible.utils.jsonschema",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Validate data with provided criteria",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: set facts for data and criteria\n  ansible.builtin.set_fact:\n    data: \"{{ lookup('ansible.builtin.file', './validate/data/show_interfaces_iosxr.json')}}\"\n    criteria: \"{{ lookup('ansible.builtin.file', './validate/criteria/jsonschema/show_interfaces_iosxr.json')}}\"\n\n- name: validate data in with jsonschema engine (by passing task vars as configurable plugin options)\n  ansible.utils.validate:\n    data: \"{{ data }}\"\n    criteria: \"{{ criteria }}\"\n    engine: ansible.utils.jsonschema\n  vars:\n    ansible_jsonschema_draft: draft7\n"
  }
}