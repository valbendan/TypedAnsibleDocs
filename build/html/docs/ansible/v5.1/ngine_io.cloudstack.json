{
  "ngine_io.cloudstack.cs_account": {
    "doc": {
      "description": "Create, disable, lock, enable and remove accounts.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "account_type": {
          "aliases": [],
          "description": "Type of the account.",
          "default": "user",
          "type": "str",
          "required": false,
          "choices": [
            "user",
            "root_admin",
            "domain_admin"
          ],
          "suboptions": {}
        },
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain the account is related to.",
          "default": "ROOT",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "email": {
          "aliases": [],
          "description": "Email of the user to be created if account did not exist.\nRequired on I(state=present) if I(ldap_domain) is not set.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "first_name": {
          "aliases": [],
          "description": "First name of the user to be created if account did not exist.\nRequired on I(state=present) if I(ldap_domain) is not set.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "last_name": {
          "aliases": [],
          "description": "Last name of the user to be created if account did not exist.\nRequired on I(state=present) if I(ldap_domain) is not set.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ldap_domain": {
          "aliases": [],
          "description": "Name of the LDAP group or OU to bind.\nIf set, account will be linked to LDAP.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ldap_type": {
          "aliases": [],
          "description": "Type of the ldap name. GROUP or OU, defaults to GROUP.",
          "default": "GROUP",
          "type": "str",
          "required": false,
          "choices": [
            "GROUP",
            "OU"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of account.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "network_domain": {
          "aliases": [],
          "description": "Network domain of the account.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of the user to be created if account did not exist.\nRequired on I(state=present) if I(ldap_domain) is not set.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "poll_async": {
          "aliases": [],
          "description": "Poll async jobs until job has finished.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "role": {
          "aliases": [],
          "description": "Creates the account under the specified role name or id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the account.\nC(unlocked) is an alias for C(enabled).",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "enabled",
            "disabled",
            "locked",
            "unlocked"
          ],
          "suboptions": {}
        },
        "timezone": {
          "aliases": [],
          "description": "Timezone of the user to be created if account did not exist.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username of the user to be created if account did not exist.\nRequired on I(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages accounts on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: create an account in domain 'CUSTOMERS'\n  ngine_io.cloudstack.cs_account:\n    name: customer_xy\n    username: customer_xy\n    password: S3Cur3\n    last_name: Doe\n    first_name: John\n    email: john.doe@example.com\n    domain: CUSTOMERS\n    role: Domain Admin\n\n- name: Lock an existing account in domain 'CUSTOMERS'\n  ngine_io.cloudstack.cs_account:\n    name: customer_xy\n    domain: CUSTOMERS\n    state: locked\n\n- name: Disable an existing account in domain 'CUSTOMERS'\n  ngine_io.cloudstack.cs_account:\n    name: customer_xy\n    domain: CUSTOMERS\n    state: disabled\n\n- name: Enable an existing account in domain 'CUSTOMERS'\n  ngine_io.cloudstack.cs_account:\n    name: customer_xy\n    domain: CUSTOMERS\n    state: enabled\n\n- name: Remove an account in domain 'CUSTOMERS'\n  ngine_io.cloudstack.cs_account:\n    name: customer_xy\n    domain: CUSTOMERS\n    state: absent\n\n- name: Create a single user LDAP account in domain 'CUSTOMERS'\n  ngine_io.cloudstack.cs_account:\n    name: customer_xy\n    username: customer_xy\n    domain: CUSTOMERS\n    ldap_domain: cn=customer_xy,cn=team_xy,ou=People,dc=domain,dc=local\n\n- name: Create a LDAP account in domain 'CUSTOMERS' and bind it to a LDAP group\n  ngine_io.cloudstack.cs_account:\n    name: team_xy\n    username: customer_xy\n    domain: CUSTOMERS\n    ldap_domain: cn=team_xy,ou=People,dc=domain,dc=local\n"
  },
  "ngine_io.cloudstack.cs_affinitygroup": {
    "doc": {
      "description": "Create and remove affinity groups.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "account": {
          "aliases": [],
          "description": "Account the affinity group is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "affinity_type": {
          "aliases": [],
          "description": "Type of the affinity group. If not specified, first found affinity type is used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the affinity group.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain the affinity group is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the affinity group.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "poll_async": {
          "aliases": [],
          "description": "Poll async jobs until job has finished.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Name of the project the affinity group is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the affinity group.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages affinity groups on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: Create a affinity group\n  ngine_io.cloudstack.cs_affinitygroup:\n    name: haproxy\n    affinity_type: host anti-affinity\n\n- name: Remove a affinity group\n  ngine_io.cloudstack.cs_affinitygroup:\n    name: haproxy\n    state: absent\n"
  },
  "ngine_io.cloudstack.cs_cluster": {
    "doc": {
      "description": "Create, update and remove clusters.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cluster_type": {
          "aliases": [],
          "description": "Type of the cluster.\nRequired if I(state=present)",
          "type": "str",
          "required": false,
          "choices": [
            "CloudManaged",
            "ExternalManaged"
          ],
          "suboptions": {}
        },
        "guest_vswitch_name": {
          "aliases": [],
          "description": "Name of virtual switch used for guest traffic in the cluster.\nThis would override zone wide traffic label setting.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "guest_vswitch_type": {
          "aliases": [],
          "description": "Type of virtual switch used for guest traffic in the cluster.\nAllowed values are, vmwaresvs (for VMware standard vSwitch) and vmwaredvs (for VMware distributed vSwitch)",
          "type": "str",
          "required": false,
          "choices": [
            "vmwaresvs",
            "vmwaredvs"
          ],
          "suboptions": {}
        },
        "hypervisor": {
          "aliases": [],
          "description": "Name the hypervisor to be used.\nRequired if I(state=present).\nPossible values are C(KVM), C(VMware), C(BareMetal), C(XenServer), C(LXC), C(HyperV), C(UCS), C(OVM), C(Simulator).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "name of the cluster.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ovm3_cluster": {
          "aliases": [],
          "description": "Ovm3 native OCFS2 clustering enabled for cluster.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ovm3_pool": {
          "aliases": [],
          "description": "Ovm3 native pooling enabled for cluster.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ovm3_vip": {
          "aliases": [],
          "description": "Ovm3 vip to use for pool (and cluster).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password for the cluster.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pod": {
          "aliases": [],
          "description": "Name of the pod in which the cluster belongs to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "public_vswitch_name": {
          "aliases": [],
          "description": "Name of virtual switch used for public traffic in the cluster.\nThis would override zone wide traffic label setting.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "public_vswitch_type": {
          "aliases": [],
          "description": "Type of virtual switch used for public traffic in the cluster.\nAllowed values are, vmwaresvs (for VMware standard vSwitch) and vmwaredvs (for VMware distributed vSwitch)",
          "type": "str",
          "required": false,
          "choices": [
            "vmwaresvs",
            "vmwaredvs"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the cluster.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "disabled",
            "enabled"
          ],
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "URL for the cluster",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username for the cluster.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vms_ip_address": {
          "aliases": [],
          "description": "IP address of the VSM associated with this cluster.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vms_password": {
          "aliases": [],
          "description": "Password for the VSM associated with this cluster.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vms_username": {
          "aliases": [],
          "description": "Username for the VSM associated with this cluster.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "zone": {
          "aliases": [],
          "description": "Name of the zone in which the cluster belongs to.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages host clusters on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: Ensure a cluster is present\n  ngine_io.cloudstack.cs_cluster:\n    name: kvm-cluster-01\n    zone: ch-zrh-ix-01\n    hypervisor: KVM\n    cluster_type: CloudManaged\n\n- name: Ensure a cluster is disabled\n  ngine_io.cloudstack.cs_cluster:\n    name: kvm-cluster-01\n    zone: ch-zrh-ix-01\n    state: disabled\n\n- name: Ensure a cluster is enabled\n  ngine_io.cloudstack.cs_cluster:\n    name: kvm-cluster-01\n    zone: ch-zrh-ix-01\n    state: enabled\n\n- name: Ensure a cluster is absent\n  ngine_io.cloudstack.cs_cluster:\n    name: kvm-cluster-01\n    zone: ch-zrh-ix-01\n    state: absent\n"
  },
  "ngine_io.cloudstack.cs_configuration": {
    "doc": {
      "description": "Manages global, zone, account, storage and cluster configurations.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "account": {
          "aliases": [],
          "description": "Ensure the value for corresponding account.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cluster": {
          "aliases": [],
          "description": "Ensure the value for corresponding cluster.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain the account is related to.\nOnly considered if I(account) is used.",
          "default": "ROOT",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the configuration.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "storage": {
          "aliases": [],
          "description": "Ensure the value for corresponding storage pool.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "value": {
          "aliases": [],
          "description": "Value of the configuration.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "zone": {
          "aliases": [],
          "description": "Ensure the value for corresponding zone.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages configuration on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: Ensure global configuration\n  ngine_io.cloudstack.cs_configuration:\n    name: router.reboot.when.outofband.migrated\n    value: false\n\n- name: Ensure zone configuration\n  ngine_io.cloudstack.cs_configuration:\n    name: router.reboot.when.outofband.migrated\n    zone: ch-gva-01\n    value: true\n\n- name: Ensure storage configuration\n  ngine_io.cloudstack.cs_configuration:\n    name: storage.overprovisioning.factor\n    storage: storage01\n    value: 2.0\n\n- name: Ensure account configuration\n  ngine_io.cloudstack.cs_configuration:\n    name: allow.public.user.templates\n    value: false\n    account: acme inc\n    domain: customers\n"
  },
  "ngine_io.cloudstack.cs_disk_offering": {
    "doc": {
      "description": "Create and delete disk offerings for guest VMs.\nUpdate display_text or display_offering of existing disk offering.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "bytes_read_rate": {
          "aliases": [],
          "description": "Bytes read rate of the disk offering.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "bytes_write_rate": {
          "aliases": [],
          "description": "Bytes write rate of the disk offering.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "customized": {
          "aliases": [],
          "description": "Whether disk offering iops is custom or not.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "disk_size": {
          "aliases": [],
          "description": "Size of the disk offering in GB (1GB = 1,073,741,824 bytes).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "display_offering": {
          "aliases": [],
          "description": "An optional field, whether to display the offering to the end user or not.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "display_text": {
          "aliases": [],
          "description": "Display text of the disk offering.\nIf not set, C(name) will be used as C(display_text) while creating.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain the disk offering is related to.\nPublic for all domains and subdomains if not set.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hypervisor_snapshot_reserve": {
          "aliases": [],
          "description": "Hypervisor snapshot reserve space as a percent of a volume.\nOnly for managed storage using Xen or VMware.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "iops_max": {
          "aliases": [],
          "description": "Max. iops of the disk offering.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "iops_min": {
          "aliases": [],
          "description": "Min. iops of the disk offering.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "iops_read_rate": {
          "aliases": [],
          "description": "IO requests read rate of the disk offering.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "iops_write_rate": {
          "aliases": [],
          "description": "IO requests write rate of the disk offering.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the disk offering.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "provisioning_type": {
          "aliases": [],
          "description": "Provisioning type used to create volumes.",
          "type": "str",
          "required": false,
          "choices": [
            "thin",
            "sparse",
            "fat"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the disk offering.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "storage_tags": {
          "aliases": [
            "storage_tag"
          ],
          "description": "The storage tags for this disk offering.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "storage_type": {
          "aliases": [],
          "description": "The storage type of the disk offering.",
          "type": "str",
          "required": false,
          "choices": [
            "local",
            "shared"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages disk offerings on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: Create a disk offering with local storage\n  ngine_io.cloudstack.cs_disk_offering:\n    name: small\n    display_text: Small 10GB\n    disk_size: 10\n    storage_type: local\n\n- name: Create or update a disk offering with shared storage\n  ngine_io.cloudstack.cs_disk_offering:\n    name: small\n    display_text: Small 10GB\n    disk_size: 10\n    storage_type: shared\n    storage_tags: SAN01\n\n- name: Remove a disk offering\n  ngine_io.cloudstack.cs_disk_offering:\n    name: small\n    state: absent\n"
  },
  "ngine_io.cloudstack.cs_domain": {
    "doc": {
      "description": "Create, update and remove domains.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "clean_up": {
          "aliases": [],
          "description": "Clean up all domain resources like child domains and accounts.\nConsidered on I(state=absent).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "network_domain": {
          "aliases": [],
          "description": "Network domain for networks in the domain.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "Path of the domain.\nPrefix C(ROOT/) or C(/ROOT/) in path is optional.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "poll_async": {
          "aliases": [],
          "description": "Poll async jobs until job has finished.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the domain.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages domains on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: Create a domain\n  ngine_io.cloudstack.cs_domain:\n    path: ROOT/customers\n    network_domain: customers.example.com\n\n- name: Create another subdomain\n  ngine_io.cloudstack.cs_domain:\n    path: ROOT/customers/xy\n    network_domain: xy.customers.example.com\n\n- name: Remove a domain\n  ngine_io.cloudstack.cs_domain:\n    path: ROOT/customers/xy\n    state: absent\n"
  },
  "ngine_io.cloudstack.cs_facts": {
    "doc": {
      "description": "This module fetches data from the metadata API in CloudStack. The module must be called from within the instance itself.",
      "has_action": false,
      "options": {
        "filter": {
          "aliases": [],
          "description": "Filter for a specific fact.",
          "type": "str",
          "required": false,
          "choices": [
            "cloudstack_service_offering",
            "cloudstack_availability_zone",
            "cloudstack_public_hostname",
            "cloudstack_public_ipv4",
            "cloudstack_local_hostname",
            "cloudstack_local_ipv4",
            "cloudstack_instance_id",
            "cloudstack_user_data"
          ],
          "suboptions": {}
        },
        "meta_data_host": {
          "aliases": [],
          "description": "Host or IP of the meta data API service.\nIf not set, determination by parsing the dhcp lease file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "yaml"
      ],
      "short_description": "Gather facts on instances of Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n# Gather all facts on instances\n- name: Gather cloudstack facts\n  ngine_io.cloudstack.cs_facts:\n\n# Gather specific fact on instances\n- name: Gather cloudstack facts\n  ngine_io.cloudstack.cs_facts: filter=cloudstack_instance_id\n\n# Gather specific fact on instances with a given meta_data_host\n- name: Gather cloudstack facts\n  ngine_io.cloudstack.cs_facts:\n    filter: cloudstack_instance_id\n    meta_data_host: 169.254.169.254\n"
  },
  "ngine_io.cloudstack.cs_firewall": {
    "doc": {
      "description": "Creates and removes firewall rules.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "account": {
          "aliases": [],
          "description": "Account the firewall rule is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cidrs": {
          "aliases": [
            "cidr"
          ],
          "description": "List of CIDRs (full notation) to be used for firewall rule.\nSince version 2.5, it is a list of CIDR.",
          "default": "0.0.0.0/0",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain the firewall rule is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "end_port": {
          "aliases": [],
          "description": "End port for this rule. Considered if I(protocol=tcp) or I(protocol=udp).\nIf not specified, equal I(start_port).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "icmp_code": {
          "aliases": [],
          "description": "Error code for this icmp message.\nConsidered if I(protocol=icmp).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "icmp_type": {
          "aliases": [],
          "description": "Type of the icmp message being sent.\nConsidered if I(protocol=icmp).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ip_address": {
          "aliases": [],
          "description": "Public IP address the ingress rule is assigned to.\nRequired if I(type=ingress).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "network": {
          "aliases": [],
          "description": "Network the egress rule is related to.\nRequired if I(type=egress).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "poll_async": {
          "aliases": [],
          "description": "Poll async jobs until job has finished.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Name of the project the firewall rule is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "Protocol of the firewall rule.\nC(all) is only available if I(type=egress).",
          "default": "tcp",
          "type": "str",
          "required": false,
          "choices": [
            "tcp",
            "udp",
            "icmp",
            "all"
          ],
          "suboptions": {}
        },
        "start_port": {
          "aliases": [
            "port"
          ],
          "description": "Start port for this rule.\nConsidered if I(protocol=tcp) or I(protocol=udp).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the firewall rule.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tags": {
          "aliases": [
            "tag"
          ],
          "description": "List of tags. Tags are a list of dictionaries having keys I(key) and I(value).\nTo delete all tags, set an empty list e.g. I(tags: []).",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "Type of the firewall rule.",
          "default": "ingress",
          "type": "str",
          "required": false,
          "choices": [
            "ingress",
            "egress"
          ],
          "suboptions": {}
        },
        "zone": {
          "aliases": [],
          "description": "Name of the zone in which the virtual machine is in.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages firewall rules on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: Allow inbound port 80/tcp from 1.2.3.4 to 4.3.2.1\n  ngine_io.cloudstack.cs_firewall:\n    ip_address: 4.3.2.1\n    zone: zone01\n    port: 80\n    cidr: 1.2.3.4/32\n\n- name: Allow inbound tcp/udp port 53 to 4.3.2.1\n  ngine_io.cloudstack.cs_firewall:\n    ip_address: 4.3.2.1\n    zone: zone01\n    port: 53\n    protocol: '{{ item }}'\n  with_items:\n  - tcp\n  - udp\n\n- name: Ensure firewall rule is removed\n  ngine_io.cloudstack.cs_firewall:\n    ip_address: 4.3.2.1\n    zone: zone01\n    start_port: 8000\n    end_port: 8888\n    cidr: 17.0.0.0/8\n    state: absent\n\n- name: Allow all outbound traffic\n  ngine_io.cloudstack.cs_firewall:\n    network: my_network\n    zone: zone01\n    type: egress\n    protocol: all\n\n- name: Allow only HTTP outbound traffic for an IP\n  ngine_io.cloudstack.cs_firewall:\n    network: my_network\n    zone: zone01\n    type: egress\n    port: 80\n    cidr: 10.101.1.20\n"
  },
  "ngine_io.cloudstack.cs_host": {
    "doc": {
      "description": "Create, update and remove hosts.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "allocation_state": {
          "aliases": [],
          "description": "Allocation state of the host.",
          "type": "str",
          "required": false,
          "choices": [
            "enabled",
            "disabled",
            "maintenance"
          ],
          "suboptions": {}
        },
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cluster": {
          "aliases": [],
          "description": "Name of the cluster.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host_tags": {
          "aliases": [
            "host_tag"
          ],
          "description": "Tags of the host.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "hypervisor": {
          "aliases": [],
          "description": "Name of the cluster.\nRequired if I(state=present) and host does not yet exist.\nPossible values are C(KVM), C(VMware), C(BareMetal), C(XenServer), C(LXC), C(HyperV), C(UCS), C(OVM), C(Simulator).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "ip_address"
          ],
          "description": "Name of the host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password for the host.\nRequired if I(state=present) and host does not yet exist.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pod": {
          "aliases": [],
          "description": "Name of the pod.\nRequired if I(state=present) and host does not yet exist.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the host.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Url of the host used to create a host.\nIf not provided, C(http://) and param I(name) is used as url.\nOnly considered if I(state=present) and host does not yet exist.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username for the host.\nRequired if I(state=present) and host does not yet exist.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "zone": {
          "aliases": [],
          "description": "Name of the zone in which the host should be deployed.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages hosts on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: Ensure a host is present but disabled\n  ngine_io.cloudstack.cs_host:\n    name: pod01.zone01.example.com\n    cluster: vcenter.example.com/zone01/cluster01\n    pod: pod01\n    zone: zone01\n    hypervisor: VMware\n    allocation_state: disabled\n    host_tags:\n    - perf\n    - gpu\n\n- name: Ensure an existing host is disabled\n  ngine_io.cloudstack.cs_host:\n    name: pod01.zone01.example.com\n    zone: zone01\n    allocation_state: disabled\n\n- name: Ensure an existing host is enabled\n  ngine_io.cloudstack.cs_host:\n    name: pod01.zone01.example.com\n    zone: zone01\n    allocation_state: enabled\n\n- name: Ensure a host is absent\n  ngine_io.cloudstack.cs_host:\n    name: pod01.zone01.example.com\n    zone: zone01\n    state: absent\n"
  },
  "ngine_io.cloudstack.cs_image_store": {
    "doc": {
      "description": "Deploy, remove, recreate CloudStack Image Stores.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "force_recreate": {
          "aliases": [],
          "description": "Set to C(yes) if you're changing an existing Image Store.\nThis will force the recreation of the Image Store.\nRecreation might fail if there are snapshots present on the Image Store. Delete them before running the recreation.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The ID of the Image Store. Required when deleting a Image Store.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "The image store provider name. Required when creating a new Image Store",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Stage of the Image Store",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "The URL for the Image Store.\nRequired when I(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "zone": {
          "aliases": [],
          "description": "The Zone name for the Image Store.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages CloudStack Image Stores.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: Add a Image Store (NFS)\n  ngine_io.cloudstack.cs_image_store:\n    zone: zone-01\n    name: nfs-01\n    provider: NFS\n    url: nfs://192.168.21.16/exports/secondary\n\n\n# Change the NFS share URL and force a Image Store recreation\n- name: Change the NFS url\n  ngine_io.cloudstack.cs_image_store:\n    zone: zone-01\n    name: nfs-01\n    provider: NFS\n    force_recreate: yes\n    url: nfs://192.168.21.10/shares/secondary\n\n- name: delete the image store\n  ngine_io.cloudstack.cs_image_store:\n    name: nfs-01\n    zone: zone-01\n    state: absent\n\n"
  },
  "ngine_io.cloudstack.cs_instance": {
    "doc": {
      "description": "Deploy, start, update, scale, restart, restore, stop and destroy instances.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "account": {
          "aliases": [],
          "description": "Account the instance is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "affinity_groups": {
          "aliases": [
            "affinity_group"
          ],
          "description": "Affinity groups names to be applied to the new instance.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "allow_root_disk_shrink": {
          "aliases": [],
          "description": "Enables a volume shrinkage when the new size is smaller than the old one.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cpu": {
          "aliases": [],
          "description": "The number of CPUs to allocate to the instance, used with custom service offerings",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "cpu_speed": {
          "aliases": [],
          "description": "The clock speed/shares allocated to the instance, used with custom service offerings",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "details": {
          "aliases": [],
          "description": "Map to specify custom parameters.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "disk_offering": {
          "aliases": [],
          "description": "Name of the disk offering to be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "disk_size": {
          "aliases": [],
          "description": "Disk size in GByte required if deploying instance from ISO.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "display_name": {
          "aliases": [],
          "description": "Custom display name of the instances.\nDisplay name will be set to I(name) if not specified.\nEither I(name) or I(display_name) is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain the instance is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Force stop/start the instance if required to apply changes, otherwise a running instance will not be changed.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "group": {
          "aliases": [],
          "description": "Group in where the new instance should be in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Host on which an instance should be deployed or started on.\nOnly considered when I(state=started) or instance is running.\nRequires root admin privileges.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hypervisor": {
          "aliases": [],
          "description": "Name the hypervisor to be used for creating the new instance.\nRelevant when using I(state=present), but only considered if not set on ISO/template.\nIf not set or found on ISO/template, first found hypervisor will be used.\nPossible values are C(KVM), C(VMware), C(BareMetal), C(XenServer), C(LXC), C(HyperV), C(UCS), C(OVM), C(Simulator).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ip6_address": {
          "aliases": [],
          "description": "IPv6 address for default instance's network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ip_address": {
          "aliases": [],
          "description": "IPv4 address for default instance's network during creation.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ip_to_networks": {
          "aliases": [
            "ip_to_network"
          ],
          "description": "List of mappings in the form I({'network': NetworkName, 'ip': 1.2.3.4})\nMutually exclusive with I(networks) option.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "iso": {
          "aliases": [],
          "description": "Name or id of the ISO to be used for creating the new instance.\nRequired when using I(state=present).\nMutually exclusive with I(template) option.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "keyboard": {
          "aliases": [],
          "description": "Keyboard device type for the instance.",
          "type": "str",
          "required": false,
          "choices": [
            "de",
            "de-ch",
            "es",
            "fi",
            "fr",
            "fr-be",
            "fr-ch",
            "is",
            "it",
            "jp",
            "nl-be",
            "no",
            "pt",
            "uk",
            "us"
          ],
          "suboptions": {}
        },
        "memory": {
          "aliases": [],
          "description": "The memory allocated to the instance, used with custom service offerings",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Host name of the instance. C(name) can only contain ASCII letters.\nName will be generated (UUID) by CloudStack if not specified and can not be changed afterwards.\nEither C(name) or C(display_name) is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "networks": {
          "aliases": [
            "network"
          ],
          "description": "List of networks to use for the new instance.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "poll_async": {
          "aliases": [],
          "description": "Poll async jobs until job has finished.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Name of the project the instance to be deployed in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "root_disk_size": {
          "aliases": [],
          "description": "Root disk size in GByte required if deploying instance with KVM hypervisor and want resize the root disk size at startup (need CloudStack >= 4.4, cloud-initramfs-growroot installed and enabled in the template)",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "security_groups": {
          "aliases": [
            "security_group"
          ],
          "description": "List of security groups the instance to be applied to.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "service_offering": {
          "aliases": [],
          "description": "Name or id of the service offering of the new instance.\nIf not set, first found service offering is used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssh_key": {
          "aliases": [],
          "description": "Name of the SSH key to be deployed on the new instance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the instance.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "deployed",
            "started",
            "stopped",
            "restarted",
            "restored",
            "destroyed",
            "expunged",
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tags": {
          "aliases": [
            "tag"
          ],
          "description": "List of tags. Tags are a list of dictionaries having keys C(key) and C(value).\nIf you want to delete all tags, set a empty list e.g. I(tags: []).",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "template": {
          "aliases": [],
          "description": "Name, display text or id of the template to be used for creating the new instance.\nRequired when using I(state=present).\nMutually exclusive with I(iso) option.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "template_filter": {
          "aliases": [
            "iso_filter"
          ],
          "description": "Name of the filter used to search for the template or iso.\nUsed for params I(iso) or I(template) on I(state=present).\nThe filter C(all) was added in 2.6.",
          "default": "executable",
          "type": "str",
          "required": false,
          "choices": [
            "all",
            "featured",
            "self",
            "selfexecutable",
            "sharedexecutable",
            "executable",
            "community"
          ],
          "suboptions": {}
        },
        "user_data": {
          "aliases": [],
          "description": "Optional data (ASCII) that can be sent to the instance upon a successful deployment.\nThe data will be automatically base64 encoded.\nConsider switching to HTTP_POST by using I(CLOUDSTACK_METHOD=post) to increase the HTTP_GET size limit of 2KB to 32 KB.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "zone": {
          "aliases": [],
          "description": "Name of the zone in which the instance should be deployed.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages instances and virtual machines on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n# NOTE: Names of offerings and ISOs depending on the CloudStack configuration.\n- name: create a instance from an ISO\n  ngine_io.cloudstack.cs_instance:\n    name: web-vm-1\n    iso: Linux Debian 7 64-bit\n    hypervisor: VMware\n    project: Integration\n    zone: ch-zrh-ix-01\n    service_offering: 1cpu_1gb\n    disk_offering: PerfPlus Storage\n    disk_size: 20\n    networks:\n      - Server Integration\n      - Sync Integration\n      - Storage Integration\n\n- name: for changing a running instance, use the 'force' parameter\n  ngine_io.cloudstack.cs_instance:\n    name: web-vm-1\n    zone: zone01\n    display_name: web-vm-01.example.com\n    iso: Linux Debian 7 64-bit\n    service_offering: 2cpu_2gb\n    force: yes\n\n# NOTE: user_data can be used to kickstart the instance using cloud-init yaml config.\n- name: create or update a instance on Exoscale's public cloud using display_name.\n  ngine_io.cloudstack.cs_instance:\n    display_name: web-vm-1\n    zone: zone01\n    template: Linux Debian 7 64-bit\n    service_offering: Tiny\n    ssh_key: john@example.com\n    tags:\n      - key: admin\n        value: john\n      - key: foo\n        value: bar\n    user_data: |\n        #cloud-config\n        packages:\n          - nginx\n\n- name: create an instance with multiple interfaces specifying the IP addresses\n  ngine_io.cloudstack.cs_instance:\n    name: web-vm-1\n    zone: zone01\n    template: Linux Debian 7 64-bit\n    service_offering: Tiny\n    ip_to_networks:\n      - network: NetworkA\n        ip: 10.1.1.1\n      - network: NetworkB\n        ip: 192.0.2.1\n\n- name: ensure an instance is stopped\n  ngine_io.cloudstack.cs_instance:\n    name: web-vm-1\n    zone: zone01\n    state: stopped\n\n- name: ensure an instance is running\n  ngine_io.cloudstack.cs_instance:\n    name: web-vm-1\n    zone: zone01\n    state: started\n\n- name: remove an instance\n  ngine_io.cloudstack.cs_instance:\n    name: web-vm-1\n    zone: zone01\n    state: absent\n"
  },
  "ngine_io.cloudstack.cs_instance_info": {
    "doc": {
      "description": "Gathering information from the API of an instance.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "account": {
          "aliases": [],
          "description": "Account the instance is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain the instance is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Filter by host name.",
          "type": "str",
          "required": false,
          "version_added": "2.2.0",
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name or display name of the instance.\nIf not specified, all instances are returned",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Project the instance is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Gathering information from the API of instances from Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: Gather instance information\n  ngine_io.cloudstack.cs_instance_info:\n    name: web-vm-1\n  register: vm\n\n- name: Show the returned results of the registered variable\n  debug:\n    msg: \"{{ vm }}\"\n\n- name: Gather information from all instances\n  ngine_io.cloudstack.cs_instance_info:\n  register: vms\n\n- name: Show information on all instances\n  debug:\n    msg: \"{{ vms }}\"\n\n- name: Gather information from all instances on a host\n  ngine_io.cloudstack.cs_instance_info:\n    host: host01.example.com\n  register: vms\n"
  },
  "ngine_io.cloudstack.cs_instance_nic": {
    "doc": {
      "description": "Add and remove nic to and from network",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "account": {
          "aliases": [],
          "description": "Account the instance is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain the instance is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ip_address": {
          "aliases": [],
          "description": "IP address to be used for the nic.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "network": {
          "aliases": [],
          "description": "Name of the network.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "poll_async": {
          "aliases": [],
          "description": "Poll async jobs until job has finished.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Name of the project the instance is deployed in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the nic.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "vm": {
          "aliases": [
            "name"
          ],
          "description": "Name of instance.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "vpc": {
          "aliases": [],
          "description": "Name of the VPC the I(vm) is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "zone": {
          "aliases": [],
          "description": "Name of the zone in which the instance is deployed in.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages NICs of an instance on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: Add a nic on another network\n  ngine_io.cloudstack.cs_instance_nic:\n    vm: privnet\n    network: privNetForBasicZone\n    zone: zone01\n\n- name: Ensure IP address on a nic\n  ngine_io.cloudstack.cs_instance_nic:\n    vm: privnet\n    ip_address: 10.10.11.32\n    network: privNetForBasicZone\n    zone: zone01\n\n- name: Remove a secondary nic\n  ngine_io.cloudstack.cs_instance_nic:\n    vm: privnet\n    state: absent\n    network: privNetForBasicZone\n    zone: zone01\n"
  },
  "ngine_io.cloudstack.cs_instance_nic_secondaryip": {
    "doc": {
      "description": "Add and remove secondary IPs to and from a NIC of an instance.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "account": {
          "aliases": [],
          "description": "Account the instance is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain the instance is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "network": {
          "aliases": [],
          "description": "Name of the network.\nRequired to find the NIC if instance has multiple networks assigned.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "poll_async": {
          "aliases": [],
          "description": "Poll async jobs until job has finished.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Name of the project the instance is deployed in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the ipaddress.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "vm": {
          "aliases": [
            "name"
          ],
          "description": "Name of instance.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "vm_guest_ip": {
          "aliases": [
            "secondary_ip"
          ],
          "description": "Secondary IP address to be added to the instance nic.\nIf not set, the API always returns a new IP address and idempotency is not given.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vpc": {
          "aliases": [],
          "description": "Name of the VPC the I(vm) is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "zone": {
          "aliases": [],
          "description": "Name of the zone in which the instance is deployed in.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages secondary IPs of an instance on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: Assign a specific IP to the default NIC of the VM\n  ngine_io.cloudstack.cs_instance_nic_secondaryip:\n    vm: customer_xy\n    zone: zone01\n    vm_guest_ip: 10.10.10.10\n\n# Note: If vm_guest_ip is not set, you will get a new IP address on every run.\n- name: Assign an IP to the default NIC of the VM\n  ngine_io.cloudstack.cs_instance_nic_secondaryip:\n    vm: customer_xy\n    zone: zone01\n\n- name: Remove a specific IP from the default NIC\n  ngine_io.cloudstack.cs_instance_nic_secondaryip:\n    vm: customer_xy\n    zone: zone01\n    vm_guest_ip: 10.10.10.10\n    state: absent\n"
  },
  "ngine_io.cloudstack.cs_instance_password_reset": {
    "doc": {
      "description": "Resets the default user account's password on an instance.\nRequires cloud-init to be installed in the virtual machine.\nThe passwordenabled flag must be set on the template associated with the VM.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "account": {
          "aliases": [],
          "description": "Account the virtual machine belongs to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Name of the domain the virtual machine belongs to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "poll_async": {
          "aliases": [],
          "description": "Poll async jobs until job has finished.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Name of the project the virtual machine belongs to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vm": {
          "aliases": [],
          "description": "Name of the virtual machine to reset the password on.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "zone": {
          "aliases": [],
          "description": "Name of the zone in which the instance is deployed.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Allows resetting VM the default passwords on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: stop the virtual machine before resetting the password\n  ngine_io.cloudstack.cs_instance:\n    name: myvirtualmachine\n    zone: zone01\n    state: stopped\n\n- name: reset and get new default password\n  ngine_io.cloudstack.cs_instance_password_reset:\n    vm: myvirtualmachine\n    zone: zone01\n  register: root\n\n- debug:\n    msg: \"new default password is {{ root.password }}\"\n\n- name: boot the virtual machine to activate the new password\n  ngine_io.cloudstack.cs_instance:\n    name: myvirtualmachine\n    zone: zone01\n    state: started\n  when: root is changed\n"
  },
  "ngine_io.cloudstack.cs_instancegroup": {
    "doc": {
      "description": "Create and remove instance groups.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "account": {
          "aliases": [],
          "description": "Account the instance group is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain the instance group is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the instance group.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Project the instance group is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the instance group.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages instance groups on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: Create an instance group\n  ngine_io.cloudstack.cs_instancegroup:\n    name: loadbalancers\n\n- name: Remove an instance group\n  ngine_io.cloudstack.cs_instancegroup:\n    name: loadbalancers\n    state: absent\n"
  },
  "ngine_io.cloudstack.cs_ip_address": {
    "doc": {
      "description": "Acquires and associates a public IP to an account or project.\nDue to API limitations this is not an idempotent call, so be sure to only conditionally call this when I(state=present).\nTagging the IP address can also make the call idempotent.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "account": {
          "aliases": [],
          "description": "Account the IP address is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain the IP address is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ip_address": {
          "aliases": [],
          "description": "Public IP address.\nRequired if I(state=absent) and I(tags) is not set.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "network": {
          "aliases": [],
          "description": "Network the IP address is related to.\nMutually exclusive with I(vpc).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "poll_async": {
          "aliases": [],
          "description": "Poll async jobs until job has finished.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Name of the project the IP address is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the IP address.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tags": {
          "aliases": [
            "tag"
          ],
          "description": "List of tags. Tags are a list of dictionaries having keys I(key) and I(value).\nTags can be used as an unique identifier for the IP Addresses.\nIn this case, at least one of them must be unique to ensure idempotency.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "vpc": {
          "aliases": [],
          "description": "VPC the IP address is related to.\nMutually exclusive with I(network).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "zone": {
          "aliases": [],
          "description": "Name of the zone in which the IP address is in.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages public IP address associations on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: Associate an IP address conditionally\n  ngine_io.cloudstack.cs_ip_address:\n    network: My Network\n    zone: zone01\n  register: ip_address\n  when: instance.public_ip is undefined\n\n- name: Disassociate an IP address\n  ngine_io.cloudstack.cs_ip_address:\n    ip_address: 1.2.3.4\n    zone: zone01\n    state: absent\n\n- name: Associate an IP address with tags\n  ngine_io.cloudstack.cs_ip_address:\n    network: My Network\n    zone: zone01\n    tags:\n      - key: myCustomID\n        value: 5510c31a-416e-11e8-9013-02000a6b00bf\n  register: ip_address\n\n- name: Disassociate an IP address with tags\n  ngine_io.cloudstack.cs_ip_address:\n    state: absent\n    zone: zone01\n    tags:\n      - key: myCustomID\n        value: 5510c31a-416e-11e8-9013-02000a6b00bf\n"
  },
  "ngine_io.cloudstack.cs_iso": {
    "doc": {
      "description": "Register and remove ISO images.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "account": {
          "aliases": [],
          "description": "Account the ISO is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "bootable": {
          "aliases": [],
          "description": "Register the ISO to be bootable. Only used if I(state) is present.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "checksum": {
          "aliases": [],
          "description": "The MD5 checksum value of this ISO. If set, we search by checksum instead of name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cross_zones": {
          "aliases": [],
          "description": "Whether the ISO should be synced or removed across zones.\nMutually exclusive with I(zone).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "display_text": {
          "aliases": [],
          "description": "Display text of the ISO.\nIf not specified, I(name) will be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain the ISO is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "is_dynamically_scalable": {
          "aliases": [],
          "description": "Register the ISO having XS/VMware tools installed inorder to support dynamic scaling of VM cpu/memory. Only used if I(state) is present.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "is_featured": {
          "aliases": [],
          "description": "Register the ISO to be featured. Only used if I(state) is present.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "is_public": {
          "aliases": [],
          "description": "Register the ISO to be publicly available to all users. Only used if I(state) is present.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "is_ready": {
          "aliases": [],
          "description": "This flag is used for searching existing ISOs. If set to C(yes), it will only list ISO ready for deployment e.g. successfully downloaded and installed. Recommended to set it to C(no).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "iso_filter": {
          "aliases": [],
          "description": "Name of the filter used to search for the ISO.",
          "default": "self",
          "type": "str",
          "required": false,
          "choices": [
            "featured",
            "self",
            "selfexecutable",
            "sharedexecutable",
            "executable",
            "community"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the ISO.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "os_type": {
          "aliases": [],
          "description": "Name of the OS that best represents the OS of this ISO. If the iso is bootable this parameter needs to be passed. Required if I(state) is present.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "poll_async": {
          "aliases": [],
          "description": "Poll async jobs until job has finished.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Name of the project the ISO to be registered in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the ISO.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tags": {
          "aliases": [
            "tag"
          ],
          "description": "List of tags. Tags are a list of dictionaries having keys I(key) and I(value).\nTo delete all tags, set a empty list e.g. I(tags: []).",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "URL where the ISO can be downloaded from. Required if I(state) is present.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "zone": {
          "aliases": [],
          "description": "Name of the zone you wish the ISO to be registered or deleted from.\nRequired when I(cross_zones) is C(no)",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages ISO images on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: Register an ISO if ISO name does not already exist\n  ngine_io.cloudstack.cs_iso:\n    name: Debian 7 64-bit\n    zone: zone01\n    url: http://mirror.switch.ch/ftp/mirror/debian-cd/current/amd64/iso-cd/debian-7.7.0-amd64-netinst.iso\n    os_type: Debian GNU/Linux 7(64-bit)\n\n- name: Register an ISO with given name if ISO md5 checksum does not already exist\n  ngine_io.cloudstack.cs_iso:\n    name: Debian 7 64-bit\n    zone: zone01\n    url: http://mirror.switch.ch/ftp/mirror/debian-cd/current/amd64/iso-cd/debian-7.7.0-amd64-netinst.iso\n    os_type: Debian GNU/Linux 7(64-bit)\n    checksum: 0b31bccccb048d20b551f70830bb7ad0\n\n- name: Remove an ISO by name\n  ngine_io.cloudstack.cs_iso:\n    name: Debian 7 64-bit\n    zone: zone01\n    state: absent\n\n- name: Remove an ISO by checksum\n  ngine_io.cloudstack.cs_iso:\n    name: Debian 7 64-bit\n    zone: zone01\n    checksum: 0b31bccccb048d20b551f70830bb7ad0\n    state: absent\n"
  },
  "ngine_io.cloudstack.cs_loadbalancer_rule": {
    "doc": {
      "description": "Add, update and remove load balancer rules.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "account": {
          "aliases": [],
          "description": "Account the rule is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "algorithm": {
          "aliases": [],
          "description": "Load balancer algorithm\nRequired when using I(state=present).",
          "default": "source",
          "type": "str",
          "required": false,
          "choices": [
            "source",
            "roundrobin",
            "leastconn"
          ],
          "suboptions": {}
        },
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cidr": {
          "aliases": [],
          "description": "CIDR (full notation) to be used for firewall rule if required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "The description of the load balancer rule.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain the rule is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ip_address": {
          "aliases": [
            "public_ip"
          ],
          "description": "Public IP address from where the network traffic will be load balanced from.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the load balancer rule.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "network": {
          "aliases": [],
          "description": "Name of the network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "open_firewall": {
          "aliases": [],
          "description": "Whether the firewall rule for public port should be created, while creating the new rule.\nUse M(cs_firewall) for managing firewall rules.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "poll_async": {
          "aliases": [],
          "description": "Poll async jobs until job has finished.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "private_port": {
          "aliases": [],
          "description": "The private port of the private ip address/virtual machine where the network traffic will be load balanced to.\nRequired when using I(state=present).\nCan not be changed once the rule exists due API limitation.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Name of the project the load balancer IP address is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "The protocol to be used on the load balancer",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "public_port": {
          "aliases": [],
          "description": "The public port from where the network traffic will be load balanced from.\nRequired when using I(state=present).\nCan not be changed once the rule exists due API limitation.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the rule.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tags": {
          "aliases": [
            "tag"
          ],
          "description": "List of tags. Tags are a list of dictionaries having keys I(key) and I(value).\nTo delete all tags, set a empty list e.g. I(tags: []).",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "vpc": {
          "aliases": [],
          "description": "Name of the VPC.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "zone": {
          "aliases": [],
          "description": "Name of the zone in which the rule should be created.\nRequired when the LB provider is ElasticLoadBalancerVm",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages load balancer rules on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: Create a load balancer rule\n  ngine_io.cloudstack.cs_loadbalancer_rule:\n    name: balance_http\n    public_ip: 1.2.3.4\n    algorithm: leastconn\n    public_port: 80\n    private_port: 8080\n\n- name: Update algorithm of an existing load balancer rule\n  ngine_io.cloudstack.cs_loadbalancer_rule:\n    name: balance_http\n    public_ip: 1.2.3.4\n    algorithm: roundrobin\n    public_port: 80\n    private_port: 8080\n\n- name: Delete a load balancer rule\n  ngine_io.cloudstack.cs_loadbalancer_rule:\n    name: balance_http\n    public_ip: 1.2.3.4\n    state: absent\n"
  },
  "ngine_io.cloudstack.cs_loadbalancer_rule_member": {
    "doc": {
      "description": "Add and remove load balancer rule members.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "account": {
          "aliases": [],
          "description": "Account the rule is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain the rule is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ip_address": {
          "aliases": [
            "public_ip"
          ],
          "description": "Public IP address from where the network traffic will be load balanced from.\nOnly needed to find the rule if I(name) is not unique.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the load balancer rule.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "poll_async": {
          "aliases": [],
          "description": "Poll async jobs until job has finished.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Name of the project the firewall rule is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Should the VMs be present or absent from the rule.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "vms": {
          "aliases": [
            "vm"
          ],
          "description": "List of VMs to assign to or remove from the rule.",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "zone": {
          "aliases": [],
          "description": "Name of the zone in which the rule should be located.\nRequired when the LB provider is ElasticLoadBalancerVm",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages load balancer rule members on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: Add VMs to an existing load balancer\n  ngine_io.cloudstack.cs_loadbalancer_rule_member:\n    name: balance_http\n    vms:\n      - web01\n      - web02\n\n- name: Remove a VM from an existing load balancer\n  ngine_io.cloudstack.cs_loadbalancer_rule_member:\n    name: balance_http\n    vms:\n      - web01\n      - web02\n    state: absent\n\n\n# Rolling upgrade of hosts\n- hosts: webservers\n  serial: 1\n  pre_tasks:\n    - name: Remove from load balancer\n      ngine_io.cloudstack.cs_loadbalancer_rule_member:\n        name: balance_http\n        vm: \"{{ ansible_hostname }}\"\n        state: absent\n  tasks:\n    # Perform update\n  post_tasks:\n    - name: Add to load balancer\n      ngine_io.cloudstack.cs_loadbalancer_rule_member:\n        name: balance_http\n        vm: \"{{ ansible_hostname }}\"\n        state: present\n\n"
  },
  "ngine_io.cloudstack.cs_network": {
    "doc": {
      "description": "Create, update, restart and delete networks.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "account": {
          "aliases": [],
          "description": "Account the network is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "acl": {
          "aliases": [],
          "description": "The name of the access control list for the VPC network tier.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "acl_type": {
          "aliases": [],
          "description": "Access control type for the network.\nIf not specified, Cloudstack will default to C(account) for isolated networks\nand C(domain) for shared networks.\nOnly considered on create.",
          "type": "str",
          "required": false,
          "choices": [
            "account",
            "domain"
          ],
          "suboptions": {}
        },
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cidr_ipv6": {
          "aliases": [],
          "description": "CIDR of IPv6 network, must be at least /64.\nOnly considered on create.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "clean_up": {
          "aliases": [],
          "description": "Cleanup old network elements.\nOnly considered on I(state=restarted).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "display_text": {
          "aliases": [],
          "description": "Display text of the network.\nIf not specified, I(name) will be used as I(display_text).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain the network is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "end_ip": {
          "aliases": [],
          "description": "The ending IPv4 address of the network belongs to.\nIf not specified, value of I(start_ip) is used.\nOnly considered on create.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "end_ipv6": {
          "aliases": [],
          "description": "The ending IPv6 address of the network belongs to.\nIf not specified, value of I(start_ipv6) is used.\nOnly considered on create.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "gateway": {
          "aliases": [],
          "description": "The gateway of the network.\nRequired for shared networks and isolated networks when it belongs to a VPC.\nOnly considered on create.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "gateway_ipv6": {
          "aliases": [],
          "description": "The gateway of the IPv6 network.\nRequired for shared networks.\nOnly considered on create.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "isolated_pvlan": {
          "aliases": [],
          "description": "The isolated private VLAN for this network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name (case sensitive) of the network.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netmask": {
          "aliases": [],
          "description": "The netmask of the network.\nRequired for shared networks and isolated networks when it belongs to a VPC.\nOnly considered on create.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "network_domain": {
          "aliases": [],
          "description": "The network domain.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "network_offering": {
          "aliases": [],
          "description": "Name of the offering for the network.\nRequired if I(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "poll_async": {
          "aliases": [],
          "description": "Poll async jobs until job has finished.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Name of the project the network to be deployed in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "start_ip": {
          "aliases": [],
          "description": "The beginning IPv4 address of the network belongs to.\nOnly considered on create.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "start_ipv6": {
          "aliases": [],
          "description": "The beginning IPv6 address of the network belongs to.\nOnly considered on create.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the network.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "restarted"
          ],
          "suboptions": {}
        },
        "subdomain_access": {
          "aliases": [],
          "description": "Defines whether to allow subdomains to use networks dedicated to their parent domain(s).\nShould be used with I(acl_type=domain).\nOnly considered on create.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "tags": {
          "aliases": [
            "tag"
          ],
          "description": "List of tags. Tags are a list of dictionaries having keys I(key) and I(value).\nTo delete all tags, set a empty list e.g. I(tags: []).",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "vlan": {
          "aliases": [],
          "description": "The ID or VID of the network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vpc": {
          "aliases": [],
          "description": "Name of the VPC of the network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "zone": {
          "aliases": [],
          "description": "Name of the zone in which the network should be deployed.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages networks on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: Create a network\n  ngine_io.cloudstack.cs_network:\n    name: my network\n    zone: gva-01\n    network_offering: DefaultIsolatedNetworkOfferingWithSourceNatService\n    network_domain: example.com\n\n- name: Create a network with start and end IP\n  ngine_io.cloudstack.cs_network:\n    name: Private Network\n    network_offering: PrivNet\n    start_ip: 10.12.9.10\n    end_ip: 10.12.9.100\n    netmask: 255.255.255.0\n    zone: gva-01\n\n- name: Create a VPC tier\n  ngine_io.cloudstack.cs_network:\n    name: my VPC tier 1\n    zone: gva-01\n    vpc: my VPC\n    network_offering: DefaultIsolatedNetworkOfferingForVpcNetworks\n    gateway: 10.43.0.1\n    netmask: 255.255.255.0\n    acl: my web acl\n\n- name: Update a network\n  ngine_io.cloudstack.cs_network:\n    name: my network\n    zone: zone01\n    display_text: network of domain example.local\n    network_domain: example.local\n\n- name: Restart a network with clean up\n  ngine_io.cloudstack.cs_network:\n    name: my network\n    zone: zone01\n    clean_up: yes\n    state: restarted\n\n- name: Remove a network\n  ngine_io.cloudstack.cs_network:\n    name: my network\n    zone: zone01\n    state: absent\n"
  },
  "ngine_io.cloudstack.cs_network_acl": {
    "doc": {
      "description": "Create and remove network ACLs.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "account": {
          "aliases": [],
          "description": "Account the network ACL rule is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the network ACL.\nIf not set, identical to I(name).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain the network ACL rule is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the network ACL.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "poll_async": {
          "aliases": [],
          "description": "Poll async jobs until job has finished.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Name of the project the network ACL is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the network ACL.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "vpc": {
          "aliases": [],
          "description": "VPC the network ACL is related to.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "zone": {
          "aliases": [],
          "description": "Name of the zone the VPC is related to.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages network access control lists (ACL) on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: create a network ACL\n  ngine_io.cloudstack.cs_network_acl:\n    name: Webserver ACL\n    description: a more detailed description of the ACL\n    vpc: customers\n    zone: zone01\n\n- name: remove a network ACL\n  ngine_io.cloudstack.cs_network_acl:\n    name: Webserver ACL\n    vpc: customers\n    zone: zone01\n    state: absent\n"
  },
  "ngine_io.cloudstack.cs_network_acl_rule": {
    "doc": {
      "description": "Add, update and remove network ACL rules.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "account": {
          "aliases": [],
          "description": "Account the VPC is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "action_policy": {
          "aliases": [
            "action"
          ],
          "description": "Action policy of the rule.",
          "default": "allow",
          "type": "str",
          "required": false,
          "choices": [
            "allow",
            "deny"
          ],
          "suboptions": {}
        },
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cidrs": {
          "aliases": [
            "cidr"
          ],
          "description": "CIDRs of the rule.",
          "default": "['0.0.0.0/0']",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain the VPC is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "end_port": {
          "aliases": [],
          "description": "End port for this rule.\nConsidered if I(protocol=tcp) or I(protocol=udp).\nIf not specified, equal I(start_port).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "icmp_code": {
          "aliases": [],
          "description": "Error code for this icmp message.\nConsidered if I(protocol=icmp).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "icmp_type": {
          "aliases": [],
          "description": "Type of the icmp message being sent.\nConsidered if I(protocol=icmp).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "network_acl": {
          "aliases": [
            "acl"
          ],
          "description": "Name of the network ACL.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "poll_async": {
          "aliases": [],
          "description": "Poll async jobs until job has finished.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Name of the project the VPC is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "Protocol of the rule",
          "default": "tcp",
          "type": "str",
          "required": false,
          "choices": [
            "tcp",
            "udp",
            "icmp",
            "all",
            "by_number"
          ],
          "suboptions": {}
        },
        "protocol_number": {
          "aliases": [],
          "description": "Protocol number from 1 to 256 required if I(protocol=by_number).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "rule_position": {
          "aliases": [
            "number"
          ],
          "description": "The position of the network ACL rule.",
          "type": "int",
          "required": true,
          "suboptions": {}
        },
        "start_port": {
          "aliases": [
            "port"
          ],
          "description": "Start port for this rule.\nConsidered if I(protocol=tcp) or I(protocol=udp).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the network ACL rule.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tags": {
          "aliases": [
            "tag"
          ],
          "description": "List of tags. Tags are a list of dictionaries having keys I(key) and I(value).\nIf you want to delete all tags, set a empty list e.g. I(tags: []).",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "traffic_type": {
          "aliases": [
            "type"
          ],
          "description": "Traffic type of the rule.",
          "default": "ingress",
          "type": "str",
          "required": false,
          "choices": [
            "ingress",
            "egress"
          ],
          "suboptions": {}
        },
        "vpc": {
          "aliases": [],
          "description": "VPC the network ACL is related to.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "zone": {
          "aliases": [],
          "description": "Name of the zone the VPC related to.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages network access control list (ACL) rules on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: create a network ACL rule, allow port 80 ingress\n  ngine_io.cloudstack.cs_network_acl_rule:\n    network_acl: web\n    rule_position: 1\n    vpc: my vpc\n    zone: zone01\n    traffic_type: ingress\n    action_policy: allow\n    port: 80\n    cidr: 0.0.0.0/0\n\n- name: create a network ACL rule, deny port range 8000-9000 ingress for 10.20.0.0/16 and 10.22.0.0/16\n  ngine_io.cloudstack.cs_network_acl_rule:\n    network_acl: web\n    rule_position: 1\n    vpc: my vpc\n    zone: zone01\n    traffic_type: ingress\n    action_policy: deny\n    start_port: 8000\n    end_port: 9000\n    cidrs:\n    - 10.20.0.0/16\n    - 10.22.0.0/16\n\n- name: remove a network ACL rule\n  ngine_io.cloudstack.cs_network_acl_rule:\n    network_acl: web\n    rule_position: 1\n    vpc: my vpc\n    zone: zone01\n    state: absent\n"
  },
  "ngine_io.cloudstack.cs_network_offering": {
    "doc": {
      "description": "Create, update, enable, disable and remove network offerings.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability": {
          "aliases": [],
          "description": "The availability of network offering. Default value is Optional",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "conserve_mode": {
          "aliases": [],
          "description": "Whether the network offering has IP conserve mode enabled.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "details": {
          "aliases": [],
          "description": "Network offering details in key/value pairs.\nwith service provider as a value",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "display_text": {
          "aliases": [],
          "description": "Display text of the network offerings.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domains": {
          "aliases": [
            "domain"
          ],
          "description": "List of domains the network offering is related to.\nUse C(public) for public offerings.",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "2.2.0",
          "suboptions": {}
        },
        "egress_default_policy": {
          "aliases": [],
          "description": "Whether the default egress policy is allow or to deny.",
          "type": "str",
          "required": false,
          "choices": [
            "allow",
            "deny"
          ],
          "suboptions": {}
        },
        "for_vpc": {
          "aliases": [],
          "description": "Whether the offering is meant to be used for VPC or not.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "guest_ip_type": {
          "aliases": [],
          "description": "Guest type of the network offering.",
          "type": "str",
          "required": false,
          "choices": [
            "Shared",
            "Isolated"
          ],
          "suboptions": {}
        },
        "keepalive_enabled": {
          "aliases": [],
          "description": "If true keepalive will be turned on in the loadbalancer.\nAt the time of writing this has only an effect on haproxy.\nthe mode http and httpclose options are unset in the haproxy conf file.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "max_connections": {
          "aliases": [],
          "description": "Maximum number of concurrent connections supported by the network offering.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the network offering.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "network_rate": {
          "aliases": [],
          "description": "Data transfer rate in megabits per second allowed.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "persistent": {
          "aliases": [],
          "description": "True if network offering supports persistent networks\ndefaulted to false if not specified",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "service_capabilities": {
          "aliases": [
            "service_capability"
          ],
          "description": "Desired service capabilities as part of network offering.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "service_offering": {
          "aliases": [],
          "description": "The service offering name or ID used by virtual router provider.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "service_providers": {
          "aliases": [
            "service_provider"
          ],
          "description": "Provider to service mapping.\nIf not specified, the provider for the service will be mapped to the default provider on the physical network.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "specify_ip_ranges": {
          "aliases": [],
          "description": "Whether the network offering supports specifying IP ranges.\nDefaulted to C(no) by the API if not specified.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "specify_vlan": {
          "aliases": [],
          "description": "Whether the network offering supports vlans or not.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the network offering.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "enabled",
            "present",
            "disabled",
            "absent"
          ],
          "suboptions": {}
        },
        "supported_services": {
          "aliases": [
            "supported_service"
          ],
          "description": "Services supported by the network offering.\nA list of one or more items from the choice list.",
          "type": "list",
          "required": false,
          "choices": [
            "Dns",
            "PortForwarding",
            "Dhcp",
            "SourceNat",
            "UserData",
            "Firewall",
            "StaticNat",
            "Vpn",
            "Lb"
          ],
          "elements": "str",
          "suboptions": {}
        },
        "tags": {
          "aliases": [
            "tag"
          ],
          "description": "List of tags. Tags are a list of strings.\nTo delete all tags, set an empty list e.g. I(tags: []).",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "2.2.0",
          "suboptions": {}
        },
        "traffic_type": {
          "aliases": [],
          "description": "The traffic type for the network offering.",
          "default": "Guest",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "zones": {
          "aliases": [
            "zone"
          ],
          "description": "List of zones the network offering is related to.\nUse C(all) for all zones offering.",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "2.2.0",
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages network offerings on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: Create a network offering and enable it\n  ngine_io.cloudstack.cs_network_offering:\n    name: my_network_offering\n    display_text: network offering description\n    state: enabled\n    guest_ip_type: Isolated\n    supported_services: [ Dns, PortForwarding, Dhcp, SourceNat, UserData, Firewall, StaticNat, Vpn, Lb ]\n    service_providers:\n      - { service: 'dns', provider: 'virtualrouter' }\n      - { service: 'dhcp', provider: 'virtualrouter' }\n\n- name: Remove a network offering\n  ngine_io.cloudstack.cs_network_offering:\n    name: my_network_offering\n    state: absent\n"
  },
  "ngine_io.cloudstack.cs_physical_network": {
    "doc": {
      "description": "Create, update and remove networks.\nEnabled and disabled Network Service Providers\nEnables Internal LoadBalancer and VPC/VirtualRouter elements as required",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "broadcast_domain_range": {
          "aliases": [],
          "description": "broadcast domain range for the physical network[Pod or Zone].",
          "type": "str",
          "required": false,
          "choices": [
            "POD",
            "ZONE"
          ],
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain the network is owned by.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "isolation_method": {
          "aliases": [],
          "description": "Isolation method for the physical network.",
          "type": "str",
          "required": false,
          "choices": [
            "VLAN",
            "VXLAN",
            "GRE",
            "L3"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "physical_network"
          ],
          "description": "Name of the physical network.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "network_speed": {
          "aliases": [],
          "description": "The speed for the physical network.",
          "type": "str",
          "required": false,
          "choices": [
            "1G",
            "10G"
          ],
          "suboptions": {}
        },
        "nsps_disabled": {
          "aliases": [],
          "description": "List of Network Service Providers to disable.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "nsps_enabled": {
          "aliases": [],
          "description": "List of Network Service Providers to enable.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "poll_async": {
          "aliases": [],
          "description": "Poll async jobs until job has finished.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the physical network.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "disabled",
            "enabled"
          ],
          "suboptions": {}
        },
        "tags": {
          "aliases": [
            "tag"
          ],
          "description": "A tag to identify this network.\nPhysical networks support only one tag.\nTo remove an existing tag pass an empty string.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vlan": {
          "aliases": [],
          "description": "The VLAN/VNI Ranges of the physical network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "zone": {
          "aliases": [],
          "description": "Name of the zone in which the network belongs.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages physical networks on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: Ensure a network is present\n  ngine_io.cloudstack.cs_physical_network:\n    name: net01\n    zone: zone01\n    isolation_method: VLAN\n    broadcast_domain_range: ZONE\n\n- name: Set a tag on a network\n  ngine_io.cloudstack.cs_physical_network:\n    name: net01\n    zone: zone01\n    tag: overlay\n\n- name: Remove tag on a network\n  ngine_io.cloudstack.cs_physical_network:\n    name: net01\n    zone: zone01\n    tag: \"\"\n\n- name: Ensure a network is enabled with specific nsps enabled\n  ngine_io.cloudstack.cs_physical_network:\n    name: net01\n    zone: zone01\n    isolation_method: VLAN\n    vlan: 100-200,300-400\n    broadcast_domain_range: ZONE\n    state: enabled\n    nsps_enabled:\n      - virtualrouter\n      - internallbvm\n      - vpcvirtualrouter\n\n- name: Ensure a network is enabled with VXLAN isolation\n  ngine_io.cloudstack.cs_physical_network:\n    name: net01\n    zone: zone01\n    isolation_method: VXLAN\n    vlan: 42-8192\n    broadcast_domain_range: ZONE\n    state: enabled\n\n- name: Ensure a network is disabled\n  ngine_io.cloudstack.cs_physical_network:\n    name: net01\n    zone: zone01\n    state: disabled\n\n- name: Ensure a network is enabled\n  ngine_io.cloudstack.cs_physical_network:\n    name: net01\n    zone: zone01\n    state: enabled\n\n- name: Ensure a network is absent\n  ngine_io.cloudstack.cs_physical_network:\n    name: net01\n    zone: zone01\n    state: absent\n"
  },
  "ngine_io.cloudstack.cs_pod": {
    "doc": {
      "description": "Create, update, delete pods.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "end_ip": {
          "aliases": [],
          "description": "Ending IP address for the Pod.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "gateway": {
          "aliases": [],
          "description": "Gateway for the Pod.\nRequired on I(state=present)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "uuid of the existing pod.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the pod.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "netmask": {
          "aliases": [],
          "description": "Netmask for the Pod.\nRequired on I(state=present)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "start_ip": {
          "aliases": [],
          "description": "Starting IP address for the Pod.\nRequired on I(state=present)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the pod.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "enabled",
            "disabled",
            "absent"
          ],
          "suboptions": {}
        },
        "zone": {
          "aliases": [],
          "description": "Name of the zone in which the pod belongs to.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages pods on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: Ensure a pod is present\n  ngine_io.cloudstack.cs_pod:\n    name: pod1\n    zone: ch-zrh-ix-01\n    start_ip: 10.100.10.101\n    gateway: 10.100.10.1\n    netmask: 255.255.255.0\n\n- name: Ensure a pod is disabled\n  ngine_io.cloudstack.cs_pod:\n    name: pod1\n    zone: ch-zrh-ix-01\n    state: disabled\n\n- name: Ensure a pod is enabled\n  ngine_io.cloudstack.cs_pod:\n    name: pod1\n    zone: ch-zrh-ix-01\n    state: enabled\n\n- name: Ensure a pod is absent\n  ngine_io.cloudstack.cs_pod:\n    name: pod1\n    zone: ch-zrh-ix-01\n    state: absent\n"
  },
  "ngine_io.cloudstack.cs_portforward": {
    "doc": {
      "description": "Create, update and remove port forwarding rules.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "account": {
          "aliases": [],
          "description": "Account the I(vm) is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain the I(vm) is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ip_address": {
          "aliases": [],
          "description": "Public IP address the rule is assigned to.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "network": {
          "aliases": [],
          "description": "Name of the network. Required when forwarding ports in a VPC.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "open_firewall": {
          "aliases": [],
          "description": "Whether the firewall rule for public port should be created, while creating the new rule.\nNot supported when forwarding ports in a VPC.\nUse M(cs_firewall) for managing firewall rules.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "poll_async": {
          "aliases": [],
          "description": "Poll async jobs until job has finished.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "private_end_port": {
          "aliases": [],
          "description": "End private port for this rule.\nIf not specified equal I(private_port).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "private_port": {
          "aliases": [],
          "description": "Start private port for this rule.",
          "type": "int",
          "required": true,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Name of the project the I(vm) is located in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "Protocol of the port forwarding rule.",
          "default": "tcp",
          "type": "str",
          "required": false,
          "choices": [
            "tcp",
            "udp"
          ],
          "suboptions": {}
        },
        "public_end_port": {
          "aliases": [],
          "description": "End public port for this rule.\nIf not specified equal I(public_port).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "public_port": {
          "aliases": [],
          "description": "Start public port for this rule.",
          "type": "int",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the port forwarding rule.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tags": {
          "aliases": [
            "tag"
          ],
          "description": "List of tags. Tags are a list of dictionaries having keys I(key) and I(value).\nTo delete all tags, set a empty list e.g. I(tags: []).",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "vm": {
          "aliases": [],
          "description": "Name of virtual machine which we make the port forwarding rule for.\nRequired if I(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vm_guest_ip": {
          "aliases": [],
          "description": "VM guest NIC secondary IP address for the port forwarding rule.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vpc": {
          "aliases": [],
          "description": "Name of the VPC.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "zone": {
          "aliases": [],
          "description": "Name of the zone in which the virtual machine is in.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages port forwarding rules on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: 1.2.3.4:80 -> web01:8080\n  ngine_io.cloudstack.cs_portforward:\n    ip_address: 1.2.3.4\n    zone: zone01\n    vm: web01\n    public_port: 80\n    private_port: 8080\n\n- name: forward SSH and open firewall\n  ngine_io.cloudstack.cs_portforward:\n    ip_address: '{{ public_ip }}'\n    zone: zone01\n    vm: '{{ inventory_hostname }}'\n    public_port: '{{ ansible_ssh_port }}'\n    private_port: 22\n    open_firewall: true\n\n- name: forward DNS traffic, but do not open firewall\n  ngine_io.cloudstack.cs_portforward:\n    ip_address: 1.2.3.4\n    zone: zone01\n    vm: '{{ inventory_hostname }}'\n    public_port: 53\n    private_port: 53\n    protocol: udp\n\n- name: remove ssh port forwarding\n  ngine_io.cloudstack.cs_portforward:\n    ip_address: 1.2.3.4\n    zone: zone01\n    public_port: 22\n    private_port: 22\n    state: absent\n\n- name: forward SSH in backend tier of VPC\n  ngine_io.cloudstack.cs_portforward:\n    ip_address: '{{ public_ip }}'\n    zone: zone01\n    vm: '{{ inventory_hostname }}'\n    public_port: '{{ ansible_ssh_port }}'\n    private_port: 22\n    vpc: myVPC\n    network: backend\n"
  },
  "ngine_io.cloudstack.cs_project": {
    "doc": {
      "description": "Create, update, suspend, activate and remove projects.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "account": {
          "aliases": [],
          "description": "Account the project is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "display_text": {
          "aliases": [],
          "description": "Display text of the project.\nIf not specified, I(name) will be used as I(display_text).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain the project is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the project.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "poll_async": {
          "aliases": [],
          "description": "Poll async jobs until job has finished.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the project.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "active",
            "suspended"
          ],
          "suboptions": {}
        },
        "tags": {
          "aliases": [
            "tag"
          ],
          "description": "List of tags. Tags are a list of dictionaries having keys I(key) and I(value).\nIf you want to delete all tags, set a empty list e.g. I(tags: []).",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages projects on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: Create a project\n  ngine_io.cloudstack.cs_project:\n    name: web\n    tags:\n      - { key: admin, value: john }\n      - { key: foo,   value: bar }\n\n- name: Rename a project\n  ngine_io.cloudstack.cs_project:\n    name: web\n    display_text: my web project\n\n- name: Suspend an existing project\n  ngine_io.cloudstack.cs_project:\n    name: web\n    state: suspended\n\n- name: Activate an existing project\n  ngine_io.cloudstack.cs_project:\n    name: web\n    state: active\n\n- name: Remove a project\n  ngine_io.cloudstack.cs_project:\n    name: web\n    state: absent\n"
  },
  "ngine_io.cloudstack.cs_region": {
    "doc": {
      "description": "Add, update and remove regions.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "endpoint": {
          "aliases": [],
          "description": "Endpoint URL of the region.\nRequired if I(state=present)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "ID of the region.\nMust be an number (int).",
          "type": "int",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the region.\nRequired if I(state=present)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the region.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages regions on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: create a region\n  ngine_io.cloudstack.cs_region:\n    id: 2\n    name: geneva\n    endpoint: https://cloud.gva.example.com\n\n- name: remove a region with ID 2\n  ngine_io.cloudstack.cs_region:\n    id: 2\n    state: absent\n"
  },
  "ngine_io.cloudstack.cs_resourcelimit": {
    "doc": {
      "description": "Manage limits of resources for domains, accounts and projects.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "account": {
          "aliases": [],
          "description": "Account the resource is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain the resource is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "limit": {
          "aliases": [
            "max"
          ],
          "description": "Maximum number of the resource.\nDefault is unlimited C(-1).",
          "default": "-1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Name of the project the resource is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "resource_type": {
          "aliases": [
            "type"
          ],
          "description": "Type of the resource.",
          "type": "str",
          "required": true,
          "choices": [
            "instance",
            "ip_address",
            "volume",
            "snapshot",
            "template",
            "network",
            "vpc",
            "cpu",
            "memory",
            "primary_storage",
            "secondary_storage"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages resource limits on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: Update a resource limit for instances of a domain\n  ngine_io.cloudstack.cs_resourcelimit:\n    type: instance\n    limit: 10\n    domain: customers\n\n- name: Update a resource limit for instances of an account\n  ngine_io.cloudstack.cs_resourcelimit:\n    type: instance\n    limit: 12\n    account: moserre\n    domain: customers\n"
  },
  "ngine_io.cloudstack.cs_role": {
    "doc": {
      "description": "Create, update, delete user roles.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the role.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the role.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "role_type": {
          "aliases": [],
          "description": "Type of the role.\nOnly considered for creation.",
          "default": "User",
          "type": "str",
          "required": false,
          "choices": [
            "User",
            "DomainAdmin",
            "ResourceAdmin",
            "Admin"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the role.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "uuid": {
          "aliases": [
            "id"
          ],
          "description": "ID of the role.\nIf provided, I(uuid) is used as key.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages user roles on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: Ensure an user role is present\n  ngine_io.cloudstack.cs_role:\n    name: myrole_user\n\n- name: Ensure a role having particular ID is named as myrole_user\n  ngine_io.cloudstack.cs_role:\n    name: myrole_user\n    id: 04589590-ac63-4ffc-93f5-b698b8ac38b6\n\n- name: Ensure a role is absent\n  ngine_io.cloudstack.cs_role:\n    name: myrole_user\n    state: absent\n"
  },
  "ngine_io.cloudstack.cs_role_permission": {
    "doc": {
      "description": "Create, update and remove CloudStack role permissions.\nManaging role permissions only supported in CloudStack >= 4.9.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "The description of the role permission.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The API name of the permission.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "parent": {
          "aliases": [],
          "description": "The parent role permission uuid. use 0 to move this rule at the top of the list.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "permission": {
          "aliases": [],
          "description": "The rule permission, allow or deny. Defaulted to deny.",
          "default": "deny",
          "type": "str",
          "required": false,
          "choices": [
            "allow",
            "deny"
          ],
          "suboptions": {}
        },
        "role": {
          "aliases": [],
          "description": "Name or ID of the role.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the role permission.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages role permissions on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: Create a role permission\n  ngine_io.cloudstack.cs_role_permission:\n    role: My_Custom_role\n    name: createVPC\n    permission: allow\n    description: My comments\n\n- name: Remove a role permission\n  ngine_io.cloudstack.cs_role_permission:\n    state: absent\n    role: My_Custom_role\n    name: createVPC\n\n- name: Update a system role permission\n  ngine_io.cloudstack.cs_role_permission:\n    role: Domain Admin\n    name: createVPC\n    permission: deny\n\n- name: Update rules order. Move the rule at the top of list\n  ngine_io.cloudstack.cs_role_permission:\n    role: Domain Admin\n    name: createVPC\n    parent: 0\n"
  },
  "ngine_io.cloudstack.cs_router": {
    "doc": {
      "description": "Start, restart, stop and destroy routers.\nI(state=present) is not able to create routers, use M(cs_network) instead.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "account": {
          "aliases": [],
          "description": "Account the router is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain the router is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the router.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "poll_async": {
          "aliases": [],
          "description": "Poll async jobs until job has finished.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Name of the project the router is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "service_offering": {
          "aliases": [],
          "description": "Name or id of the service offering of the router.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the router.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "started",
            "stopped",
            "restarted"
          ],
          "suboptions": {}
        },
        "zone": {
          "aliases": [],
          "description": "Name of the zone the router is deployed in.\nIf not set, all zones are used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages routers on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n# Ensure the router has the desired service offering, no matter if\n# the router is running or not.\n- name: Present router\n  ngine_io.cloudstack.cs_router:\n    name: r-40-VM\n    service_offering: System Offering for Software Router\n\n- name: Ensure started\n  ngine_io.cloudstack.cs_router:\n    name: r-40-VM\n    state: started\n\n# Ensure started with desired service offering.\n# If the service offerings changes, router will be rebooted.\n- name: Ensure started with desired service offering\n  ngine_io.cloudstack.cs_router:\n    name: r-40-VM\n    service_offering: System Offering for Software Router\n    state: started\n\n- name: Ensure stopped\n  ngine_io.cloudstack.cs_router:\n    name: r-40-VM\n    state: stopped\n\n- name: Remove a router\n  ngine_io.cloudstack.cs_router:\n    name: r-40-VM\n    state: absent\n"
  },
  "ngine_io.cloudstack.cs_securitygroup": {
    "doc": {
      "description": "Create and remove security groups.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "account": {
          "aliases": [],
          "description": "Account the security group is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the security group.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain the security group is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the security group.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Name of the project the security group to be created in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the security group.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages security groups on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: create a security group\n  ngine_io.cloudstack.cs_securitygroup:\n    name: default\n    description: default security group\n\n- name: remove a security group\n  ngine_io.cloudstack.cs_securitygroup:\n    name: default\n    state: absent\n"
  },
  "ngine_io.cloudstack.cs_securitygroup_rule": {
    "doc": {
      "description": "Add and remove security group rules.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cidr": {
          "aliases": [],
          "description": "CIDR (full notation) to be used for security group rule.",
          "default": "0.0.0.0/0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "end_port": {
          "aliases": [],
          "description": "End port for this rule. Required if I(protocol=tcp) or I(protocol=udp), but I(start_port) will be used if not set.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "icmp_code": {
          "aliases": [],
          "description": "Error code for this icmp message. Required if I(protocol=icmp).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "icmp_type": {
          "aliases": [],
          "description": "Type of the icmp message being sent. Required if I(protocol=icmp).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "poll_async": {
          "aliases": [],
          "description": "Poll async jobs until job has finished.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Name of the project the security group to be created in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "Protocol of the security group rule.",
          "default": "tcp",
          "type": "str",
          "required": false,
          "choices": [
            "tcp",
            "udp",
            "icmp",
            "ah",
            "esp",
            "gre"
          ],
          "suboptions": {}
        },
        "security_group": {
          "aliases": [],
          "description": "Name of the security group the rule is related to. The security group must be existing.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "start_port": {
          "aliases": [
            "port"
          ],
          "description": "Start port for this rule. Required if I(protocol=tcp) or I(protocol=udp).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the security group rule.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "Ingress or egress security group rule.",
          "default": "ingress",
          "type": "str",
          "required": false,
          "choices": [
            "ingress",
            "egress"
          ],
          "suboptions": {}
        },
        "user_security_group": {
          "aliases": [],
          "description": "Security group this rule is based of.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages security group rules on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n---\n- name: allow inbound port 80/tcp from 1.2.3.4 added to security group 'default'\n  ngine_io.cloudstack.cs_securitygroup_rule:\n    security_group: default\n    port: 80\n    cidr: 1.2.3.4/32\n\n- name: allow tcp/udp outbound added to security group 'default'\n  ngine_io.cloudstack.cs_securitygroup_rule:\n    security_group: default\n    type: egress\n    start_port: 1\n    end_port: 65535\n    protocol: '{{ item }}'\n  with_items:\n  - tcp\n  - udp\n\n- name: allow inbound icmp from 0.0.0.0/0 added to security group 'default'\n  ngine_io.cloudstack.cs_securitygroup_rule:\n    security_group: default\n    protocol: icmp\n    icmp_code: -1\n    icmp_type: -1\n\n- name: remove rule inbound port 80/tcp from 0.0.0.0/0 from security group 'default'\n  ngine_io.cloudstack.cs_securitygroup_rule:\n    security_group: default\n    port: 80\n    state: absent\n\n- name: allow inbound port 80/tcp from security group web added to security group 'default'\n  ngine_io.cloudstack.cs_securitygroup_rule:\n    security_group: default\n    port: 80\n    user_security_group: web\n"
  },
  "ngine_io.cloudstack.cs_service_offering": {
    "doc": {
      "description": "Create and delete service offerings for guest and system VMs.\nUpdate display_text of existing service offering.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cpu_number": {
          "aliases": [],
          "description": "The number of CPUs of the service offering.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "cpu_speed": {
          "aliases": [],
          "description": "The CPU speed of the service offering in MHz.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "deployment_planner": {
          "aliases": [],
          "description": "The deployment planner heuristics used to deploy a VM of this offering.\nIf not set, the value of global config I(vm.deployment.planner) is used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "disk_bytes_read_rate": {
          "aliases": [
            "bytes_read_rate"
          ],
          "description": "Bytes read rate of the disk offering.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "disk_bytes_write_rate": {
          "aliases": [
            "bytes_write_rate"
          ],
          "description": "Bytes write rate of the disk offering.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "disk_iops_max": {
          "aliases": [],
          "description": "Max. iops of the compute offering.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "disk_iops_min": {
          "aliases": [],
          "description": "Min. iops of the compute offering.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "disk_iops_read_rate": {
          "aliases": [],
          "description": "IO requests read rate of the disk offering.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "disk_iops_write_rate": {
          "aliases": [],
          "description": "IO requests write rate of the disk offering.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "display_text": {
          "aliases": [],
          "description": "Display text of the service offering.\nIf not set, I(name) will be used as I(display_text) while creating.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain the service offering is related to.\nPublic for all domains and subdomains if not set.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host_tags": {
          "aliases": [
            "host_tag"
          ],
          "description": "The host tags for this service offering.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "hypervisor_snapshot_reserve": {
          "aliases": [],
          "description": "Hypervisor snapshot reserve space as a percent of a volume.\nOnly for managed storage using Xen or VMware.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "is_customized": {
          "aliases": [],
          "description": "Whether the offering is customizable or not.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "is_iops_customized": {
          "aliases": [
            "disk_iops_customized"
          ],
          "description": "Whether compute offering iops is custom or not.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "is_system": {
          "aliases": [],
          "description": "Whether it is a system VM offering or not.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "is_volatile": {
          "aliases": [],
          "description": "Whether the virtual machine needs to be volatile or not.\nEvery reboot of VM the root disk is detached then destroyed and a fresh root disk is created and attached to VM.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "limit_cpu_usage": {
          "aliases": [],
          "description": "Restrict the CPU usage to committed service offering.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "memory": {
          "aliases": [],
          "description": "The total memory of the service offering in MB.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the service offering.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "network_rate": {
          "aliases": [],
          "description": "Data transfer rate in Mb/s allowed.\nSupported only for non-system offering and system offerings having I(system_vm_type=domainrouter).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "offer_ha": {
          "aliases": [],
          "description": "Whether HA is set for the service offering.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "provisioning_type": {
          "aliases": [],
          "description": "Provisioning type used to create volumes.",
          "type": "str",
          "required": false,
          "choices": [
            "thin",
            "sparse",
            "fat"
          ],
          "suboptions": {}
        },
        "service_offering_details": {
          "aliases": [],
          "description": "Details for planner, used to store specific parameters.\nA list of dictionaries having keys C(key) and C(value).",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the service offering.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "storage_tags": {
          "aliases": [
            "storage_tag"
          ],
          "description": "The storage tags for this service offering.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "storage_type": {
          "aliases": [],
          "description": "The storage type of the service offering.",
          "type": "str",
          "required": false,
          "choices": [
            "local",
            "shared"
          ],
          "suboptions": {}
        },
        "system_vm_type": {
          "aliases": [],
          "description": "The system VM type.\nRequired if I(is_system=yes).",
          "type": "str",
          "required": false,
          "choices": [
            "domainrouter",
            "consoleproxy",
            "secondarystoragevm"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages service offerings on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: Create a non-volatile compute service offering with local storage\n  ngine_io.cloudstack.cs_service_offering:\n    name: Micro\n    display_text: Micro 512mb 1cpu\n    cpu_number: 1\n    cpu_speed: 2198\n    memory: 512\n    host_tags: eco\n    storage_type: local\n\n- name: Create a volatile compute service offering with shared storage\n  ngine_io.cloudstack.cs_service_offering:\n    name: Tiny\n    display_text: Tiny 1gb 1cpu\n    cpu_number: 1\n    cpu_speed: 2198\n    memory: 1024\n    storage_type: shared\n    is_volatile: yes\n    host_tags: eco\n    storage_tags: eco\n\n- name: Create or update a volatile compute service offering with shared storage\n  ngine_io.cloudstack.cs_service_offering:\n    name: Tiny\n    display_text: Tiny 1gb 1cpu\n    cpu_number: 1\n    cpu_speed: 2198\n    memory: 1024\n    storage_type: shared\n    is_volatile: yes\n    host_tags: eco\n    storage_tags: eco\n\n- name: Create or update a custom compute service offering\n  ngine_io.cloudstack.cs_service_offering:\n    name: custom\n    display_text: custom compute offer\n    is_customized: yes\n    storage_type: shared\n    host_tags: eco\n    storage_tags: eco\n\n- name: Remove a compute service offering\n  ngine_io.cloudstack.cs_service_offering:\n    name: Tiny\n    state: absent\n\n- name: Create or update a system offering for the console proxy\n  ngine_io.cloudstack.cs_service_offering:\n    name: System Offering for Console Proxy 2GB\n    display_text: System Offering for Console Proxy 2GB RAM\n    is_system: yes\n    system_vm_type: consoleproxy\n    cpu_number: 1\n    cpu_speed: 2198\n    memory: 2048\n    storage_type: shared\n    storage_tags: perf\n\n- name: Remove a system offering\n  ngine_io.cloudstack.cs_service_offering:\n    name: System Offering for Console Proxy 2GB\n    is_system: yes\n    state: absent\n"
  },
  "ngine_io.cloudstack.cs_snapshot_policy": {
    "doc": {
      "description": "Create, update and delete volume snapshot policies.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "account": {
          "aliases": [],
          "description": "Account the volume is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "device_id": {
          "aliases": [],
          "description": "ID of the device on a VM the volume is attached to.\nThis will only be considered if VM has multiple DATADISK volumes.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain the volume is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interval_type": {
          "aliases": [
            "interval"
          ],
          "description": "Interval of the snapshot.",
          "default": "daily",
          "type": "str",
          "required": false,
          "choices": [
            "hourly",
            "daily",
            "weekly",
            "monthly"
          ],
          "suboptions": {}
        },
        "max_snaps": {
          "aliases": [
            "max"
          ],
          "description": "Max number of snapshots.",
          "default": "8",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Name of the project the volume is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "schedule": {
          "aliases": [],
          "description": "Time the snapshot is scheduled. Required if I(state=present).\nFormat for I(interval_type=HOURLY): C(MM)\nFormat for I(interval_type=DAILY): C(MM:HH)\nFormat for I(interval_type=WEEKLY): C(MM:HH:DD (1-7))\nFormat for I(interval_type=MONTHLY): C(MM:HH:DD (1-28))",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the snapshot policy.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "time_zone": {
          "aliases": [
            "timezone"
          ],
          "description": "Specifies a timezone for this command.",
          "default": "UTC",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vm": {
          "aliases": [],
          "description": "Name of the instance to select the volume from.\nUse I(volume_type) if VM has a DATADISK and ROOT volume.\nIn case of I(volume_type=DATADISK), additionally use I(device_id) if VM has more than one DATADISK volume.\nEither I(volume) or I(vm) is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "volume": {
          "aliases": [],
          "description": "Name of the volume.\nEither I(volume) or I(vm) is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "volume_type": {
          "aliases": [],
          "description": "Type of the volume.",
          "type": "str",
          "required": false,
          "choices": [
            "DATADISK",
            "ROOT"
          ],
          "suboptions": {}
        },
        "vpc": {
          "aliases": [],
          "description": "Name of the vpc the instance is deployed in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages volume snapshot policies on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: ensure a snapshot policy daily at 1h00 UTC\n  ngine_io.cloudstack.cs_snapshot_policy:\n    volume: ROOT-478\n    schedule: '00:1'\n    max_snaps: 3\n\n- name: ensure a snapshot policy daily at 1h00 UTC on the second DATADISK of VM web-01\n  ngine_io.cloudstack.cs_snapshot_policy:\n    vm: web-01\n    volume_type: DATADISK\n    device_id: 2\n    schedule: '00:1'\n    max_snaps: 3\n\n- name: ensure a snapshot policy hourly at minute 5 UTC\n  ngine_io.cloudstack.cs_snapshot_policy:\n    volume: ROOT-478\n    schedule: '5'\n    interval_type: hourly\n    max_snaps: 1\n\n- name: ensure a snapshot policy weekly on Sunday at 05h00, TZ Europe/Zurich\n  ngine_io.cloudstack.cs_snapshot_policy:\n    volume: ROOT-478\n    schedule: '00:5:1'\n    interval_type: weekly\n    max_snaps: 1\n    time_zone: 'Europe/Zurich'\n\n- name: ensure a snapshot policy is absent\n  ngine_io.cloudstack.cs_snapshot_policy:\n    volume: ROOT-478\n    interval_type: hourly\n    state: absent\n"
  },
  "ngine_io.cloudstack.cs_sshkeypair": {
    "doc": {
      "description": "Create, register and remove SSH keys.\nIf no key was found and no public key was provided and a new SSH private/public key pair will be created and the private key will be returned.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "account": {
          "aliases": [],
          "description": "Account the public key is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain the public key is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of public key.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Name of the project the public key to be registered in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "public_key": {
          "aliases": [],
          "description": "String of the public key.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the public key.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages SSH keys on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: create a new private / public key pair\n  ngine_io.cloudstack.cs_sshkeypair:\n    name: linus@example.com\n  register: key\n\n- debug:\n    msg: 'Private key is {{ key.private_key }}'\n\n- name: remove a public key by its name\n  ngine_io.cloudstack.cs_sshkeypair:\n    name: linus@example.com\n    state: absent\n\n- name: register your existing local public key\n  ngine_io.cloudstack.cs_sshkeypair:\n    name: linus@example.com\n    public_key: \"{{ lookup('file', '~/.ssh/id_rsa.pub') }}\"\n"
  },
  "ngine_io.cloudstack.cs_staticnat": {
    "doc": {
      "description": "Create, update and remove static NATs.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "account": {
          "aliases": [],
          "description": "Account the static NAT is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain the static NAT is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ip_address": {
          "aliases": [],
          "description": "Public IP address the static NAT is assigned to.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "network": {
          "aliases": [],
          "description": "Network the IP address is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "poll_async": {
          "aliases": [],
          "description": "Poll async jobs until job has finished.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Name of the project the static NAT is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the static NAT.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "vm": {
          "aliases": [],
          "description": "Name of virtual machine which we make the static NAT for.\nRequired if I(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vm_guest_ip": {
          "aliases": [],
          "description": "VM guest NIC secondary IP address for the static NAT.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vpc": {
          "aliases": [],
          "description": "VPC the network related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "zone": {
          "aliases": [],
          "description": "Name of the zone in which the virtual machine is in.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages static NATs on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: Create a static NAT for IP 1.2.3.4 to web01\n  ngine_io.cloudstack.cs_staticnat:\n    ip_address: 1.2.3.4\n    zone: zone01\n    vm: web01\n\n- name: Remove a static NAT\n  ngine_io.cloudstack.cs_staticnat:\n    ip_address: 1.2.3.4\n    zone: zone01\n    state: absent\n"
  },
  "ngine_io.cloudstack.cs_storage_pool": {
    "doc": {
      "description": "Create, update, put into maintenance, disable, enable and remove storage pools.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "allocation_state": {
          "aliases": [],
          "description": "Allocation state of the storage pool.",
          "type": "str",
          "required": false,
          "choices": [
            "enabled",
            "disabled",
            "maintenance"
          ],
          "suboptions": {}
        },
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "capacity_bytes": {
          "aliases": [],
          "description": "Bytes CloudStack can provision from this storage pool.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "capacity_iops": {
          "aliases": [],
          "description": "Bytes CloudStack can provision from this storage pool.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "cluster": {
          "aliases": [],
          "description": "Name of the cluster.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hypervisor": {
          "aliases": [],
          "description": "Required when creating a zone scoped pool.\nPossible values are C(KVM), C(VMware), C(BareMetal), C(XenServer), C(LXC), C(HyperV), C(UCS), C(OVM), C(Simulator).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "managed": {
          "aliases": [],
          "description": "Whether the storage pool should be managed by CloudStack.\nOnly considered on creation.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the storage pool.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "pod": {
          "aliases": [],
          "description": "Name of the pod.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "Name of the storage provider e.g. SolidFire, SolidFireShared, DefaultPrimary, CloudByte.",
          "default": "DefaultPrimary",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "scope": {
          "aliases": [],
          "description": "The scope of the storage pool.\nDefaults to cluster when C(cluster) is provided, otherwise zone.",
          "type": "str",
          "required": false,
          "choices": [
            "cluster",
            "zone"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the storage pool.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "storage_tags": {
          "aliases": [
            "storage_tag"
          ],
          "description": "Tags associated with this storage pool.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "storage_url": {
          "aliases": [],
          "description": "URL of the storage pool.\nRequired if I(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "zone": {
          "aliases": [],
          "description": "Name of the zone in which the host should be deployed.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages Primary Storage Pools on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: ensure a zone scoped storage_pool is present\n  ngine_io.cloudstack.cs_storage_pool:\n    zone: zone01\n    storage_url: rbd://admin:SECRET@ceph-mons.domain/poolname\n    provider: DefaultPrimary\n    name: Ceph RBD\n    scope: zone\n    hypervisor: KVM\n\n- name: ensure a cluster scoped storage_pool is disabled\n  ngine_io.cloudstack.cs_storage_pool:\n    name: Ceph RBD\n    zone: zone01\n    cluster: cluster01\n    pod: pod01\n    storage_url: rbd://admin:SECRET@ceph-the-mons.domain/poolname\n    provider: DefaultPrimary\n    scope: cluster\n    allocation_state: disabled\n\n- name: ensure a cluster scoped storage_pool is in maintenance\n  ngine_io.cloudstack.cs_storage_pool:\n    name: Ceph RBD\n    zone: zone01\n    cluster: cluster01\n    pod: pod01\n    storage_url: rbd://admin:SECRET@ceph-the-mons.domain/poolname\n    provider: DefaultPrimary\n    scope: cluster\n    allocation_state: maintenance\n\n- name: ensure a storage_pool is absent\n  ngine_io.cloudstack.cs_storage_pool:\n    name: Ceph RBD\n    zone: zone01\n    state: absent\n"
  },
  "ngine_io.cloudstack.cs_template": {
    "doc": {
      "description": "Register templates from an URL.\nCreate templates from a ROOT volume of a stopped VM or its snapshot.\nUpdate, extract and delete templates.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "account": {
          "aliases": [],
          "description": "Account the template, snapshot or VM is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "bits": {
          "aliases": [],
          "description": "32 or 64 bits support.",
          "default": "64",
          "type": "int",
          "required": false,
          "choices": [
            "32",
            "64"
          ],
          "suboptions": {}
        },
        "checksum": {
          "aliases": [],
          "description": "The MD5 checksum value of this template.\nIf set, we search by checksum instead of name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cross_zones": {
          "aliases": [],
          "description": "Whether the template should be synced or removed across zones.\nOnly used if I(state) is C(present) or C(absent).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "details": {
          "aliases": [],
          "description": "Template details in key/value pairs.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "display_text": {
          "aliases": [],
          "description": "Display text of the template.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain the template, snapshot or VM is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "format": {
          "aliases": [],
          "description": "The format for the template.\nOnly considered if I(state=present).",
          "type": "str",
          "required": false,
          "choices": [
            "QCOW2",
            "RAW",
            "VHD",
            "OVA"
          ],
          "suboptions": {}
        },
        "hypervisor": {
          "aliases": [],
          "description": "Name the hypervisor to be used for creating the new template.\nRelevant when using I(state=present).\nPossible values are C(KVM), C(VMware), C(BareMetal), C(XenServer), C(LXC), C(HyperV), C(UCS), C(OVM), C(Simulator).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "is_dynamically_scalable": {
          "aliases": [],
          "description": "Register the template having XS/VMware tools installed in order to support dynamic scaling of VM CPU/memory.\nOnly used if I(state) is C(present).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "is_extractable": {
          "aliases": [],
          "description": "Allows the template or its derivatives to be extractable.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "is_featured": {
          "aliases": [],
          "description": "Register the template to be featured.\nOnly used if I(state) is C(present).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "is_public": {
          "aliases": [],
          "description": "Register the template to be publicly available to all users.\nOnly used if I(state) is C(present).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "is_routing": {
          "aliases": [],
          "description": "Sets the template type to routing, i.e. if template is used to deploy routers.\nOnly considered if I(url) is used.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "mode": {
          "aliases": [],
          "description": "Mode for the template extraction.\nOnly used if I(state=extracted).",
          "default": "http_download",
          "type": "str",
          "required": false,
          "choices": [
            "http_download",
            "ftp_upload"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the template.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "os_type": {
          "aliases": [],
          "description": "OS type that best represents the OS of this template.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password_enabled": {
          "aliases": [],
          "description": "Enable template password reset support.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "poll_async": {
          "aliases": [],
          "description": "Poll async jobs until job has finished.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Name of the project the template to be registered in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "requires_hvm": {
          "aliases": [],
          "description": "Whether the template requires HVM or not.\nOnly considered while creating the template.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "snapshot": {
          "aliases": [],
          "description": "Name of the snapshot, created from the VM ROOT volume, the template will be created from.\nI(vm) is required together with this argument.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "sshkey_enabled": {
          "aliases": [],
          "description": "True if the template supports the sshkey upload feature.\nOnly considered if I(url) is used (API limitation).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the template.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "extracted"
          ],
          "suboptions": {}
        },
        "tags": {
          "aliases": [
            "tag"
          ],
          "description": "List of tags. Tags are a list of dictionaries having keys I(key) and I(value).\nTo delete all tags, set a empty list e.g. I(tags: []).",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "template_filter": {
          "aliases": [],
          "description": "Name of the filter used to search for the template.\nThe filter C(all) was added in 2.7.",
          "default": "self",
          "type": "str",
          "required": false,
          "choices": [
            "all",
            "featured",
            "self",
            "selfexecutable",
            "sharedexecutable",
            "executable",
            "community"
          ],
          "suboptions": {}
        },
        "template_find_options": {
          "aliases": [
            "template_find_option"
          ],
          "description": "Options to find a template uniquely.\nMore than one allowed.",
          "default": "[]",
          "type": "list",
          "required": false,
          "choices": [
            "display_text",
            "checksum",
            "cross_zones"
          ],
          "elements": "str",
          "suboptions": {}
        },
        "template_tag": {
          "aliases": [],
          "description": "The tag for this template.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "URL of where the template is hosted on I(state=present).\nURL to which the template would be extracted on I(state=extracted).\nMutually exclusive with I(vm).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vm": {
          "aliases": [],
          "description": "VM name the template will be created from its volume or alternatively from a snapshot.\nVM must be in stopped state if created from its volume.\nMutually exclusive with I(url).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "zone": {
          "aliases": [],
          "description": "Name of the zone you wish the template to be registered or deleted from.\nRequired when I(cross_zones) is C(no)",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages templates on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: register a systemvm template\n  ngine_io.cloudstack.cs_template:\n    name: systemvm-vmware-4.5\n    url: \"http://packages.shapeblue.com/systemvmtemplate/4.5/systemvm64template-4.5-vmware.ova\"\n    hypervisor: VMware\n    format: OVA\n    cross_zones: yes\n    os_type: Debian GNU/Linux 7(64-bit)\n\n- name: Create a template from a stopped virtual machine's volume\n  ngine_io.cloudstack.cs_template:\n    name: Debian 9 (64-bit) 20GB ({{ ansible_date_time.date }})\n    vm: debian-9-base-vm\n    os_type: Debian GNU/Linux 9 (64-bit)\n    zone: tokio-ix\n    password_enabled: yes\n    is_public: yes\n\n\n# Note: Use template_find_option(s) when a template name is not unique\n- name: Create a template from a stopped virtual machine's volume\n  ngine_io.cloudstack.cs_template:\n    name: Debian 9 (64-bit)\n    display_text: Debian 9 (64-bit) 20GB ({{ ansible_date_time.date }})\n    template_find_option: display_text\n    vm: debian-9-base-vm\n    os_type: Debian GNU/Linux 9 (64-bit)\n    zone: tokio-ix\n    password_enabled: yes\n    is_public: yes\n\n- name: create a template from a virtual machine's root volume snapshot\n  ngine_io.cloudstack.cs_template:\n    name: Debian 9 (64-bit) Snapshot ROOT-233_2015061509114\n    snapshot: ROOT-233_2015061509114\n    os_type: Debian GNU/Linux 9 (64-bit)\n    zone: tokio-ix\n    password_enabled: yes\n    is_public: yes\n\n- name: Remove a template\n  ngine_io.cloudstack.cs_template:\n    name: systemvm-4.2\n    cross_zones: yes\n    state: absent\n"
  },
  "ngine_io.cloudstack.cs_traffic_type": {
    "doc": {
      "description": "Add, remove, update Traffic Types associated with CloudStack Physical Networks.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hyperv_networklabel": {
          "aliases": [],
          "description": "The network name label of the physical device dedicated to this traffic on a HyperV host.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "isolation_method": {
          "aliases": [],
          "description": "Use if the physical network has multiple isolation types and traffic type is public.",
          "type": "str",
          "required": false,
          "choices": [
            "vlan",
            "vxlan"
          ],
          "suboptions": {}
        },
        "kvm_networklabel": {
          "aliases": [],
          "description": "The network name label of the physical device dedicated to this traffic on a KVM host.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ovm3_networklabel": {
          "aliases": [],
          "description": "The network name of the physical device dedicated to this traffic on an OVM3 host.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "physical_network": {
          "aliases": [],
          "description": "the name of the Physical Network",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "poll_async": {
          "aliases": [],
          "description": "Poll async jobs until job has finished.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the traffic type",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "traffic_type": {
          "aliases": [],
          "description": "the trafficType to be added to the physical network.",
          "type": "str",
          "required": true,
          "choices": [
            "Management",
            "Guest",
            "Public",
            "Storage"
          ],
          "suboptions": {}
        },
        "vlan": {
          "aliases": [],
          "description": "The VLAN id to be used for Management traffic by VMware host.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vmware_networklabel": {
          "aliases": [],
          "description": "The network name label of the physical device dedicated to this traffic on a VMware host.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "xen_networklabel": {
          "aliases": [],
          "description": "The network name label of the physical device dedicated to this traffic on a XenServer host.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "zone": {
          "aliases": [],
          "description": "Name of the zone with the physical network.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages traffic types on CloudStack Physical Networks",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: add a traffic type\n  ngine_io.cloudstack.cs_traffic_type:\n    physical_network: public-network\n    traffic_type: Guest\n    zone: test-zone\n\n- name: update traffic type\n  ngine_io.cloudstack.cs_traffic_type:\n    physical_network: public-network\n    traffic_type: Guest\n    kvm_networklabel: cloudbr0\n    zone: test-zone\n\n- name: remove traffic type\n  ngine_io.cloudstack.cs_traffic_type:\n    physical_network: public-network\n    traffic_type: Public\n    state: absent\n    zone: test-zone\n"
  },
  "ngine_io.cloudstack.cs_user": {
    "doc": {
      "description": "Create, update, disable, lock, enable and remove users.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "account": {
          "aliases": [],
          "description": "Account the user will be created under.\nRequired on I(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain the user is related to.",
          "default": "ROOT",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "email": {
          "aliases": [],
          "description": "Email of the user.\nRequired on I(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "first_name": {
          "aliases": [],
          "description": "First name of the user.\nRequired on I(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "keys_registered": {
          "aliases": [],
          "description": "If API keys of the user should be generated.\nNote: Keys can not be removed by the API again.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "last_name": {
          "aliases": [],
          "description": "Last name of the user.\nRequired on I(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Password of the user to be created.\nRequired on I(state=present).\nOnly considered on creation and will not be updated if user exists.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "poll_async": {
          "aliases": [],
          "description": "Poll async jobs until job has finished.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the user.\nC(unlocked) is an alias for C(enabled).",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "enabled",
            "disabled",
            "locked",
            "unlocked"
          ],
          "suboptions": {}
        },
        "timezone": {
          "aliases": [],
          "description": "Timezone of the user.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Username of the user.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages users on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: Create an user in domain 'CUSTOMERS'\n  ngine_io.cloudstack.cs_user:\n    account: developers\n    username: johndoe\n    password: S3Cur3\n    last_name: Doe\n    first_name: John\n    email: john.doe@example.com\n    domain: CUSTOMERS\n\n- name: Lock an existing user in domain 'CUSTOMERS'\n  ngine_io.cloudstack.cs_user:\n    username: johndoe\n    domain: CUSTOMERS\n    state: locked\n\n- name: Disable an existing user in domain 'CUSTOMERS'\n  ngine_io.cloudstack.cs_user:\n    username: johndoe\n    domain: CUSTOMERS\n    state: disabled\n\n- name: Enable/unlock an existing user in domain 'CUSTOMERS'\n  ngine_io.cloudstack.cs_user:\n    username: johndoe\n    domain: CUSTOMERS\n    state: enabled\n\n- name: Remove an user in domain 'CUSTOMERS'\n  ngine_io.cloudstack.cs_user:\n    name: customer_xy\n    domain: CUSTOMERS\n    state: absent\n"
  },
  "ngine_io.cloudstack.cs_vlan_ip_range": {
    "doc": {
      "description": "Create and delete VLAN IP range.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "account": {
          "aliases": [],
          "description": "Account who owns the VLAN.\nMutually exclusive with I(project).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cidr_ipv6": {
          "aliases": [],
          "description": "The CIDR of IPv6 network, must be at least /64.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain of the account owning the VLAN.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "end_ip": {
          "aliases": [],
          "description": "The ending IPv4 address in the VLAN IP range.\nIf not specified, value of I(start_ip) is used.\nOnly considered on create.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "end_ipv6": {
          "aliases": [],
          "description": "The ending IPv6 address in the IPv6 network range.\nIf not specified, value of I(start_ipv6) is used.\nOnly considered on create.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "for_system_vms": {
          "aliases": [],
          "description": "C(yes) if IP range is set to system vms, C(no) if not",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "for_virtual_network": {
          "aliases": [],
          "description": "C(yes) if VLAN is of Virtual type, C(no) if Direct.\nIf set to C(yes) but neither I(physical_network) or I(network) is set CloudStack will try to add the VLAN range to the Physical Network with a Public traffic type.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "1.0.0",
          "suboptions": {}
        },
        "gateway": {
          "aliases": [],
          "description": "The gateway of the VLAN IP range.\nRequired if I(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "gateway_ipv6": {
          "aliases": [],
          "description": "The gateway of the IPv6 network.\nOnly considered on create.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "netmask": {
          "aliases": [],
          "description": "The netmask of the VLAN IP range.\nRequired if I(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "network": {
          "aliases": [],
          "description": "The network name or id.\nRequired if I(for_virtual_network) and I(physical_network) are not set.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "physical_network": {
          "aliases": [],
          "description": "The physical network name or id.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pod": {
          "aliases": [],
          "description": "Name of the pod.",
          "type": "str",
          "required": false,
          "version_added": "1.0.0",
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Project who owns the VLAN.\nMutually exclusive with I(account).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "start_ip": {
          "aliases": [],
          "description": "The beginning IPv4 address in the VLAN IP range.\nOnly considered on create.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "start_ipv6": {
          "aliases": [],
          "description": "The beginning IPv6 address in the IPv6 network range.\nOnly considered on create.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the network ip range.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "vlan": {
          "aliases": [],
          "description": "The ID or VID of the network.\nIf not specified, will be defaulted to the vlan of the network.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "zone": {
          "aliases": [],
          "description": "The Zone ID of the VLAN IP range.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages VLAN IP ranges on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: create a VLAN IP range for network test\n  ngine_io.cloudstack.cs_vlan_ip_range:\n    network: test\n    vlan: 98\n    start_ip: 10.2.4.10\n    end_ip: 10.2.4.100\n    gateway: 10.2.4.1\n    netmask: 255.255.255.0\n    zone: zone-02\n\n- name: remove a VLAN IP range for network test\n  ngine_io.cloudstack.cs_vlan_ip_range:\n    state: absent\n    network: test\n    start_ip: 10.2.4.10\n    end_ip: 10.2.4.100\n    zone: zone-02\n"
  },
  "ngine_io.cloudstack.cs_vmsnapshot": {
    "doc": {
      "description": "Create, remove and revert VM from snapshots.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "account": {
          "aliases": [],
          "description": "Account the VM snapshot is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the snapshot.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain the VM snapshot is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "display_name"
          ],
          "description": "Unique Name of the snapshot. In CloudStack terms display name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "poll_async": {
          "aliases": [],
          "description": "Poll async jobs until job has finished.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Name of the project the VM is assigned to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "snapshot_memory": {
          "aliases": [],
          "description": "Snapshot memory if set to true.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the snapshot.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "revert"
          ],
          "suboptions": {}
        },
        "tags": {
          "aliases": [
            "tag"
          ],
          "description": "List of tags. Tags are a list of dictionaries having keys I(key) and I(value).\nTo delete all tags, set a empty list e.g. I(tags: []).",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "vm": {
          "aliases": [],
          "description": "Name of the virtual machine.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "zone": {
          "aliases": [],
          "description": "Name of the zone in which the VM is in. If not set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages VM snapshots on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: Create a VM snapshot of disk and memory before an upgrade\n  ngine_io.cloudstack.cs_vmsnapshot:\n    name: Snapshot before upgrade\n    vm: web-01\n    zone: zone01\n    snapshot_memory: yes\n\n- name: Revert a VM to a snapshot after a failed upgrade\n  ngine_io.cloudstack.cs_vmsnapshot:\n    name: Snapshot before upgrade\n    vm: web-01\n    zone: zone01\n    state: revert\n\n- name: Remove a VM snapshot after successful upgrade\n  ngine_io.cloudstack.cs_vmsnapshot:\n    name: Snapshot before upgrade\n    vm: web-01\n    zone: zone01\n    state: absent\n"
  },
  "ngine_io.cloudstack.cs_volume": {
    "doc": {
      "description": "Create, destroy, attach, detach, extract or upload volumes.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "account": {
          "aliases": [],
          "description": "Account the volume is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "custom_id": {
          "aliases": [],
          "description": "Custom id to the resource.\nAllowed to Root Admins only.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "device_id": {
          "aliases": [],
          "description": "ID of the device on a VM the volume is attached to.\nOnly considered if I(state) is C(attached).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "disk_offering": {
          "aliases": [],
          "description": "Name of the disk offering to be used.\nRequired one of I(disk_offering), I(snapshot) if volume is not already I(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "display_volume": {
          "aliases": [],
          "description": "Whether to display the volume to the end user or not.\nAllowed to Root Admins only.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Name of the domain the volume to be deployed in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Force removal of volume even it is attached to a VM.\nConsidered on I(state=absent) only.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "format": {
          "aliases": [],
          "description": "The format for the volume.\nOnly considered if I(state=uploaded).",
          "type": "str",
          "required": false,
          "choices": [
            "QCOW2",
            "RAW",
            "VHD",
            "VHDX",
            "OVA"
          ],
          "suboptions": {}
        },
        "max_iops": {
          "aliases": [],
          "description": "Max iops",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "min_iops": {
          "aliases": [],
          "description": "Min iops",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "mode": {
          "aliases": [],
          "description": "Mode for the volume extraction.\nOnly considered if I(state=extracted).",
          "default": "http_download",
          "type": "str",
          "required": false,
          "choices": [
            "http_download",
            "ftp_upload"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the volume.\nI(name) can only contain ASCII letters.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "poll_async": {
          "aliases": [],
          "description": "Poll async jobs until job has finished.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Name of the project the volume to be deployed in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "shrink_ok": {
          "aliases": [],
          "description": "Whether to allow to shrink the volume.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Size of disk in GB",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "snapshot": {
          "aliases": [],
          "description": "The snapshot name for the disk volume.\nRequired one of I(disk_offering), I(snapshot) if volume is not already I(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the volume.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "attached",
            "detached",
            "extracted",
            "uploaded"
          ],
          "suboptions": {}
        },
        "tags": {
          "aliases": [
            "tag"
          ],
          "description": "List of tags. Tags are a list of dictionaries having keys I(key) and I(value).\nTo delete all tags, set a empty list e.g. I(tags: []).",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "URL to which the volume would be extracted on I(state=extracted)\nor the URL where to download the volume on I(state=uploaded).\nOnly considered if I(state) is C(extracted) or C(uploaded).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vm": {
          "aliases": [],
          "description": "Name of the virtual machine to attach the volume to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "zone": {
          "aliases": [],
          "description": "Name of the zone in which the volume should be deployed.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages volumes on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: create volume within project and zone with specified storage options\n  ngine_io.cloudstack.cs_volume:\n    name: web-vm-1-volume\n    project: Integration\n    zone: ch-zrh-ix-01\n    disk_offering: PerfPlus Storage\n    size: 20\n\n- name: create/attach volume to instance\n  ngine_io.cloudstack.cs_volume:\n    name: web-vm-1-volume\n    zone: zone01\n    disk_offering: PerfPlus Storage\n    size: 20\n    vm: web-vm-1\n    state: attached\n\n- name: detach volume\n  ngine_io.cloudstack.cs_volume:\n    name: web-vm-1-volume\n    zone: zone01\n    state: detached\n\n- name: remove volume\n  ngine_io.cloudstack.cs_volume:\n    name: web-vm-1-volume\n    zone: zone01\n    state: absent\n\n- name: Extract DATA volume to make it downloadable\n  ngine_io.cloudstack.cs_volume:\n    state: extracted\n    name: web-vm-1-volume\n    zone: zone01\n  register: data_vol_out\n\n- name: Create new volume by downloading source volume\n  ngine_io.cloudstack.cs_volume:\n    state: uploaded\n    name: web-vm-1-volume-2\n    zone: zone01\n    format: VHD\n    url: \"{{ data_vol_out.url }}\"\n"
  },
  "ngine_io.cloudstack.cs_vpc": {
    "doc": {
      "description": "Create, update and delete VPCs.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "account": {
          "aliases": [],
          "description": "Account the VPC is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cidr": {
          "aliases": [],
          "description": "CIDR of the VPC, e.g. 10.1.0.0/16\nAll VPC guest networks' CIDRs must be within this CIDR.\nRequired on I(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "clean_up": {
          "aliases": [],
          "description": "Whether to redeploy a VPC router or not when I(state=restarted)",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "display_text": {
          "aliases": [],
          "description": "Display text of the VPC.\nIf not set, I(name) will be used for creating.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain the VPC is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the VPC.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "network_domain": {
          "aliases": [],
          "description": "Network domain for the VPC.\nAll networks inside the VPC will belong to this domain.\nOnly considered while creating the VPC, can not be changed.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "poll_async": {
          "aliases": [],
          "description": "Poll async jobs until job has finished.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Name of the project the VPC is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the VPC.\nThe state C(present) creates a started VPC.\nThe state C(stopped) is only considered while creating the VPC, added in version 2.6.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "stopped",
            "restarted"
          ],
          "suboptions": {}
        },
        "tags": {
          "aliases": [
            "tag"
          ],
          "description": "List of tags. Tags are a list of dictionaries having keys I(key) and I(value).\nFor deleting all tags, set an empty list e.g. I(tags: []).",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "vpc_offering": {
          "aliases": [],
          "description": "Name of the VPC offering.\nIf not set, default VPC offering is used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "zone": {
          "aliases": [],
          "description": "Name of the zone.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages VPCs on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: Ensure a VPC is present but not started after creating\n  ngine_io.cloudstack.cs_vpc:\n    name: my_vpc\n    zone: zone01\n    display_text: My example VPC\n    cidr: 10.10.0.0/16\n    state: stopped\n\n- name: Ensure a VPC is present and started after creating\n  ngine_io.cloudstack.cs_vpc:\n    name: my_vpc\n    zone: zone01\n    display_text: My example VPC\n    cidr: 10.10.0.0/16\n\n- name: Ensure a VPC is absent\n  ngine_io.cloudstack.cs_vpc:\n    name: my_vpc\n    zone: zone01\n    state: absent\n\n- name: Ensure a VPC is restarted with clean up\n  ngine_io.cloudstack.cs_vpc:\n    name: my_vpc\n    zone: zone01\n    clean_up: yes\n    state: restarted\n"
  },
  "ngine_io.cloudstack.cs_vpc_offering": {
    "doc": {
      "description": "Create, update, enable, disable and remove CloudStack VPC offerings.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "display_text": {
          "aliases": [],
          "description": "Display text of the vpc offerings",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the vpc offering",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "poll_async": {
          "aliases": [],
          "description": "Poll async jobs until job has finished.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "service_capabilities": {
          "aliases": [
            "service_capability"
          ],
          "description": "Desired service capabilities as part of vpc offering.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "service_offering": {
          "aliases": [],
          "description": "The name or ID of the service offering for the VPC router appliance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "service_providers": {
          "aliases": [
            "service_provider"
          ],
          "description": "provider to service mapping. If not specified, the provider for the service will be mapped to the default provider on the physical network",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the vpc offering.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "enabled",
            "present",
            "disabled",
            "absent"
          ],
          "suboptions": {}
        },
        "supported_services": {
          "aliases": [
            "supported_service"
          ],
          "description": "Services supported by the vpc offering",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages vpc offerings on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: Create a vpc offering and enable it\n  ngine_io.cloudstack.cs_vpc_offering:\n    name: my_vpc_offering\n    display_text: vpc offering description\n    state: enabled\n    supported_services: [ Dns, Dhcp ]\n    service_providers:\n      - {service: 'dns', provider: 'VpcVirtualRouter'}\n      - {service: 'dhcp', provider: 'VpcVirtualRouter'}\n\n- name: Create a vpc offering with redundant router\n  ngine_io.cloudstack.cs_vpc_offering:\n    name: my_vpc_offering\n    display_text: vpc offering description\n    supported_services: [ Dns, Dhcp, SourceNat ]\n    service_providers:\n      - {service: 'dns', provider: 'VpcVirtualRouter'}\n      - {service: 'dhcp', provider: 'VpcVirtualRouter'}\n      - {service: 'SourceNat', provider: 'VpcVirtualRouter'}\n    service_capabilities:\n      - {service: 'SourceNat', capabilitytype: 'RedundantRouter', capabilityvalue: true}\n\n- name: Create a region level vpc offering with distributed router\n  ngine_io.cloudstack.cs_vpc_offering:\n    name: my_vpc_offering\n    display_text: vpc offering description\n    state: present\n    supported_services: [ Dns, Dhcp, SourceNat ]\n    service_providers:\n      - {service: 'dns', provider: 'VpcVirtualRouter'}\n      - {service: 'dhcp', provider: 'VpcVirtualRouter'}\n      - {service: 'SourceNat', provider: 'VpcVirtualRouter'}\n    service_capabilities:\n      - {service: 'Connectivity', capabilitytype: 'DistributedRouter', capabilityvalue: true}\n      - {service: 'Connectivity', capabilitytype: 'RegionLevelVPC', capabilityvalue: true}\n\n- name: Remove a vpc offering\n  ngine_io.cloudstack.cs_vpc_offering:\n    name: my_vpc_offering\n    state: absent\n"
  },
  "ngine_io.cloudstack.cs_vpn_connection": {
    "doc": {
      "description": "Create and remove VPN connections.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "account": {
          "aliases": [],
          "description": "Account the VPN connection is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain the VPN connection is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Activate the VPN gateway if not already activated on I(state=present).\nAlso see M(cs_vpn_gateway).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "passive": {
          "aliases": [],
          "description": "State of the VPN connection.\nOnly considered when I(state=present).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "poll_async": {
          "aliases": [],
          "description": "Poll async jobs until job has finished.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Name of the project the VPN connection is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the VPN connection.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "vpc": {
          "aliases": [],
          "description": "Name of the VPC the VPN connection is related to.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "vpn_customer_gateway": {
          "aliases": [],
          "description": "Name of the VPN customer gateway.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "zone": {
          "aliases": [],
          "description": "Name of the zone the VPC is related to.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages site-to-site VPN connections on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: Create a VPN connection with activated VPN gateway\n  ngine_io.cloudstack.cs_vpn_connection:\n    vpn_customer_gateway: my vpn connection\n    vpc: my vpc\n    zone: zone01\n\n- name: Create a VPN connection and force VPN gateway activation\n  ngine_io.cloudstack.cs_vpn_connection:\n    vpn_customer_gateway: my vpn connection\n    vpc: my vpc\n    zone: zone01\n    force: yes\n\n- name: Remove a vpn connection\n  ngine_io.cloudstack.cs_vpn_connection:\n    vpn_customer_gateway: my vpn connection\n    vpc: my vpc\n    zone: zone01\n    state: absent\n"
  },
  "ngine_io.cloudstack.cs_vpn_customer_gateway": {
    "doc": {
      "description": "Create, update and remove VPN customer gateways.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "account": {
          "aliases": [],
          "description": "Account the VPN customer gateway is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cidrs": {
          "aliases": [
            "cidr"
          ],
          "description": "List of guest CIDRs behind the gateway.\nRequired if I(state=present).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain the VPN customer gateway is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dpd": {
          "aliases": [],
          "description": "Enable Dead Peer Detection.\nDisabled per default by the API on creation if not set.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "esp_lifetime": {
          "aliases": [],
          "description": "Lifetime in seconds of phase 2 VPN connection.\nDefaulted to 3600 by the API on creation if not set.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "esp_policy": {
          "aliases": [],
          "description": "ESP policy in the format e.g. C(aes256-sha1;modp1536).\nRequired if I(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "force_encap": {
          "aliases": [],
          "description": "Force encapsulation for NAT traversal.\nDisabled per default by the API on creation if not set.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "gateway": {
          "aliases": [],
          "description": "Public IP address of the gateway.\nRequired if I(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ike_lifetime": {
          "aliases": [],
          "description": "Lifetime in seconds of phase 1 VPN connection.\nDefaulted to 86400 by the API on creation if not set.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ike_policy": {
          "aliases": [],
          "description": "IKE policy in the format e.g. C(aes256-sha1;modp1536).\nRequired if I(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipsec_psk": {
          "aliases": [],
          "description": "IPsec Preshared-Key.\nCannot contain newline or double quotes.\nRequired if I(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the gateway.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "poll_async": {
          "aliases": [],
          "description": "Poll async jobs until job has finished.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Name of the project the VPN gateway is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the VPN customer gateway.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages site-to-site VPN customer gateway configurations on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: Create a vpn customer gateway\n  ngine_io.cloudstack.cs_vpn_customer_gateway:\n    name: my vpn customer gateway\n    cidrs:\n    - 192.168.123.0/24\n    - 192.168.124.0/24\n    esp_policy: aes256-sha1;modp1536\n    gateway: 10.10.1.1\n    ike_policy: aes256-sha1;modp1536\n    ipsec_psk: \"S3cr3Tk3Y\"\n\n- name: Remove a vpn customer gateway\n  ngine_io.cloudstack.cs_vpn_customer_gateway:\n    name: my vpn customer gateway\n    state: absent\n"
  },
  "ngine_io.cloudstack.cs_vpn_gateway": {
    "doc": {
      "description": "Creates and removes VPN site-to-site gateways.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "account": {
          "aliases": [],
          "description": "Account the VPN gateway is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain the VPN gateway is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "poll_async": {
          "aliases": [],
          "description": "Poll async jobs until job has finished.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Name of the project the VPN gateway is related to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the VPN gateway.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "vpc": {
          "aliases": [],
          "description": "Name of the VPC.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "zone": {
          "aliases": [],
          "description": "Name of the zone the VPC is related to.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages site-to-site VPN gateways on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: Ensure a vpn gateway is present\n  ngine_io.cloudstack.cs_vpn_gateway:\n    vpc: my VPC\n    zone: zone01\n\n- name: Ensure a vpn gateway is absent\n  ngine_io.cloudstack.cs_vpn_gateway:\n    vpc: my VPC\n    zone: zone01\n    state: absent\n"
  },
  "ngine_io.cloudstack.cs_zone": {
    "doc": {
      "description": "Create, update and remove zones.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dhcp_provider": {
          "aliases": [],
          "description": "DHCP provider for the Zone.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dns1": {
          "aliases": [],
          "description": "First DNS for the zone.\nRequired if I(state=present)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dns1_ipv6": {
          "aliases": [],
          "description": "First DNS for IPv6 for the zone.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dns2": {
          "aliases": [],
          "description": "Second DNS for the zone.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dns2_ipv6": {
          "aliases": [],
          "description": "Second DNS for IPv6 for the zone.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "Domain the zone is related to.\nZone is a public zone if not set.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "guest_cidr_address": {
          "aliases": [],
          "description": "Guest CIDR address for the zone.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "id": {
          "aliases": [],
          "description": "uuid of the existing zone.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_dns1": {
          "aliases": [],
          "description": "First internal DNS for the zone.\nIf not set I(dns1) will be used on I(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "internal_dns2": {
          "aliases": [],
          "description": "Second internal DNS for the zone.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "local_storage_enabled": {
          "aliases": [],
          "description": "Whether to enable local storage for the zone or not..",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the zone.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "network_domain": {
          "aliases": [],
          "description": "Network domain for the zone.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "network_type": {
          "aliases": [],
          "description": "Network type of the zone.",
          "default": "Basic",
          "type": "str",
          "required": false,
          "choices": [
            "Basic",
            "Advanced"
          ],
          "suboptions": {}
        },
        "securitygroups_enabled": {
          "aliases": [],
          "description": "Whether the zone is security group enabled or not.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of the zone.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "enabled",
            "disabled",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Manages zones on Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: Ensure a zone is present\n  ngine_io.cloudstack.cs_zone:\n    name: ch-zrh-ix-01\n    dns1: 8.8.8.8\n    dns2: 8.8.4.4\n    network_type: basic\n\n- name: Ensure a zone is disabled\n  ngine_io.cloudstack.cs_zone:\n    name: ch-zrh-ix-01\n    state: disabled\n\n- name: Ensure a zone is enabled\n  ngine_io.cloudstack.cs_zone:\n    name: ch-zrh-ix-01\n    state: enabled\n\n- name: Ensure a zone is absent\n  ngine_io.cloudstack.cs_zone:\n    name: ch-zrh-ix-01\n    state: absent\n"
  },
  "ngine_io.cloudstack.cs_zone_info": {
    "doc": {
      "description": "Gathering information from the API of a zone.",
      "has_action": false,
      "notes": "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).\nThis module supports check mode.",
      "options": {
        "api_http_method": {
          "aliases": [],
          "description": "HTTP method used to query the API endpoint.\nIf not given, the C(CLOUDSTACK_METHOD) env variable is considered.",
          "default": "get",
          "type": "str",
          "required": false,
          "choices": [
            "get",
            "post"
          ],
          "suboptions": {}
        },
        "api_key": {
          "aliases": [],
          "description": "API key of the CloudStack API.\nIf not given, the C(CLOUDSTACK_KEY) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_secret": {
          "aliases": [],
          "description": "Secret key of the CloudStack API.\nIf not set, the C(CLOUDSTACK_SECRET) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_timeout": {
          "aliases": [],
          "description": "HTTP timeout in seconds.\nIf not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "api_url": {
          "aliases": [],
          "description": "URL of the CloudStack API e.g. https://cloud.example.com/client/api.\nIf not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "api_verify_ssl_cert": {
          "aliases": [],
          "description": "Verify CA authority cert file.\nIf not given, the C(CLOUDSTACK_VERIFY) env variable is considered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "zone": {
          "aliases": [
            "name"
          ],
          "description": "Name of the zone.\nIf not specified information about all zones is gathered.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "cs >= 0.9.0"
      ],
      "short_description": "Gathering information about zones from Apache CloudStack based clouds.",
      "version_added": "0.1.0"
    },
    "examples": "\n- name: Gather information from a zone\n  ngine_io.cloudstack.cs_zone_info:\n    zone: ch-gva-1\n  register: zone\n\n- name: Show the returned results of the registered variable\n  debug:\n    msg: \"{{ zone }}\"\n\n- name: Gather information from all zones\n  ngine_io.cloudstack.cs_zone_info:\n  register: zones\n\n- name: Show information on all zones\n  debug:\n    msg: \"{{ zones }}\"\n"
  }
}