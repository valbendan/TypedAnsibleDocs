{
  "community.mongodb.mongodb_balancer": {
    "doc": {
      "description": "Manages the MongoDB Sharded Cluster Balancer.\nStart or stop the balancer.\nAdjust the cluster chunksize.\nEnable or disable autosplit.\nAdd or remove a balancer window.",
      "has_action": false,
      "notes": "Requires the pymongo Python package on the remote host, version 2.4.2+. This can be installed using pip or the OS package manager. @see U(http://api.mongodb.org/python/current/installation.html)",
      "options": {
        "auth_mechanism": {
          "aliases": [],
          "description": "Authentication type.",
          "type": "str",
          "required": false,
          "choices": [
            "SCRAM-SHA-256",
            "SCRAM-SHA-1",
            "MONGODB-X509",
            "GSSAPI",
            "PLAIN"
          ],
          "suboptions": {}
        },
        "autosplit": {
          "aliases": [],
          "description": "Disable or enable the autosplit flag in the config.settings collection.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "chunksize": {
          "aliases": [],
          "description": "Control the size of chunks in the sharded cluster.\nValue should be given in MB.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "connection_options": {
          "aliases": [],
          "description": "Additional connection options.\nSupply as a list of dicts or strings containing key value pairs seperated with '='.",
          "type": "list",
          "required": false,
          "elements": "raw",
          "suboptions": {}
        },
        "login_database": {
          "aliases": [],
          "description": "The database where login credentials are stored.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_host": {
          "aliases": [],
          "description": "The host running MongoDB instance to login to.",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password used to authenticate with.\nRequired when I(login_user) is specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_port": {
          "aliases": [],
          "description": "The MongoDB server port to login to.",
          "default": "27017",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The MongoDB user to login with.\nRequired when I(login_password) is specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mongos_process": {
          "aliases": [],
          "description": "Provide a custom name for the mongos process.\nMost users can ignore this setting.",
          "default": "mongos",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl": {
          "aliases": [],
          "description": "Whether to use an SSL connection when connecting to the database.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ssl_ca_certs": {
          "aliases": [],
          "description": "The ssl_ca_certs option takes a path to a CA file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_cert_reqs": {
          "aliases": [],
          "description": "Specifies whether a certificate is required from the other side of the connection, and whether it will be validated if provided.",
          "default": "CERT_REQUIRED",
          "type": "str",
          "required": false,
          "choices": [
            "CERT_NONE",
            "CERT_OPTIONAL",
            "CERT_REQUIRED"
          ],
          "suboptions": {}
        },
        "ssl_certfile": {
          "aliases": [],
          "description": "Present a client certificate using the ssl_certfile option.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_crlfile": {
          "aliases": [],
          "description": "The ssl_crlfile option takes a path to a CRL file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_keyfile": {
          "aliases": [],
          "description": "Private key for the client certificate.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_pem_passphrase": {
          "aliases": [],
          "description": "Passphrase to decrypt encrypted private keys.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Manage the Balancer for the Cluster",
          "default": "started",
          "type": "str",
          "required": false,
          "choices": [
            "started",
            "stopped"
          ],
          "suboptions": {}
        },
        "window": {
          "aliases": [],
          "description": "Schedule the balancer window.\nProvide the following dictionary keys start, stop, state\nThe state key should be \"present\" or \"absent\".\nThe start and stop keys are ignored when state is \"absent\".\nstart and stop should be strings in \"HH:MM\" format indicating the time bounds of the window.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pymongo"
      ],
      "short_description": "Manages the MongoDB Sharded Cluster Balancer.",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Start the balancer\n  community.mongodb.mongodb_balancer:\n    state: started\n\n- name: Stop the balancer and disable autosplit\n  community.mongodb.mongodb_balancer:\n    state: stopped\n    autosplit: false\n\n- name: Enable autosplit\n  community.mongodb.mongodb_balancer:\n    autosplit: true\n\n- name: Change the default chunksize to 128MB\n  community.mongodb.mongodb_balancer:\n    chunksize: 128\n\n- name: Add or update a balancing window\n  community.mongodb.mongodb_balancer:\n    window:\n      start: \"23:00\"\n      stop: \"06:00\"\n      state: \"present\"\n\n- name: Remove a balancing window\n  community.mongodb.mongodb_balancer:\n    window:\n      state: \"absent\"\n"
  },
  "community.mongodb.mongodb_index": {
    "doc": {
      "description": "Creates or drops indexes on MongoDB collections.\nSupports multiple index options, i.e. unique, sparse and partial.\nValidates existence of indexes by name only.",
      "has_action": false,
      "notes": "Requires the pymongo Python package on the remote host, version 2.4.2+.",
      "options": {
        "auth_mechanism": {
          "aliases": [],
          "description": "Authentication type.",
          "type": "str",
          "required": false,
          "choices": [
            "SCRAM-SHA-256",
            "SCRAM-SHA-1",
            "MONGODB-X509",
            "GSSAPI",
            "PLAIN"
          ],
          "suboptions": {}
        },
        "connection_options": {
          "aliases": [],
          "description": "Additional connection options.\nSupply as a list of dicts or strings containing key value pairs seperated with '='.",
          "type": "list",
          "required": false,
          "elements": "raw",
          "suboptions": {}
        },
        "indexes": {
          "aliases": [],
          "description": "List of indexes to create or drop",
          "type": "list",
          "required": true,
          "elements": "raw",
          "suboptions": {}
        },
        "login_database": {
          "aliases": [],
          "description": "The database where login credentials are stored.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_host": {
          "aliases": [],
          "description": "The host running MongoDB instance to login to.",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password used to authenticate with.\nRequired when I(login_user) is specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_port": {
          "aliases": [],
          "description": "The MongoDB server port to login to.",
          "default": "27017",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The MongoDB user to login with.\nRequired when I(login_password) is specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "replica_set": {
          "aliases": [],
          "description": "Replica set to connect to (automatically connects to primary for writes).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl": {
          "aliases": [],
          "description": "Whether to use an SSL connection when connecting to the database.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ssl_ca_certs": {
          "aliases": [],
          "description": "The ssl_ca_certs option takes a path to a CA file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_cert_reqs": {
          "aliases": [],
          "description": "Specifies whether a certificate is required from the other side of the connection, and whether it will be validated if provided.",
          "default": "CERT_REQUIRED",
          "type": "str",
          "required": false,
          "choices": [
            "CERT_NONE",
            "CERT_OPTIONAL",
            "CERT_REQUIRED"
          ],
          "suboptions": {}
        },
        "ssl_certfile": {
          "aliases": [],
          "description": "Present a client certificate using the ssl_certfile option.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_crlfile": {
          "aliases": [],
          "description": "The ssl_crlfile option takes a path to a CRL file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_keyfile": {
          "aliases": [],
          "description": "Private key for the client certificate.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_pem_passphrase": {
          "aliases": [],
          "description": "Passphrase to decrypt encrypted private keys.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pymongo"
      ],
      "short_description": "Creates or drops indexes on MongoDB collections.",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create a single index on a collection\n  community.mongodb.mongodb_index:\n    login_user: admin\n    login_password: secret\n    indexes:\n      - database: mydb\n        collection: test\n        keys:\n          - username: 1\n            last_login: -1\n        options:\n          name: myindex\n        state: present\n\n- name: Drop an index on a collection\n  community.mongodb.mongodb_index:\n    login_user: admin\n    login_password: secret\n    indexes:\n      - database: mydb\n        collection: test\n        options:\n          name: myindex\n        state: absent\n\n- name: Create multiple indexes\n  community.mongodb.mongodb_index:\n    login_user: admin\n    login_password: secret\n    indexes:\n      - database: mydb\n        collection: test\n        keys:\n          - username: 1\n            last_login: -1\n        options:\n          name: myindex\n        state: present\n      - database: mydb\n        collection: test\n        keys:\n          - email: 1\n            last_login: -1\n        options:\n          name: myindex2\n        state: present\n\n- name: Add a unique index\n  community.mongodb.mongodb_index:\n    login_port: 27017\n    login_user: admin\n    login_password: secret\n    login_database: \"admin\"\n    indexes:\n      - database: \"test\"\n        collection: \"rhys\"\n        keys:\n          username: 1\n        options:\n          name: myuniqueindex\n          unique: true\n        state: present\n\n- name: Add a ttl index\n  community.mongodb.mongodb_index:\n    login_port: 27017\n    login_user: admin\n    login_password: secret\n    login_database: \"admin\"\n    indexes:\n      - database: \"test\"\n        collection: \"rhys\"\n        keys:\n          created: 1\n        options:\n          name: myttlindex\n          expireAfterSeconds: 3600\n        state: present\n\n- name: Add a sparse index\n  community.mongodb.mongodb_index:\n    login_port: 27017\n    login_user: admin\n    login_password: secret\n    login_database: \"admin\"\n    indexes:\n      - database: \"test\"\n        collection: \"rhys\"\n        keys:\n          last_login: -1\n        options:\n          name: mysparseindex\n          sparse: true\n        state: present\n\n- name: Add a partial index\n  community.mongodb.mongodb_index:\n    login_port: 27017\n    login_user: admin\n    login_password: secret\n    login_database: \"admin\"\n    indexes:\n      - database: \"test\"\n        collection: \"rhys\"\n        keys:\n          last_login: -1\n        options:\n          name: mypartialindex\n          partialFilterExpression:\n            rating:\n              $gt: 5\n        state: present\n\n- name: Add a index in the background (background option is deprecated from 4.2+)\n  community.mongodb.mongodb_index:\n    login_port: 27017\n    login_user: admin\n    login_password: secret\n    login_database: \"admin\"\n    indexes:\n      - database: \"test\"\n        collection: \"rhys\"\n        options:\n          name: idxbackground\n        keys:\n          username: -1\n        backgroud: true\n        state: present\n\n- name: Check creating 5 index all with multiple options specified\n  community.mongodb.mongodb_index:\n    login_port: 27017\n    login_user: admin\n    login_password: secret\n    login_database: \"admin\"\n    indexes:\n      - database: \"test\"\n        collection: \"indextest\"\n        options:\n          name: \"idx_unq_username\"\n          unique: true\n        keys:\n          username: -1\n        state: present\n      - database: \"test\"\n        collection: \"indextest\"\n        options:\n          name: \"idx_last_login\"\n          sparse: true\n        keys:\n          last_login: -1\n        state: present\n      - database: \"test\"\n        collection: \"indextest\"\n        options:\n          name: \"myindex\"\n        keys:\n          first_name: 1\n          last_name: -1\n          city: 1\n        state: present\n      - database: \"test\"\n        collection: partialtest\n        options:\n          name: \"idx_partialtest\"\n          partialFilterExpression:\n            rating:\n              $gt: 5\n        keys:\n          rating: -1\n          title: 1\n        state: present\n      - database: \"test\"\n        collection: \"wideindex\"\n        options:\n          name: \"mywideindex\"\n        keys:\n          email: -1\n          username: 1\n          first_name: 1\n          last_name: 1\n          dob: -1\n          city: 1\n          last_login: -1\n          review_count: 1\n          rating_count: 1\n          last_post: -1\n        state: present\n"
  },
  "community.mongodb.mongodb_info": {
    "doc": {
      "description": "Gather information about MongoDB instance.",
      "has_action": false,
      "notes": "Requires the pymongo Python package on the remote host, version 2.4.2+.",
      "options": {
        "auth_mechanism": {
          "aliases": [],
          "description": "Authentication type.",
          "type": "str",
          "required": false,
          "choices": [
            "SCRAM-SHA-256",
            "SCRAM-SHA-1",
            "MONGODB-X509",
            "GSSAPI",
            "PLAIN"
          ],
          "suboptions": {}
        },
        "connection_options": {
          "aliases": [],
          "description": "Additional connection options.\nSupply as a list of dicts or strings containing key value pairs seperated with '='.",
          "type": "list",
          "required": false,
          "elements": "raw",
          "suboptions": {}
        },
        "filter": {
          "aliases": [],
          "description": "Limit the collected information by comma separated string or YAML list.\nAllowable values are C(general), C(databases), C(total_size), C(parameters), C(users), C(roles).\nBy default, collects all subsets.\nYou can use '!' before value (for example, C(!users)) to exclude it from the information.\nIf you pass including and excluding values to the filter, for example, I(filter=!general,users), the excluding values, C(!general) in this case, will be ignored.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "login_database": {
          "aliases": [],
          "description": "The database where login credentials are stored.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_host": {
          "aliases": [],
          "description": "The host running MongoDB instance to login to.",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password used to authenticate with.\nRequired when I(login_user) is specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_port": {
          "aliases": [],
          "description": "The MongoDB server port to login to.",
          "default": "27017",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The MongoDB user to login with.\nRequired when I(login_password) is specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl": {
          "aliases": [],
          "description": "Whether to use an SSL connection when connecting to the database.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ssl_ca_certs": {
          "aliases": [],
          "description": "The ssl_ca_certs option takes a path to a CA file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_cert_reqs": {
          "aliases": [],
          "description": "Specifies whether a certificate is required from the other side of the connection, and whether it will be validated if provided.",
          "default": "CERT_REQUIRED",
          "type": "str",
          "required": false,
          "choices": [
            "CERT_NONE",
            "CERT_OPTIONAL",
            "CERT_REQUIRED"
          ],
          "suboptions": {}
        },
        "ssl_certfile": {
          "aliases": [],
          "description": "Present a client certificate using the ssl_certfile option.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_crlfile": {
          "aliases": [],
          "description": "The ssl_crlfile option takes a path to a CRL file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_keyfile": {
          "aliases": [],
          "description": "Private key for the client certificate.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_pem_passphrase": {
          "aliases": [],
          "description": "Passphrase to decrypt encrypted private keys.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pymongo"
      ],
      "short_description": "Gather information about MongoDB instance.",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Gather all supported information\n  community.mongodb.mongodb_info:\n    login_user: admin\n    login_password: secret\n  register: result\n\n- name: Show gathered info\n  debug:\n    msg: '{{ result }}'\n\n- name: Gather only information about databases and their total size\n  community.mongodb.mongodb_info:\n    login_user: admin\n    login_password: secret\n    filter: databases, total_size\n\n- name: Gather all information except parameters\n  community.mongodb.mongodb_info:\n    login_user: admin\n    login_password: secret\n    filter: '!parameters'\n"
  },
  "community.mongodb.mongodb_maintenance": {
    "doc": {
      "description": "Enables or disables maintenance mode for a secondary member.\nWrapper around the replSetMaintenance command.\nPerforms no actions against a PRIMARY member.\nWhen enabled SECONDARY members will not service reads.",
      "has_action": false,
      "notes": "Requires the pymongo Python package on the remote host, version 2.4.2+. This can be installed using pip or the OS package manager. @see U(http://api.mongodb.org/python/current/installation.html)",
      "options": {
        "auth_mechanism": {
          "aliases": [],
          "description": "Authentication type.",
          "type": "str",
          "required": false,
          "choices": [
            "SCRAM-SHA-256",
            "SCRAM-SHA-1",
            "MONGODB-X509",
            "GSSAPI",
            "PLAIN"
          ],
          "suboptions": {}
        },
        "connection_options": {
          "aliases": [],
          "description": "Additional connection options.\nSupply as a list of dicts or strings containing key value pairs seperated with '='.",
          "type": "list",
          "required": false,
          "elements": "raw",
          "suboptions": {}
        },
        "login_database": {
          "aliases": [],
          "description": "The database where login credentials are stored.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_host": {
          "aliases": [],
          "description": "The host running MongoDB instance to login to.",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password used to authenticate with.\nRequired when I(login_user) is specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_port": {
          "aliases": [],
          "description": "The MongoDB server port to login to.",
          "default": "27017",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The MongoDB user to login with.\nRequired when I(login_password) is specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "maintenance": {
          "aliases": [],
          "description": "Enable or disable maintenance mode.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ssl": {
          "aliases": [],
          "description": "Whether to use an SSL connection when connecting to the database.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ssl_ca_certs": {
          "aliases": [],
          "description": "The ssl_ca_certs option takes a path to a CA file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_cert_reqs": {
          "aliases": [],
          "description": "Specifies whether a certificate is required from the other side of the connection, and whether it will be validated if provided.",
          "default": "CERT_REQUIRED",
          "type": "str",
          "required": false,
          "choices": [
            "CERT_NONE",
            "CERT_OPTIONAL",
            "CERT_REQUIRED"
          ],
          "suboptions": {}
        },
        "ssl_certfile": {
          "aliases": [],
          "description": "Present a client certificate using the ssl_certfile option.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_crlfile": {
          "aliases": [],
          "description": "The ssl_crlfile option takes a path to a CRL file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_keyfile": {
          "aliases": [],
          "description": "Private key for the client certificate.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_pem_passphrase": {
          "aliases": [],
          "description": "Passphrase to decrypt encrypted private keys.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pymongo"
      ],
      "short_description": "Enables or disables maintenance mode for a secondary member.",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Enable maintenance mode\n  community.mongodb.mongodb_maintenance:\n    maintenance: true\n\n- name: Disable maintenance mode\n  community.mongodb.mongodb_maintenance:\n    maintenance: false\n"
  },
  "community.mongodb.mongodb_monitoring": {
    "doc": {
      "description": "Manages the free monitoring feature.\nOptionally return the monitoring url.",
      "has_action": false,
      "notes": "Requires the pymongo Python package on the remote host, version 2.4.2+. This can be installed using pip or the OS package manager. @see U(http://api.mongodb.org/python/current/installation.html)",
      "options": {
        "auth_mechanism": {
          "aliases": [],
          "description": "Authentication type.",
          "type": "str",
          "required": false,
          "choices": [
            "SCRAM-SHA-256",
            "SCRAM-SHA-1",
            "MONGODB-X509",
            "GSSAPI",
            "PLAIN"
          ],
          "suboptions": {}
        },
        "connection_options": {
          "aliases": [],
          "description": "Additional connection options.\nSupply as a list of dicts or strings containing key value pairs seperated with '='.",
          "type": "list",
          "required": false,
          "elements": "raw",
          "suboptions": {}
        },
        "login_database": {
          "aliases": [],
          "description": "The database where login credentials are stored.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_host": {
          "aliases": [],
          "description": "The host running MongoDB instance to login to.",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password used to authenticate with.\nRequired when I(login_user) is specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_port": {
          "aliases": [],
          "description": "The MongoDB server port to login to.",
          "default": "27017",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The MongoDB user to login with.\nRequired when I(login_password) is specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "return_url": {
          "aliases": [],
          "description": "When true return the monitoring url if available.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ssl": {
          "aliases": [],
          "description": "Whether to use an SSL connection when connecting to the database.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ssl_ca_certs": {
          "aliases": [],
          "description": "The ssl_ca_certs option takes a path to a CA file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_cert_reqs": {
          "aliases": [],
          "description": "Specifies whether a certificate is required from the other side of the connection, and whether it will be validated if provided.",
          "default": "CERT_REQUIRED",
          "type": "str",
          "required": false,
          "choices": [
            "CERT_NONE",
            "CERT_OPTIONAL",
            "CERT_REQUIRED"
          ],
          "suboptions": {}
        },
        "ssl_certfile": {
          "aliases": [],
          "description": "Present a client certificate using the ssl_certfile option.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_crlfile": {
          "aliases": [],
          "description": "The ssl_crlfile option takes a path to a CRL file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_keyfile": {
          "aliases": [],
          "description": "Private key for the client certificate.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_pem_passphrase": {
          "aliases": [],
          "description": "Passphrase to decrypt encrypted private keys.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Manage the free monitoring feature.",
          "default": "started",
          "type": "str",
          "required": false,
          "choices": [
            "started",
            "stopped"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "pymongo"
      ],
      "short_description": "Manages the free monitoring feature.",
      "version_added": "1.3.0"
    },
    "examples": "\n- name: Enable monitoring\n  community.mongodb.mongodb_monitoring:\n    state: \"started\"\n\n- name: Disable monitoring\n  community.mongodb.mongodb_monitoring:\n    state: \"stopped\"\n\n- name: Enable monitoring and return the monitoring url\n  community.mongodb_monitoring:\n    state: \"started\"\n    return_url: \"yes\"\n"
  },
  "community.mongodb.mongodb_oplog": {
    "doc": {
      "description": "Resizes the MongoDB oplog.\nThis module should only be used with MongoDB 3.6 and above.\nOld MongoDB versions should use an alternative method.\nConsult U(https://docs.mongodb.com/manual/tutorial/change-oplog-size) for further info.",
      "has_action": false,
      "notes": "Requires the pymongo Python package on the remote host, version 2.4.2+. This can be installed using pip or the OS package manager. @see U(http://api.mongodb.org/python/current/installation.html)",
      "options": {
        "auth_mechanism": {
          "aliases": [],
          "description": "Authentication type.",
          "type": "str",
          "required": false,
          "choices": [
            "SCRAM-SHA-256",
            "SCRAM-SHA-1",
            "MONGODB-X509",
            "GSSAPI",
            "PLAIN"
          ],
          "suboptions": {}
        },
        "compact": {
          "aliases": [],
          "description": "Runs compact against the oplog.rs collection in the local database to reclaim disk space.\nPerforms no actions against PRIMARY members.\nThe MongoDB user must have the compact role on the local database for this feature to work.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "connection_options": {
          "aliases": [],
          "description": "Additional connection options.\nSupply as a list of dicts or strings containing key value pairs seperated with '='.",
          "type": "list",
          "required": false,
          "elements": "raw",
          "suboptions": {}
        },
        "login_database": {
          "aliases": [],
          "description": "The database where login credentials are stored.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_host": {
          "aliases": [],
          "description": "The host running MongoDB instance to login to.",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password used to authenticate with.\nRequired when I(login_user) is specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_port": {
          "aliases": [],
          "description": "The MongoDB server port to login to.",
          "default": "27017",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The MongoDB user to login with.\nRequired when I(login_password) is specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "oplog_size_mb": {
          "aliases": [],
          "description": "New size of the oplog in MB.",
          "type": "int",
          "required": true,
          "suboptions": {}
        },
        "ssl": {
          "aliases": [],
          "description": "Whether to use an SSL connection when connecting to the database.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ssl_ca_certs": {
          "aliases": [],
          "description": "The ssl_ca_certs option takes a path to a CA file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_cert_reqs": {
          "aliases": [],
          "description": "Specifies whether a certificate is required from the other side of the connection, and whether it will be validated if provided.",
          "default": "CERT_REQUIRED",
          "type": "str",
          "required": false,
          "choices": [
            "CERT_NONE",
            "CERT_OPTIONAL",
            "CERT_REQUIRED"
          ],
          "suboptions": {}
        },
        "ssl_certfile": {
          "aliases": [],
          "description": "Present a client certificate using the ssl_certfile option.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_crlfile": {
          "aliases": [],
          "description": "The ssl_crlfile option takes a path to a CRL file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_keyfile": {
          "aliases": [],
          "description": "Private key for the client certificate.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_pem_passphrase": {
          "aliases": [],
          "description": "Passphrase to decrypt encrypted private keys.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ver": {
          "aliases": [],
          "description": "Version of MongoDB this module is supported from.\nYou probably don't want to modifiy this.\nIncluded here for internal testing.",
          "default": "3.6",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pymongo"
      ],
      "short_description": "Resizes the MongoDB oplog.",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Resize oplog to 16 gigabytes, or 16000 megabytes\n  community.mongodb.mongodb_oplog:\n    oplog_size_mb: 16000\n\n- name: Resize oplog to 8 gigabytes and compact secondaries to reclaim space\n  community.mongodb.mongodb_oplog:\n    oplog_size_mb: 8000\n    compact: true\n"
  },
  "community.mongodb.mongodb_parameter": {
    "doc": {
      "description": "Change an administrative parameter on a MongoDB server.",
      "has_action": false,
      "notes": "Requires the pymongo Python package on the remote host, version 2.4.2+.\nThis can be installed using pip or the OS package manager.\nSee also U(http://api.mongodb.org/python/current/installation.html)",
      "options": {
        "auth_mechanism": {
          "aliases": [],
          "description": "Authentication type.",
          "type": "str",
          "required": false,
          "choices": [
            "SCRAM-SHA-256",
            "SCRAM-SHA-1",
            "MONGODB-X509",
            "GSSAPI",
            "PLAIN"
          ],
          "suboptions": {}
        },
        "connection_options": {
          "aliases": [],
          "description": "Additional connection options.\nSupply as a list of dicts or strings containing key value pairs seperated with '='.",
          "type": "list",
          "required": false,
          "elements": "raw",
          "suboptions": {}
        },
        "login_database": {
          "aliases": [],
          "description": "The database where login credentials are stored.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_host": {
          "aliases": [],
          "description": "The host running MongoDB instance to login to.",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password used to authenticate with.\nRequired when I(login_user) is specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_port": {
          "aliases": [],
          "description": "The MongoDB server port to login to.",
          "default": "27017",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The MongoDB user to login with.\nRequired when I(login_password) is specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "param": {
          "aliases": [],
          "description": "MongoDB administrative parameter to modify.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "param_type": {
          "aliases": [],
          "description": "Define the type of parameter value.",
          "default": "str",
          "type": "str",
          "required": false,
          "choices": [
            "int",
            "str"
          ],
          "suboptions": {}
        },
        "replica_set": {
          "aliases": [],
          "description": "Replica set to connect to (automatically connects to primary for writes).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl": {
          "aliases": [],
          "description": "Whether to use an SSL connection when connecting to the database.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ssl_ca_certs": {
          "aliases": [],
          "description": "The ssl_ca_certs option takes a path to a CA file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_cert_reqs": {
          "aliases": [],
          "description": "Specifies whether a certificate is required from the other side of the connection, and whether it will be validated if provided.",
          "default": "CERT_REQUIRED",
          "type": "str",
          "required": false,
          "choices": [
            "CERT_NONE",
            "CERT_OPTIONAL",
            "CERT_REQUIRED"
          ],
          "suboptions": {}
        },
        "ssl_certfile": {
          "aliases": [],
          "description": "Present a client certificate using the ssl_certfile option.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_crlfile": {
          "aliases": [],
          "description": "The ssl_crlfile option takes a path to a CRL file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_keyfile": {
          "aliases": [],
          "description": "Private key for the client certificate.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_pem_passphrase": {
          "aliases": [],
          "description": "Passphrase to decrypt encrypted private keys.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "value": {
          "aliases": [],
          "description": "MongoDB administrative parameter value to set.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "pymongo"
      ],
      "short_description": "Change an administrative parameter on a MongoDB server",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Set MongoDB syncdelay to 60 (this is an int)\n  community.mongodb.mongodb_parameter:\n    param: syncdelay\n    value: 60\n    param_type: int\n"
  },
  "community.mongodb.mongodb_replicaset": {
    "doc": {
      "description": "Initialises a MongoDB replicaset in a new deployment.\nValidates the replicaset name for existing deployments.\nAdvanced replicaset member configuration possible (see examples).",
      "has_action": false,
      "notes": "Requires the pymongo Python package on the remote host, version 2.4.2+. This can be installed using pip or the OS package manager. @see U(http://api.mongodb.org/python/current/installation.html)",
      "options": {
        "arbiter_at_index": {
          "aliases": [],
          "description": "Identifies the position of the member in the array that is an arbiter.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "auth_mechanism": {
          "aliases": [],
          "description": "Authentication type.",
          "type": "str",
          "required": false,
          "choices": [
            "SCRAM-SHA-256",
            "SCRAM-SHA-1",
            "MONGODB-X509",
            "GSSAPI",
            "PLAIN"
          ],
          "suboptions": {}
        },
        "chaining_allowed": {
          "aliases": [],
          "description": "When I(settings.chaining_allowed=true), the replicaset allows secondary members to replicate from other secondary members.\nWhen I(settings.chaining_allowed=false), secondaries can replicate only from the primary.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "connection_options": {
          "aliases": [],
          "description": "Additional connection options.\nSupply as a list of dicts or strings containing key value pairs seperated with '='.",
          "type": "list",
          "required": false,
          "elements": "raw",
          "suboptions": {}
        },
        "debug": {
          "aliases": [],
          "description": "Add additonal info for debug.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "election_timeout_millis": {
          "aliases": [],
          "description": "The time limit in milliseconds for detecting when a replicaset's primary is unreachable.",
          "default": "10000",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Only relevant when reconfigure = true.\nSpecify true to force the available replica set members to accept the new configuration.\nForce reconfiguration can result in unexpected or undesired behavior, including rollback of \"majority\" committed writes.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "heartbeat_timeout_secs": {
          "aliases": [],
          "description": "Number of seconds that the replicaset members wait for a successful heartbeat from each other.\nIf a member does not respond in time, other members mark the delinquent member as inaccessible.\nThe setting only applies when using I(protocol_version=0). When using I(protocol_version=1) the relevant setting is I(settings.election_timeout_millis).",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "login_database": {
          "aliases": [],
          "description": "The database where login credentials are stored.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_host": {
          "aliases": [],
          "description": "The host running MongoDB instance to login to.",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password used to authenticate with.\nRequired when I(login_user) is specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_port": {
          "aliases": [],
          "description": "The MongoDB server port to login to.",
          "default": "27017",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The MongoDB user to login with.\nRequired when I(login_password) is specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "max_time_ms": {
          "aliases": [],
          "description": "Specifies a cumulative time limit in milliseconds for processing the replicaset reconfiguration.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "members": {
          "aliases": [],
          "description": "Yaml list consisting of the replicaset members.\nCsv string will also be accepted i.e. mongodb1:27017,mongodb2:27017,mongodb3:27017.\nA dictionary can also be used to specify advanced replicaset member options.\nIf a port number is not provided then 27017 is assumed.",
          "type": "list",
          "required": false,
          "elements": "raw",
          "suboptions": {}
        },
        "protocol_version": {
          "aliases": [],
          "description": "Version of the replicaset election protocol.",
          "default": "1",
          "type": "int",
          "required": false,
          "choices": [
            "0",
            "1"
          ],
          "suboptions": {}
        },
        "reconfigure": {
          "aliases": [],
          "description": "This feature is currently experimental. Please test your scenario thoroughly.\nConsult the integration test file for supported scenarios - \\ [Integration tests](https://github.com/ansible-collections/community.mongodb/tree/master/tests/integration/targets/mongodb_replicaset/tasks). \\ See files prefixed with 330.\nWhether to perform replicaset reconfiguration actions.\nOnly relevant when the replicaset already exists.\nOnly one member should be removed or added per invocation.\nMembers should be specific as either all strings or all dicts when reconfiguring.\nCurrently no support for replicaset settings document changes.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "replica_set": {
          "aliases": [],
          "description": "Replicaset name.",
          "default": "rs0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl": {
          "aliases": [],
          "description": "Whether to use an SSL connection when connecting to the database.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ssl_ca_certs": {
          "aliases": [],
          "description": "The ssl_ca_certs option takes a path to a CA file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_cert_reqs": {
          "aliases": [],
          "description": "Specifies whether a certificate is required from the other side of the connection, and whether it will be validated if provided.",
          "default": "CERT_REQUIRED",
          "type": "str",
          "required": false,
          "choices": [
            "CERT_NONE",
            "CERT_OPTIONAL",
            "CERT_REQUIRED"
          ],
          "suboptions": {}
        },
        "ssl_certfile": {
          "aliases": [],
          "description": "Present a client certificate using the ssl_certfile option.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_crlfile": {
          "aliases": [],
          "description": "The ssl_crlfile option takes a path to a CRL file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_keyfile": {
          "aliases": [],
          "description": "Private key for the client certificate.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_pem_passphrase": {
          "aliases": [],
          "description": "Passphrase to decrypt encrypted private keys.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate": {
          "aliases": [],
          "description": "Performs some basic validation on the provided replicaset config.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pymongo"
      ],
      "short_description": "Initialises a MongoDB replicaset.",
      "version_added": "1.0.0"
    },
    "examples": "\n# Create a replicaset called 'rs0' with the 3 provided members\n- name: Ensure replicaset rs0 exists\n  community.mongodb.mongodb_replicaset:\n    login_host: localhost\n    login_user: admin\n    login_password: admin\n    replica_set: rs0\n    members:\n    - mongodb1:27017\n    - mongodb2:27017\n    - mongodb3:27017\n  when: groups.mongod.index(inventory_hostname) == 0\n\n# Create two single-node replicasets on the localhost for testing\n- name: Ensure replicaset rs0 exists\n  community.mongodb.mongodb_replicaset:\n    login_host: localhost\n    login_port: 3001\n    login_user: admin\n    login_password: secret\n    login_database: admin\n    replica_set: rs0\n    members: localhost:3001\n    validate: no\n\n- name: Ensure replicaset rs1 exists\n  community.mongodb.mongodb_replicaset:\n    login_host: localhost\n    login_port: 3002\n    login_user: admin\n    login_password: secret\n    login_database: admin\n    replica_set: rs1\n    members: localhost:3002\n    validate: no\n\n- name: Create a replicaset and use a custom priority for each member\n  community.mongodb.mongodb_replicaset:\n    login_host: localhost\n    login_user: admin\n    login_password: admin\n    replica_set: rs0\n    members:\n    - host: \"localhost:3001\"\n      priority: 1\n    - host: \"localhost:3002\"\n      priority: 0.5\n    - host: \"localhost:3003\"\n      priority: 0.5\n  when: groups.mongod.index(inventory_hostname) == 0\n\n- name: Create replicaset rs1 with options and member tags\n  community.mongodb.mongodb_replicaset:\n    login_host: localhost\n    login_port: 3001\n    login_database: admin\n    replica_set: rs1\n    members:\n    - host: \"localhost:3001\"\n      priority: 1\n      tags:\n        dc: \"east\"\n        usage: \"production\"\n    - host: \"localhost:3002\"\n      priority: 1\n      tags:\n        dc: \"east\"\n        usage: \"production\"\n    - host: \"localhost:3003\"\n      priority: 0\n      hidden: true\n      slaveDelay: 3600\n      tags:\n        dc: \"west\"\n        usage: \"reporting\"\n\n- name: Replicaset with one arbiter node (mongodb3 - index is zero-based)\n  community.mongodb.mongodb_replicaset:\n    login_user: admin\n    login_password: admin\n    replica_set: rs0\n    members:\n      - mongodb1:27017\n      - mongodb2:27017\n      - mongodb3:27017\n    arbiter_at_index: 2\n  when: groups.mongod.index(inventory_hostname) == 0\n\n- name: Add a new member to a replicaset - Safe for pre-5.0 consult documentation - https://docs.mongodb.com/manual/tutorial/expand-replica-set/\n  block:\n    - name: Create replicaset with module - with dicts\n      community.mongodb.mongodb_replicaset:\n        replica_set: \"rs0\"\n        members:\n           - host: localhost:3001\n           - host: localhost:3002\n           - host: localhost:3003\n\n    - name: Wait for the replicaset to stabilise\n      community.mongodb.mongodb_status:\n        replica_set: \"rs0\"\n        poll: 5\n        interval: 10\n\n    - name: Remove a member from the replicaset\n      community.mongodb.mongodb_replicaset:\n        replica_set: \"rs0\"\n        reconfigure: yes\n        members:\n           - host: localhost:3001\n           - host: localhost:3002\n\n    - name: Wait for the replicaset to stabilise after member removal\n      community.mongodb.mongodb_status:\n        replica_set: \"rs0\"\n        validate: minimal\n        poll: 5\n        interval: 10\n\n    - name: Add a member to the replicaset\n      community.mongodb.mongodb_replicaset:\n        replica_set: \"rs0\"\n        reconfigure: yes\n        members:\n           - host: localhost:3001\n           - host: localhost:3002\n           - host: localhost:3004\n             hidden: true\n             votes: 0\n             priority: 0\n\n    - name: Wait for the replicaset to stabilise after member addition\n      community.mongodb.mongodb_status:\n        replica_set: \"rs0\"\n        validate: minimal\n        poll: 5\n        interval: 30\n\n    - name: Reconfigure the replicaset - Make member 3004 a normal voting member\n      community.mongodb.mongodb_replicaset:\n        replica_set: \"rs0\"\n        reconfigure: yes\n        members:\n           - host: localhost:3001\n           - host: localhost:3002\n           - host: localhost:3004\n             hidden: false\n             votes: 1\n             priority: 1\n\n    - name: Wait for the replicaset to stabilise\n      community.mongodb.mongodb_status:\n        replica_set: \"rs0\"\n        poll: 5\n        interval: 30\n"
  },
  "community.mongodb.mongodb_schema": {
    "doc": {
      "description": "Manages MongoDB Document Schema Validators.\nCreate, update and remove Validators on a collection.\nSupports the entire range of jsonSchema keywords.\nSee [jsonSchema Available Keywords](https://docs.mongodb.com/manual/reference/operator/query/jsonSchema/#available-keywords) for details.",
      "has_action": false,
      "notes": "Requires the pymongo Python package on the remote host, version 2.4.2+.",
      "options": {
        "action": {
          "aliases": [],
          "description": "The validation action for MongoDB to perform when handling invalid documents.",
          "default": "error",
          "type": "str",
          "required": false,
          "choices": [
            "error",
            "warn"
          ],
          "suboptions": {}
        },
        "auth_mechanism": {
          "aliases": [],
          "description": "Authentication type.",
          "type": "str",
          "required": false,
          "choices": [
            "SCRAM-SHA-256",
            "SCRAM-SHA-1",
            "MONGODB-X509",
            "GSSAPI",
            "PLAIN"
          ],
          "suboptions": {}
        },
        "collection": {
          "aliases": [],
          "description": "The collection to work with.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "connection_options": {
          "aliases": [],
          "description": "Additional connection options.\nSupply as a list of dicts or strings containing key value pairs seperated with '='.",
          "type": "list",
          "required": false,
          "elements": "raw",
          "suboptions": {}
        },
        "db": {
          "aliases": [],
          "description": "The database to work with.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "debug": {
          "aliases": [],
          "description": "Enable additional debugging output.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "level": {
          "aliases": [],
          "description": "The validation level MongoDB should apply when updating existing documents.",
          "default": "strict",
          "type": "str",
          "required": false,
          "choices": [
            "strict",
            "moderate"
          ],
          "suboptions": {}
        },
        "login_database": {
          "aliases": [],
          "description": "The database where login credentials are stored.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_host": {
          "aliases": [],
          "description": "The host running MongoDB instance to login to.",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password used to authenticate with.\nRequired when I(login_user) is specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_port": {
          "aliases": [],
          "description": "The MongoDB server port to login to.",
          "default": "27017",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The MongoDB user to login with.\nRequired when I(login_password) is specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "properties": {
          "aliases": [],
          "description": "Individual property specification.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "replica_set": {
          "aliases": [],
          "description": "Replicaset name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "required": {
          "aliases": [],
          "description": "List of fields that are required.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "ssl": {
          "aliases": [],
          "description": "Whether to use an SSL connection when connecting to the database.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ssl_ca_certs": {
          "aliases": [],
          "description": "The ssl_ca_certs option takes a path to a CA file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_cert_reqs": {
          "aliases": [],
          "description": "Specifies whether a certificate is required from the other side of the connection, and whether it will be validated if provided.",
          "default": "CERT_REQUIRED",
          "type": "str",
          "required": false,
          "choices": [
            "CERT_NONE",
            "CERT_OPTIONAL",
            "CERT_REQUIRED"
          ],
          "suboptions": {}
        },
        "ssl_certfile": {
          "aliases": [],
          "description": "Present a client certificate using the ssl_certfile option.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_crlfile": {
          "aliases": [],
          "description": "The ssl_crlfile option takes a path to a CRL file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_keyfile": {
          "aliases": [],
          "description": "Private key for the client certificate.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_pem_passphrase": {
          "aliases": [],
          "description": "Passphrase to decrypt encrypted private keys.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the validator.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "pymongo"
      ],
      "short_description": "Manages MongoDB Document Schema Validators.",
      "version_added": "1.3.0"
    },
    "examples": "\n---\n- name: Require that an email address field is in every document\n  community.mongodb.mongodb_schema:\n    collection: contacts\n    db: rhys\n    required:\n      - email\n\n- name: Remove a schema rule\n  community.mongodb.mongodb_schema:\n    collection: contacts\n    db: rhys\n    state: absent\n\n\n- name: More advanced example using properties\n  community.mongodb.mongodb_schema:\n    collection: contacts\n    db: rhys\n    properties:\n      email:\n        maxLength: 150\n        minLength: 5\n      options:\n        bsonType: array\n        maxItems: 10\n        minItems: 5\n        uniqueItems: true\n      status:\n        bsonType: string\n        description: \"can only be ACTIVE or DISABLED\"\n        enum:\n          - ACTIVE\n          - DISABLED\n      year:\n        bsonType: int\n        description: \"must be an integer from 2021 to 3020\"\n        exclusiveMaximum: false\n        maximum: 3020\n        minimum: 2021\n    required:\n      - email\n      - first_name\n      - last_name\n"
  },
  "community.mongodb.mongodb_shard": {
    "doc": {
      "description": "Add or remove shards from a MongoDB Cluster.",
      "has_action": false,
      "notes": "Requires the pymongo Python package on the remote host, version 2.4.2+.",
      "options": {
        "auth_mechanism": {
          "aliases": [],
          "description": "Authentication type.",
          "type": "str",
          "required": false,
          "choices": [
            "SCRAM-SHA-256",
            "SCRAM-SHA-1",
            "MONGODB-X509",
            "GSSAPI",
            "PLAIN"
          ],
          "suboptions": {}
        },
        "connection_options": {
          "aliases": [],
          "description": "Additional connection options.\nSupply as a list of dicts or strings containing key value pairs seperated with '='.",
          "type": "list",
          "required": false,
          "elements": "raw",
          "suboptions": {}
        },
        "login_database": {
          "aliases": [],
          "description": "The database where login credentials are stored.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_host": {
          "aliases": [],
          "description": "The host running MongoDB instance to login to.",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password used to authenticate with.\nRequired when I(login_user) is specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_port": {
          "aliases": [],
          "description": "The MongoDB server port to login to.",
          "default": "27017",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The MongoDB user to login with.\nRequired when I(login_password) is specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mongos_process": {
          "aliases": [],
          "description": "Provide a custom name for the mongos process you are connecting to.\nMost users can ignore this setting.",
          "default": "mongos",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "shard": {
          "aliases": [],
          "description": "The shard connection string.\nShould be supplied in the form <replicaset>/host:port as detailed in U(https://docs.mongodb.com/manual/tutorial/add-shards-to-shard-cluster/).\nFor example rs0/example1.mongodb.com:27017.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "sharded_databases": {
          "aliases": [],
          "description": "Enable sharding on the listed database.\nCan be supplied as a string or a list of strings.\nSharding cannot be disabled on a database.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "ssl": {
          "aliases": [],
          "description": "Whether to use an SSL connection when connecting to the database.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ssl_ca_certs": {
          "aliases": [],
          "description": "The ssl_ca_certs option takes a path to a CA file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_cert_reqs": {
          "aliases": [],
          "description": "Specifies whether a certificate is required from the other side of the connection, and whether it will be validated if provided.",
          "default": "CERT_REQUIRED",
          "type": "str",
          "required": false,
          "choices": [
            "CERT_NONE",
            "CERT_OPTIONAL",
            "CERT_REQUIRED"
          ],
          "suboptions": {}
        },
        "ssl_certfile": {
          "aliases": [],
          "description": "Present a client certificate using the ssl_certfile option.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_crlfile": {
          "aliases": [],
          "description": "The ssl_crlfile option takes a path to a CRL file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_keyfile": {
          "aliases": [],
          "description": "Private key for the client certificate.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_pem_passphrase": {
          "aliases": [],
          "description": "Passphrase to decrypt encrypted private keys.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the shard should be present or absent from the Cluster.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "pymongo"
      ],
      "short_description": "Add or remove shards from a MongoDB Cluster",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Add a replicaset shard named rs1 with a member running on port 27018 on mongodb0.example.net\n  community.mongodb.mongodb_shard:\n    login_user: admin\n    login_password: admin\n    shard: \"rs1/mongodb0.example.net:27018\"\n    state: present\n\n- name: Add a standalone mongod shard running on port 27018 of mongodb0.example.net\n  community.mongodb.mongodb_shard:\n    login_user: admin\n    login_password: admin\n    shard: \"mongodb0.example.net:27018\"\n    state: present\n\n- name: To remove a shard called 'rs1'\n  community.mongodb.mongodb_shard:\n    login_user: admin\n    login_password: admin\n    shard: rs1\n    state: absent\n\n# Single node shard running on localhost\n- name: Ensure shard rs0 exists\n  community.mongodb.mongodb_shard:\n    login_user: admin\n    login_password: secret\n    shard: \"rs0/localhost:3001\"\n    state: present\n\n# Single node shard running on localhost\n- name: Ensure shard rs1 exists\n  community.mongodb.mongodb_shard:\n    login_user: admin\n    login_password: secret\n    shard: \"rs1/localhost:3002\"\n    state: present\n\n# Enable sharding on a few databases when creating the shard\n- name: To remove a shard called 'rs1'\n  community.mongodb.mongodb_shard:\n    login_user: admin\n    login_password: admin\n    shard: rs1\n    sharded_databases:\n      - db1\n      - db2\n    state: present\n"
  },
  "community.mongodb.mongodb_shard_tag": {
    "doc": {
      "description": "Manage Shard Tags..\nAdd and remove shard tags.",
      "has_action": false,
      "notes": "Requires the pymongo Python package on the remote host, version 2.4.2+. This can be installed using pip or the OS package manager. @see U(http://api.mongodb.org/python/current/installation.html)",
      "options": {
        "auth_mechanism": {
          "aliases": [],
          "description": "Authentication type.",
          "type": "str",
          "required": false,
          "choices": [
            "SCRAM-SHA-256",
            "SCRAM-SHA-1",
            "MONGODB-X509",
            "GSSAPI",
            "PLAIN"
          ],
          "suboptions": {}
        },
        "connection_options": {
          "aliases": [],
          "description": "Additional connection options.\nSupply as a list of dicts or strings containing key value pairs seperated with '='.",
          "type": "list",
          "required": false,
          "elements": "raw",
          "suboptions": {}
        },
        "login_database": {
          "aliases": [],
          "description": "The database where login credentials are stored.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_host": {
          "aliases": [],
          "description": "The host running MongoDB instance to login to.",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password used to authenticate with.\nRequired when I(login_user) is specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_port": {
          "aliases": [],
          "description": "The MongoDB server port to login to.",
          "default": "27017",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The MongoDB user to login with.\nRequired when I(login_password) is specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mongos_process": {
          "aliases": [],
          "description": "Provide a custom name for the mongos process.\nMost users can ignore this setting.",
          "default": "mongos",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the tag.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "shard": {
          "aliases": [],
          "description": "The name of the shard to assign or remove the tag from.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ssl": {
          "aliases": [],
          "description": "Whether to use an SSL connection when connecting to the database.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ssl_ca_certs": {
          "aliases": [],
          "description": "The ssl_ca_certs option takes a path to a CA file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_cert_reqs": {
          "aliases": [],
          "description": "Specifies whether a certificate is required from the other side of the connection, and whether it will be validated if provided.",
          "default": "CERT_REQUIRED",
          "type": "str",
          "required": false,
          "choices": [
            "CERT_NONE",
            "CERT_OPTIONAL",
            "CERT_REQUIRED"
          ],
          "suboptions": {}
        },
        "ssl_certfile": {
          "aliases": [],
          "description": "Present a client certificate using the ssl_certfile option.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_crlfile": {
          "aliases": [],
          "description": "The ssl_crlfile option takes a path to a CRL file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_keyfile": {
          "aliases": [],
          "description": "Private key for the client certificate.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_pem_passphrase": {
          "aliases": [],
          "description": "Passphrase to decrypt encrypted private keys.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the zone.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "pymongo"
      ],
      "short_description": "Manage Shard Tags.",
      "version_added": "1.3.0"
    },
    "examples": "\n- name: Add the NYC tag to a shard called rs0\n  community.mongodb.mongodb_shard_tag:\n    name: \"NYC\"\n    shard: \"rs0\"\n    state: \"present\"\n\n- name: Remove the NYC tag from rs0\n  community.mongodb.mongodb_shard_tag:\n    name: \"NYC\"\n    shard: \"rs0\"\n    state: \"absent\"\n"
  },
  "community.mongodb.mongodb_shard_zone": {
    "doc": {
      "description": "Manage Shard Zones.\nAdd and remove shard zones.",
      "has_action": false,
      "notes": "Requires the pymongo Python package on the remote host, version 2.4.2+. This can be installed using pip or the OS package manager. @see U(http://api.mongodb.org/python/current/installation.html)",
      "options": {
        "auth_mechanism": {
          "aliases": [],
          "description": "Authentication type.",
          "type": "str",
          "required": false,
          "choices": [
            "SCRAM-SHA-256",
            "SCRAM-SHA-1",
            "MONGODB-X509",
            "GSSAPI",
            "PLAIN"
          ],
          "suboptions": {}
        },
        "connection_options": {
          "aliases": [],
          "description": "Additional connection options.\nSupply as a list of dicts or strings containing key value pairs seperated with '='.",
          "type": "list",
          "required": false,
          "elements": "raw",
          "suboptions": {}
        },
        "login_database": {
          "aliases": [],
          "description": "The database where login credentials are stored.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_host": {
          "aliases": [],
          "description": "The host running MongoDB instance to login to.",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password used to authenticate with.\nRequired when I(login_user) is specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_port": {
          "aliases": [],
          "description": "The MongoDB server port to login to.",
          "default": "27017",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The MongoDB user to login with.\nRequired when I(login_password) is specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mongos_process": {
          "aliases": [],
          "description": "Provide a custom name for the mongos process.\nMost users can ignore this setting.",
          "default": "mongos",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the zone.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "namespace": {
          "aliases": [],
          "description": "The namespace the zone is assigned to\nShould be given in the form database.collection.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ranges": {
          "aliases": [],
          "description": "The ranges assigned to the Zone.",
          "type": "list",
          "required": false,
          "elements": "list",
          "suboptions": {}
        },
        "ssl": {
          "aliases": [],
          "description": "Whether to use an SSL connection when connecting to the database.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ssl_ca_certs": {
          "aliases": [],
          "description": "The ssl_ca_certs option takes a path to a CA file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_cert_reqs": {
          "aliases": [],
          "description": "Specifies whether a certificate is required from the other side of the connection, and whether it will be validated if provided.",
          "default": "CERT_REQUIRED",
          "type": "str",
          "required": false,
          "choices": [
            "CERT_NONE",
            "CERT_OPTIONAL",
            "CERT_REQUIRED"
          ],
          "suboptions": {}
        },
        "ssl_certfile": {
          "aliases": [],
          "description": "Present a client certificate using the ssl_certfile option.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_crlfile": {
          "aliases": [],
          "description": "The ssl_crlfile option takes a path to a CRL file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_keyfile": {
          "aliases": [],
          "description": "Private key for the client certificate.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_pem_passphrase": {
          "aliases": [],
          "description": "Passphrase to decrypt encrypted private keys.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of the zone.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "pymongo"
      ],
      "short_description": "Manage Shard Zones.",
      "version_added": "1.3.0"
    },
    "examples": "\n- name: Add a shard zone for NYC\n  community.mongodb.mongodb_shard_zone:\n    name: \"NYC\"\n    namespace: \"records.users\"\n    ranges:\n      - [{ zipcode: \"10001\" }, { zipcode: \"10281\" }]\n      - [{ zipcode: \"11201\" }, { zipcode: \"11240\" }]\n    state: \"present\"\n\n- name: Remove all zone ranges\n  community.mongodb.mongodb_shard_zone:\n    name: \"NYC\"\n    namespace: \"records.users\"\n    state: \"absent\"\n\n- name: Remove a specific zone range\n  community.mongodb.mongodb_shard_zone:\n    name: \"NYC\"\n    namespace: \"records.users\"\n    ranges:\n      - [{ zipcode: \"11201\" }, { zipcode: \"11240\" }]\n    state: \"absent\"\n"
  },
  "community.mongodb.mongodb_shell": {
    "doc": {
      "description": "Run commands via the MongoDB shell.\nCommands provided with the eval parameter or included in a Javascript file.\nAttempts to parse returned data into a format that Ansible can use.\nModule currently uses the mongo shell by default. This will change to mongosh in an upcoming version and support for mongo will be dropped",
      "has_action": false,
      "options": {
        "additional_args": {
          "aliases": [],
          "description": "Additional arguments to supply to the mongo command.\nSupply as key-value pairs.\nIf the parameter is a valueless flag supply an empty string as the value.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "db": {
          "aliases": [],
          "description": "The database to run commands against",
          "default": "test",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "debug": {
          "aliases": [],
          "description": "show additional debug info.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "eval": {
          "aliases": [],
          "description": "A MongoDB command to run.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "file": {
          "aliases": [],
          "description": "Path to a file containing MongoDB commands.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "idempotent": {
          "aliases": [],
          "description": "Provides a form of pseudo-idempotency to the module.\nWe perform a hash calculation on the contents of the eval key or the file name provided in the file key.\nWhen the command is first execute a filed called <hash>.success will be created.\nThe module will not rerun the command if this file exists and idempotent is set to true.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "login_database": {
          "aliases": [],
          "description": "The database where login credentials are stored.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_host": {
          "aliases": [],
          "description": "The host running MongoDB instance to login to.",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password used to authenticate with.\nRequired when I(login_user) is specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_port": {
          "aliases": [],
          "description": "The MongoDB server port to login to.",
          "default": "27017",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The MongoDB user to login with.\nRequired when I(login_password) is specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mongo_cmd": {
          "aliases": [],
          "description": "The MongoDB shell command.",
          "default": "mongo",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "nodb": {
          "aliases": [],
          "description": "Specify a non-default encoding for output.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "norc": {
          "aliases": [],
          "description": "Prevents the shell from sourcing and evaluating ~/.mongorc.js on start up.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "quiet": {
          "aliases": [],
          "description": "Silences output from the shell during the connection process..",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "split_char": {
          "aliases": [],
          "description": "Used by the split action in the transform stage.",
          "default": " ",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "stringify": {
          "aliases": [],
          "description": "Wraps the command in eval in JSON.stringify(<js cmd>) (mongo) or EJSON.stringify(<js cmd>) (mongosh).\nUseful for escaping documents that are returned in Extended JSON format.\nAutomatically set to false when using mongo.\nAutomatically set to true when using mongosh.\nSet explicitly to override automatic selection.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "transform": {
          "aliases": [],
          "description": "Transform the output returned to the user.\nauto - Attempt to automatically decide the best tranformation.\nsplit - Split output on a character.\njson - parse as json.\nraw - Return the raw output.",
          "default": "auto",
          "type": "str",
          "required": false,
          "choices": [
            "auto",
            "split",
            "json",
            "raw"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "mongo or mongosh"
      ],
      "short_description": "Run commands via the MongoDB shell.",
      "version_added": "1.1.0"
    },
    "examples": "\n- name: Run the listDatabases command\n  community.mongodb.mongodb_shell:\n    login_user: user\n    login_password: secret\n    eval: \"db.adminCommand('listDatabases')\"\n\n- name: List collections and stringify the output\n  community.mongodb.mongodb_shell:\n    login_user: user\n    login_password: secret\n    eval: \"db.adminCommand('listCollections')\"\n    stringify: yes\n\n- name: Run the showBuiltinRoles command\n  community.mongodb.mongodb_shell:\n    login_user: user\n    login_password: secret\n    eval: \"db.getRoles({showBuiltinRoles: true})\"\n\n- name: Run a js file containing MongoDB commands with pseudo-idempotency\n  community.mongodb.mongodb_shell:\n    login_user: user\n    login_password: secret\n    file: \"/path/to/mongo/file.js\"\n    idempotent: yes\n\n- name: Provide a couple of additional cmd args\n  community.mongodb.mongodb_shell:\n    login_user: user\n    login_password: secret\n    eval: \"db.adminCommand('listDatabases')\"\n    additional_args:\n      verbose: True\n      networkMessageCompressors: \"snappy\"\n"
  },
  "community.mongodb.mongodb_shutdown": {
    "doc": {
      "description": "Cleans up all database resources and then terminates the process.",
      "has_action": false,
      "notes": "Requires the pymongo Python package on the remote host, version 2.4.2+. This can be installed using pip or the OS package manager. @see U(http://api.mongodb.org/python/current/installation.html)",
      "options": {
        "auth_mechanism": {
          "aliases": [],
          "description": "Authentication type.",
          "type": "str",
          "required": false,
          "choices": [
            "SCRAM-SHA-256",
            "SCRAM-SHA-1",
            "MONGODB-X509",
            "GSSAPI",
            "PLAIN"
          ],
          "suboptions": {}
        },
        "connection_options": {
          "aliases": [],
          "description": "Additional connection options.\nSupply as a list of dicts or strings containing key value pairs seperated with '='.",
          "type": "list",
          "required": false,
          "elements": "raw",
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Specify true to force the mongod to shut down.\nForce shutdown interrupts any ongoing operations on the mongod and may result in unexpected behavior.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "login_database": {
          "aliases": [],
          "description": "The database where login credentials are stored.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_host": {
          "aliases": [],
          "description": "The host running MongoDB instance to login to.",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password used to authenticate with.\nRequired when I(login_user) is specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_port": {
          "aliases": [],
          "description": "The MongoDB server port to login to.",
          "default": "27017",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The MongoDB user to login with.\nRequired when I(login_password) is specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl": {
          "aliases": [],
          "description": "Whether to use an SSL connection when connecting to the database.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ssl_ca_certs": {
          "aliases": [],
          "description": "The ssl_ca_certs option takes a path to a CA file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_cert_reqs": {
          "aliases": [],
          "description": "Specifies whether a certificate is required from the other side of the connection, and whether it will be validated if provided.",
          "default": "CERT_REQUIRED",
          "type": "str",
          "required": false,
          "choices": [
            "CERT_NONE",
            "CERT_OPTIONAL",
            "CERT_REQUIRED"
          ],
          "suboptions": {}
        },
        "ssl_certfile": {
          "aliases": [],
          "description": "Present a client certificate using the ssl_certfile option.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_crlfile": {
          "aliases": [],
          "description": "The ssl_crlfile option takes a path to a CRL file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_keyfile": {
          "aliases": [],
          "description": "Private key for the client certificate.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_pem_passphrase": {
          "aliases": [],
          "description": "Passphrase to decrypt encrypted private keys.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The number of seconds the primary should wait for a secondary to catch up.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pymongo"
      ],
      "short_description": "Cleans up all database resources and then terminates the mongod/mongos process.",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Attempt to perform a clean shutdown\n  community.mongodb.mongodb_shutdown:\n\n- name: Force shutdown with a timeout of 60 seconds\n  mongodb_maintenance:\n    force: true\n    timeout: 60\n"
  },
  "community.mongodb.mongodb_status": {
    "doc": {
      "description": "Validates the status of the replicaset.\nThe module expects all replicaset nodes to be PRIMARY, SECONDARY or ARBITER.\nWill wait until a timeout for the replicaset state to converge if required.\nCan also be used to lookup the current PRIMARY member (see examples).",
      "has_action": false,
      "notes": "Requires the pymongo Python package on the remote host, version 2.4.2+. This can be installed using pip or the OS package manager. @see U(http://api.mongodb.org/python/current/installation.html)",
      "options": {
        "auth_mechanism": {
          "aliases": [],
          "description": "Authentication type.",
          "type": "str",
          "required": false,
          "choices": [
            "SCRAM-SHA-256",
            "SCRAM-SHA-1",
            "MONGODB-X509",
            "GSSAPI",
            "PLAIN"
          ],
          "suboptions": {}
        },
        "connection_options": {
          "aliases": [],
          "description": "Additional connection options.\nSupply as a list of dicts or strings containing key value pairs seperated with '='.",
          "type": "list",
          "required": false,
          "elements": "raw",
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "The number of seconds to wait between polling executions.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "login_database": {
          "aliases": [],
          "description": "The database where login credentials are stored.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_host": {
          "aliases": [],
          "description": "The host running MongoDB instance to login to.",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password used to authenticate with.\nRequired when I(login_user) is specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_port": {
          "aliases": [],
          "description": "The MongoDB server port to login to.",
          "default": "27017",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The MongoDB user to login with.\nRequired when I(login_password) is specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "poll": {
          "aliases": [],
          "description": "The maximum number of times to query for the replicaset status before the set converges or we fail.",
          "default": "1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "replica_set": {
          "aliases": [],
          "description": "Replicaset name.",
          "default": "rs0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl": {
          "aliases": [],
          "description": "Whether to use an SSL connection when connecting to the database.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ssl_ca_certs": {
          "aliases": [],
          "description": "The ssl_ca_certs option takes a path to a CA file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_cert_reqs": {
          "aliases": [],
          "description": "Specifies whether a certificate is required from the other side of the connection, and whether it will be validated if provided.",
          "default": "CERT_REQUIRED",
          "type": "str",
          "required": false,
          "choices": [
            "CERT_NONE",
            "CERT_OPTIONAL",
            "CERT_REQUIRED"
          ],
          "suboptions": {}
        },
        "ssl_certfile": {
          "aliases": [],
          "description": "Present a client certificate using the ssl_certfile option.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_crlfile": {
          "aliases": [],
          "description": "The ssl_crlfile option takes a path to a CRL file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_keyfile": {
          "aliases": [],
          "description": "Private key for the client certificate.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_pem_passphrase": {
          "aliases": [],
          "description": "Passphrase to decrypt encrypted private keys.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate": {
          "aliases": [],
          "description": "The type of validate to perform on the replicaset.\ndefault, Suitable for most purposes. Validate that there are an odd number of servers and one is PRIMARY and the remainder are in a SECONDARY or ARBITER state.\nvotes, Check the number of votes is odd and one is a PRIMARY and the remainder are in a SECONDARY or ARBITER state. Authentication is required here to get the replicaset configuration.\nminimal, Just checks that one server is in a PRIMARY state with the remainder being SECONDARY or ARBITER.",
          "default": "default",
          "type": "str",
          "required": false,
          "choices": [
            "default",
            "votes",
            "minimal"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "pymongo"
      ],
      "short_description": "Validates the status of the replicaset.",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Check replicaset is healthy, fail if not after first attempt\n  community.mongodb.mongodb_status:\n    replica_set: rs0\n  when: ansible_hostname == \"mongodb1\"\n\n- name: Wait for the replicaset rs0 to converge, check 5 times, 10 second interval between checks\n  community.mongodb.mongodb_status:\n    replica_set: rs0\n    poll: 5\n    interval: 10\n  when: ansible_hostname == \"mongodb1\"\n\n# Get the replicaset status and then lookup the primary's hostname and save to a variable\n- name: Ensure replicaset is stable before beginning\n  community.mongodb.mongodb_status:\n    login_user: \"{{ admin_user }}\"\n    login_password: \"{{ admin_user_password }}\"\n    poll: 3\n    interval: 10\n  register: rs\n\n- name: Lookup PRIMARY replicaset member\n  set_fact:\n    primary: \"{{ item.key.split('.')[0] }}\"\n  loop: \"{{ lookup('dict', rs.replicaset) }}\"\n  when: \"'PRIMARY' in item.value\"\n"
  },
  "community.mongodb.mongodb_stepdown": {
    "doc": {
      "description": "Step down the MongoDB node from the PRIMARY state if it has that status. Returns OK immediately if the member is already in the SECONDARY or ARBITER states. Will wait until a timeout for the member state to reach SECONDARY or PRIMARY, if the member state is currently STARTUP, RECOVERING, STARTUP2 or ROLLBACK, before taking any needed action.\n",
      "has_action": false,
      "notes": "Requires the pymongo Python package on the remote host, version 2.4.2+. This can be installed using pip or the OS package manager. @see U(http://api.mongodb.org/python/current/installation.html)",
      "options": {
        "auth_mechanism": {
          "aliases": [],
          "description": "Authentication type.",
          "type": "str",
          "required": false,
          "choices": [
            "SCRAM-SHA-256",
            "SCRAM-SHA-1",
            "MONGODB-X509",
            "GSSAPI",
            "PLAIN"
          ],
          "suboptions": {}
        },
        "connection_options": {
          "aliases": [],
          "description": "Additional connection options.\nSupply as a list of dicts or strings containing key value pairs seperated with '='.",
          "type": "list",
          "required": false,
          "elements": "raw",
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Optional. A boolean that determines whether the primary steps down if no electable and up-to-date secondary exists within the wait period.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "The number of seconds to wait between poll executions.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "login_database": {
          "aliases": [],
          "description": "The database where login credentials are stored.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_host": {
          "aliases": [],
          "description": "The host running MongoDB instance to login to.",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password used to authenticate with.\nRequired when I(login_user) is specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_port": {
          "aliases": [],
          "description": "The MongoDB server port to login to.",
          "default": "27017",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The MongoDB user to login with.\nRequired when I(login_password) is specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "poll": {
          "aliases": [],
          "description": "The maximum number of times query for the member status.",
          "default": "1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "secondary_catch_up": {
          "aliases": [],
          "description": "The secondaryCatchUpPeriodSecs parameter for the stepDown command.\nThe number of seconds that mongod will wait for an electable secondary to catch up to the primary.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ssl": {
          "aliases": [],
          "description": "Whether to use an SSL connection when connecting to the database.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ssl_ca_certs": {
          "aliases": [],
          "description": "The ssl_ca_certs option takes a path to a CA file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_cert_reqs": {
          "aliases": [],
          "description": "Specifies whether a certificate is required from the other side of the connection, and whether it will be validated if provided.",
          "default": "CERT_REQUIRED",
          "type": "str",
          "required": false,
          "choices": [
            "CERT_NONE",
            "CERT_OPTIONAL",
            "CERT_REQUIRED"
          ],
          "suboptions": {}
        },
        "ssl_certfile": {
          "aliases": [],
          "description": "Present a client certificate using the ssl_certfile option.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_crlfile": {
          "aliases": [],
          "description": "The ssl_crlfile option takes a path to a CRL file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_keyfile": {
          "aliases": [],
          "description": "Private key for the client certificate.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_pem_passphrase": {
          "aliases": [],
          "description": "Passphrase to decrypt encrypted private keys.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "stepdown_seconds": {
          "aliases": [],
          "description": "The number of seconds to step down the primary, during which time the stepdown member is ineligible for becoming primary.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pymongo"
      ],
      "short_description": "Step down the MongoDB node from a PRIMARY state.",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Step down the current MongoDB member\n  community.mongodb.mongodb_stepdown:\n    login_user: admin\n    login_password: secret\n\n- name: Step down the current MongoDB member, poll a maximum of 5 times if member state is recovering\n  community.mongodb.mongodb_stepdown:\n    login_user: admin\n    login_password: secret\n    poll: 5\n    interval: 10\n"
  },
  "community.mongodb.mongodb_user": {
    "doc": {
      "description": "Adds or removes a user from a MongoDB database.",
      "has_action": false,
      "notes": "Requires the pymongo Python package on the remote host, version 2.4.2+. This can be installed using pip or the OS package manager. Newer mongo server versions require newer pymongo versions. @see http://api.mongodb.org/python/current/installation.html",
      "options": {
        "auth_mechanism": {
          "aliases": [],
          "description": "Authentication type.",
          "type": "str",
          "required": false,
          "choices": [
            "SCRAM-SHA-256",
            "SCRAM-SHA-1",
            "MONGODB-X509",
            "GSSAPI",
            "PLAIN"
          ],
          "suboptions": {}
        },
        "connection_options": {
          "aliases": [],
          "description": "Additional connection options.\nSupply as a list of dicts or strings containing key value pairs seperated with '='.",
          "type": "list",
          "required": false,
          "elements": "raw",
          "suboptions": {}
        },
        "create_for_localhost_exception": {
          "aliases": [],
          "description": "This is parmeter is only useful for handling special treatment around the localhost exception.\nIf C(login_user) is defined, then the localhost exception is not active and this parameter has no effect.\nIf this file is NOT present (and C(login_user) is not defined), then touch this file after successfully adding the user.\nIf this file is present (and C(login_user) is not defined), then skip this task.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "database": {
          "aliases": [
            "db"
          ],
          "description": "The name of the database to add/remove the user from.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "login_database": {
          "aliases": [],
          "description": "The database where login credentials are stored.",
          "default": "admin",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_host": {
          "aliases": [],
          "description": "The host running MongoDB instance to login to.",
          "default": "localhost",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_password": {
          "aliases": [],
          "description": "The password used to authenticate with.\nRequired when I(login_user) is specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "login_port": {
          "aliases": [],
          "description": "The MongoDB server port to login to.",
          "default": "27017",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "login_user": {
          "aliases": [],
          "description": "The MongoDB user to login with.\nRequired when I(login_password) is specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "user"
          ],
          "description": "The name of the user to add or remove.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass"
          ],
          "description": "The password to use for the user.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "replica_set": {
          "aliases": [],
          "description": "Replica set to connect to (automatically connects to primary for writes).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "roles": {
          "aliases": [],
          "description": "The database user roles valid values could either be one or more of the following strings: 'read', 'readWrite', 'dbAdmin', 'userAdmin', 'clusterAdmin', 'readAnyDatabase', 'readWriteAnyDatabase', 'userAdminAnyDatabase', 'dbAdminAnyDatabase'\n\nOr the following dictionary '{ db: DATABASE_NAME, role: ROLE_NAME }'.\nThis param requires pymongo 2.5+. If it is a string, mongodb 2.4+ is also required. If it is a dictionary, mongo 2.6+ is required.",
          "type": "list",
          "required": false,
          "elements": "raw",
          "suboptions": {}
        },
        "ssl": {
          "aliases": [],
          "description": "Whether to use an SSL connection when connecting to the database.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ssl_ca_certs": {
          "aliases": [],
          "description": "The ssl_ca_certs option takes a path to a CA file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_cert_reqs": {
          "aliases": [],
          "description": "Specifies whether a certificate is required from the other side of the connection, and whether it will be validated if provided.",
          "default": "CERT_REQUIRED",
          "type": "str",
          "required": false,
          "choices": [
            "CERT_NONE",
            "CERT_OPTIONAL",
            "CERT_REQUIRED"
          ],
          "suboptions": {}
        },
        "ssl_certfile": {
          "aliases": [],
          "description": "Present a client certificate using the ssl_certfile option.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_crlfile": {
          "aliases": [],
          "description": "The ssl_crlfile option takes a path to a CRL file.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_keyfile": {
          "aliases": [],
          "description": "Private key for the client certificate.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_pem_passphrase": {
          "aliases": [],
          "description": "Passphrase to decrypt encrypted private keys.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The database user state.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "update_password": {
          "aliases": [],
          "description": "C(always) will always update passwords and cause the module to return changed.\nC(on_create) will only set the password for newly created users.\nThis must be C(always) to use the localhost exception when adding the first admin user.",
          "default": "always",
          "type": "str",
          "required": false,
          "choices": [
            "always",
            "on_create"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "pymongo"
      ],
      "short_description": "Adds or removes a user from a MongoDB database",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create 'burgers' database user with name 'bob' and password '12345'.\n  community.mongodb.mongodb_user:\n    database: burgers\n    name: bob\n    password: 12345\n    state: present\n\n- name: Create a database user via SSL (MongoDB must be compiled with the SSL option and configured properly)\n  community.mongodb.mongodb_user:\n    database: burgers\n    name: bob\n    password: 12345\n    state: present\n    ssl: True\n\n- name: Delete 'burgers' database user with name 'bob'.\n  community.mongodb.mongodb_user:\n    database: burgers\n    name: bob\n    state: absent\n\n- name: Define more users with various specific roles (if not defined, no roles is assigned, and the user will be added via pre mongo 2.2 style)\n  community.mongodb.mongodb_user:\n    database: burgers\n    name: ben\n    password: 12345\n    roles: read\n    state: present\n\n- name: Define roles\n  community.mongodb.mongodb_user:\n    database: burgers\n    name: jim\n    password: 12345\n    roles: readWrite,dbAdmin,userAdmin\n    state: present\n\n- name: Define roles\n  community.mongodb.mongodb_user:\n    database: burgers\n    name: joe\n    password: 12345\n    roles: readWriteAnyDatabase\n    state: present\n\n- name: Add a user to database in a replica set, the primary server is automatically discovered and written to\n  community.mongodb.mongodb_user:\n    database: burgers\n    name: bob\n    replica_set: belcher\n    password: 12345\n    roles: readWriteAnyDatabase\n    state: present\n\n# add a user 'oplog_reader' with read only access to the 'local' database on the replica_set 'belcher'. This is useful for oplog access (MONGO_OPLOG_URL).\n# please notice the credentials must be added to the 'admin' database because the 'local' database is not synchronized and can't receive user credentials\n# To login with such user, the connection string should be MONGO_OPLOG_URL=\"mongodb://oplog_reader:oplog_reader_password@server1,server2/local?authSource=admin\"\n# This syntax requires mongodb 2.6+ and pymongo 2.5+\n- name: Roles as a dictionary\n  community.mongodb.mongodb_user:\n    login_user: root\n    login_password: root_password\n    database: admin\n    user: oplog_reader\n    password: oplog_reader_password\n    state: present\n    replica_set: belcher\n    roles:\n      - db: local\n        role: read\n\n- name: Adding a user with X.509 Member Authentication\n  community.mongodb.mongodb_user:\n    login_host: \"mongodb-host.test\"\n    login_port: 27001\n    login_database: \"$external\"\n    database: \"admin\"\n    name: \"admin\"\n    password: \"test\"\n    roles:\n    - dbAdminAnyDatabase\n    ssl: true\n    ssl_ca_certs: \"/tmp/ca.crt\"\n    ssl_certfile: \"/tmp/tls.key\" #cert and key in one file\n    state: present\n    auth_mechanism: \"MONGODB-X509\"\n    connection_options:\n     - \"tlsAllowInvalidHostnames=true\"\n"
  }
}