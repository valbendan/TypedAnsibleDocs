{
  "infoblox.nios_modules.nios_a_record": {
    "doc": {
      "description": "Adds and/or removes instances of A record objects from Infoblox NIOS servers.  This module manages NIOS C(record:a) objects using the Infoblox WAPI interface over REST.",
      "has_action": false,
      "notes": "This module supports C(check_mode).\nThis module must be run locally, which can be achieved by specifying C(connection: local).\nPlease read the :ref:`nios_guide` for more detailed information on how to use Infoblox with Ansible.",
      "options": {
        "comment": {
          "aliases": [],
          "description": "Configures a text string comment to be associated with the instance of this object.  The provided text string will be configured on the object instance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "extattrs": {
          "aliases": [],
          "description": "Allows for the configuration of Extensible Attributes on the instance of the object.  This argument accepts a set of key / value pairs for configuration.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "ipv4addr": {
          "aliases": [
            "ipv4"
          ],
          "description": "Configures the IPv4 address for this A record. Users can dynamically allocate ipv4 address to A record by passing dictionary containing, I(nios_next_ip) and I(CIDR network range). See example.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Specifies the fully qualified hostname to add or remove from the system.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "A dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote instance of NIOS WAPI over REST\nValue can also be specified using C(INFOBLOX_HOST) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "http_pool_connections": {
              "aliases": [],
              "description": "Insert decription here",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "http_pool_maxsize": {
              "aliases": [],
              "description": "Insert description here",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "http_request_timeout": {
              "aliases": [],
              "description": "The amount of time before to wait before receiving a response\nValue can also be specified using C(INFOBLOX_HTTP_REQUEST_TIMEOUT) environment variable.",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "max_results": {
              "aliases": [],
              "description": "Specifies the maximum number of objects to be returned, if set to a negative number the appliance will return an error when the number of returned objects would exceed the setting.\nValue can also be specified using C(INFOBLOX_MAX_RESULTS) environment variable.",
              "default": "1000",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "max_retries": {
              "aliases": [],
              "description": "Configures the number of attempted retries before the connection is declared usable\nValue can also be specified using C(INFOBLOX_MAX_RETRIES) environment variable.",
              "default": "3",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote instance of NIOS.\nValue can also be specified using C(INFOBLOX_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "silent_ssl_warnings": {
              "aliases": [],
              "description": "Insert description here",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote instance of NIOS.\nValue can also be specified using C(INFOBLOX_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [
                "ssl_verify"
              ],
              "description": "Boolean value to enable or disable verifying SSL certificates\nValue can also be specified using C(INFOBLOX_SSL_VERIFY) environment variable.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "wapi_version": {
              "aliases": [],
              "description": "Specifies the version of WAPI to use\nValue can also be specified using C(INFOBLOX_WAP_VERSION) environment variable.\nUntil ansible 2.8 the default WAPI was 1.4",
              "default": "2.1",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Configures the intended state of the instance of the object on the NIOS server.  When this value is set to C(present), the object is configured on the device and when this value is set to C(absent) the value is removed (if necessary) from the device.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "ttl": {
          "aliases": [],
          "description": "Configures the TTL to be associated with this A record.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "view": {
          "aliases": [
            "dns_view"
          ],
          "description": "Sets the DNS view to associate this A record with.  The DNS view must already be configured on the system.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "infoblox-client"
      ],
      "short_description": "Configure Infoblox NIOS A records",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Configure an A record\n  infoblox.nios_modules.nios_a_record:\n    name: a.ansible.com\n    ipv4: 192.168.10.1\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Add a comment to an existing A record\n  infoblox.nios_modules.nios_a_record:\n    name: a.ansible.com\n    ipv4: 192.168.10.1\n    comment: this is a test comment\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Remove an A record from the system\n  infoblox.nios_modules.nios_a_record:\n    name: a.ansible.com\n    ipv4: 192.168.10.1\n    state: absent\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Update an A record name\n  infoblox.nios_modules.nios_a_record:\n    name: {new_name: a_new.ansible.com, old_name: a.ansible.com}\n    ipv4: 192.168.10.1\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Dynamically add a record to next available ip\n  infoblox.nios_modules.nios_a_record:\n    name: a.ansible.com\n    ipv4: {nios_next_ip: 192.168.10.0/24}\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n"
  },
  "infoblox.nios_modules.nios_aaaa_record": {
    "doc": {
      "description": "Adds and/or removes instances of AAAA record objects from Infoblox NIOS servers.  This module manages NIOS C(record:aaaa) objects using the Infoblox WAPI interface over REST.",
      "has_action": false,
      "notes": "This module supports C(check_mode).\nThis module must be run locally, which can be achieved by specifying C(connection: local).\nPlease read the :ref:`nios_guide` for more detailed information on how to use Infoblox with Ansible.",
      "options": {
        "comment": {
          "aliases": [],
          "description": "Configures a text string comment to be associated with the instance of this object.  The provided text string will be configured on the object instance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "extattrs": {
          "aliases": [],
          "description": "Allows for the configuration of Extensible Attributes on the instance of the object.  This argument accepts a set of key / value pairs for configuration.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "ipv6addr": {
          "aliases": [
            "ipv6"
          ],
          "description": "Configures the IPv6 address for this AAAA record.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Specifies the fully qualified hostname to add or remove from the system.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "A dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote instance of NIOS WAPI over REST\nValue can also be specified using C(INFOBLOX_HOST) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "http_pool_connections": {
              "aliases": [],
              "description": "Insert decription here",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "http_pool_maxsize": {
              "aliases": [],
              "description": "Insert description here",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "http_request_timeout": {
              "aliases": [],
              "description": "The amount of time before to wait before receiving a response\nValue can also be specified using C(INFOBLOX_HTTP_REQUEST_TIMEOUT) environment variable.",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "max_results": {
              "aliases": [],
              "description": "Specifies the maximum number of objects to be returned, if set to a negative number the appliance will return an error when the number of returned objects would exceed the setting.\nValue can also be specified using C(INFOBLOX_MAX_RESULTS) environment variable.",
              "default": "1000",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "max_retries": {
              "aliases": [],
              "description": "Configures the number of attempted retries before the connection is declared usable\nValue can also be specified using C(INFOBLOX_MAX_RETRIES) environment variable.",
              "default": "3",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote instance of NIOS.\nValue can also be specified using C(INFOBLOX_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "silent_ssl_warnings": {
              "aliases": [],
              "description": "Insert description here",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote instance of NIOS.\nValue can also be specified using C(INFOBLOX_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [
                "ssl_verify"
              ],
              "description": "Boolean value to enable or disable verifying SSL certificates\nValue can also be specified using C(INFOBLOX_SSL_VERIFY) environment variable.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "wapi_version": {
              "aliases": [],
              "description": "Specifies the version of WAPI to use\nValue can also be specified using C(INFOBLOX_WAP_VERSION) environment variable.\nUntil ansible 2.8 the default WAPI was 1.4",
              "default": "2.1",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Configures the intended state of the instance of the object on the NIOS server.  When this value is set to C(present), the object is configured on the device and when this value is set to C(absent) the value is removed (if necessary) from the device.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "ttl": {
          "aliases": [],
          "description": "Configures the TTL to be associated with this AAAA record.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "view": {
          "aliases": [
            "dns_view"
          ],
          "description": "Sets the DNS view to associate this AAAA record with.  The DNS view must already be configured on the system.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "infoblox-client"
      ],
      "short_description": "Configure Infoblox NIOS AAAA records",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Configure an AAAA record\n  infoblox.nios_modules.nios_aaaa_record:\n    name: aaaa.ansible.com\n    ipv6: 2001:0db8:85a3:0000:0000:8a2e:0370:7334\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Add a comment to an existing AAAA record\n  infoblox.nios_modules.nios_aaaa_record:\n    name: aaaa.ansible.com\n    ipv6: 2001:0db8:85a3:0000:0000:8a2e:0370:7334\n    comment: this is a test comment\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Remove an AAAA record from the system\n  infoblox.nios_modules.nios_aaaa_record:\n    name: aaaa.ansible.com\n    ipv6: 2001:0db8:85a3:0000:0000:8a2e:0370:7334\n    state: absent\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Update an AAAA record name\n  infoblox.nios_modules.nios_aaaa_record:\n    name: {new_name: aaaa_new.ansible.com, old_name: aaaa.ansible.com}\n    ipv6: 2001:0db8:85a3:0000:0000:8a2e:0370:7334\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n"
  },
  "infoblox.nios_modules.nios_cname_record": {
    "doc": {
      "description": "Adds and/or removes instances of CNAME record objects from Infoblox NIOS servers.  This module manages NIOS C(record:cname) objects using the Infoblox WAPI interface over REST.",
      "has_action": false,
      "notes": "This module supports C(check_mode).\nThis module must be run locally, which can be achieved by specifying C(connection: local).\nPlease read the :ref:`nios_guide` for more detailed information on how to use Infoblox with Ansible.",
      "options": {
        "canonical": {
          "aliases": [
            "cname"
          ],
          "description": "Configures the canonical name for this CNAME record.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "comment": {
          "aliases": [],
          "description": "Configures a text string comment to be associated with the instance of this object.  The provided text string will be configured on the object instance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "extattrs": {
          "aliases": [],
          "description": "Allows for the configuration of Extensible Attributes on the instance of the object.  This argument accepts a set of key / value pairs for configuration.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Specifies the fully qualified hostname to add or remove from the system.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "A dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote instance of NIOS WAPI over REST\nValue can also be specified using C(INFOBLOX_HOST) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "http_pool_connections": {
              "aliases": [],
              "description": "Insert decription here",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "http_pool_maxsize": {
              "aliases": [],
              "description": "Insert description here",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "http_request_timeout": {
              "aliases": [],
              "description": "The amount of time before to wait before receiving a response\nValue can also be specified using C(INFOBLOX_HTTP_REQUEST_TIMEOUT) environment variable.",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "max_results": {
              "aliases": [],
              "description": "Specifies the maximum number of objects to be returned, if set to a negative number the appliance will return an error when the number of returned objects would exceed the setting.\nValue can also be specified using C(INFOBLOX_MAX_RESULTS) environment variable.",
              "default": "1000",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "max_retries": {
              "aliases": [],
              "description": "Configures the number of attempted retries before the connection is declared usable\nValue can also be specified using C(INFOBLOX_MAX_RETRIES) environment variable.",
              "default": "3",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote instance of NIOS.\nValue can also be specified using C(INFOBLOX_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "silent_ssl_warnings": {
              "aliases": [],
              "description": "Insert description here",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote instance of NIOS.\nValue can also be specified using C(INFOBLOX_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [
                "ssl_verify"
              ],
              "description": "Boolean value to enable or disable verifying SSL certificates\nValue can also be specified using C(INFOBLOX_SSL_VERIFY) environment variable.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "wapi_version": {
              "aliases": [],
              "description": "Specifies the version of WAPI to use\nValue can also be specified using C(INFOBLOX_WAP_VERSION) environment variable.\nUntil ansible 2.8 the default WAPI was 1.4",
              "default": "2.1",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Configures the intended state of the instance of the object on the NIOS server.  When this value is set to C(present), the object is configured on the device and when this value is set to C(absent) the value is removed (if necessary) from the device.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "ttl": {
          "aliases": [],
          "description": "Configures the TTL to be associated with this CNAME record.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "view": {
          "aliases": [
            "dns_view"
          ],
          "description": "Sets the DNS view to associate this CNAME record with.  The DNS view must already be configured on the system.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "infoblox-client"
      ],
      "short_description": "Configure Infoblox NIOS CNAME records",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Configure a CNAME record\n  infoblox.nios_modules.nios_cname_record:\n    name: cname.ansible.com\n    canonical: realhost.ansible.com\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Add a comment to an existing CNAME record\n  infoblox.nios_modules.nios_cname_record:\n    name: cname.ansible.com\n    canonical: realhost.ansible.com\n    comment: this is a test comment\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Remove a CNAME record from the system\n  infoblox.nios_modules.nios_cname_record:\n    name: cname.ansible.com\n    canonical: realhost.ansible.com\n    state: absent\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n"
  },
  "infoblox.nios_modules.nios_dns_view": {
    "doc": {
      "description": "Adds and/or removes instances of DNS view objects from Infoblox NIOS servers.  This module manages NIOS C(view) objects using the Infoblox WAPI interface over REST.\nUpdates instances of DNS view object from Infoblox NIOS servers.",
      "has_action": false,
      "notes": "This module supports C(check_mode).\nThis module must be run locally, which can be achieved by specifying C(connection: local).\nPlease read the :ref:`nios_guide` for more detailed information on how to use Infoblox with Ansible.",
      "options": {
        "comment": {
          "aliases": [],
          "description": "Configures a text string comment to be associated with the instance of this object.  The provided text string will be configured on the object instance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "extattrs": {
          "aliases": [],
          "description": "Allows for the configuration of Extensible Attributes on the instance of the object.  This argument accepts a set of key / value pairs for configuration.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "view"
          ],
          "description": "Specifies the fully qualified hostname to add or remove from the system. User can also update the hostname as it is possible to pass a dict containing I(new_name), I(old_name). See examples.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "network_view": {
          "aliases": [],
          "description": "Specifies the name of the network view to assign the configured DNS view to.  The network view must already be configured on the target system.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "A dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote instance of NIOS WAPI over REST\nValue can also be specified using C(INFOBLOX_HOST) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "http_pool_connections": {
              "aliases": [],
              "description": "Insert decription here",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "http_pool_maxsize": {
              "aliases": [],
              "description": "Insert description here",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "http_request_timeout": {
              "aliases": [],
              "description": "The amount of time before to wait before receiving a response\nValue can also be specified using C(INFOBLOX_HTTP_REQUEST_TIMEOUT) environment variable.",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "max_results": {
              "aliases": [],
              "description": "Specifies the maximum number of objects to be returned, if set to a negative number the appliance will return an error when the number of returned objects would exceed the setting.\nValue can also be specified using C(INFOBLOX_MAX_RESULTS) environment variable.",
              "default": "1000",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "max_retries": {
              "aliases": [],
              "description": "Configures the number of attempted retries before the connection is declared usable\nValue can also be specified using C(INFOBLOX_MAX_RETRIES) environment variable.",
              "default": "3",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote instance of NIOS.\nValue can also be specified using C(INFOBLOX_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "silent_ssl_warnings": {
              "aliases": [],
              "description": "Insert description here",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote instance of NIOS.\nValue can also be specified using C(INFOBLOX_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [
                "ssl_verify"
              ],
              "description": "Boolean value to enable or disable verifying SSL certificates\nValue can also be specified using C(INFOBLOX_SSL_VERIFY) environment variable.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "wapi_version": {
              "aliases": [],
              "description": "Specifies the version of WAPI to use\nValue can also be specified using C(INFOBLOX_WAP_VERSION) environment variable.\nUntil ansible 2.8 the default WAPI was 1.4",
              "default": "2.1",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Configures the intended state of the instance of the object on the NIOS server.  When this value is set to C(present), the object is configured on the device and when this value is set to C(absent) the value is removed (if necessary) from the device.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "infoblox-client"
      ],
      "short_description": "Configure Infoblox NIOS DNS views",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Configure a new dns view instance\n  infoblox.nios_modules.nios_dns_view:\n    name: ansible-dns\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Update the comment for dns view\n  infoblox.nios_modules.nios_dns_view:\n    name: ansible-dns\n    comment: this is an example comment\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Remove the dns view instance\n  infoblox.nios_modules.nios_dns_view:\n    name: ansible-dns\n    state: absent\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Update the dns view instance\n  infoblox.nios_modules.nios_dns_view:\n    name: {new_name: ansible-dns-new, old_name: ansible-dns}\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n"
  },
  "infoblox.nios_modules.nios_dtc_lbdn": {
    "doc": {
      "description": "Adds and/or removes instances of DTC Load Balanced Domain Name (LBDN) objects from Infoblox NIOS servers. This module manages NIOS C(dtc:lbdn) objects using the Infoblox WAPI interface over REST.",
      "has_action": false,
      "notes": "This module supports C(check_mode).\nThis module must be run locally, which can be achieved by specifying C(connection: local).\nPlease read the :ref:`nios_guide` for more detailed information on how to use Infoblox with Ansible.",
      "options": {
        "auth_zones": {
          "aliases": [],
          "description": "List of linked authoritative zones.\nWhen using I(auth_zones), you must specify at least one I(patterns)",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "comment": {
          "aliases": [],
          "description": "Configures a text string comment to be associated with the instance of this object.  The provided text string will be configured on the object instance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "extattrs": {
          "aliases": [],
          "description": "Allows for the configuration of Extensible Attributes on the instance of the object.  This argument accepts a set of key / value pairs for configuration.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "lb_method": {
          "aliases": [],
          "description": "Configures the load balancing method. Used to select pool.",
          "type": "str",
          "required": true,
          "choices": [
            "GLOBAL_AVAILABILITY",
            "RATIO",
            "ROUND_ROBIN",
            "TOPOLOGY"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Specifies the display name of the DTC LBDN, not DNS related.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "patterns": {
          "aliases": [],
          "description": "Specify LBDN wildcards for pattern match.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "pools": {
          "aliases": [],
          "description": "The pools used for load balancing.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "pool": {
              "aliases": [],
              "description": "Provide the name of the pool to link with",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "ratio": {
              "aliases": [],
              "description": "Provide the weight of the pool",
              "default": "1",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "provider": {
          "aliases": [],
          "description": "A dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote instance of NIOS WAPI over REST\nValue can also be specified using C(INFOBLOX_HOST) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "http_pool_connections": {
              "aliases": [],
              "description": "Insert decription here",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "http_pool_maxsize": {
              "aliases": [],
              "description": "Insert description here",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "http_request_timeout": {
              "aliases": [],
              "description": "The amount of time before to wait before receiving a response\nValue can also be specified using C(INFOBLOX_HTTP_REQUEST_TIMEOUT) environment variable.",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "max_results": {
              "aliases": [],
              "description": "Specifies the maximum number of objects to be returned, if set to a negative number the appliance will return an error when the number of returned objects would exceed the setting.\nValue can also be specified using C(INFOBLOX_MAX_RESULTS) environment variable.",
              "default": "1000",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "max_retries": {
              "aliases": [],
              "description": "Configures the number of attempted retries before the connection is declared usable\nValue can also be specified using C(INFOBLOX_MAX_RETRIES) environment variable.",
              "default": "3",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote instance of NIOS.\nValue can also be specified using C(INFOBLOX_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "silent_ssl_warnings": {
              "aliases": [],
              "description": "Insert description here",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote instance of NIOS.\nValue can also be specified using C(INFOBLOX_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [
                "ssl_verify"
              ],
              "description": "Boolean value to enable or disable verifying SSL certificates\nValue can also be specified using C(INFOBLOX_SSL_VERIFY) environment variable.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "wapi_version": {
              "aliases": [],
              "description": "Specifies the version of WAPI to use\nValue can also be specified using C(INFOBLOX_WAP_VERSION) environment variable.\nUntil ansible 2.8 the default WAPI was 1.4",
              "default": "2.1",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Configures the intended state of the instance of the object on the NIOS server.  When this value is set to C(present), the object is configured on the device and when this value is set to C(absent) the value is removed (if necessary) from the device.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "ttl": {
          "aliases": [],
          "description": "The Time To Live (TTL) value for the DTC LBDN. A 32-bit unsigned integer that represents the duration, in seconds, for which the record is valid (cached). Zero indicates that the record should not be cached.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "types": {
          "aliases": [],
          "description": "Specifies the list of resource record types supported by LBDN.\nThis option will work properly only if you set the C(wapi_version) variable on your C(provider) variable to a number higher than \"2.6\".",
          "type": "list",
          "required": false,
          "choices": [
            "A",
            "AAAA",
            "CNAME",
            "NAPTR",
            "SRV"
          ],
          "elements": "str",
          "suboptions": {}
        }
      },
      "requirements": [
        "infoblox-client"
      ],
      "short_description": "Configure Infoblox NIOS DTC LBDN",
      "version_added": "1.1.0"
    },
    "examples": "\n- name: Configure a DTC LBDN\n  infoblox.nios_modules.nios_dtc_lbdn:\n    name: web.ansible.com\n    lb_method: ROUND_ROBIN\n    pools:\n      - pool: web_pool\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Add a comment to a DTC LBDN\n  infoblox.nios_modules.nios_dtc_lbdn:\n    name: web.ansible.com\n    lb_method: ROUND_ROBIN\n    comment: this is a test comment\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Remove a DTC LBDN from the system\n  infoblox.nios_modules.nios_dtc_lbdn:\n    name: web.ansible.com\n    lb_method: ROUND_ROBIN\n    state: absent\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n"
  },
  "infoblox.nios_modules.nios_dtc_pool": {
    "doc": {
      "description": "Adds and/or removes instances of DTC Pool objects from Infoblox NIOS servers. This module manages NIOS C(dtc:pool) objects using the Infoblox WAPI interface over REST. A DTC pool is a collection of IDNS resources (virtual servers).",
      "has_action": false,
      "notes": "This module supports C(check_mode).\nThis module must be run locally, which can be achieved by specifying C(connection: local).\nPlease read the :ref:`nios_guide` for more detailed information on how to use Infoblox with Ansible.",
      "options": {
        "comment": {
          "aliases": [],
          "description": "Configures a text string comment to be associated with the instance of this object.  The provided text string will be configured on the object instance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "extattrs": {
          "aliases": [],
          "description": "Allows for the configuration of Extensible Attributes on the instance of the object.  This argument accepts a set of key / value pairs for configuration.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "lb_preferred_method": {
          "aliases": [],
          "description": "Configures the preferred load balancing method.\nUse this to select a method type from the pool.",
          "type": "str",
          "required": true,
          "choices": [
            "ALL_AVAILABLE",
            "DYNAMIC_RATIO",
            "GLOBAL_AVAILABILITY",
            "RATIO",
            "ROUND_ROBIN",
            "TOPOLOGY"
          ],
          "suboptions": {}
        },
        "monitors": {
          "aliases": [],
          "description": "Specifies the health monitors related to pool.\nThe format of this parameter is required due to an API limitation.\nThis option only works if you set the C(wapi_version) variable on your C(provider) variable to a number higher than \"2.6\".",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "Provide the name of the health monitor.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "Provide the type of health monitor.",
              "type": "str",
              "required": true,
              "choices": [
                "http",
                "icmp",
                "tcp",
                "pdp",
                "sip",
                "snmp"
              ],
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "Specifies the DTC Pool display name",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "A dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote instance of NIOS WAPI over REST\nValue can also be specified using C(INFOBLOX_HOST) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "http_pool_connections": {
              "aliases": [],
              "description": "Insert decription here",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "http_pool_maxsize": {
              "aliases": [],
              "description": "Insert description here",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "http_request_timeout": {
              "aliases": [],
              "description": "The amount of time before to wait before receiving a response\nValue can also be specified using C(INFOBLOX_HTTP_REQUEST_TIMEOUT) environment variable.",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "max_results": {
              "aliases": [],
              "description": "Specifies the maximum number of objects to be returned, if set to a negative number the appliance will return an error when the number of returned objects would exceed the setting.\nValue can also be specified using C(INFOBLOX_MAX_RESULTS) environment variable.",
              "default": "1000",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "max_retries": {
              "aliases": [],
              "description": "Configures the number of attempted retries before the connection is declared usable\nValue can also be specified using C(INFOBLOX_MAX_RETRIES) environment variable.",
              "default": "3",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote instance of NIOS.\nValue can also be specified using C(INFOBLOX_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "silent_ssl_warnings": {
              "aliases": [],
              "description": "Insert description here",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote instance of NIOS.\nValue can also be specified using C(INFOBLOX_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [
                "ssl_verify"
              ],
              "description": "Boolean value to enable or disable verifying SSL certificates\nValue can also be specified using C(INFOBLOX_SSL_VERIFY) environment variable.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "wapi_version": {
              "aliases": [],
              "description": "Specifies the version of WAPI to use\nValue can also be specified using C(INFOBLOX_WAP_VERSION) environment variable.\nUntil ansible 2.8 the default WAPI was 1.4",
              "default": "2.1",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "servers": {
          "aliases": [],
          "description": "Configure the DTC Servers related to the pool",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "ratio": {
              "aliases": [],
              "description": "Provide the weight of the server",
              "default": "1",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "server": {
              "aliases": [],
              "description": "Provide the name of the DTC Server",
              "type": "str",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Configures the intended state of the instance of the object on the NIOS server.  When this value is set to C(present), the object is configured on the device and when this value is set to C(absent) the value is removed (if necessary) from the device.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "infoblox-client"
      ],
      "short_description": "Configure Infoblox NIOS DTC Pool",
      "version_added": "1.1.0"
    },
    "examples": "\n- name: Configure a DTC Pool\n  infoblox.nios_modules.nios_dtc_pool:\n    name: web_pool\n    lb_preferred_method: ROUND_ROBIN\n    servers:\n      - server: a.ansible.com\n      - server: b.ansible.com\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Add a comment to a DTC Pool\n  infoblox.nios_modules.nios_dtc_pool:\n    name: web_pool\n    lb_preferred_method: ROUND_ROBIN\n    comment: this is a test comment\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Remove a DTC Pool from the system\n  infoblox.nios_modules.nios_dtc_pool:\n    name: web_pool\n    lb_preferred_method: ROUND_ROBIN\n    state: absent\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n"
  },
  "infoblox.nios_modules.nios_dtc_server": {
    "doc": {
      "description": "Adds and/or removes instances of DTC Server objects from Infoblox NIOS servers. This module manages NIOS C(dtc:server) objects using the Infoblox WAPI interface over REST.",
      "has_action": false,
      "notes": "This module supports C(check_mode).\nThis module must be run locally, which can be achieved by specifying C(connection: local).\nPlease read the :ref:`nios_guide` for more detailed information on how to use Infoblox with Ansible.",
      "options": {
        "comment": {
          "aliases": [],
          "description": "Configures a text string comment to be associated with the instance of this object.  The provided text string will be configured on the object instance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "extattrs": {
          "aliases": [],
          "description": "Allows for the configuration of Extensible Attributes on the instance of the object.  This argument accepts a set of key / value pairs for configuration.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Configures the IP address (A response) or FQDN (CNAME response) of the server",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Specifies the DTC Server display name",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "A dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote instance of NIOS WAPI over REST\nValue can also be specified using C(INFOBLOX_HOST) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "http_pool_connections": {
              "aliases": [],
              "description": "Insert decription here",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "http_pool_maxsize": {
              "aliases": [],
              "description": "Insert description here",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "http_request_timeout": {
              "aliases": [],
              "description": "The amount of time before to wait before receiving a response\nValue can also be specified using C(INFOBLOX_HTTP_REQUEST_TIMEOUT) environment variable.",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "max_results": {
              "aliases": [],
              "description": "Specifies the maximum number of objects to be returned, if set to a negative number the appliance will return an error when the number of returned objects would exceed the setting.\nValue can also be specified using C(INFOBLOX_MAX_RESULTS) environment variable.",
              "default": "1000",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "max_retries": {
              "aliases": [],
              "description": "Configures the number of attempted retries before the connection is declared usable\nValue can also be specified using C(INFOBLOX_MAX_RETRIES) environment variable.",
              "default": "3",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote instance of NIOS.\nValue can also be specified using C(INFOBLOX_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "silent_ssl_warnings": {
              "aliases": [],
              "description": "Insert description here",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote instance of NIOS.\nValue can also be specified using C(INFOBLOX_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [
                "ssl_verify"
              ],
              "description": "Boolean value to enable or disable verifying SSL certificates\nValue can also be specified using C(INFOBLOX_SSL_VERIFY) environment variable.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "wapi_version": {
              "aliases": [],
              "description": "Specifies the version of WAPI to use\nValue can also be specified using C(INFOBLOX_WAP_VERSION) environment variable.\nUntil ansible 2.8 the default WAPI was 1.4",
              "default": "2.1",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Configures the intended state of the instance of the object on the NIOS server.  When this value is set to C(present), the object is configured on the device and when this value is set to C(absent) the value is removed (if necessary) from the device.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "infoblox-client"
      ],
      "short_description": "Configure Infoblox NIOS DTC Server",
      "version_added": "1.1.0"
    },
    "examples": "\n- name: Configure a DTC Server\n  infoblox.nios_modules.nios_dtc_server:\n    name: a.example.com\n    host: 192.168.10.1\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Add a comment to a DTC server\n  infoblox.nios_modules.nios_dtc_server:\n    name: a.example.com\n    host: 192.168.10.1\n    comment: this is a test comment\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Remove a DTC Server from the system\n  infoblox.nios_modules.nios_dtc_server:\n    name: a.example.com\n    host: 192.168.10.1\n    state: absent\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n"
  },
  "infoblox.nios_modules.nios_fixed_address": {
    "doc": {
      "description": "A fixed address is a specific IP address that a DHCP server always assigns when a lease request comes from a particular MAC address of the client.\nSupports both IPV4 and IPV6 internet protocols.",
      "has_action": false,
      "notes": "The \"mac\" field is mandatory for all CRUD operations relating to IPv4 Fixed address.\nThe \"duid\" field is mandatory for all CRUD operations relating to IPv6 Fixed address.\nThis module supports C(check_mode).\nThis module must be run locally, which can be achieved by specifying C(connection: local).\nPlease read the :ref:`nios_guide` for more detailed information on how to use Infoblox with Ansible.",
      "options": {
        "comment": {
          "aliases": [],
          "description": "Configures a text string comment to be associated with the instance of this object.  The provided text string will be configured on the object instance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "duid": {
          "aliases": [],
          "description": "The DUID address of the IPv6 interface.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "extattrs": {
          "aliases": [],
          "description": "Allows for the configuration of Extensible Attributes on the instance of the object.  This argument accepts a set of key / value pairs for configuration.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "ipaddr": {
          "aliases": [],
          "description": "IPV4/V6 address of the fixed address.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "mac": {
          "aliases": [],
          "description": "The MAC address of the IPv4 interface.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Specifies the hostname with which fixed DHCP ip-address is stored for respective mac.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "network": {
          "aliases": [
            "network"
          ],
          "description": "Specifies the network range in which ipaddr exists.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "network_view": {
          "aliases": [],
          "description": "Configures the name of the network view to associate with this configured instance.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "options": {
          "aliases": [],
          "description": "Configures the set of DHCP options to be included as part of the configured network instance.  This argument accepts a list of values (see suboptions).  When configuring suboptions at least one of C(name) or C(num) must be specified.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "The name of the DHCP option to configure",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "num": {
              "aliases": [],
              "description": "The number of the DHCP option to configure",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "use_option": {
              "aliases": [],
              "description": "Only applies to a subset of options (see NIOS API documentation)",
              "default": "yes",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "value": {
              "aliases": [],
              "description": "The value of the DHCP option specified by C(name)",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "vendor_class": {
              "aliases": [],
              "description": "The name of the space this DHCP option is associated to",
              "default": "DHCP",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "provider": {
          "aliases": [],
          "description": "A dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote instance of NIOS WAPI over REST\nValue can also be specified using C(INFOBLOX_HOST) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "http_pool_connections": {
              "aliases": [],
              "description": "Insert decription here",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "http_pool_maxsize": {
              "aliases": [],
              "description": "Insert description here",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "http_request_timeout": {
              "aliases": [],
              "description": "The amount of time before to wait before receiving a response\nValue can also be specified using C(INFOBLOX_HTTP_REQUEST_TIMEOUT) environment variable.",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "max_results": {
              "aliases": [],
              "description": "Specifies the maximum number of objects to be returned, if set to a negative number the appliance will return an error when the number of returned objects would exceed the setting.\nValue can also be specified using C(INFOBLOX_MAX_RESULTS) environment variable.",
              "default": "1000",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "max_retries": {
              "aliases": [],
              "description": "Configures the number of attempted retries before the connection is declared usable\nValue can also be specified using C(INFOBLOX_MAX_RETRIES) environment variable.",
              "default": "3",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote instance of NIOS.\nValue can also be specified using C(INFOBLOX_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "silent_ssl_warnings": {
              "aliases": [],
              "description": "Insert description here",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote instance of NIOS.\nValue can also be specified using C(INFOBLOX_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [
                "ssl_verify"
              ],
              "description": "Boolean value to enable or disable verifying SSL certificates\nValue can also be specified using C(INFOBLOX_SSL_VERIFY) environment variable.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "wapi_version": {
              "aliases": [],
              "description": "Specifies the version of WAPI to use\nValue can also be specified using C(INFOBLOX_WAP_VERSION) environment variable.\nUntil ansible 2.8 the default WAPI was 1.4",
              "default": "2.1",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Configures the intended state of the instance of the object on the NIOS server.  When this value is set to C(present), the object is configured on the device and when this value is set to C(absent) the value is removed (if necessary) from the device.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "infoblox-client"
      ],
      "short_description": "Configure Infoblox NIOS DHCP Fixed Address",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Configure an ipv4 dhcp fixed address\n  infoblox.nios_modules.nios_fixed_address:\n    name: ipv4_fixed\n    ipaddr: 192.168.10.1\n    mac: 08:6d:41:e8:fd:e8\n    network: 192.168.10.0/24\n    network_view: default\n    comment: this is a test comment\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Configure an ipv6 dhcp fixed address\n  infoblox.nios_modules.nios_fixed_address:\n    name: ipv6_fixed\n    ipaddr: fe80::1/10\n    mac: 08:6d:41:e8:fd:e8\n    network: fe80::/64\n    network_view: default\n    comment: this is a test comment\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Set dhcp options for an ipv4 fixed address\n  infoblox.nios_modules.nios_fixed_address:\n    name: ipv4_fixed\n    ipaddr: 192.168.10.1\n    mac: 08:6d:41:e8:fd:e8\n    network: 192.168.10.0/24\n    network_view: default\n    comment: this is a test comment\n    options:\n      - name: domain-name\n        value: ansible.com\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Remove an ipv4 dhcp fixed address\n  infoblox.nios_modules.nios_fixed_address:\n    name: ipv4_fixed\n    ipaddr: 192.168.10.1\n    mac: 08:6d:41:e8:fd:e8\n    network: 192.168.10.0/24\n    network_view: default\n    state: absent\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n"
  },
  "infoblox.nios_modules.nios_host_record": {
    "doc": {
      "description": "Adds and/or removes instances of host record objects from Infoblox NIOS servers.  This module manages NIOS C(record:host) objects using the Infoblox WAPI interface over REST.\nUpdates instances of host record object from Infoblox NIOS servers.",
      "has_action": false,
      "notes": "This module supports C(check_mode).\nThis module must be run locally, which can be achieved by specifying C(connection: local).\nPlease read the :ref:`nios_guide` for more detailed information on how to use Infoblox with Ansible.",
      "options": {
        "aliases": {
          "aliases": [],
          "description": "Configures an optional list of additional aliases to add to the host record. These are equivalent to CNAMEs but held within a host record. Must be in list format.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "comment": {
          "aliases": [],
          "description": "Configures a text string comment to be associated with the instance of this object.  The provided text string will be configured on the object instance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "configure_for_dns": {
          "aliases": [
            "dns"
          ],
          "description": "Sets the DNS to particular parent. If user needs to bypass DNS user can make the value to false.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "extattrs": {
          "aliases": [],
          "description": "Allows for the configuration of Extensible Attributes on the instance of the object.  This argument accepts a set of key / value pairs for configuration.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "ipv4addrs": {
          "aliases": [
            "ipv4"
          ],
          "description": "Configures the IPv4 addresses for this host record.  This argument accepts a list of values (see suboptions).",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "add": {
              "aliases": [
                "add"
              ],
              "description": "If user wants to add the ipv4 address to an existing host record. Note that with I(add) user will have to keep the I(state) as I(present), as new IP address is allocated to existing host record. See examples.",
              "type": "bool",
              "required": false,
              "version_added": "1.0.0",
              "suboptions": {}
            },
            "configure_for_dhcp": {
              "aliases": [
                "dhcp"
              ],
              "description": "Configure the host_record over DHCP instead of DNS, if user changes it to true, user need to mention MAC address to configure.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "ipv4addr": {
              "aliases": [
                "address"
              ],
              "description": "Configures the IPv4 address for the host record. Users can dynamically allocate ipv4 address to host record by passing dictionary containing, I(nios_next_ip) and I(CIDR network range). If user wants to add or remove the ipv4 address from existing record, I(add/remove) params need to be used. See examples.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "mac": {
              "aliases": [
                "mac"
              ],
              "description": "Configures the hardware MAC address for the host record. If user makes DHCP to true, user need to mention MAC address.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "remove": {
              "aliases": [
                "remove"
              ],
              "description": "If user wants to remove the ipv4 address from an existing host record. Note that with I(remove) user will have to change the I(state) to I(absent), as IP address is de-allocated from an existing host record. See examples.",
              "type": "bool",
              "required": false,
              "version_added": "1.0.0",
              "suboptions": {}
            }
          }
        },
        "ipv6addrs": {
          "aliases": [
            "ipv6"
          ],
          "description": "Configures the IPv6 addresses for the host record.  This argument accepts a list of values (see options).",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "configure_for_dhcp": {
              "aliases": [],
              "description": "Configure the host_record over DHCP instead of DNS, if user changes it to true, user need to mention MAC address to configure.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "ipv6addr": {
              "aliases": [
                "address"
              ],
              "description": "Configures the IPv6 address for the host record.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "mac": {
              "aliases": [
                "mac"
              ],
              "description": "Configures the hardware MAC address for the host record. If user makes DHCP to true, user need to mention MAC address.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "Specifies the fully qualified hostname to add or remove from the system. User can also update the hostname as it is possible to pass a dict containing I(new_name), I(old_name). See examples.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "A dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote instance of NIOS WAPI over REST\nValue can also be specified using C(INFOBLOX_HOST) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "http_pool_connections": {
              "aliases": [],
              "description": "Insert decription here",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "http_pool_maxsize": {
              "aliases": [],
              "description": "Insert description here",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "http_request_timeout": {
              "aliases": [],
              "description": "The amount of time before to wait before receiving a response\nValue can also be specified using C(INFOBLOX_HTTP_REQUEST_TIMEOUT) environment variable.",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "max_results": {
              "aliases": [],
              "description": "Specifies the maximum number of objects to be returned, if set to a negative number the appliance will return an error when the number of returned objects would exceed the setting.\nValue can also be specified using C(INFOBLOX_MAX_RESULTS) environment variable.",
              "default": "1000",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "max_retries": {
              "aliases": [],
              "description": "Configures the number of attempted retries before the connection is declared usable\nValue can also be specified using C(INFOBLOX_MAX_RETRIES) environment variable.",
              "default": "3",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote instance of NIOS.\nValue can also be specified using C(INFOBLOX_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "silent_ssl_warnings": {
              "aliases": [],
              "description": "Insert description here",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote instance of NIOS.\nValue can also be specified using C(INFOBLOX_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [
                "ssl_verify"
              ],
              "description": "Boolean value to enable or disable verifying SSL certificates\nValue can also be specified using C(INFOBLOX_SSL_VERIFY) environment variable.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "wapi_version": {
              "aliases": [],
              "description": "Specifies the version of WAPI to use\nValue can also be specified using C(INFOBLOX_WAP_VERSION) environment variable.\nUntil ansible 2.8 the default WAPI was 1.4",
              "default": "2.1",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Configures the intended state of the instance of the object on the NIOS server.  When this value is set to C(present), the object is configured on the device and when this value is set to C(absent) the value is removed (if necessary) from the device.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "ttl": {
          "aliases": [],
          "description": "Configures the TTL to be associated with this host record.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "view": {
          "aliases": [
            "dns_view"
          ],
          "description": "Sets the DNS view to associate this host record with.  The DNS view must already be configured on the system.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "infoblox-client"
      ],
      "short_description": "Configure Infoblox NIOS host records",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Configure an ipv4 host record\n  infoblox.nios_modules.nios_host_record:\n    name: host.ansible.com\n    ipv4:\n      - address: 192.168.10.1\n    aliases:\n      - cname.ansible.com\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Add a comment to an existing host record\n  infoblox.nios_modules.nios_host_record:\n    name: host.ansible.com\n    ipv4:\n      - address: 192.168.10.1\n    comment: this is a test comment\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Remove a host record from the system\n  infoblox.nios_modules.nios_host_record:\n    name: host.ansible.com\n    state: absent\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Update an ipv4 host record\n  infoblox.nios_modules.nios_host_record:\n    name: {new_name: host-new.ansible.com, old_name: host.ansible.com}\n    ipv4:\n      - address: 192.168.10.1\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Create an ipv4 host record bypassing DNS\n  infoblox.nios_modules.nios_host_record:\n    name: new_host\n    ipv4:\n      - address: 192.168.10.1\n    dns: false\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Create an ipv4 host record over DHCP\n  infoblox.nios_modules.nios_host_record:\n    name: host.ansible.com\n    ipv4:\n      - address: 192.168.10.1\n        dhcp: true\n        mac: 00-80-C8-E3-4C-BD\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Dynamically add host record to next available ip\n  infoblox.nios_modules.nios_host_record:\n    name: host.ansible.com\n    ipv4:\n      - address: {nios_next_ip: 192.168.10.0/24}\n    comment: this is a test comment\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Add ip to host record\n  infoblox.nios_modules.nios_host_record:\n    name: host.ansible.com\n    ipv4:\n      - address: 192.168.10.2\n        add: true\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Remove ip from host record\n  infoblox.nios_modules.nios_host_record:\n    name: host.ansible.com\n    ipv4:\n      - address: 192.168.10.1\n        remove: true\n    state: absent\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n"
  },
  "infoblox.nios_modules.nios_member": {
    "doc": {
      "description": "Adds and/or removes Infoblox NIOS servers.  This module manages NIOS C(member) objects using the Infoblox WAPI interface over REST.",
      "has_action": false,
      "notes": "This module supports C(check_mode).\nThis module must be run locally, which can be achieved by specifying C(connection: local).\nPlease read the :ref:`nios_guide` for more detailed information on how to use Infoblox with Ansible.",
      "options": {
        "comment": {
          "aliases": [],
          "description": "A descriptive comment of the Grid member.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "config_addr_type": {
          "aliases": [],
          "description": "Address configuration type (IPV4/IPV6/BOTH).",
          "default": "IPV4",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "create_token": {
          "aliases": [],
          "description": "Flag for initiating a create token request for pre-provisioned members.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "enable_ha": {
          "aliases": [],
          "description": "If set to True, the member has two physical nodes (HA pair).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "extattrs": {
          "aliases": [],
          "description": "Extensible attributes associated with the object.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "external_syslog_server_enable": {
          "aliases": [],
          "description": "Determines if external syslog servers should be enabled.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "host_name": {
          "aliases": [
            "name"
          ],
          "description": "Specifies the host name of the member to either add or remove from the NIOS instance.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ipv6_setting": {
          "aliases": [],
          "description": "Configures the IPv6 settings for the grid member.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "cidr_prefix": {
              "aliases": [],
              "description": "The IPv6 CIDR prefix for the Grid Member",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "gateway": {
              "aliases": [],
              "description": "The gateway address for the Grid Member",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "virtual_ip": {
              "aliases": [],
              "description": "The IPv6 Address of the Grid Member",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "lan2_enabled": {
          "aliases": [],
          "description": "When set to \"true\", the LAN2 port is enabled as an independent port or as a port for failover purposes.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "lan2_port_setting": {
          "aliases": [],
          "description": "Settings for the Grid member LAN2 port if 'lan2_enabled' is set to \"true\".",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "enabled": {
              "aliases": [],
              "description": "If set to True, then it has its own IP settings.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "network_setting": {
              "aliases": [],
              "description": "If the 'enable' field is set to True, this defines IPv4 network settings for LAN2.",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {
                "address": {
                  "aliases": [],
                  "description": "The IPv4 Address of LAN2",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "gateway": {
                  "aliases": [],
                  "description": "The default gateway of LAN2",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "subnet_mask": {
                  "aliases": [],
                  "description": "The subnet mask of LAN2",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "v6_network_setting": {
              "aliases": [],
              "description": "If the 'enable' field is set to True, this defines IPv6 network settings for LAN2.",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {
                "cidr_prefix": {
                  "aliases": [],
                  "description": "The IPv6 CIDR prefix of LAN2",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "gateway": {
                  "aliases": [],
                  "description": "The gateway address of LAN2",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "virtual_ip": {
                  "aliases": [],
                  "description": "The IPv6 Address of LAN2",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        },
        "mgmt_port_setting": {
          "aliases": [],
          "description": "Settings for the member MGMT port.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "enabled": {
              "aliases": [],
              "description": "Determines if MGMT port settings should be enabled.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "security_access_enabled": {
              "aliases": [],
              "description": "Determines if security access on the MGMT port is enabled or not.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "vpn_enabled": {
              "aliases": [],
              "description": "Determines if VPN on the MGMT port is enabled or not.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "node_info": {
          "aliases": [],
          "description": "Configures the node information list with detailed status report on the operations of the Grid Member.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "lan2_physical_setting": {
              "aliases": [],
              "description": "Physical port settings for the LAN2 interface.",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {
                "auto_port_setting_enabled": {
                  "aliases": [],
                  "description": "Enable or disalbe the auto port setting.",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "duplex": {
                  "aliases": [],
                  "description": "The port duplex; if speed is 1000, duplex must be FULL.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "speed": {
                  "aliases": [],
                  "description": "The port speed; if speed is 1000, duplex is FULL.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "lan_ha_port_setting": {
              "aliases": [],
              "description": "LAN/HA port settings for the node.",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {
                "ha_ip_address": {
                  "aliases": [],
                  "description": "HA IP address.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "ha_port_setting": {
                  "aliases": [],
                  "description": "Physical port settings for the HA interface.",
                  "type": "list",
                  "required": false,
                  "elements": "dict",
                  "suboptions": {
                    "auto_port_setting_enabled": {
                      "aliases": [],
                      "description": "Enable or disalbe the auto port setting.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "duplex": {
                      "aliases": [],
                      "description": "The port duplex; if speed is 1000, duplex must be FULL.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "speed": {
                      "aliases": [],
                      "description": "The port speed; if speed is 1000, duplex is FULL.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "lan_port_setting": {
                  "aliases": [],
                  "description": "Physical port settings for the LAN interface.",
                  "type": "list",
                  "required": false,
                  "elements": "dict",
                  "suboptions": {
                    "auto_port_setting_enabled": {
                      "aliases": [],
                      "description": "Enable or disalbe the auto port setting.",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "duplex": {
                      "aliases": [],
                      "description": "The port duplex; if speed is 1000, duplex must be FULL.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "speed": {
                      "aliases": [],
                      "description": "The port speed; if speed is 1000, duplex is FULL.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "mgmt_ipv6addr": {
                  "aliases": [],
                  "description": "Public IPv6 address for the LAN1 interface.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "mgmt_lan": {
                  "aliases": [],
                  "description": "Public IPv4 address for the LAN1 interface.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "mgmt_network_setting": {
              "aliases": [],
              "description": "Network settings for the MGMT port of the node.",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {
                "address": {
                  "aliases": [],
                  "description": "The IPv4 Address of MGMT",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "gateway": {
                  "aliases": [],
                  "description": "The default gateway of MGMT",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "subnet_mask": {
                  "aliases": [],
                  "description": "The subnet mask of MGMT",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "v6_mgmt_network_setting": {
              "aliases": [],
              "description": "The network settings for the IPv6 MGMT port of the node.",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {
                "cidr_prefix": {
                  "aliases": [],
                  "description": "The IPv6 CIDR prefix of MGMT",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "gateway": {
                  "aliases": [],
                  "description": "The gateway address of MGMT",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "virtual_ip": {
                  "aliases": [],
                  "description": "The IPv6 Address of MGMT",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            }
          }
        },
        "platform": {
          "aliases": [],
          "description": "Configures the Hardware Platform.",
          "default": "INFOBLOX",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pre_provisioning": {
          "aliases": [],
          "description": "Pre-provisioning information.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "hardware_info": {
              "aliases": [],
              "description": "An array of structures that describe the hardware being pre-provisioned.",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {
                "hwmodel": {
                  "aliases": [],
                  "description": "Hardware model",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "hwtype": {
                  "aliases": [],
                  "description": "Hardware type.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "licenses": {
              "aliases": [],
              "description": "An array of license types.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            }
          }
        },
        "provider": {
          "aliases": [],
          "description": "A dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote instance of NIOS WAPI over REST\nValue can also be specified using C(INFOBLOX_HOST) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "http_pool_connections": {
              "aliases": [],
              "description": "Insert decription here",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "http_pool_maxsize": {
              "aliases": [],
              "description": "Insert description here",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "http_request_timeout": {
              "aliases": [],
              "description": "The amount of time before to wait before receiving a response\nValue can also be specified using C(INFOBLOX_HTTP_REQUEST_TIMEOUT) environment variable.",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "max_results": {
              "aliases": [],
              "description": "Specifies the maximum number of objects to be returned, if set to a negative number the appliance will return an error when the number of returned objects would exceed the setting.\nValue can also be specified using C(INFOBLOX_MAX_RESULTS) environment variable.",
              "default": "1000",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "max_retries": {
              "aliases": [],
              "description": "Configures the number of attempted retries before the connection is declared usable\nValue can also be specified using C(INFOBLOX_MAX_RETRIES) environment variable.",
              "default": "3",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote instance of NIOS.\nValue can also be specified using C(INFOBLOX_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "silent_ssl_warnings": {
              "aliases": [],
              "description": "Insert description here",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote instance of NIOS.\nValue can also be specified using C(INFOBLOX_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [
                "ssl_verify"
              ],
              "description": "Boolean value to enable or disable verifying SSL certificates\nValue can also be specified using C(INFOBLOX_SSL_VERIFY) environment variable.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "wapi_version": {
              "aliases": [],
              "description": "Specifies the version of WAPI to use\nValue can also be specified using C(INFOBLOX_WAP_VERSION) environment variable.\nUntil ansible 2.8 the default WAPI was 1.4",
              "default": "2.1",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "router_id": {
          "aliases": [],
          "description": "Virtual router identifier. Provide this ID if \"ha_enabled\" is set to \"true\". This is a unique VRID number (from 1 to 255) for the local subnet.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Configures the intended state of the instance of the object on the NIOS server.  When this value is set to C(present), the object is configured on the device and when this value is set to C(absent) the value is removed (if necessary) from the device.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "syslog_servers": {
          "aliases": [],
          "description": "The list of external syslog servers.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "address": {
              "aliases": [],
              "description": "The server address.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "category_list": {
              "aliases": [],
              "description": "The list of all syslog logging categories.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "connection_type": {
              "aliases": [],
              "description": "The connection type for communicating with this server.(STCP/TCP?UDP)",
              "default": "UDP",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "local_interface": {
              "aliases": [],
              "description": "The local interface through which the appliance sends syslog messages to the syslog server.(ANY/LAN/MGMT)",
              "default": "ANY",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "message_node_id": {
              "aliases": [],
              "description": "Identify the node in the syslog message. (HOSTNAME/IP_HOSTNAME/LAN/MGMT)",
              "default": "LAN",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "message_source": {
              "aliases": [],
              "description": "The source of syslog messages to be sent to the external syslog server.",
              "default": "ANY",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "only_category_list": {
              "aliases": [],
              "description": "The list of selected syslog logging categories. The appliance forwards syslog messages that belong to the selected categories.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "port": {
              "aliases": [],
              "description": "The port this server listens on.",
              "default": "514",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "severity": {
              "aliases": [],
              "description": "The severity filter. The appliance sends log messages of the specified severity and above to the external syslog server.",
              "default": "DEBUG",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "upgrade_group": {
          "aliases": [],
          "description": "The name of the upgrade group to which this Grid member belongs.",
          "default": "Default",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "use_syslog_proxy_setting": {
          "aliases": [],
          "description": "Use flag for external_syslog_server_enable , syslog_servers, syslog_proxy_setting, syslog_size.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vip_setting": {
          "aliases": [],
          "description": "Configures the network settings for the grid member.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "address": {
              "aliases": [],
              "description": "The IPv4 Address of the Grid Member",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "gateway": {
              "aliases": [],
              "description": "The default gateway for the Grid Member",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "subnet_mask": {
              "aliases": [],
              "description": "The subnet mask for the Grid Member",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        }
      },
      "requirements": [
        "infoblox-client"
      ],
      "short_description": "Configure Infoblox NIOS members",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Add a member to the grid with IPv4 address\n  infoblox.nios_modules.nios_member:\n    host_name: member01.localdomain\n    vip_setting:\n      - address: 192.168.1.100\n        subnet_mask: 255.255.255.0\n        gateway: 192.168.1.1\n    config_addr_type: IPV4\n    platform: VNIOS\n    comment: \"Created by Ansible\"\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Add a HA member to the grid\n  infoblox.nios_modules.nios_member:\n    host_name: memberha.localdomain\n    vip_setting:\n      - address: 192.168.1.100\n        subnet_mask: 255.255.255.0\n        gateway: 192.168.1.1\n    config_addr_type: IPV4\n    platform: VNIOS\n    enable_ha: true\n    router_id: 150\n    node_info:\n      - lan_ha_port_setting:\n         - ha_ip_address: 192.168.1.70\n           mgmt_lan: 192.168.1.80\n      - lan_ha_port_setting:\n         - ha_ip_address: 192.168.1.71\n           mgmt_lan: 192.168.1.81\n    comment: \"Created by Ansible\"\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Update the member with pre-provisioning details specified\n  infoblox.nios_modules.nios_member:\n    name: member01.localdomain\n    pre_provisioning:\n      - hardware_info:\n         - hwmodel: IB-VM-820\n           hwtype: IB-VNIOS\n        licenses:\n         - dns\n         - dhcp\n         - enterprise\n         - vnios\n    comment: \"Updated by Ansible\"\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Remove the member\n  infoblox.nios_modules.nios_member:\n    name: member01.localdomain\n    state: absent\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n"
  },
  "infoblox.nios_modules.nios_mx_record": {
    "doc": {
      "description": "Adds and/or removes instances of MX record objects from Infoblox NIOS servers.  This module manages NIOS C(record:mx) objects using the Infoblox WAPI interface over REST.",
      "has_action": false,
      "notes": "This module supports C(check_mode).\nThis module must be run locally, which can be achieved by specifying C(connection: local).\nPlease read the :ref:`nios_guide` for more detailed information on how to use Infoblox with Ansible.",
      "options": {
        "comment": {
          "aliases": [],
          "description": "Configures a text string comment to be associated with the instance of this object.  The provided text string will be configured on the object instance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "extattrs": {
          "aliases": [],
          "description": "Allows for the configuration of Extensible Attributes on the instance of the object.  This argument accepts a set of key / value pairs for configuration.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "mail_exchanger": {
          "aliases": [
            "mx"
          ],
          "description": "Configures the mail exchanger FQDN for this MX record.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Specifies the fully qualified hostname to add or remove from the system.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "preference": {
          "aliases": [],
          "description": "Configures the preference (0-65535) for this MX record.",
          "type": "int",
          "required": true,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "A dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote instance of NIOS WAPI over REST\nValue can also be specified using C(INFOBLOX_HOST) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "http_pool_connections": {
              "aliases": [],
              "description": "Insert decription here",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "http_pool_maxsize": {
              "aliases": [],
              "description": "Insert description here",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "http_request_timeout": {
              "aliases": [],
              "description": "The amount of time before to wait before receiving a response\nValue can also be specified using C(INFOBLOX_HTTP_REQUEST_TIMEOUT) environment variable.",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "max_results": {
              "aliases": [],
              "description": "Specifies the maximum number of objects to be returned, if set to a negative number the appliance will return an error when the number of returned objects would exceed the setting.\nValue can also be specified using C(INFOBLOX_MAX_RESULTS) environment variable.",
              "default": "1000",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "max_retries": {
              "aliases": [],
              "description": "Configures the number of attempted retries before the connection is declared usable\nValue can also be specified using C(INFOBLOX_MAX_RETRIES) environment variable.",
              "default": "3",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote instance of NIOS.\nValue can also be specified using C(INFOBLOX_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "silent_ssl_warnings": {
              "aliases": [],
              "description": "Insert description here",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote instance of NIOS.\nValue can also be specified using C(INFOBLOX_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [
                "ssl_verify"
              ],
              "description": "Boolean value to enable or disable verifying SSL certificates\nValue can also be specified using C(INFOBLOX_SSL_VERIFY) environment variable.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "wapi_version": {
              "aliases": [],
              "description": "Specifies the version of WAPI to use\nValue can also be specified using C(INFOBLOX_WAP_VERSION) environment variable.\nUntil ansible 2.8 the default WAPI was 1.4",
              "default": "2.1",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Configures the intended state of the instance of the object on the NIOS server.  When this value is set to C(present), the object is configured on the device and when this value is set to C(absent) the value is removed (if necessary) from the device.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "ttl": {
          "aliases": [],
          "description": "Configures the TTL to be associated with this host record.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "view": {
          "aliases": [
            "dns_view"
          ],
          "description": "Sets the DNS view to associate this a record with.  The DNS view must already be configured on the system.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "infoblox-client"
      ],
      "short_description": "Configure Infoblox NIOS MX records",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Configure an MX record\n  infoblox.nios_modules.nios_mx_record:\n    name: ansible.com\n    mx: mailhost.ansible.com\n    preference: 0\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Add a comment to an existing MX record\n  infoblox.nios_modules.nios_mx_record:\n    name: ansible.com\n    mx: mailhost.ansible.com\n    preference: 0\n    comment: this is a test comment\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Remove an MX record from the system\n  infoblox.nios_modules.nios_mx_record:\n    name: ansible.com\n    mx: mailhost.ansible.com\n    preference: 0\n    state: absent\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n"
  },
  "infoblox.nios_modules.nios_naptr_record": {
    "doc": {
      "description": "Adds and/or removes instances of NAPTR record objects from Infoblox NIOS servers.  This module manages NIOS C(record:naptr) objects using the Infoblox WAPI interface over REST.",
      "has_action": false,
      "notes": "This module supports C(check_mode).\nThis module must be run locally, which can be achieved by specifying C(connection: local).\nPlease read the :ref:`nios_guide` for more detailed information on how to use Infoblox with Ansible.",
      "options": {
        "comment": {
          "aliases": [],
          "description": "Configures a text string comment to be associated with the instance of this object.  The provided text string will be configured on the object instance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "extattrs": {
          "aliases": [],
          "description": "Allows for the configuration of Extensible Attributes on the instance of the object.  This argument accepts a set of key / value pairs for configuration.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "flags": {
          "aliases": [],
          "description": "Configures the flags field for this NAPTR record. These control the interpretation of the fields for an NAPTR record object. Supported values for the flags field are \"U\", \"S\", \"P\" and \"A\".",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Specifies the fully qualified hostname to add or remove from the system.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "order": {
          "aliases": [],
          "description": "Configures the order (0-65535) for this NAPTR record. This parameter specifies the order in which the NAPTR rules are applied when multiple rules are present.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "preference": {
          "aliases": [],
          "description": "Configures the preference (0-65535) for this NAPTR record. The preference field determines the order NAPTR records are processed when multiple records with the same order parameter are present.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "A dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote instance of NIOS WAPI over REST\nValue can also be specified using C(INFOBLOX_HOST) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "http_pool_connections": {
              "aliases": [],
              "description": "Insert decription here",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "http_pool_maxsize": {
              "aliases": [],
              "description": "Insert description here",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "http_request_timeout": {
              "aliases": [],
              "description": "The amount of time before to wait before receiving a response\nValue can also be specified using C(INFOBLOX_HTTP_REQUEST_TIMEOUT) environment variable.",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "max_results": {
              "aliases": [],
              "description": "Specifies the maximum number of objects to be returned, if set to a negative number the appliance will return an error when the number of returned objects would exceed the setting.\nValue can also be specified using C(INFOBLOX_MAX_RESULTS) environment variable.",
              "default": "1000",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "max_retries": {
              "aliases": [],
              "description": "Configures the number of attempted retries before the connection is declared usable\nValue can also be specified using C(INFOBLOX_MAX_RETRIES) environment variable.",
              "default": "3",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote instance of NIOS.\nValue can also be specified using C(INFOBLOX_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "silent_ssl_warnings": {
              "aliases": [],
              "description": "Insert description here",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote instance of NIOS.\nValue can also be specified using C(INFOBLOX_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [
                "ssl_verify"
              ],
              "description": "Boolean value to enable or disable verifying SSL certificates\nValue can also be specified using C(INFOBLOX_SSL_VERIFY) environment variable.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "wapi_version": {
              "aliases": [],
              "description": "Specifies the version of WAPI to use\nValue can also be specified using C(INFOBLOX_WAP_VERSION) environment variable.\nUntil ansible 2.8 the default WAPI was 1.4",
              "default": "2.1",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "regexp": {
          "aliases": [],
          "description": "Configures the regexp field for this NAPTR record. This is the regular expression-based rewriting rule of the NAPTR record. This should be a POSIX compliant regular expression, including the substitution rule and flags. Refer to RFC 2915 for the field syntax details.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "replacement": {
          "aliases": [],
          "description": "Configures the replacement field for this NAPTR record. For nonterminal NAPTR records, this field specifies the next domain name to look up.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "services": {
          "aliases": [],
          "description": "Configures the services field (128 characters maximum) for this NAPTR record. The services field contains protocol and service identifiers, such as \"http+E2U\" or \"SIPS+D2T\".",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Configures the intended state of the instance of the object on the NIOS server.  When this value is set to C(present), the object is configured on the device and when this value is set to C(absent) the value is removed (if necessary) from the device.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "ttl": {
          "aliases": [],
          "description": "Configures the TTL to be associated with this NAPTR record.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "view": {
          "aliases": [
            "dns_view"
          ],
          "description": "Sets the DNS view to associate this a record with. The DNS view must already be configured on the system.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "infoblox_client"
      ],
      "short_description": "Configure Infoblox NIOS NAPTR records",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Configure an NAPTR record\n  infoblox.nios_modules.nios_naptr_record:\n    name: '*.subscriber-100.ansiblezone.com'\n    order: 1000\n    preference: 10\n    replacement: replacement1.network.ansiblezone.com\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Add a comment to an existing NAPTR record\n  infoblox.nios_modules.nios_naptr_record:\n    name: '*.subscriber-100.ansiblezone.com'\n    order: 1000\n    preference: 10\n    replacement: replacement1.network.ansiblezone.com\n    comment: this is a test comment\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Remove an NAPTR record from the system\n  infoblox.nios_modules.nios_naptr_record:\n    name: '*.subscriber-100.ansiblezone.com'\n    order: 1000\n    preference: 10\n    replacement: replacement1.network.ansiblezone.com\n    state: absent\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n"
  },
  "infoblox.nios_modules.nios_network": {
    "doc": {
      "description": "Adds and/or removes instances of network objects from Infoblox NIOS servers.  This module manages NIOS C(network) objects using the Infoblox WAPI interface over REST.\nSupports both IPV4 and IPV6 internet protocols.",
      "has_action": false,
      "notes": "This module supports C(check_mode).\nThis module must be run locally, which can be achieved by specifying C(connection: local).\nPlease read the :ref:`nios_guide` for more detailed information on how to use Infoblox with Ansible.",
      "options": {
        "comment": {
          "aliases": [],
          "description": "Configures a text string comment to be associated with the instance of this object.  The provided text string will be configured on the object instance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "container": {
          "aliases": [],
          "description": "If set to true it'll create the network container to be added or removed from the system.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "extattrs": {
          "aliases": [],
          "description": "Allows for the configuration of Extensible Attributes on the instance of the object.  This argument accepts a set of key / value pairs for configuration.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "network": {
          "aliases": [
            "name",
            "cidr"
          ],
          "description": "Specifies the network to add or remove from the system.  The value should use CIDR notation.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "network_view": {
          "aliases": [],
          "description": "Configures the name of the network view to associate with this configured instance.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "options": {
          "aliases": [],
          "description": "Configures the set of DHCP options to be included as part of the configured network instance.  This argument accepts a list of values (see suboptions).  When configuring suboptions at least one of C(name) or C(num) must be specified.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "The name of the DHCP option to configure. The standard options are C(router), C(router-templates), C(domain-name-servers), C(domain-name), C(broadcast-address), C(broadcast-address-offset), C(dhcp-lease-time), and C(dhcp6.name-servers).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "num": {
              "aliases": [],
              "description": "The number of the DHCP option to configure",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "use_option": {
              "aliases": [],
              "description": "Only applies to a subset of options (see NIOS API documentation)",
              "default": "yes",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "value": {
              "aliases": [],
              "description": "The value of the DHCP option specified by C(name)",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "vendor_class": {
              "aliases": [],
              "description": "The name of the space this DHCP option is associated to",
              "default": "DHCP",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "provider": {
          "aliases": [],
          "description": "A dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote instance of NIOS WAPI over REST\nValue can also be specified using C(INFOBLOX_HOST) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "http_pool_connections": {
              "aliases": [],
              "description": "Insert decription here",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "http_pool_maxsize": {
              "aliases": [],
              "description": "Insert description here",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "http_request_timeout": {
              "aliases": [],
              "description": "The amount of time before to wait before receiving a response\nValue can also be specified using C(INFOBLOX_HTTP_REQUEST_TIMEOUT) environment variable.",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "max_results": {
              "aliases": [],
              "description": "Specifies the maximum number of objects to be returned, if set to a negative number the appliance will return an error when the number of returned objects would exceed the setting.\nValue can also be specified using C(INFOBLOX_MAX_RESULTS) environment variable.",
              "default": "1000",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "max_retries": {
              "aliases": [],
              "description": "Configures the number of attempted retries before the connection is declared usable\nValue can also be specified using C(INFOBLOX_MAX_RETRIES) environment variable.",
              "default": "3",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote instance of NIOS.\nValue can also be specified using C(INFOBLOX_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "silent_ssl_warnings": {
              "aliases": [],
              "description": "Insert description here",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote instance of NIOS.\nValue can also be specified using C(INFOBLOX_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [
                "ssl_verify"
              ],
              "description": "Boolean value to enable or disable verifying SSL certificates\nValue can also be specified using C(INFOBLOX_SSL_VERIFY) environment variable.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "wapi_version": {
              "aliases": [],
              "description": "Specifies the version of WAPI to use\nValue can also be specified using C(INFOBLOX_WAP_VERSION) environment variable.\nUntil ansible 2.8 the default WAPI was 1.4",
              "default": "2.1",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Configures the intended state of the instance of the object on the NIOS server.  When this value is set to C(present), the object is configured on the device and when this value is set to C(absent) the value is removed (if necessary) from the device.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "infoblox-client"
      ],
      "short_description": "Configure Infoblox NIOS network object",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Configure a network ipv4\n  infoblox.nios_modules.nios_network:\n    network: 192.168.10.0/24\n    comment: this is a test comment\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Configure a network ipv6\n  infoblox.nios_modules.nios_network:\n    network: fe80::/64\n    comment: this is a test comment\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Set dhcp options for a network ipv4\n  infoblox.nios_modules.nios_network:\n    network: 192.168.10.0/24\n    comment: this is a test comment\n    options:\n      - name: domain-name\n        value: ansible.com\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Remove a network ipv4\n  infoblox.nios_modules.nios_network:\n    network: 192.168.10.0/24\n    state: absent\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Configure an ipv4 network container\n  infoblox.nios_modules.nios_network:\n    network: 192.168.10.0/24\n    container: true\n    comment: test network container\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Configure an ipv6 network container\n  infoblox.nios_modules.nios_network:\n    network: fe80::/64\n    container: true\n    comment: test network container\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Remove an ipv4 network container\n  infoblox.nios_modules.nios_network:\n    networkr: 192.168.10.0/24\n    container: true\n    comment: test network container\n    state: absent\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n"
  },
  "infoblox.nios_modules.nios_network_view": {
    "doc": {
      "description": "Adds and/or removes instances of network view objects from Infoblox NIOS servers.  This module manages NIOS C(networkview) objects using the Infoblox WAPI interface over REST.\nUpdates instances of network view object from Infoblox NIOS servers.",
      "has_action": false,
      "notes": "This module supports C(check_mode).\nThis module must be run locally, which can be achieved by specifying C(connection: local).\nPlease read the :ref:`nios_guide` for more detailed information on how to use Infoblox with Ansible.",
      "options": {
        "comment": {
          "aliases": [],
          "description": "Configures a text string comment to be associated with the instance of this object.  The provided text string will be configured on the object instance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "extattrs": {
          "aliases": [],
          "description": "Allows for the configuration of Extensible Attributes on the instance of the object.  This argument accepts a set of key / value pairs for configuration.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "network_view"
          ],
          "description": "Specifies the fully qualified hostname to add or remove from the system. User can also update the hostname as it is possible to pass a dict containing I(new_name), I(old_name). See examples.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "A dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote instance of NIOS WAPI over REST\nValue can also be specified using C(INFOBLOX_HOST) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "http_pool_connections": {
              "aliases": [],
              "description": "Insert decription here",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "http_pool_maxsize": {
              "aliases": [],
              "description": "Insert description here",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "http_request_timeout": {
              "aliases": [],
              "description": "The amount of time before to wait before receiving a response\nValue can also be specified using C(INFOBLOX_HTTP_REQUEST_TIMEOUT) environment variable.",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "max_results": {
              "aliases": [],
              "description": "Specifies the maximum number of objects to be returned, if set to a negative number the appliance will return an error when the number of returned objects would exceed the setting.\nValue can also be specified using C(INFOBLOX_MAX_RESULTS) environment variable.",
              "default": "1000",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "max_retries": {
              "aliases": [],
              "description": "Configures the number of attempted retries before the connection is declared usable\nValue can also be specified using C(INFOBLOX_MAX_RETRIES) environment variable.",
              "default": "3",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote instance of NIOS.\nValue can also be specified using C(INFOBLOX_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "silent_ssl_warnings": {
              "aliases": [],
              "description": "Insert description here",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote instance of NIOS.\nValue can also be specified using C(INFOBLOX_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [
                "ssl_verify"
              ],
              "description": "Boolean value to enable or disable verifying SSL certificates\nValue can also be specified using C(INFOBLOX_SSL_VERIFY) environment variable.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "wapi_version": {
              "aliases": [],
              "description": "Specifies the version of WAPI to use\nValue can also be specified using C(INFOBLOX_WAP_VERSION) environment variable.\nUntil ansible 2.8 the default WAPI was 1.4",
              "default": "2.1",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Configures the intended state of the instance of the object on the NIOS server.  When this value is set to C(present), the object is configured on the device and when this value is set to C(absent) the value is removed (if necessary) from the device.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "infoblox-client"
      ],
      "short_description": "Configure Infoblox NIOS network views",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Configure a new network view\n  infoblox.nios_modules.nios_network_view:\n    name: ansible\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Update the comment for network view\n  infoblox.nios_modules.nios_network_view:\n    name: ansible\n    comment: this is an example comment\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Remove the network view\n  infoblox.nios_modules.nios_network_view:\n    name: ansible\n    state: absent\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Update an existing network view\n  infoblox.nios_modules.nios_network_view:\n    name: {new_name: ansible-new, old_name: ansible}\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n"
  },
  "infoblox.nios_modules.nios_nsgroup": {
    "doc": {
      "description": "Adds and/or removes nameserver groups form Infoblox NIOS servers. This module manages NIOS C(nsgroup) objects using the Infoblox. WAPI interface over REST.",
      "has_action": false,
      "notes": "This module supports C(check_mode).\nThis module must be run locally, which can be achieved by specifying C(connection: local).\nPlease read the :ref:`nios_guide` for more detailed information on how to use Infoblox with Ansible.",
      "options": {
        "comment": {
          "aliases": [],
          "description": "Configures a text string comment to be associated with the instance of this object.  The provided text string will be configured on the object instance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "extattrs": {
          "aliases": [],
          "description": "Allows for the configuration of Extensible Attributes on the instance of the object.  This argument accepts a set of key / value pairs for configuration.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "external_primaries": {
          "aliases": [],
          "description": "Configures a list of external nameservers (non-members of the grid). This option is required when setting I(use_external_primaries) to C(true).",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "address": {
              "aliases": [],
              "description": "Configures the IP address of the external nameserver",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Set a label for the external nameserver",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "stealth": {
              "aliases": [],
              "description": "Configure the external nameserver as stealth server (without NS record) in the zones.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "tsig_key": {
              "aliases": [],
              "description": "Set a DNS TSIG key for the nameserver to secure zone transfers (AFXRs).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "tsig_key_alg": {
              "aliases": [],
              "description": "Provides the algorithm used for the I(tsig_key) in use.",
              "default": "HMAC-MD5",
              "type": "str",
              "required": false,
              "choices": [
                "HMAC-MD5",
                "HMAC-SHA256"
              ],
              "suboptions": {}
            },
            "tsig_key_name": {
              "aliases": [],
              "description": "Sets a label for the I(tsig_key) value",
              "type": "str",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "external_secondaries": {
          "aliases": [],
          "description": "Allows to provide a list of external secondary nameservers, that are not members of the grid.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "address": {
              "aliases": [],
              "description": "Configures the IP address of the external nameserver",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Set a label for the external nameserver",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "stealth": {
              "aliases": [],
              "description": "Configure the external nameserver as stealth server (without NS record) in the zones.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "tsig_key": {
              "aliases": [],
              "description": "Set a DNS TSIG key for the nameserver to secure zone transfers (AFXRs).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "tsig_key_alg": {
              "aliases": [],
              "description": "Provides the algorithm used for the I(tsig_key) in use.",
              "default": "HMAC-MD5",
              "type": "str",
              "required": false,
              "choices": [
                "HMAC-MD5",
                "HMAC-SHA256"
              ],
              "suboptions": {}
            },
            "tsig_key_name": {
              "aliases": [],
              "description": "Sets a label for the I(tsig_key) value",
              "type": "str",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "grid_primary": {
          "aliases": [],
          "description": "This host is to be used as primary server in this nameserver group. It must be a grid member. This option is required when setting I(use_external_primaries) to C(false).",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "enable_preferred_primaries": {
              "aliases": [],
              "description": "This flag represents whether the preferred_primaries field values of this member are used (see Infoblox WAPI docs).",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "grid_replicate": {
              "aliases": [],
              "description": "Use DNS zone transfers if set to C(True) or ID Grid Replication if set to C(False).",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "lead": {
              "aliases": [],
              "description": "This flag controls if the grid lead secondary nameserver performs zone transfers to non lead secondaries.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Provide the name of the grid member to identify the host.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "preferred_primaries": {
              "aliases": [],
              "description": "Provide a list of elements like in I(external_primaries) to set the precedence of preferred primary nameservers.",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {
                "address": {
                  "aliases": [],
                  "description": "Configures the IP address of the external nameserver",
                  "type": "str",
                  "required": true,
                  "suboptions": {}
                },
                "name": {
                  "aliases": [],
                  "description": "Set a label for the external nameserver",
                  "type": "str",
                  "required": true,
                  "suboptions": {}
                },
                "stealth": {
                  "aliases": [],
                  "description": "Configure the external nameserver as stealth server (without NS record) in the zones.",
                  "default": "False",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "tsig_key": {
                  "aliases": [],
                  "description": "Set a DNS TSIG key for the nameserver to secure zone transfers (AFXRs).",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "tsig_key_alg": {
                  "aliases": [],
                  "description": "Provides the algorithm used for the I(tsig_key) in use.",
                  "default": "HMAC-MD5",
                  "type": "str",
                  "required": false,
                  "choices": [
                    "HMAC-MD5",
                    "HMAC-SHA256"
                  ],
                  "suboptions": {}
                },
                "tsig_key_name": {
                  "aliases": [],
                  "description": "Sets a label for the I(tsig_key) value",
                  "type": "str",
                  "required": true,
                  "suboptions": {}
                }
              }
            },
            "stealth": {
              "aliases": [],
              "description": "Configure the external nameserver as stealth server (without NS record) in the zones.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "grid_secondaries": {
          "aliases": [],
          "description": "Configures the list of grid member hosts that act as secondary nameservers. This option is required when setting I(use_external_primaries) to C(true).",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "enable_preferred_primaries": {
              "aliases": [],
              "description": "This flag represents whether the preferred_primaries field values of this member are used (see Infoblox WAPI docs).",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "grid_replicate": {
              "aliases": [],
              "description": "Use DNS zone transfers if set to C(True) or ID Grid Replication if set to C(False)",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "lead": {
              "aliases": [],
              "description": "This flag controls if the grid lead secondary nameserver performs zone transfers to non lead secondaries.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Provide the name of the grid member to identify the host.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "preferred_primaries": {
              "aliases": [],
              "description": "Provide a list of elements like in I(external_primaries) to set the precedence of preferred primary nameservers.",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {
                "address": {
                  "aliases": [],
                  "description": "Configures the IP address of the external nameserver",
                  "type": "str",
                  "required": true,
                  "suboptions": {}
                },
                "name": {
                  "aliases": [],
                  "description": "Set a label for the external nameserver",
                  "type": "str",
                  "required": true,
                  "suboptions": {}
                },
                "stealth": {
                  "aliases": [],
                  "description": "Configure the external nameserver as stealth server (without NS record) in the zones.",
                  "default": "False",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "tsig_key": {
                  "aliases": [],
                  "description": "Set a DNS TSIG key for the nameserver to secure zone transfers (AFXRs).",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "tsig_key_alg": {
                  "aliases": [],
                  "description": "Provides the algorithm used for the I(tsig_key) in use.",
                  "default": "HMAC-MD5",
                  "type": "str",
                  "required": false,
                  "choices": [
                    "HMAC-MD5",
                    "HMAC-SHA256"
                  ],
                  "suboptions": {}
                },
                "tsig_key_name": {
                  "aliases": [],
                  "description": "Sets a label for the I(tsig_key) value",
                  "type": "str",
                  "required": true,
                  "suboptions": {}
                }
              }
            },
            "stealth": {
              "aliases": [],
              "description": "Configure the external nameserver as stealth server (without NS record) in the zones.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "is_grid_default": {
          "aliases": [],
          "description": "If set to C(True) this nsgroup will become the default nameserver group for new zones.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Specifies the name of the NIOS nameserver group to be managed.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "A dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote instance of NIOS WAPI over REST\nValue can also be specified using C(INFOBLOX_HOST) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "http_pool_connections": {
              "aliases": [],
              "description": "Insert decription here",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "http_pool_maxsize": {
              "aliases": [],
              "description": "Insert description here",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "http_request_timeout": {
              "aliases": [],
              "description": "The amount of time before to wait before receiving a response\nValue can also be specified using C(INFOBLOX_HTTP_REQUEST_TIMEOUT) environment variable.",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "max_results": {
              "aliases": [],
              "description": "Specifies the maximum number of objects to be returned, if set to a negative number the appliance will return an error when the number of returned objects would exceed the setting.\nValue can also be specified using C(INFOBLOX_MAX_RESULTS) environment variable.",
              "default": "1000",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "max_retries": {
              "aliases": [],
              "description": "Configures the number of attempted retries before the connection is declared usable\nValue can also be specified using C(INFOBLOX_MAX_RETRIES) environment variable.",
              "default": "3",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote instance of NIOS.\nValue can also be specified using C(INFOBLOX_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "silent_ssl_warnings": {
              "aliases": [],
              "description": "Insert description here",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote instance of NIOS.\nValue can also be specified using C(INFOBLOX_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [
                "ssl_verify"
              ],
              "description": "Boolean value to enable or disable verifying SSL certificates\nValue can also be specified using C(INFOBLOX_SSL_VERIFY) environment variable.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "wapi_version": {
              "aliases": [],
              "description": "Specifies the version of WAPI to use\nValue can also be specified using C(INFOBLOX_WAP_VERSION) environment variable.\nUntil ansible 2.8 the default WAPI was 1.4",
              "default": "2.1",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Configures the intended state of the instance of the object on the NIOS server.  When this value is set to C(present), the object is configured on the device and when this value is set to C(absent) the value is removed (if necessary) from the device.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "use_external_primary": {
          "aliases": [],
          "description": "This flag controls whether the group is using an external primary nameserver. Note that modification of this field requires passing values for I(grid_secondaries) and I(external_primaries).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "infoblox_client"
      ],
      "short_description": "Configure InfoBlox DNS Nameserver Groups",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create simple infoblox nameserver group\n  infoblox.nios_modules.nios_nsgroup:\n    name: my-simple-group\n    comment: \"this is a simple nameserver group\"\n    grid_primary:\n      - name: infoblox-test.example.com\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Create infoblox nameserver group with external primaries\n  infoblox.nios_modules.nios_nsgroup:\n    name: my-example-group\n    use_external_primary: true\n    comment: \"this is my example nameserver group\"\n    external_primaries: \"{{ ext_nameservers }}\"\n    grid_secondaries:\n      - name: infoblox-test.example.com\n        lead: True\n        preferred_primaries: \"{{ ext_nameservers }}\"\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Delete infoblox nameserver group\n  infoblox.nios_modules.nios_nsgroup:\n    name: my-simple-group\n    comment: \"this is a simple nameserver group\"\n    grid_primary:\n      - name: infoblox-test.example.com\n    state: absent\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n"
  },
  "infoblox.nios_modules.nios_ptr_record": {
    "doc": {
      "description": "Adds and/or removes instances of PTR record objects from Infoblox NIOS servers.  This module manages NIOS C(record:ptr) objects using the Infoblox WAPI interface over REST.",
      "has_action": false,
      "notes": "This module supports C(check_mode).\nThis module must be run locally, which can be achieved by specifying C(connection: local).\nPlease read the :ref:`nios_guide` for more detailed information on how to use Infoblox with Ansible.",
      "options": {
        "comment": {
          "aliases": [],
          "description": "Configures a text string comment to be associated with the instance of this object.  The provided text string will be configured on the object instance. Maximum 256 characters.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "extattrs": {
          "aliases": [],
          "description": "Allows for the configuration of Extensible Attributes on the instance of the object.  This argument accepts a set of key / value pairs for configuration.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "ipv4addr": {
          "aliases": [
            "ipv4"
          ],
          "description": "The IPv4 Address of the record. Mutually exclusive with the ipv6addr.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipv6addr": {
          "aliases": [
            "ipv6"
          ],
          "description": "The IPv6 Address of the record. Mutually exclusive with the ipv4addr.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the DNS PTR record in FQDN format to add or remove from the system. The field is required only for an PTR object in Forward Mapping Zone.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "A dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote instance of NIOS WAPI over REST\nValue can also be specified using C(INFOBLOX_HOST) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "http_pool_connections": {
              "aliases": [],
              "description": "Insert decription here",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "http_pool_maxsize": {
              "aliases": [],
              "description": "Insert description here",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "http_request_timeout": {
              "aliases": [],
              "description": "The amount of time before to wait before receiving a response\nValue can also be specified using C(INFOBLOX_HTTP_REQUEST_TIMEOUT) environment variable.",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "max_results": {
              "aliases": [],
              "description": "Specifies the maximum number of objects to be returned, if set to a negative number the appliance will return an error when the number of returned objects would exceed the setting.\nValue can also be specified using C(INFOBLOX_MAX_RESULTS) environment variable.",
              "default": "1000",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "max_retries": {
              "aliases": [],
              "description": "Configures the number of attempted retries before the connection is declared usable\nValue can also be specified using C(INFOBLOX_MAX_RETRIES) environment variable.",
              "default": "3",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote instance of NIOS.\nValue can also be specified using C(INFOBLOX_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "silent_ssl_warnings": {
              "aliases": [],
              "description": "Insert description here",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote instance of NIOS.\nValue can also be specified using C(INFOBLOX_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [
                "ssl_verify"
              ],
              "description": "Boolean value to enable or disable verifying SSL certificates\nValue can also be specified using C(INFOBLOX_SSL_VERIFY) environment variable.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "wapi_version": {
              "aliases": [],
              "description": "Specifies the version of WAPI to use\nValue can also be specified using C(INFOBLOX_WAP_VERSION) environment variable.\nUntil ansible 2.8 the default WAPI was 1.4",
              "default": "2.1",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "ptrdname": {
          "aliases": [],
          "description": "The domain name of the DNS PTR record in FQDN format.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Configures the intended state of the instance of the object on the NIOS server.  When this value is set to C(present), the object is configured on the device and when this value is set to C(absent) the value is removed (if necessary) from the device.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "ttl": {
          "aliases": [],
          "description": "Time To Live (TTL) value for the record. A 32-bit unsigned integer that represents the duration, in seconds, that the record is valid (cached). Zero indicates that the record should not be cached.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "view": {
          "aliases": [
            "dns_view"
          ],
          "description": "Sets the DNS view to associate this a record with. The DNS view must already be configured on the system.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "infoblox_client"
      ],
      "short_description": "Configure Infoblox NIOS PTR records",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create a PTR Record\n  infoblox.nios_modules.nios_ptr_record:\n    ipv4: 192.168.10.1\n    ptrdname: host.ansible.com\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Delete a PTR Record\n  infoblox.nios_modules.nios_ptr_record:\n    ipv4: 192.168.10.1\n    ptrdname: host.ansible.com\n    state: absent\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n"
  },
  "infoblox.nios_modules.nios_restartservices": {
    "doc": {
      "description": "Restart grid services.\nWhen invoked without any options, will restart ALL services on the default restart group IF NEEDED.",
      "has_action": false,
      "notes": "This module supports C(check_mode).\nThis module must be run locally, which can be achieved by specifying C(connection: local).\nPlease read the :ref:`nios_guide` for more detailed information on how to use Infoblox with Ansible.",
      "options": {
        "groups": {
          "aliases": [],
          "description": "The list of the Service Restart Groups to restart.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "members": {
          "aliases": [],
          "description": "The list of the Grid Members to restart.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "mode": {
          "aliases": [],
          "description": "The restart method in case of grid restart.",
          "type": "str",
          "required": false,
          "choices": [
            "GROUPED",
            "SEQUENTIAL",
            "SIMULTANEOUS"
          ],
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "A dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote instance of NIOS WAPI over REST\nValue can also be specified using C(INFOBLOX_HOST) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "http_pool_connections": {
              "aliases": [],
              "description": "Insert decription here",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "http_pool_maxsize": {
              "aliases": [],
              "description": "Insert description here",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "http_request_timeout": {
              "aliases": [],
              "description": "The amount of time before to wait before receiving a response\nValue can also be specified using C(INFOBLOX_HTTP_REQUEST_TIMEOUT) environment variable.",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "max_results": {
              "aliases": [],
              "description": "Specifies the maximum number of objects to be returned, if set to a negative number the appliance will return an error when the number of returned objects would exceed the setting.\nValue can also be specified using C(INFOBLOX_MAX_RESULTS) environment variable.",
              "default": "1000",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "max_retries": {
              "aliases": [],
              "description": "Configures the number of attempted retries before the connection is declared usable\nValue can also be specified using C(INFOBLOX_MAX_RETRIES) environment variable.",
              "default": "3",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote instance of NIOS.\nValue can also be specified using C(INFOBLOX_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "silent_ssl_warnings": {
              "aliases": [],
              "description": "Insert description here",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote instance of NIOS.\nValue can also be specified using C(INFOBLOX_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [
                "ssl_verify"
              ],
              "description": "Boolean value to enable or disable verifying SSL certificates\nValue can also be specified using C(INFOBLOX_SSL_VERIFY) environment variable.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "wapi_version": {
              "aliases": [],
              "description": "Specifies the version of WAPI to use\nValue can also be specified using C(INFOBLOX_WAP_VERSION) environment variable.\nUntil ansible 2.8 the default WAPI was 1.4",
              "default": "2.1",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "restart_option": {
          "aliases": [],
          "description": "Controls whether services are restarted unconditionally or when needed",
          "default": "RESTART_IF_NEEDED",
          "type": "str",
          "required": false,
          "choices": [
            "RESTART_IF_NEEDED",
            "FORCE_RESTART"
          ],
          "suboptions": {}
        },
        "services": {
          "aliases": [],
          "description": "The list of services the restart applicable to.",
          "default": "ALL",
          "type": "list",
          "required": false,
          "choices": [
            "ALL",
            "DNS",
            "DHCP",
            "DHCPV4",
            "DHCPV6"
          ],
          "elements": "str",
          "suboptions": {}
        }
      },
      "requirements": [
        "infoblox-client"
      ],
      "short_description": "Restart grid services.",
      "version_added": "1.1.0"
    },
    "examples": "\n- name: Restart all grid services if needed.\n  infoblox.nios_modules.nios_restartservices:\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Restart DNS service if needed.\n  infoblox.nios_modules.nios_restartservices:\n    services:\n      - DNS\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n"
  },
  "infoblox.nios_modules.nios_srv_record": {
    "doc": {
      "description": "Adds and/or removes instances of SRV record objects from Infoblox NIOS servers.  This module manages NIOS C(record:srv) objects using the Infoblox WAPI interface over REST.",
      "has_action": false,
      "notes": "This module supports C(check_mode).\nThis module must be run locally, which can be achieved by specifying C(connection: local).\nPlease read the :ref:`nios_guide` for more detailed information on how to use Infoblox with Ansible.",
      "options": {
        "comment": {
          "aliases": [],
          "description": "Configures a text string comment to be associated with the instance of this object.  The provided text string will be configured on the object instance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "extattrs": {
          "aliases": [],
          "description": "Allows for the configuration of Extensible Attributes on the instance of the object.  This argument accepts a set of key / value pairs for configuration.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Specifies the fully qualified hostname to add or remove from the system.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "Configures the port (0-65535) of this SRV record.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "priority": {
          "aliases": [],
          "description": "Configures the priority (0-65535) for this SRV record.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "A dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote instance of NIOS WAPI over REST\nValue can also be specified using C(INFOBLOX_HOST) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "http_pool_connections": {
              "aliases": [],
              "description": "Insert decription here",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "http_pool_maxsize": {
              "aliases": [],
              "description": "Insert description here",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "http_request_timeout": {
              "aliases": [],
              "description": "The amount of time before to wait before receiving a response\nValue can also be specified using C(INFOBLOX_HTTP_REQUEST_TIMEOUT) environment variable.",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "max_results": {
              "aliases": [],
              "description": "Specifies the maximum number of objects to be returned, if set to a negative number the appliance will return an error when the number of returned objects would exceed the setting.\nValue can also be specified using C(INFOBLOX_MAX_RESULTS) environment variable.",
              "default": "1000",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "max_retries": {
              "aliases": [],
              "description": "Configures the number of attempted retries before the connection is declared usable\nValue can also be specified using C(INFOBLOX_MAX_RETRIES) environment variable.",
              "default": "3",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote instance of NIOS.\nValue can also be specified using C(INFOBLOX_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "silent_ssl_warnings": {
              "aliases": [],
              "description": "Insert description here",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote instance of NIOS.\nValue can also be specified using C(INFOBLOX_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [
                "ssl_verify"
              ],
              "description": "Boolean value to enable or disable verifying SSL certificates\nValue can also be specified using C(INFOBLOX_SSL_VERIFY) environment variable.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "wapi_version": {
              "aliases": [],
              "description": "Specifies the version of WAPI to use\nValue can also be specified using C(INFOBLOX_WAP_VERSION) environment variable.\nUntil ansible 2.8 the default WAPI was 1.4",
              "default": "2.1",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Configures the intended state of the instance of the object on the NIOS server.  When this value is set to C(present), the object is configured on the device and when this value is set to C(absent) the value is removed (if necessary) from the device.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "target": {
          "aliases": [],
          "description": "Configures the target FQDN for this SRV record.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ttl": {
          "aliases": [],
          "description": "Configures the TTL to be associated with this host record.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "view": {
          "aliases": [
            "dns_view"
          ],
          "description": "Sets the DNS view to associate this a record with.  The DNS view must already be configured on the system.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "weight": {
          "aliases": [],
          "description": "Configures the weight (0-65535) for this SRV record.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "infoblox-client"
      ],
      "short_description": "Configure Infoblox NIOS SRV records",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Configure an SRV record\n  infoblox.nios_modules.nios_srv_record:\n    name: _sip._tcp.service.ansible.com\n    port: 5080\n    priority: 10\n    target: service1.ansible.com\n    weight: 10\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Add a comment to an existing SRV record\n  infoblox.nios_modules.nios_srv_record:\n    name: _sip._tcp.service.ansible.com\n    port: 5080\n    priority: 10\n    target: service1.ansible.com\n    weight: 10\n    comment: this is a test comment\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Remove an SRV record from the system\n  infoblox.nios_modules.nios_srv_record:\n    name: _sip._tcp.service.ansible.com\n    port: 5080\n    priority: 10\n    target: service1.ansible.com\n    weight: 10\n    state: absent\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n"
  },
  "infoblox.nios_modules.nios_txt_record": {
    "doc": {
      "description": "Adds and/or removes instances of txt record objects from Infoblox NIOS servers.  This module manages NIOS C(record:txt) objects using the Infoblox WAPI interface over REST.",
      "has_action": false,
      "notes": "This module supports C(check_mode).\nThis module must be run locally, which can be achieved by specifying C(connection: local).\nPlease read the :ref:`nios_guide` for more detailed information on how to use Infoblox with Ansible.",
      "options": {
        "comment": {
          "aliases": [],
          "description": "Configures a text string comment to be associated with the instance of this object.  The provided text string will be configured on the object instance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "extattrs": {
          "aliases": [],
          "description": "Allows for the configuration of Extensible Attributes on the instance of the object.  This argument accepts a set of key / value pairs for configuration.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Specifies the fully qualified hostname to add or remove from the system.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "A dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote instance of NIOS WAPI over REST\nValue can also be specified using C(INFOBLOX_HOST) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "http_pool_connections": {
              "aliases": [],
              "description": "Insert decription here",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "http_pool_maxsize": {
              "aliases": [],
              "description": "Insert description here",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "http_request_timeout": {
              "aliases": [],
              "description": "The amount of time before to wait before receiving a response\nValue can also be specified using C(INFOBLOX_HTTP_REQUEST_TIMEOUT) environment variable.",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "max_results": {
              "aliases": [],
              "description": "Specifies the maximum number of objects to be returned, if set to a negative number the appliance will return an error when the number of returned objects would exceed the setting.\nValue can also be specified using C(INFOBLOX_MAX_RESULTS) environment variable.",
              "default": "1000",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "max_retries": {
              "aliases": [],
              "description": "Configures the number of attempted retries before the connection is declared usable\nValue can also be specified using C(INFOBLOX_MAX_RETRIES) environment variable.",
              "default": "3",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote instance of NIOS.\nValue can also be specified using C(INFOBLOX_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "silent_ssl_warnings": {
              "aliases": [],
              "description": "Insert description here",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote instance of NIOS.\nValue can also be specified using C(INFOBLOX_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [
                "ssl_verify"
              ],
              "description": "Boolean value to enable or disable verifying SSL certificates\nValue can also be specified using C(INFOBLOX_SSL_VERIFY) environment variable.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "wapi_version": {
              "aliases": [],
              "description": "Specifies the version of WAPI to use\nValue can also be specified using C(INFOBLOX_WAP_VERSION) environment variable.\nUntil ansible 2.8 the default WAPI was 1.4",
              "default": "2.1",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Configures the intended state of the instance of the object on the NIOS server.  When this value is set to C(present), the object is configured on the device and when this value is set to C(absent) the value is removed (if necessary) from the device.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "text": {
          "aliases": [],
          "description": "Text associated with the record. It can contain up to 255 bytes per substring, up to a total of 512 bytes. To enter leading, trailing, or embedded spaces in the text, add quotes around the text to preserve the spaces.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ttl": {
          "aliases": [],
          "description": "Configures the TTL to be associated with this txt record.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "view": {
          "aliases": [
            "dns_view"
          ],
          "description": "Sets the DNS view to associate this tst record with.  The DNS view must already be configured on the system.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "infoblox_client"
      ],
      "short_description": "Configure Infoblox NIOS txt records",
      "version_added": "1.0.0"
    },
    "examples": "\n    - name: Ensure a text Record Exists\n      infoblox.nios_modules.nios_txt_record:\n        name: fqdn.txt.record.com\n        text: mytext\n        state: present\n        view: External\n        provider:\n          host: \"{{ inventory_hostname_short }}\"\n          username: admin\n          password: admin\n\n    - name: Ensure a text Record does not exist\n      infoblox.nios_modules.nios_txt_record:\n        name: fqdn.txt.record.com\n        text: mytext\n        state: absent\n        view: External\n        provider:\n          host: \"{{ inventory_hostname_short }}\"\n          username: admin\n          password: admin\n"
  },
  "infoblox.nios_modules.nios_zone": {
    "doc": {
      "description": "Adds and/or removes instances of DNS zone objects from Infoblox NIOS servers.  This module manages NIOS C(zone_auth) objects using the Infoblox WAPI interface over REST.",
      "has_action": false,
      "notes": "This module supports C(check_mode).\nThis module must be run locally, which can be achieved by specifying C(connection: local).\nPlease read the :ref:`nios_guide` for more detailed information on how to use Infoblox with Ansible.",
      "options": {
        "comment": {
          "aliases": [],
          "description": "Configures a text string comment to be associated with the instance of this object.  The provided text string will be configured on the object instance.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "extattrs": {
          "aliases": [],
          "description": "Allows for the configuration of Extensible Attributes on the instance of the object.  This argument accepts a set of key / value pairs for configuration.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "fqdn": {
          "aliases": [
            "name"
          ],
          "description": "Specifies the qualified domain name to either add or remove from the NIOS instance based on the configured C(state) value.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "grid_primary": {
          "aliases": [],
          "description": "Configures the grid primary servers for this zone.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "The name of the grid primary server",
              "type": "str",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "grid_secondaries": {
          "aliases": [],
          "description": "Configures the grid secondary servers for this zone.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "The name of the grid secondary server",
              "type": "str",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "ns_group": {
          "aliases": [],
          "description": "Configures the name server group for this zone. Name server group is mutually exclusive with grid primary and grid secondaries.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "provider": {
          "aliases": [],
          "description": "A dict object containing connection details.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "host": {
              "aliases": [],
              "description": "Specifies the DNS host name or address for connecting to the remote instance of NIOS WAPI over REST\nValue can also be specified using C(INFOBLOX_HOST) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "http_pool_connections": {
              "aliases": [],
              "description": "Insert decription here",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "http_pool_maxsize": {
              "aliases": [],
              "description": "Insert description here",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "http_request_timeout": {
              "aliases": [],
              "description": "The amount of time before to wait before receiving a response\nValue can also be specified using C(INFOBLOX_HTTP_REQUEST_TIMEOUT) environment variable.",
              "default": "10",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "max_results": {
              "aliases": [],
              "description": "Specifies the maximum number of objects to be returned, if set to a negative number the appliance will return an error when the number of returned objects would exceed the setting.\nValue can also be specified using C(INFOBLOX_MAX_RESULTS) environment variable.",
              "default": "1000",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "max_retries": {
              "aliases": [],
              "description": "Configures the number of attempted retries before the connection is declared usable\nValue can also be specified using C(INFOBLOX_MAX_RETRIES) environment variable.",
              "default": "3",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Specifies the password to use to authenticate the connection to the remote instance of NIOS.\nValue can also be specified using C(INFOBLOX_PASSWORD) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "silent_ssl_warnings": {
              "aliases": [],
              "description": "Insert description here",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "username": {
              "aliases": [],
              "description": "Configures the username to use to authenticate the connection to the remote instance of NIOS.\nValue can also be specified using C(INFOBLOX_USERNAME) environment variable.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "validate_certs": {
              "aliases": [
                "ssl_verify"
              ],
              "description": "Boolean value to enable or disable verifying SSL certificates\nValue can also be specified using C(INFOBLOX_SSL_VERIFY) environment variable.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "wapi_version": {
              "aliases": [],
              "description": "Specifies the version of WAPI to use\nValue can also be specified using C(INFOBLOX_WAP_VERSION) environment variable.\nUntil ansible 2.8 the default WAPI was 1.4",
              "default": "2.1",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "restart_if_needed": {
          "aliases": [],
          "description": "If set to true, causes the NIOS DNS service to restart and load the new zone configuration.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Configures the intended state of the instance of the object on the NIOS server.  When this value is set to C(present), the object is configured on the device and when this value is set to C(absent) the value is removed (if necessary) from the device.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "view": {
          "aliases": [
            "dns_view"
          ],
          "description": "Configures the DNS view name for the configured resource.  The specified DNS zone must already exist on the running NIOS instance prior to configuring zones.",
          "default": "default",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "zone_format": {
          "aliases": [],
          "description": "Create an authorative Reverse-Mapping Zone which is an area of network space for which one or more name servers-primary and secondary-have the responsibility to respond to address-to-name queries. It supports reverse-mapping zones for both IPv4 and IPv6 addresses.",
          "default": "FORWARD",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "infoblox-client"
      ],
      "short_description": "Configure Infoblox NIOS DNS zones",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Configure a zone on the system using grid primary and secondaries\n  infoblox.nios_modules.nios_zone:\n    name: ansible.com\n    grid_primary:\n      - name: gridprimary.grid.com\n    grid_secondaries:\n      - name: gridsecondary1.grid.com\n      - name: gridsecondary2.grid.com\n    restart_if_needed: true\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Configure a zone on the system using a name server group\n  infoblox.nios_modules.nios_zone:\n    name: ansible.com\n    ns_group: examplensg\n    restart_if_needed: true\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Configure a reverse mapping zone on the system using IPV4 zone format\n  infoblox.nios_modules.nios_zone:\n    name: 10.10.10.0/24\n    zone_format: IPV4\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Configure a reverse mapping zone on the system using IPV6 zone format\n  infoblox.nios_modules.nios_zone:\n    name: 100::1/128\n    zone_format: IPV6\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Update the comment and ext attributes for an existing zone\n  infoblox.nios_modules.nios_zone:\n    name: ansible.com\n    comment: this is an example comment\n    extattrs:\n      Site: west-dc\n    state: present\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Remove the dns zone\n  infoblox.nios_modules.nios_zone:\n    name: ansible.com\n    state: absent\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n\n- name: Remove the reverse mapping dns zone from the system with IPV4 zone format\n  infoblox.nios_modules.nios_zone:\n    name: 10.10.10.0/24\n    zone_format: IPV4\n    state: absent\n    provider:\n      host: \"{{ inventory_hostname_short }}\"\n      username: admin\n      password: admin\n  connection: local\n"
  }
}