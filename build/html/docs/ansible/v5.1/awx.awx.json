{
  "awx.awx.ad_hoc_command": {
    "doc": {
      "description": "Create, update, or destroy Automation Platform Controller ad hoc commands. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "become_enabled": {
          "aliases": [],
          "description": "If the become flag should be set.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credential": {
          "aliases": [],
          "description": "Credential to use for ad hoc command.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "diff_mode": {
          "aliases": [],
          "description": "Show the changes made by Ansible tasks where supported",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "execution_environment": {
          "aliases": [],
          "description": "Execution Environment to use for the ad hoc command.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "extra_vars": {
          "aliases": [],
          "description": "Extra variables to use for the ad hoc command..",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "forks": {
          "aliases": [],
          "description": "The number of forks to use for this ad hoc execution.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "The interval to request an update from the controller.",
          "default": "1",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "inventory": {
          "aliases": [],
          "description": "Inventory to use for the ad hoc command.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "job_type": {
          "aliases": [],
          "description": "Job_type to use for the ad hoc command.",
          "type": "str",
          "required": false,
          "choices": [
            "run",
            "check"
          ],
          "suboptions": {}
        },
        "limit": {
          "aliases": [],
          "description": "Limit to use for the ad hoc command.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "module_args": {
          "aliases": [],
          "description": "The arguments to pass to the module.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "module_name": {
          "aliases": [],
          "description": "The Ansible module to execute.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "If waiting for the command to complete this will abort after this amount of seconds",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "verbosity": {
          "aliases": [],
          "description": "Verbosity level for this ad hoc command run",
          "type": "int",
          "required": false,
          "choices": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5"
          ],
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Wait for the command to complete.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "create, update, or destroy Automation Platform Controller ad hoc commands.",
      "version_added": "4.0.0"
    },
    "examples": "\n"
  },
  "awx.awx.ad_hoc_command_cancel": {
    "doc": {
      "description": "Cancel ad hoc command. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "command_id": {
          "aliases": [],
          "description": "ID of the command to cancel",
          "type": "int",
          "required": true,
          "suboptions": {}
        },
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fail_if_not_running": {
          "aliases": [],
          "description": "Fail loudly if the I(command_id) can not be canceled",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "The interval in seconds, to request an update from .",
          "default": "1",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Maximum time in seconds to wait for a job to finish.\nNot specifying means the task will wait until the controller cancels the command.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Cancel an Ad Hoc Command."
    },
    "examples": "\n- name: Cancel command\n  ad_hoc_command_cancel:\n    command_id: command.id\n"
  },
  "awx.awx.ad_hoc_command_wait": {
    "doc": {
      "description": "Wait for Automation Platform Controller ad hoc command to finish and report success or failure. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "command_id": {
          "aliases": [],
          "description": "ID of the ad hoc command to monitor.",
          "type": "int",
          "required": true,
          "suboptions": {}
        },
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "The interval in sections, to request an update from the controller.",
          "default": "1",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Maximum time in seconds to wait for a ad hoc command to finish.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Wait for Automation Platform Controller Ad Hoc Command to finish."
    },
    "examples": "\n- name: Launch an ad hoc command\n  ad_hoc_command:\n    inventory: \"Demo Inventory\"\n    credential: \"Demo Credential\"\n    wait: false\n  register: command\n\n- name: Wait for ad joc command max 120s\n  ad_hoc_command_wait:\n    command_id: \"{{ command.id }}\"\n    timeout: 120\n"
  },
  "awx.awx.application": {
    "doc": {
      "description": "Create, update, or destroy Automation Platform Controller applications. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "authorization_grant_type": {
          "aliases": [],
          "description": "The grant type the user must use for acquire tokens for this application.",
          "type": "str",
          "required": false,
          "choices": [
            "password",
            "authorization-code"
          ],
          "suboptions": {}
        },
        "client_type": {
          "aliases": [],
          "description": "Set to public or confidential depending on how secure the client device is.",
          "type": "str",
          "required": false,
          "choices": [
            "public",
            "confidential"
          ],
          "suboptions": {}
        },
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the application.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the application.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "organization": {
          "aliases": [],
          "description": "Name of organization for application.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "redirect_uris": {
          "aliases": [],
          "description": "Allowed urls list, space separated. Required when authorization-grant-type=authorization-code",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "skip_authorization": {
          "aliases": [],
          "description": "Set True to skip authorization step for completely trusted applications.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "create, update, or destroy Automation Platform Controller applications"
    },
    "examples": "\n- name: Add Foo application\n  application:\n    name: \"Foo\"\n    description: \"Foo bar application\"\n    organization: \"test\"\n    state: present\n    authorization_grant_type: password\n    client-type: public\n\n- name: Add Foo application\n  application:\n    name: \"Foo\"\n    description: \"Foo bar application\"\n    organization: \"test\"\n    state: present\n    authorization_grant_type: authorization-code\n    client-type: confidential\n    redirect_uris:\n      - http://tower.com/api/v2/\n"
  },
  "awx.awx.controller_meta": {
    "doc": {
      "description": "Allows a user to find out what collection this module exists in.\nThis takes common module parameters, but does nothing with them.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Returns metadata about the collection this module lives in."
    },
    "examples": "\n- controller_meta:\n  register: result\n\n- name: Show details about the collection\n  debug: var=result\n\n- name: Load the UI setting without hard-coding the collection name\n  debug:\n    msg: \"{{ lookup(result.prefix + '.controller_api', 'settings/ui') }}\"\n"
  },
  "awx.awx.credential": {
    "doc": {
      "description": "Create, update, or destroy Automation Platform Controller credentials. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "Values `inputs` and the other deprecated fields (such as `tenant`) are replacements of existing values. See the last 4 examples for details.\nIf no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "copy_from": {
          "aliases": [],
          "description": "Name or id to copy the credential from.\nThis will copy an existing credential and change any parameters supplied.\nThe new credential name will be the one provided in the name parameter.\nThe organization parameter is not used in this, to facilitate copy from one organization to another.\nProvide the id or use the lookup plugin to provide the id if multiple credentials share the same name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credential_type": {
          "aliases": [],
          "description": "The credential type being created.\nCan be a built-in credential type such as \"Machine\", or a custom credential type such as \"My Credential Type\"\nChoices include Amazon Web Services, Ansible Galaxy/Automation Hub API Token, Centrify Vault Credential Provider Lookup, Container Registry, CyberArk AIM Central Credential Provider Lookup, CyberArk Conjur Secret Lookup, Google Compute Engine, GitHub Personal Access Token, GitLab Personal Access Token, HashiCorp Vault Secret Lookup, HashiCorp Vault Signed SSH, Insights, Machine, Microsoft Azure Key Vault, Microsoft Azure Resource Manager, Network, OpenShift or Kubernetes API Bearer Token, OpenStack, Red Hat Ansible Automation Platform, Red Hat Satellite 6, Red Hat Virtualization, Source Control, Thycotic DevOps Secrets Vault, Thycotic Secret Server, Vault, VMware vCenter, or a custom credential type",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "The description to use for the credential.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "inputs": {
          "aliases": [],
          "description": "Credential inputs where the keys are var names used in templating. Refer to the Automation Platform Controller documentation for example syntax.\nauthorize (use this for net type)\nauthorize_password (password for net credentials that require authorize)\nclient (client or application ID for azure_rm type)\nsecurity_token (STS token for aws type)\nsecret (secret token for azure_rm type)\ntenant (tenant ID for azure_rm type)\nsubscription (subscription ID for azure_rm type)\ndomain (domain for openstack type)\nbecome_method (become method to use for privilege escalation; some examples are \"None\", \"sudo\", \"su\", \"pbrun\")\nbecome_username (become username; use \"ASK\" and launch job to be prompted)\nbecome_password (become password; use \"ASK\" and launch job to be prompted)\nvault_password (the vault password; use \"ASK\" and launch job to be prompted)\nproject (project that should use this credential for GCP)\nhost (the host for this credential)\nusername (the username for this credential; ``access_key`` for AWS)\npassword (the password for this credential; ``secret_key`` for AWS, ``api_key`` for RAX)\nssh_key_data (SSH private key content; to extract the content from a file path, use the lookup function (see examples))\nvault_id (the vault identifier; this parameter is only valid if C(kind) is specified as C(vault).)\nssh_key_unlock (unlock password for ssh_key; use \"ASK\" and launch job to be prompted)",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name to use for the credential.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "new_name": {
          "aliases": [],
          "description": "Setting this option will change the existing name (looked up via the name field.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "organization": {
          "aliases": [],
          "description": "Organization that should own the credential.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "team": {
          "aliases": [],
          "description": "Team that should own this credential.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "update_secrets": {
          "aliases": [],
          "description": "C(true) will always update encrypted values.\nC(false) will only updated encrypted values if a change is absolutely known to be needed.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "User that should own this credential.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "create, update, or destroy Automation Platform Controller credential."
    },
    "examples": "\n- name: Add machine credential\n  credential:\n    name: Team Name\n    description: Team Description\n    organization: test-org\n    credential_type: Machine\n    state: present\n    controller_config_file: \"~/tower_cli.cfg\"\n\n- name: Create a valid SCM credential from a private_key file\n  credential:\n    name: SCM Credential\n    organization: Default\n    state: present\n    credential_type: Source Control\n    inputs:\n      username: joe\n      password: secret\n      ssh_key_data: \"{{ lookup('file', '/tmp/id_rsa') }}\"\n      ssh_key_unlock: \"passphrase\"\n\n- name: Fetch private key\n  slurp:\n    src: '$HOME/.ssh/aws-private.pem'\n  register: aws_ssh_key\n\n- name: Add Credential\n  credential:\n    name: Workshop Credential\n    credential_type: Machine\n    organization: Default\n    inputs:\n      ssh_key_data: \"{{ aws_ssh_key['content'] | b64decode }}\"\n  run_once: true\n  delegate_to: localhost\n\n- name: Add Credential with Custom Credential Type\n  credential:\n    name: Workshop Credential\n    credential_type: MyCloudCredential\n    organization: Default\n    controller_username: admin\n    controller_password: ansible\n    controller_host: https://localhost\n\n- name: Create a Vaiult credential (example for notes)\n  credential:\n    name: Example password\n    credential_type: Vault\n    organization: Default\n    inputs:\n      vault_password: 'hello'\n      vault_id: 'My ID'\n\n- name: Bad password update (will replace vault_id)\n  credential:\n    name: Example password\n    credential_type: Vault\n    organization: Default\n    inputs:\n      vault_password: 'new_password'\n\n- name: Another bad password update (will replace vault_id)\n  credential:\n    name: Example password\n    credential_type: Vault\n    organization: Default\n    vault_password: 'new_password'\n\n- name: A safe way to update a password and keep vault_id\n  credential:\n    name: Example password\n    credential_type: Vault\n    organization: Default\n    inputs:\n      vault_password: 'new_password'\n      vault_id: 'My ID'\n\n- name: Copy Credential\n  credential:\n    name: Copy password\n    copy_from: Example password\n    credential_type: Vault\n    organization: Foo\n"
  },
  "awx.awx.credential_input_source": {
    "doc": {
      "description": "Create, update, or destroy Automation Platform Controller credential input sources. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "The description to use for the credential input source.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "input_field_name": {
          "aliases": [],
          "description": "The input field the credential source will be used for",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "metadata": {
          "aliases": [],
          "description": "A JSON or YAML string",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "source_credential": {
          "aliases": [],
          "description": "The credential which is the source of the credential lookup",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "target_credential": {
          "aliases": [],
          "description": "The credential which will have its input defined by this source",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "create, update, or destroy Automation Platform Controller credential input sources.",
      "version_added": "2.3.0"
    },
    "examples": "\n- name: Use CyberArk Lookup credential as password source\n  credential_input_source:\n    input_field_name: password\n    target_credential: new_cred\n    source_credential: cyberark_lookup\n    metadata:\n      object_query: \"Safe=MY_SAFE;Object=awxuser\"\n      object_query_format: \"Exact\"\n    state: present\n\n"
  },
  "awx.awx.credential_type": {
    "doc": {
      "description": "Create, update, or destroy Automation Platform Controller credential type. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "The description of the credential type to give more detail about it.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "injectors": {
          "aliases": [],
          "description": "Enter injectors using either JSON or YAML syntax. Refer to the Automation Platform Controller documentation for example syntax.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "inputs": {
          "aliases": [],
          "description": "Enter inputs using either JSON or YAML syntax. Refer to the Automation Platform Controler documentation for example syntax.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "kind": {
          "aliases": [],
          "description": "The type of credential type being added. Note that only cloud and net can be used for creating credential types. Refer to the Ansible for more information.",
          "type": "str",
          "required": false,
          "choices": [
            "ssh",
            "vault",
            "net",
            "scm",
            "cloud",
            "insights"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the credential type.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Create, update, or destroy custom Automation Platform Controller credential type."
    },
    "examples": "\n- credential_type:\n    name: Nexus\n    description: Credentials type for Nexus\n    kind: cloud\n    inputs: \"{{ lookup('file', 'credential_inputs_nexus.json') }}\"\n    injectors: {'extra_vars': {'nexus_credential': 'test' }}\n    state: present\n    validate_certs: false\n\n- credential_type:\n    name: Nexus\n    state: absent\n"
  },
  "awx.awx.execution_environment": {
    "doc": {
      "description": "Create, update, or destroy Execution Environments in Automation Platform Controller. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credential": {
          "aliases": [],
          "description": "Name of the credential to use for the execution environment.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description to use for the execution environment.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "image": {
          "aliases": [],
          "description": "The fully qualified url of the container image.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name to use for the execution environment.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "organization": {
          "aliases": [],
          "description": "The organization the execution environment belongs to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pull": {
          "aliases": [],
          "description": "determine image pull behavior",
          "default": "missing",
          "type": "str",
          "required": false,
          "choices": [
            "always",
            "missing",
            "never"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "create, update, or destroy Execution Environments in Automation Platform Controller."
    },
    "examples": "\n- name: Add EE to the controller instance\n  execution_environment:\n    name: \"My EE\"\n    image: quay.io/ansible/awx-ee\n"
  },
  "awx.awx.export": {
    "doc": {
      "description": "Export assets from Automation Platform Controller.",
      "has_action": false,
      "notes": "Specifying a name of \"all\" for any asset type will export all items of that asset type.\nIf no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "all": {
          "aliases": [],
          "description": "Export all assets",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credential_types": {
          "aliases": [],
          "description": "credential type name to export",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credentials": {
          "aliases": [],
          "description": "credential name to export",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "execution_environments": {
          "aliases": [],
          "description": "execution environment name to export",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "inventory": {
          "aliases": [],
          "description": "inventory name to export",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "inventory_sources": {
          "aliases": [],
          "description": "inventory soruce to export",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "job_templates": {
          "aliases": [],
          "description": "job template name to export",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "notification_templates": {
          "aliases": [],
          "description": "notification template name to export",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "organizations": {
          "aliases": [],
          "description": "organization name to export",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "projects": {
          "aliases": [],
          "description": "project name to export",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "teams": {
          "aliases": [],
          "description": "team name to export",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "users": {
          "aliases": [],
          "description": "user name to export",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "workflow_job_templates": {
          "aliases": [],
          "description": "workflow name to export",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "awxkit >= 9.3.0"
      ],
      "short_description": "export resources from Automation Platform Controller.",
      "version_added": "3.7.0"
    },
    "examples": "\n- name: Export all assets\n  export:\n    all: True\n\n- name: Export all inventories\n  export:\n    inventory: 'all'\n\n- name: Export a job template named \"My Template\" and all Credentials\n  export:\n    job_template: \"My Template\"\n    credential: 'all'\n"
  },
  "awx.awx.group": {
    "doc": {
      "description": "Create, update, or destroy Automation Platform Controller groups. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "children": {
          "aliases": [
            "groups"
          ],
          "description": "List of groups that should be nested inside in this group.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "The description to use for the group.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hosts": {
          "aliases": [],
          "description": "List of hosts that should be put in this group.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "inventory": {
          "aliases": [],
          "description": "Inventory the group should be made a member of.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name to use for the group.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "new_name": {
          "aliases": [],
          "description": "A new name for this group (for renaming)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "preserve_existing_children": {
          "aliases": [
            "preserve_existing_groups"
          ],
          "description": "Provide option (False by default) to preserves existing children in an existing group.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "preserve_existing_hosts": {
          "aliases": [],
          "description": "Provide option (False by default) to preserves existing hosts in an existing group.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "variables": {
          "aliases": [],
          "description": "Variables to use for the group.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "create, update, or destroy Automation Platform Controller group."
    },
    "examples": "\n- name: Add group\n  group:\n    name: localhost\n    description: \"Local Host Group\"\n    inventory: \"Local Inventory\"\n    state: present\n    controller_config_file: \"~/tower_cli.cfg\"\n\n- name: Add group\n  group:\n    name: Cities\n    description: \"Local Host Group\"\n    inventory: Default Inventory\n    hosts:\n      - fda\n    children:\n      - NewYork\n    preserve_existing_hosts: True\n    preserve_existing_children: True\n"
  },
  "awx.awx.host": {
    "doc": {
      "description": "Create, update, or destroy Automation Platform Controller hosts. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "The description to use for the host.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "If the host should be enabled.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "inventory": {
          "aliases": [],
          "description": "Inventory the host should be made a member of.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name to use for the host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "new_name": {
          "aliases": [],
          "description": "To use when changing a hosts's name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "variables": {
          "aliases": [],
          "description": "Variables to use for the host.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "create, update, or destroy Automation Platform Controller host."
    },
    "examples": "\n- name: Add host\n  host:\n    name: localhost\n    description: \"Local Host Group\"\n    inventory: \"Local Inventory\"\n    state: present\n    controller_config_file: \"~/tower_cli.cfg\"\n    variables:\n      example_var: 123\n"
  },
  "awx.awx.import": {
    "doc": {
      "description": "Import assets into Automation Platform Controller. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "assets": {
          "aliases": [],
          "description": "The assets to import.\nThis can be the output of the export module or loaded from a file",
          "type": "dict",
          "required": true,
          "suboptions": {}
        },
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "awxkit >= 9.3.0"
      ],
      "short_description": "import resources into Automation Platform Controller.",
      "version_added": "3.7.0"
    },
    "examples": "\n- name: Export all assets\n  export:\n    all: True\n  register: export_output\n\n- name: Import all assets from our export\n  import:\n    assets: \"{{ export_output.assets }}\"\n\n- name: Load data from a json file created by a command like awx export --organization Default\n  import:\n    assets: \"{{ lookup('file', 'org.json') | from_json() }}\"\n"
  },
  "awx.awx.instance_group": {
    "doc": {
      "description": "Create, update, or destroy Automation Platform Controller instance groups. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credential": {
          "aliases": [],
          "description": "Credential to authenticate with Kubernetes or OpenShift.  Must be of type \"Kubernetes/OpenShift API Bearer Token\".",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "instances": {
          "aliases": [],
          "description": "The instances associated with this instance_group",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "is_container_group": {
          "aliases": [],
          "description": "Signifies that this InstanceGroup should act as a ContainerGroup. If no credential is specified, the underlying Pod's ServiceAccount will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of this instance group.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "new_name": {
          "aliases": [],
          "description": "Setting this option will change the existing name (looked up via the name field.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pod_spec_override": {
          "aliases": [],
          "description": "A custom Kubernetes or OpenShift Pod specification.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "policy_instance_list": {
          "aliases": [],
          "description": "List of exact-match Instances that will be assigned to this group",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "policy_instance_minimum": {
          "aliases": [],
          "description": "Static minimum number of Instances that will be automatically assign to this group when new instances come online.",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "policy_instance_percentage": {
          "aliases": [],
          "description": "Minimum percentage of all instances that will be automatically assigned to this group when new instances come online.",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "create, update, or destroy Automation Platform Controller instance groups.",
      "version_added": "4.0.0"
    },
    "examples": "\n"
  },
  "awx.awx.inventory": {
    "doc": {
      "description": "Create, update, or destroy Automation Platform Controller inventories. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "copy_from": {
          "aliases": [],
          "description": "Name or id to copy the inventory from.\nThis will copy an existing inventory and change any parameters supplied.\nThe new inventory name will be the one provided in the name parameter.\nThe organization parameter is not used in this, to facilitate copy from one organization to another.\nProvide the id or use the lookup plugin to provide the id if multiple inventories share the same name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "The description to use for the inventory.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host_filter": {
          "aliases": [],
          "description": "The host_filter field. Only useful when C(kind=smart).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "instance_groups": {
          "aliases": [],
          "description": "list of Instance Groups for this Organization to run on.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "kind": {
          "aliases": [],
          "description": "The kind field. Cannot be modified after created.",
          "default": "",
          "type": "str",
          "required": false,
          "choices": [
            "smart"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name to use for the inventory.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "organization": {
          "aliases": [],
          "description": "Organization the inventory belongs to.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "variables": {
          "aliases": [],
          "description": "Inventory variables.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "create, update, or destroy Automation Platform Controller inventory."
    },
    "examples": "\n- name: Add inventory\n  inventory:\n    name: \"Foo Inventory\"\n    description: \"Our Foo Cloud Servers\"\n    organization: \"Bar Org\"\n    state: present\n    controller_config_file: \"~/tower_cli.cfg\"\n\n- name: Copy inventory\n  inventory:\n    name: Copy Foo Inventory\n    copy_from: Default Inventory\n    description: \"Our Foo Cloud Servers\"\n    organization: Foo\n    state: present\n"
  },
  "awx.awx.inventory_source": {
    "doc": {
      "description": "Create, update, or destroy Automation Platform Controller inventory source. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credential": {
          "aliases": [],
          "description": "Credential to use for the source.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "custom_virtualenv": {
          "aliases": [],
          "description": "Local absolute file path containing a custom Python virtualenv to use.\nOnly compatible with older versions of AWX/Controller\nDeprecated, will be removed in the future",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "The description to use for the inventory source.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "enabled_value": {
          "aliases": [],
          "description": "Value when the host is considered enabled, e.g., \"powered_on\"",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "enabled_var": {
          "aliases": [],
          "description": "The variable to use to determine enabled state e.g., \"status.power_state\"",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "execution_environment": {
          "aliases": [],
          "description": "Execution Environment to use for the source.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host_filter": {
          "aliases": [],
          "description": "If specified, AWX will only import hosts that match this regular expression.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "inventory": {
          "aliases": [],
          "description": "Inventory the group should be made a member of.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name to use for the inventory source.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "new_name": {
          "aliases": [],
          "description": "A new name for this assets (will rename the asset)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "notification_templates_error": {
          "aliases": [],
          "description": "list of notifications to send on error",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "notification_templates_started": {
          "aliases": [],
          "description": "list of notifications to send on start",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "notification_templates_success": {
          "aliases": [],
          "description": "list of notifications to send on success",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "organization": {
          "aliases": [],
          "description": "Name of the inventory source's inventory's organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "overwrite": {
          "aliases": [],
          "description": "Delete child groups and hosts not found in source.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "overwrite_vars": {
          "aliases": [],
          "description": "Override vars in child groups and hosts with those from external source.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "source": {
          "aliases": [],
          "description": "The source to use for this group.",
          "type": "str",
          "required": false,
          "choices": [
            "scm",
            "ec2",
            "gce",
            "azure_rm",
            "vmware",
            "satellite6",
            "openstack",
            "rhv",
            "controller",
            "insights"
          ],
          "suboptions": {}
        },
        "source_path": {
          "aliases": [],
          "description": "For an SCM based inventory source, the source path points to the file within the repo to use as an inventory.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "source_project": {
          "aliases": [],
          "description": "Project to use as source with scm option",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "source_vars": {
          "aliases": [],
          "description": "The variables or environment fields to apply to this source type.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The amount of time (in seconds) to run before the task is canceled.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "update_cache_timeout": {
          "aliases": [],
          "description": "Time in seconds to consider an inventory sync to be current.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "update_on_launch": {
          "aliases": [],
          "description": "Refresh inventory data from its source each time a job is run.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "update_on_project_update": {
          "aliases": [],
          "description": "Update this source when the related project updates if source is C(scm)",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "verbosity": {
          "aliases": [],
          "description": "The verbosity level to run this inventory source under.",
          "type": "int",
          "required": false,
          "choices": [
            "0",
            "1",
            "2"
          ],
          "suboptions": {}
        }
      },
      "short_description": "create, update, or destroy Automation Platform Controller inventory source."
    },
    "examples": "\n- name: Add an inventory source\n  inventory_source:\n    name: \"source-inventory\"\n    description: Source for inventory\n    inventory: previously-created-inventory\n    credential: previously-created-credential\n    overwrite: True\n    update_on_launch: True\n    organization: Default\n    source_vars:\n      private: false\n"
  },
  "awx.awx.inventory_source_update": {
    "doc": {
      "description": "Update Automation Platform Controller inventory source(s). See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "The interval to request an update from the controller.",
          "default": "1",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "inventory": {
          "aliases": [],
          "description": "Name or id of the inventory that contains the inventory source(s) to update.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "inventory_source"
          ],
          "description": "The name or id of the inventory source to update.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "organization": {
          "aliases": [],
          "description": "Name of the inventory source's inventory's organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "If waiting for the job to complete this will abort after this amount of seconds",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Wait for the job to complete.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Update inventory source(s)."
    },
    "examples": "\n- name: Update a single inventory source\n  inventory_source_update:\n    name: \"Example Inventory Source\"\n    inventory: \"My Inventory\"\n    organization: Default\n\n- name: Update all inventory sources\n  inventory_source_update:\n    name: \"{{ item }}\"\n    inventory: \"My Other Inventory\"\n  loop: \"{{ query('awx.awx.controller_api', 'inventory_sources', query_params={ 'inventory': 30 }, return_ids=True ) }}\"\n"
  },
  "awx.awx.job_cancel": {
    "doc": {
      "description": "Cancel Automation Platform Controller jobs. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fail_if_not_running": {
          "aliases": [],
          "description": "Fail loudly if the I(job_id) can not be canceled",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "job_id": {
          "aliases": [],
          "description": "ID of the job to cancel",
          "type": "int",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Cancel an Automation Platform Controller Job."
    },
    "examples": "\n- name: Cancel job\n  job_cancel:\n    job_id: job.id\n"
  },
  "awx.awx.job_launch": {
    "doc": {
      "description": "Launch an Automation Platform Controller jobs. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credential_passwords": {
          "aliases": [],
          "description": "Passwords for credentials which are set to prompt on launch",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "credentials": {
          "aliases": [
            "credential"
          ],
          "description": "Credential to use for job, only used if prompt for credential is set.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "diff_mode": {
          "aliases": [],
          "description": "Show the changes made by Ansible tasks where supported",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "extra_vars": {
          "aliases": [],
          "description": "extra_vars to use for the Job Template.\nask_extra_vars needs to be set to True via job_template module when creating the Job Template.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "The interval to request an update from the controller.",
          "default": "1",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "inventory": {
          "aliases": [],
          "description": "Inventory to use for the job, only used if prompt for inventory is set.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "job_type": {
          "aliases": [],
          "description": "Job_type to use for the job, only used if prompt for job_type is set.",
          "type": "str",
          "required": false,
          "choices": [
            "run",
            "check"
          ],
          "suboptions": {}
        },
        "limit": {
          "aliases": [],
          "description": "Limit to use for the I(job_template).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "job_template"
          ],
          "description": "Name of the job template to use.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "organization": {
          "aliases": [],
          "description": "Organization the job template exists in.\nUsed to help lookup the object, cannot be modified using this module.\nIf not provided, will lookup by name only, which does not work with duplicates.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "scm_branch": {
          "aliases": [],
          "description": "A specific of the SCM project to run the template on.\nThis is only applicable if your project allows for branch override.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "skip_tags": {
          "aliases": [],
          "description": "Specific tags to skip from the playbook.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "tags": {
          "aliases": [],
          "description": "Specific tags to use for from playbook.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "If waiting for the job to complete this will abort after this amount of seconds",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "verbosity": {
          "aliases": [],
          "description": "Verbosity level for this job run",
          "type": "int",
          "required": false,
          "choices": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5"
          ],
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Wait for the job to complete.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Launch an Ansible Job."
    },
    "examples": "\n- name: Launch a job\n  job_launch:\n    job_template: \"My Job Template\"\n  register: job\n\n- name: Launch a job template with extra_vars on remote controller instance\n  job_launch:\n    job_template: \"My Job Template\"\n    extra_vars:\n      var1: \"My First Variable\"\n      var2: \"My Second Variable\"\n      var3: \"My Third Variable\"\n    job_type: run\n\n- name: Launch a job with inventory and credential\n  job_launch:\n    job_template: \"My Job Template\"\n    inventory: \"My Inventory\"\n    credential: \"My Credential\"\n  register: job\n- name: Wait for job max 120s\n  job_wait:\n    job_id: \"{{ job.id }}\"\n    timeout: 120\n"
  },
  "awx.awx.job_list": {
    "doc": {
      "description": "List Automation Platform Controller jobs. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "all_pages": {
          "aliases": [],
          "description": "Fetch all the pages and return a single result.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page number of the results to fetch.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "query": {
          "aliases": [],
          "description": "Query used to further filter the list of jobs. C({\"foo\":\"bar\"}) will be passed at C(?foo=bar)",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "status": {
          "aliases": [],
          "description": "Only list jobs with this status.",
          "type": "str",
          "required": false,
          "choices": [
            "pending",
            "waiting",
            "running",
            "error",
            "failed",
            "canceled",
            "successful"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "List Automation Platform Controller jobs."
    },
    "examples": "\n- name: List running jobs for the testing.yml playbook\n  job_list:\n    status: running\n    query: {\"playbook\": \"testing.yml\"}\n    controller_config_file: \"~/tower_cli.cfg\"\n  register: testing_jobs\n"
  },
  "awx.awx.job_template": {
    "doc": {
      "description": "Create, update, or destroy Automation Platform Controller job templates. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "JSON for survey_spec can be found in the API Documentation. See U(https://docs.ansible.com/ansible-tower/latest/html/towerapi/api_ref.html#/Job_Templates/Job_Templates_job_templates_survey_spec_create) for POST operation payload example.\nIf no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "allow_simultaneous": {
          "aliases": [
            "concurrent_jobs_enabled"
          ],
          "description": "Allow simultaneous runs of the job template.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ask_credential_on_launch": {
          "aliases": [
            "ask_credential"
          ],
          "description": "Prompt user for credential on launch.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ask_diff_mode_on_launch": {
          "aliases": [
            "ask_diff_mode"
          ],
          "description": "Prompt user to enable diff mode (show changes) to files when supported by modules.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ask_inventory_on_launch": {
          "aliases": [
            "ask_inventory"
          ],
          "description": "Prompt user for inventory on launch.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ask_job_type_on_launch": {
          "aliases": [
            "ask_job_type"
          ],
          "description": "Prompt user for job type on launch.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ask_limit_on_launch": {
          "aliases": [
            "ask_limit"
          ],
          "description": "Prompt user for a limit on launch.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ask_scm_branch_on_launch": {
          "aliases": [],
          "description": "Prompt user for (scm branch) on launch.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ask_skip_tags_on_launch": {
          "aliases": [
            "ask_skip_tags"
          ],
          "description": "Prompt user for job tags to skip on launch.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ask_tags_on_launch": {
          "aliases": [
            "ask_tags"
          ],
          "description": "Prompt user for job tags on launch.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ask_variables_on_launch": {
          "aliases": [
            "ask_extra_vars"
          ],
          "description": "Prompt user for (extra_vars) on launch.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ask_verbosity_on_launch": {
          "aliases": [
            "ask_verbosity"
          ],
          "description": "Prompt user to choose a verbosity level on launch.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "become_enabled": {
          "aliases": [],
          "description": "Activate privilege escalation.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "copy_from": {
          "aliases": [],
          "description": "Name or id to copy the job template from.\nThis will copy an existing job template and change any parameters supplied.\nThe new job template name will be the one provided in the name parameter.\nThe organization parameter is not used in this, to facilitate copy from one organization to another.\nProvide the id or use the lookup plugin to provide the id if multiple job templates share the same name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credential": {
          "aliases": [],
          "description": "Name of the credential to use for the job template.\nDeprecated, use 'credentials'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credentials": {
          "aliases": [],
          "description": "List of credentials to use for the job template.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "custom_virtualenv": {
          "aliases": [],
          "description": "Local absolute file path containing a custom Python virtualenv to use.\nOnly compatible with older versions of AWX/Tower\nDeprecated, will be removed in the future",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description to use for the job template.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "diff_mode": {
          "aliases": [
            "diff_mode_enabled"
          ],
          "description": "Enable diff mode for the job template.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "execution_environment": {
          "aliases": [],
          "description": "Execution Environment to use for the JT.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "extra_vars": {
          "aliases": [],
          "description": "Specify C(extra_vars) for the template.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "force_handlers": {
          "aliases": [
            "force_handlers_enabled"
          ],
          "description": "Enable forcing playbook handlers to run even if a task fails.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "forks": {
          "aliases": [],
          "description": "The number of parallel or simultaneous processes to use while executing the playbook.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "host_config_key": {
          "aliases": [],
          "description": "Allow provisioning callbacks using this host config key.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "instance_groups": {
          "aliases": [],
          "description": "list of Instance Groups for this Organization to run on.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "inventory": {
          "aliases": [],
          "description": "Name of the inventory to use for the job template.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "job_slice_count": {
          "aliases": [],
          "description": "The number of jobs to slice into at runtime. Will cause the Job Template to launch a workflow if value is greater than 1.",
          "default": "1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "job_tags": {
          "aliases": [],
          "description": "Comma separated list of the tags to use for the job template.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "job_type": {
          "aliases": [],
          "description": "The job type to use for the job template.",
          "type": "str",
          "required": false,
          "choices": [
            "run",
            "check"
          ],
          "suboptions": {}
        },
        "labels": {
          "aliases": [],
          "description": "The labels applied to this job template",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "limit": {
          "aliases": [],
          "description": "A host pattern to further constrain the list of hosts managed or affected by the playbook",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name to use for the job template.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "new_name": {
          "aliases": [],
          "description": "Setting this option will change the existing name (looed up via the name field.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "notification_templates_error": {
          "aliases": [],
          "description": "list of notifications to send on error",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "notification_templates_started": {
          "aliases": [],
          "description": "list of notifications to send on start",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "notification_templates_success": {
          "aliases": [],
          "description": "list of notifications to send on success",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "organization": {
          "aliases": [],
          "description": "Organization the job template exists in.\nUsed to help lookup the object, cannot be modified using this module.\nThe Organization is inferred from the associated project\nIf not provided, will lookup by name only, which does not work with duplicates.\nRequires Automation Platform Version 3.7.0 or AWX 10.0.0 IS NOT backwards compatible with earlier versions.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "playbook": {
          "aliases": [],
          "description": "Path to the playbook to use for the job template within the project provided.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Name of the project to use for the job template.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "scm_branch": {
          "aliases": [],
          "description": "Branch to use in job run. Project default used if blank. Only allowed if project allow_override field is set to true.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "skip_tags": {
          "aliases": [],
          "description": "Comma separated list of the tags to skip for the job template.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "start_at_task": {
          "aliases": [],
          "description": "Start the playbook at the task matching this name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "survey_enabled": {
          "aliases": [],
          "description": "Enable a survey on the job template.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "survey_spec": {
          "aliases": [],
          "description": "JSON/YAML dict formatted survey definition.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Maximum time in seconds to wait for a job to finish (server-side).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_fact_cache": {
          "aliases": [
            "fact_caching_enabled"
          ],
          "description": "Enable use of fact caching for the job template.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vault_credential": {
          "aliases": [],
          "description": "Name of the vault credential to use for the job template.\nDeprecated, use 'credentials'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "verbosity": {
          "aliases": [],
          "description": "Control the output level Ansible produces as the playbook runs. 0 - Normal, 1 - Verbose, 2 - More Verbose, 3 - Debug, 4 - Connection Debug.",
          "default": "0",
          "type": "int",
          "required": false,
          "choices": [
            "0",
            "1",
            "2",
            "3",
            "4"
          ],
          "suboptions": {}
        },
        "webhook_credential": {
          "aliases": [],
          "description": "Personal Access Token for posting back the status to the service API",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "webhook_service": {
          "aliases": [],
          "description": "Service that webhook requests will be accepted from",
          "type": "str",
          "required": false,
          "choices": [
            "github",
            "gitlab"
          ],
          "suboptions": {}
        }
      },
      "short_description": "create, update, or destroy Automation Platform Controller job templates."
    },
    "examples": "\n- name: Create Ping job template\n  job_template:\n    name: \"Ping\"\n    job_type: \"run\"\n    organization: \"Default\"\n    inventory: \"Local\"\n    project: \"Demo\"\n    playbook: \"ping.yml\"\n    credentials:\n      - \"Local\"\n    state: \"present\"\n    controller_config_file: \"~/tower_cli.cfg\"\n    survey_enabled: yes\n    survey_spec: \"{{ lookup('file', 'my_survey.json') }}\"\n\n- name: Add start notification to Job Template\n  job_template:\n    name: \"Ping\"\n    notification_templates_started:\n      - Notification1\n      - Notification2\n\n- name: Remove Notification1 start notification from Job Template\n  job_template:\n    name: \"Ping\"\n    notification_templates_started:\n      - Notification2\n\n- name: Copy Job Template\n  job_template:\n    name: copy job template\n    copy_from: test job template\n    job_type: \"run\"\n    inventory: Copy Foo Inventory\n    project: test\n    playbook: hello_world.yml\n    state: \"present\"\n"
  },
  "awx.awx.job_wait": {
    "doc": {
      "description": "Wait for Automation Platform Controller job to finish and report success or failure. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "The interval in sections, to request an update from the controller.\nFor backwards compatibility if unset this will be set to the average of min and max intervals",
          "default": "1",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "job_id": {
          "aliases": [],
          "description": "ID of the job to monitor.",
          "type": "int",
          "required": true,
          "suboptions": {}
        },
        "job_type": {
          "aliases": [],
          "description": "Job type to wait for",
          "default": "jobs",
          "type": "str",
          "required": false,
          "choices": [
            "project_updates",
            "jobs",
            "inventory_updates",
            "workflow_jobs"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Maximum time in seconds to wait for a job to finish.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Wait for Automation Platform Controller job to finish."
    },
    "examples": "\n- name: Launch a job\n  job_launch:\n    job_template: \"My Job Template\"\n  register: job\n\n- name: Wait for job max 120s\n  job_wait:\n    job_id: \"{{ job.id }}\"\n    timeout: 120\n"
  },
  "awx.awx.label": {
    "doc": {
      "description": "Create, update, or destroy Automation Platform Controller labels. See U(https://www.ansible.com/tower) for an overview.\nNote, labels can only be created via the API, they can not be deleted. Once they are fully disassociated the API will clean them up on its own.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of this label.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "new_name": {
          "aliases": [],
          "description": "Setting this option will change the existing name (looked up via the name field).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "organization": {
          "aliases": [],
          "description": "Organization this label belongs to.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "create, update, or destroy Automation Platform Controller labels."
    },
    "examples": "\n- name: Add label to organization\n  label:\n    name: Custom Label\n    organization: My Organization\n"
  },
  "awx.awx.license": {
    "doc": {
      "description": "Get or Set Automation Platform Controller license. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "By default, the license manifest will only be applied if Tower is currently unlicensed or trial licensed.  When force=true, the license is always applied.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "manifest": {
          "aliases": [],
          "description": "file path to a Red Hat subscription manifest (a .zip file)",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Set the license for Automation Platform Controller"
    },
    "examples": "\n- name: Set the license using a file\n  license:\n    manifest: \"/tmp/my_manifest.zip\"\n"
  },
  "awx.awx.notification_template": {
    "doc": {
      "description": "Create, update, or destroy Automation Platform Controller notifications. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "copy_from": {
          "aliases": [],
          "description": "Name or id to copy the notification from.\nThis will copy an existing notification and change any parameters supplied.\nThe new notification name will be the one provided in the name parameter.\nThe organization parameter is not used in this, to facilitate copy from one organization to another.\nProvide the id or use the lookup plugin to provide the id if multiple notifications share the same name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "The description of the notification.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "messages": {
          "aliases": [],
          "description": "Optional custom messages for notification template.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the notification.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "new_name": {
          "aliases": [],
          "description": "Setting this option will change the existing name (looked up via the name field.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "notification_configuration": {
          "aliases": [],
          "description": "The notification configuration file. Note providing this field would disable all notification-configuration-related fields.\nusername (the mail server username)\nsender (the sender email address)\nrecipients (the recipients email addresses)\nuse_tls (the TLS trigger)\nhost (the mail server host)\nuse_ssl (the SSL trigger)\npassword (the mail server password)\nport (the mail server port)\nchannels (the destination Slack channels)\ntoken (the access token)\naccount_token (the Twillio account token)\nfrom_number (the source phone number)\nto_numbers (the destination phone numbers)\naccount_sid (the Twillio account SID)\nsubdomain (the PagerDuty subdomain)\nservice_key (the PagerDuty service/integration API key)\nclient_name (the PagerDuty client identifier)\nmessage_from (the label to be shown with the notification)\ncolor (the notification color)\nnotify (the notify channel trigger)\nurl (the target URL)\nheaders (the HTTP headers as JSON string)\nserver (the IRC server address)\nnickname (the IRC nickname)\ntargets (the destination channels or users)",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "notification_type": {
          "aliases": [],
          "description": "The type of notification to be sent.",
          "type": "str",
          "required": false,
          "choices": [
            "email",
            "grafana",
            "irc",
            "mattermost",
            "pagerduty",
            "rocketchat",
            "slack",
            "twilio",
            "webhook"
          ],
          "suboptions": {}
        },
        "organization": {
          "aliases": [],
          "description": "The organization the notification belongs to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "create, update, or destroy Automation Platform Controller notification."
    },
    "examples": "\n- name: Add Slack notification with custom messages\n  notification_template:\n    name: slack notification\n    organization: Default\n    notification_type: slack\n    notification_configuration:\n      channels:\n        - general\n      token: cefda9e2be1f21d11cdd9452f5b7f97fda977f42\n    messages:\n       started:\n         message: \"{{ '{{ job_friendly_name }}{{ job.id }} started' }}\"\n       success:\n         message: \"{{ '{{ job_friendly_name }} completed in {{ job.elapsed }} seconds' }}\"\n       error:\n         message: \"{{ '{{ job_friendly_name }} FAILED! Please look at {{ job.url }}' }}\"\n    state: present\n    controller_config_file: \"~/tower_cli.cfg\"\n\n- name: Add webhook notification\n  notification_template:\n    name: webhook notification\n    notification_type: webhook\n    notification_configuration:\n      url: http://www.example.com/hook\n      headers:\n        X-Custom-Header: value123\n    state: present\n    controller_config_file: \"~/tower_cli.cfg\"\n\n- name: Add email notification\n  notification_template:\n    name: email notification\n    notification_type: email\n    notification_configuration:\n      username: user\n      password: s3cr3t\n      sender: controller@example.com\n      recipients:\n        - user1@example.com\n      host: smtp.example.com\n      port: 25\n      use_tls: no\n      use_ssl: no\n    state: present\n    controller_config_file: \"~/tower_cli.cfg\"\n\n- name: Add twilio notification\n  notification_template:\n    name: twilio notification\n    notification_type: twilio\n    notification_configuration:\n      account_token: a_token\n      account_sid: a_sid\n      from_number: '+15551112222'\n      to_numbers:\n        - '+15553334444'\n    state: present\n    controller_config_file: \"~/tower_cli.cfg\"\n\n- name: Add PagerDuty notification\n  notification_template:\n    name: pagerduty notification\n    notification_type: pagerduty\n    notification_configuration:\n      token: a_token\n      subdomain: sub\n      client_name: client\n      service_key: a_key\n    state: present\n    controller_config_file: \"~/tower_cli.cfg\"\n\n- name: Add IRC notification\n  notification_template:\n    name: irc notification\n    notification_type: irc\n    notification_configuration:\n      nickname: controller\n      password: s3cr3t\n      targets:\n        - user1\n      port: 8080\n      server: irc.example.com\n      use_ssl: no\n    state: present\n    controller_config_file: \"~/tower_cli.cfg\"\n\n- name: Delete notification\n  notification_template:\n    name: old notification\n    state: absent\n    controller_config_file: \"~/tower_cli.cfg\"\n\n- name: Copy webhook notification\n  notification_template:\n    name: foo notification\n    copy_from: email notification\n    organization: Foo\n"
  },
  "awx.awx.organization": {
    "doc": {
      "description": "Create, update, or destroy Automation Platform Controller organizations. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "custom_virtualenv": {
          "aliases": [],
          "description": "Local absolute file path containing a custom Python virtualenv to use.\nOnly compatible with older versions of AWX/Tower\nDeprecated, will be removed in the future",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "default_environment": {
          "aliases": [],
          "description": "Default Execution Environment to use for jobs owned by the Organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "The description to use for the organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "galaxy_credentials": {
          "aliases": [],
          "description": "list of Ansible Galaxy credentials to associate to the organization",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "instance_groups": {
          "aliases": [],
          "description": "list of Instance Groups for this Organization to run on.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "max_hosts": {
          "aliases": [],
          "description": "The max hosts allowed in this organizations",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name to use for the organization.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "notification_templates_approvals": {
          "aliases": [],
          "description": "list of notifications to send on start",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "notification_templates_error": {
          "aliases": [],
          "description": "list of notifications to send on error",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "notification_templates_started": {
          "aliases": [],
          "description": "list of notifications to send on start",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "notification_templates_success": {
          "aliases": [],
          "description": "list of notifications to send on success",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "create, update, or destroy Automation Platform Controller organizations"
    },
    "examples": "\n- name: Create organization\n  organization:\n    name: \"Foo\"\n    description: \"Foo bar organization\"\n    state: present\n    controller_config_file: \"~/tower_cli.cfg\"\n\n- name: Create organization using 'foo-venv' as default Python virtualenv\n  organization:\n    name: \"Foo\"\n    description: \"Foo bar organization using foo-venv\"\n    state: present\n    controller_config_file: \"~/tower_cli.cfg\"\n\n- name: Create organization that pulls content from galaxy.ansible.com\n  organization:\n    name: \"Foo\"\n    state: present\n    galaxy_credentials:\n      - Ansible Galaxy\n    controller_config_file: \"~/tower_cli.cfg\"\n"
  },
  "awx.awx.project": {
    "doc": {
      "description": "Create, update, or destroy Automation Platform Controller projects. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "allow_override": {
          "aliases": [
            "scm_allow_override"
          ],
          "description": "Allow changing the SCM branch or revision in a job template that uses this project.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "copy_from": {
          "aliases": [],
          "description": "Name or id to copy the project from.\nThis will copy an existing project and change any parameters supplied.\nThe new project name will be the one provided in the name parameter.\nThe organization parameter is not used in this, to facilitate copy from one organization to another.\nProvide the id or use the lookup plugin to provide the id if multiple projects share the same name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credential": {
          "aliases": [
            "scm_credential"
          ],
          "description": "Name of the credential to use with this SCM resource.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "custom_virtualenv": {
          "aliases": [],
          "description": "Local absolute file path containing a custom Python virtualenv to use.\nOnly compatible with older versions of AWX/Tower\nDeprecated, will be removed in the future",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "default_environment": {
          "aliases": [],
          "description": "Default Execution Environment to use for jobs relating to the project.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description to use for the project.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "The interval to request an update from the controller.\nRequires wait.",
          "default": "1",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "local_path": {
          "aliases": [],
          "description": "The server playbook directory for manual projects.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name to use for the project.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "notification_templates_error": {
          "aliases": [],
          "description": "list of notifications to send on error",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "notification_templates_started": {
          "aliases": [],
          "description": "list of notifications to send on start",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "notification_templates_success": {
          "aliases": [],
          "description": "list of notifications to send on success",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "organization": {
          "aliases": [],
          "description": "Name of organization for project.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "scm_branch": {
          "aliases": [],
          "description": "The branch to use for the SCM resource.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "scm_clean": {
          "aliases": [],
          "description": "Remove local modifications before updating.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "scm_delete_on_update": {
          "aliases": [],
          "description": "Remove the repository completely before updating.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "scm_refspec": {
          "aliases": [],
          "description": "The refspec to use for the SCM resource.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "scm_track_submodules": {
          "aliases": [],
          "description": "Track submodules latest commit on specified branch.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "scm_type": {
          "aliases": [],
          "description": "Type of SCM resource.",
          "default": "manual",
          "type": "str",
          "required": false,
          "choices": [
            "manual",
            "git",
            "svn",
            "insights"
          ],
          "suboptions": {}
        },
        "scm_update_cache_timeout": {
          "aliases": [],
          "description": "Cache Timeout to cache prior project syncs for a certain number of seconds. Only valid if scm_update_on_launch is to True, otherwise ignored.",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "scm_update_on_launch": {
          "aliases": [],
          "description": "Before an update to the local repository before launching a job with this project.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "scm_url": {
          "aliases": [],
          "description": "URL of SCM resource.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [
            "job_timeout"
          ],
          "description": "The amount of time (in seconds) to run before the SCM Update is canceled. A value of 0 means no timeout.\nIf waiting for the project to update this will abort after this amount of seconds",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "update_project": {
          "aliases": [],
          "description": "Force project to update after changes.\nUsed in conjunction with wait, interval, and timeout.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Provides option (True by default) to wait for completed project sync before returning\nCan assure playbook files are populated so that job templates that rely on the project may be successfully created",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "create, update, or destroy Automation Platform Controller projects"
    },
    "examples": "\n- name: Add project\n  project:\n    name: \"Foo\"\n    description: \"Foo bar project\"\n    organization: \"test\"\n    state: present\n    controller_config_file: \"~/tower_cli.cfg\"\n\n- name: Add Project with cache timeout\n  project:\n    name: \"Foo\"\n    description: \"Foo bar project\"\n    organization: \"test\"\n    scm_update_on_launch: True\n    scm_update_cache_timeout: 60\n    state: present\n    controller_config_file: \"~/tower_cli.cfg\"\n\n- name: Copy project\n  project:\n    name: copy\n    copy_from: test\n    description: Foo copy project\n    organization: Foo\n    state: present\n"
  },
  "awx.awx.project_update": {
    "doc": {
      "description": "Update a Automation Platform Controller Project. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "The interval to request an update from the controller.",
          "default": "1",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "project"
          ],
          "description": "The name or id of the project to update.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "organization": {
          "aliases": [],
          "description": "Organization the project exists in.\nUsed to help lookup the object, cannot be modified using this module.\nIf not provided, will lookup by name only, which does not work with duplicates.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "If waiting for the project to update this will abort after this amount of seconds",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Wait for the project to update.\nIf scm revision has not changed module will return not changed.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Update a Project in Automation Platform Controller"
    },
    "examples": "\n- name: Launch a project with a timeout of 10 seconds\n  project_update:\n    project: \"Networking Project\"\n    timeout: 10\n\n- name: Launch a Project with extra_vars without waiting\n  project_update:\n    project: \"Networking Project\"\n    wait: False\n"
  },
  "awx.awx.role": {
    "doc": {
      "description": "Roles are used for access control, this module is for managing user access to server resources.\nGrant or revoke Automation Platform Controller roles to users. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credential": {
          "aliases": [],
          "description": "Credential the role acts on.\nDeprecated, use 'credentials'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credentials": {
          "aliases": [],
          "description": "Credential the role acts on.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "inventories": {
          "aliases": [],
          "description": "Inventory the role acts on.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "inventory": {
          "aliases": [],
          "description": "Inventory the role acts on.\nDeprecated, use 'inventories'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "job_template": {
          "aliases": [],
          "description": "The job template the role acts on.\nDeprecated, use 'job_templates'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "job_templates": {
          "aliases": [],
          "description": "The job template the role acts on.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "lookup_organization": {
          "aliases": [],
          "description": "Organization the inventories, job templates, projects, or workflows the items exists in.\nUsed to help lookup the object, for organization roles see organization.\nIf not provided, will lookup by name only, which does not work with duplicates.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "organization": {
          "aliases": [],
          "description": "Organization the role acts on.\nDeprecated, use 'organizations'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "organizations": {
          "aliases": [],
          "description": "Organization the role acts on.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Project the role acts on.\nDeprecated, use 'projects'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "projects": {
          "aliases": [],
          "description": "Project the role acts on.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "role": {
          "aliases": [],
          "description": "The role type to grant/revoke.",
          "type": "str",
          "required": true,
          "choices": [
            "admin",
            "read",
            "member",
            "execute",
            "adhoc",
            "update",
            "use",
            "approval",
            "auditor",
            "project_admin",
            "inventory_admin",
            "credential_admin",
            "workflow_admin",
            "notification_admin",
            "job_template_admin"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state.\nState of present indicates the user should have the role.\nState of absent indicates the user should have the role taken away, if they have it.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "target_team": {
          "aliases": [],
          "description": "Team that the role acts on.\nFor example, make someone a member or an admin of a team.\nMembers of a team implicitly receive the permissions that the team has.\nDeprecated, use 'target_teams'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "target_teams": {
          "aliases": [],
          "description": "Team that the role acts on.\nFor example, make someone a member or an admin of a team.\nMembers of a team implicitly receive the permissions that the team has.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "team": {
          "aliases": [],
          "description": "Team that receives the permissions specified by the role.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "User that receives the permissions specified by the role.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "workflow": {
          "aliases": [],
          "description": "The workflow job template the role acts on.\nDeprecated, use 'workflows'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "workflows": {
          "aliases": [],
          "description": "The workflow job template the role acts on.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        }
      },
      "short_description": "grant or revoke an Automation Platform Controller role."
    },
    "examples": "\n- name: Add jdoe to the member role of My Team\n  role:\n    user: jdoe\n    target_team: \"My Team\"\n    role: member\n    state: present\n\n- name: Add Joe to multiple job templates and a workflow\n  role:\n    user: joe\n    role: execute\n    workflow: test-role-workflow\n    job_templates:\n      - jt1\n      - jt2\n    state: present\n"
  },
  "awx.awx.schedule": {
    "doc": {
      "description": "Create, update, or destroy Automation Platform Controller schedules. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credentials": {
          "aliases": [],
          "description": "List of credentials applied as a prompt, assuming job template prompts for credentials",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Optional description of this schedule.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "diff_mode": {
          "aliases": [],
          "description": "Enable diff mode for the job template.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "Enables processing of this schedule.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "extra_data": {
          "aliases": [],
          "description": "Specify C(extra_vars) for the template.",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "inventory": {
          "aliases": [],
          "description": "Inventory applied as a prompt, assuming job template prompts for inventory",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "job_tags": {
          "aliases": [],
          "description": "Comma separated list of the tags to use for the job template.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "job_type": {
          "aliases": [],
          "description": "The job type to use for the job template.",
          "type": "str",
          "required": false,
          "choices": [
            "run",
            "check"
          ],
          "suboptions": {}
        },
        "limit": {
          "aliases": [],
          "description": "A host pattern to further constrain the list of hosts managed or affected by the playbook",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of this schedule.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "new_name": {
          "aliases": [],
          "description": "Setting this option will change the existing name (looked up via the name field.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "organization": {
          "aliases": [],
          "description": "The organization the unified job template exists in.\nUsed for looking up the unified job template, not a direct model field.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "rrule": {
          "aliases": [],
          "description": "A value representing the schedules iCal recurrence rule.\nSee rrule plugin for help constructing this value",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "scm_branch": {
          "aliases": [],
          "description": "Branch to use in job run. Project default used if blank. Only allowed if project allow_override field is set to true.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "skip_tags": {
          "aliases": [],
          "description": "Comma separated list of the tags to skip for the job template.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "unified_job_template": {
          "aliases": [],
          "description": "Name of unified job template to schedule.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "verbosity": {
          "aliases": [],
          "description": "Control the output level Ansible produces as the playbook runs. 0 - Normal, 1 - Verbose, 2 - More Verbose, 3 - Debug, 4 - Connection Debug.",
          "type": "int",
          "required": false,
          "choices": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5"
          ],
          "suboptions": {}
        }
      },
      "short_description": "create, update, or destroy Automation Platform Controller schedules."
    },
    "examples": "\n- name: Build a schedule for Demo Job Template\n  schedule:\n    name: \"{{ sched1 }}\"\n    state: present\n    unified_job_template: \"Demo Job Template\"\n    rrule: \"DTSTART:20191219T130551Z RRULE:FREQ=WEEKLY;INTERVAL=1;COUNT=1\"\n  register: result\n\n- name: Build the same schedule using the rrule plugin\n  schedule:\n    name: \"{{ sched1 }}\"\n    state: present\n    unified_job_template: \"Demo Job Template\"\n    rrule: \"{{ query('awx.awx.schedule_rrule', 'week', start_date='2019-12-19 13:05:51') }}\"\n  register: result\n"
  },
  "awx.awx.settings": {
    "doc": {
      "description": "Modify Automation Platform Controller settings. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of setting to modify",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "settings": {
          "aliases": [],
          "description": "A data structure to be sent into the settings endpoint",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "value": {
          "aliases": [],
          "description": "Value to be modified for given setting.\nIf given a non-string type, will make best effort to cast it to type API expects.\nFor better control over types, use the C(settings) param instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pyyaml"
      ],
      "short_description": "Modify Automation Platform Controller settings."
    },
    "examples": "\n- name: Set the value of AWX_ISOLATION_BASE_PATH\n  settings:\n    name: AWX_ISOLATION_BASE_PATH\n    value: \"/tmp\"\n  register: testing_settings\n\n- name: Set the value of AWX_ISOLATION_SHOW_PATHS\n  settings:\n    name: \"AWX_ISOLATION_SHOW_PATHS\"\n    value: \"'/var/lib/awx/projects/', '/tmp'\"\n  register: testing_settings\n\n- name: Set the LDAP Auth Bind Password\n  settings:\n    name: \"AUTH_LDAP_BIND_PASSWORD\"\n    value: \"Password\"\n  no_log: true\n\n- name: Set all the LDAP Auth Bind Params\n  settings:\n    settings:\n      AUTH_LDAP_BIND_PASSWORD: \"password\"\n      AUTH_LDAP_USER_ATTR_MAP:\n        email: \"mail\"\n        first_name: \"givenName\"\n        last_name: \"surname\"\n"
  },
  "awx.awx.team": {
    "doc": {
      "description": "Create, update, or destroy Automation Platform Controller teams. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "The description to use for the team.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name to use for the team.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "new_name": {
          "aliases": [],
          "description": "To use when changing a team's name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "organization": {
          "aliases": [],
          "description": "Organization the team should be made a member of.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "create, update, or destroy Automation Platform Controller team."
    },
    "examples": "\n- name: Create team\n  team:\n    name: Team Name\n    description: Team Description\n    organization: test-org\n    state: present\n    controller_config_file: \"~/tower_cli.cfg\"\n"
  },
  "awx.awx.token": {
    "doc": {
      "description": "Create or destroy Automation Platform Controller tokens. See U(https://www.ansible.com/tower) for an overview.\nIn addition, the module sets an Ansible fact which can be passed into other controller modules as the parameter controller_oauthtoken. See examples for usage.\nBecause of the sensitive nature of tokens, the created token value is only available once through the Ansible fact. (See RETURN for details)\nDue to the nature of tokens this module is not idempotent. A second will with the same parameters will create a new token.\nIf you are creating a temporary token for use with modules you should delete the token when you are done with it. See the example for how to do it.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "application": {
          "aliases": [],
          "description": "The application tied to this token.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Optional description of this access token.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "existing_token": {
          "aliases": [],
          "description": "The data structure produced from token in create mode to be used with state absent.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "existing_token_id": {
          "aliases": [],
          "description": "A token ID (number) which can be used to delete an arbitrary token with state absent.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "scope": {
          "aliases": [],
          "description": "Allowed scopes, further restricts user's permissions. Must be a simple space-separated string with allowed scopes ['read', 'write'].",
          "default": "write",
          "type": "str",
          "required": false,
          "choices": [
            "read",
            "write"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "create, update, or destroy Automation Platform Controller tokens.",
      "version_added": "2.3.0"
    },
    "examples": "\n- block:\n    - name: Create a new token using an existing token\n      token:\n        description: '{{ token_description }}'\n        scope: \"write\"\n        state: present\n        controller_oauthtoken: \"{{ my_existing_token }}\"\n\n    - name: Delete this token\n      token:\n        existing_token: \"{{ token }}\"\n        state: absent\n\n    - name: Create a new token using username/password\n      token:\n        description: '{{ token_description }}'\n        scope: \"write\"\n        state: present\n        controller_username: \"{{ my_username }}\"\n        controller_password: \"{{ my_password }}\"\n\n    - name: Use our new token to make another call\n      job_list:\n        controller_oauthtoken: \"{{ token }}\"\n\n  always:\n    - name: Delete our Token with the token we created\n      token:\n        existing_token: \"{{ token }}\"\n        state: absent\n      when: token is defined\n\n- name: Delete a token by its id\n  token:\n    existing_token_id: 4\n    state: absent\n"
  },
  "awx.awx.tower_ad_hoc_command": {
    "doc": {
      "description": "Create, update, or destroy Automation Platform Controller ad hoc commands. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "become_enabled": {
          "aliases": [],
          "description": "If the become flag should be set.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credential": {
          "aliases": [],
          "description": "Credential to use for ad hoc command.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "diff_mode": {
          "aliases": [],
          "description": "Show the changes made by Ansible tasks where supported",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "execution_environment": {
          "aliases": [],
          "description": "Execution Environment to use for the ad hoc command.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "extra_vars": {
          "aliases": [],
          "description": "Extra variables to use for the ad hoc command..",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "forks": {
          "aliases": [],
          "description": "The number of forks to use for this ad hoc execution.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "The interval to request an update from the controller.",
          "default": "1",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "inventory": {
          "aliases": [],
          "description": "Inventory to use for the ad hoc command.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "job_type": {
          "aliases": [],
          "description": "Job_type to use for the ad hoc command.",
          "type": "str",
          "required": false,
          "choices": [
            "run",
            "check"
          ],
          "suboptions": {}
        },
        "limit": {
          "aliases": [],
          "description": "Limit to use for the ad hoc command.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "module_args": {
          "aliases": [],
          "description": "The arguments to pass to the module.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "module_name": {
          "aliases": [],
          "description": "The Ansible module to execute.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "If waiting for the command to complete this will abort after this amount of seconds",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "verbosity": {
          "aliases": [],
          "description": "Verbosity level for this ad hoc command run",
          "type": "int",
          "required": false,
          "choices": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5"
          ],
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Wait for the command to complete.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "create, update, or destroy Automation Platform Controller ad hoc commands.",
      "version_added": "4.0.0"
    },
    "examples": "\n"
  },
  "awx.awx.tower_ad_hoc_command_cancel": {
    "doc": {
      "description": "Cancel ad hoc command. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "command_id": {
          "aliases": [],
          "description": "ID of the command to cancel",
          "type": "int",
          "required": true,
          "suboptions": {}
        },
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fail_if_not_running": {
          "aliases": [],
          "description": "Fail loudly if the I(command_id) can not be canceled",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "The interval in seconds, to request an update from .",
          "default": "1",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Maximum time in seconds to wait for a job to finish.\nNot specifying means the task will wait until the controller cancels the command.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Cancel an Ad Hoc Command."
    },
    "examples": "\n- name: Cancel command\n  ad_hoc_command_cancel:\n    command_id: command.id\n"
  },
  "awx.awx.tower_ad_hoc_command_wait": {
    "doc": {
      "description": "Wait for Automation Platform Controller ad hoc command to finish and report success or failure. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "command_id": {
          "aliases": [],
          "description": "ID of the ad hoc command to monitor.",
          "type": "int",
          "required": true,
          "suboptions": {}
        },
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "The interval in sections, to request an update from the controller.",
          "default": "1",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Maximum time in seconds to wait for a ad hoc command to finish.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Wait for Automation Platform Controller Ad Hoc Command to finish."
    },
    "examples": "\n- name: Launch an ad hoc command\n  ad_hoc_command:\n    inventory: \"Demo Inventory\"\n    credential: \"Demo Credential\"\n    wait: false\n  register: command\n\n- name: Wait for ad joc command max 120s\n  ad_hoc_command_wait:\n    command_id: \"{{ command.id }}\"\n    timeout: 120\n"
  },
  "awx.awx.tower_application": {
    "doc": {
      "description": "Create, update, or destroy Automation Platform Controller applications. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "authorization_grant_type": {
          "aliases": [],
          "description": "The grant type the user must use for acquire tokens for this application.",
          "type": "str",
          "required": false,
          "choices": [
            "password",
            "authorization-code"
          ],
          "suboptions": {}
        },
        "client_type": {
          "aliases": [],
          "description": "Set to public or confidential depending on how secure the client device is.",
          "type": "str",
          "required": false,
          "choices": [
            "public",
            "confidential"
          ],
          "suboptions": {}
        },
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the application.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the application.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "organization": {
          "aliases": [],
          "description": "Name of organization for application.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "redirect_uris": {
          "aliases": [],
          "description": "Allowed urls list, space separated. Required when authorization-grant-type=authorization-code",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "skip_authorization": {
          "aliases": [],
          "description": "Set True to skip authorization step for completely trusted applications.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "create, update, or destroy Automation Platform Controller applications"
    },
    "examples": "\n- name: Add Foo application\n  application:\n    name: \"Foo\"\n    description: \"Foo bar application\"\n    organization: \"test\"\n    state: present\n    authorization_grant_type: password\n    client-type: public\n\n- name: Add Foo application\n  application:\n    name: \"Foo\"\n    description: \"Foo bar application\"\n    organization: \"test\"\n    state: present\n    authorization_grant_type: authorization-code\n    client-type: confidential\n    redirect_uris:\n      - http://tower.com/api/v2/\n"
  },
  "awx.awx.tower_controller_meta": {
    "doc": {
      "description": "Allows a user to find out what collection this module exists in.\nThis takes common module parameters, but does nothing with them.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Returns metadata about the collection this module lives in."
    },
    "examples": "\n- controller_meta:\n  register: result\n\n- name: Show details about the collection\n  debug: var=result\n\n- name: Load the UI setting without hard-coding the collection name\n  debug:\n    msg: \"{{ lookup(result.prefix + '.controller_api', 'settings/ui') }}\"\n"
  },
  "awx.awx.tower_credential": {
    "doc": {
      "description": "Create, update, or destroy Automation Platform Controller credentials. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "Values `inputs` and the other deprecated fields (such as `tenant`) are replacements of existing values. See the last 4 examples for details.\nIf no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "copy_from": {
          "aliases": [],
          "description": "Name or id to copy the credential from.\nThis will copy an existing credential and change any parameters supplied.\nThe new credential name will be the one provided in the name parameter.\nThe organization parameter is not used in this, to facilitate copy from one organization to another.\nProvide the id or use the lookup plugin to provide the id if multiple credentials share the same name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credential_type": {
          "aliases": [],
          "description": "The credential type being created.\nCan be a built-in credential type such as \"Machine\", or a custom credential type such as \"My Credential Type\"\nChoices include Amazon Web Services, Ansible Galaxy/Automation Hub API Token, Centrify Vault Credential Provider Lookup, Container Registry, CyberArk AIM Central Credential Provider Lookup, CyberArk Conjur Secret Lookup, Google Compute Engine, GitHub Personal Access Token, GitLab Personal Access Token, HashiCorp Vault Secret Lookup, HashiCorp Vault Signed SSH, Insights, Machine, Microsoft Azure Key Vault, Microsoft Azure Resource Manager, Network, OpenShift or Kubernetes API Bearer Token, OpenStack, Red Hat Ansible Automation Platform, Red Hat Satellite 6, Red Hat Virtualization, Source Control, Thycotic DevOps Secrets Vault, Thycotic Secret Server, Vault, VMware vCenter, or a custom credential type",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "The description to use for the credential.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "inputs": {
          "aliases": [],
          "description": "Credential inputs where the keys are var names used in templating. Refer to the Automation Platform Controller documentation for example syntax.\nauthorize (use this for net type)\nauthorize_password (password for net credentials that require authorize)\nclient (client or application ID for azure_rm type)\nsecurity_token (STS token for aws type)\nsecret (secret token for azure_rm type)\ntenant (tenant ID for azure_rm type)\nsubscription (subscription ID for azure_rm type)\ndomain (domain for openstack type)\nbecome_method (become method to use for privilege escalation; some examples are \"None\", \"sudo\", \"su\", \"pbrun\")\nbecome_username (become username; use \"ASK\" and launch job to be prompted)\nbecome_password (become password; use \"ASK\" and launch job to be prompted)\nvault_password (the vault password; use \"ASK\" and launch job to be prompted)\nproject (project that should use this credential for GCP)\nhost (the host for this credential)\nusername (the username for this credential; ``access_key`` for AWS)\npassword (the password for this credential; ``secret_key`` for AWS, ``api_key`` for RAX)\nssh_key_data (SSH private key content; to extract the content from a file path, use the lookup function (see examples))\nvault_id (the vault identifier; this parameter is only valid if C(kind) is specified as C(vault).)\nssh_key_unlock (unlock password for ssh_key; use \"ASK\" and launch job to be prompted)",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name to use for the credential.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "new_name": {
          "aliases": [],
          "description": "Setting this option will change the existing name (looked up via the name field.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "organization": {
          "aliases": [],
          "description": "Organization that should own the credential.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "team": {
          "aliases": [],
          "description": "Team that should own this credential.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "update_secrets": {
          "aliases": [],
          "description": "C(true) will always update encrypted values.\nC(false) will only updated encrypted values if a change is absolutely known to be needed.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "User that should own this credential.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "create, update, or destroy Automation Platform Controller credential."
    },
    "examples": "\n- name: Add machine credential\n  credential:\n    name: Team Name\n    description: Team Description\n    organization: test-org\n    credential_type: Machine\n    state: present\n    controller_config_file: \"~/tower_cli.cfg\"\n\n- name: Create a valid SCM credential from a private_key file\n  credential:\n    name: SCM Credential\n    organization: Default\n    state: present\n    credential_type: Source Control\n    inputs:\n      username: joe\n      password: secret\n      ssh_key_data: \"{{ lookup('file', '/tmp/id_rsa') }}\"\n      ssh_key_unlock: \"passphrase\"\n\n- name: Fetch private key\n  slurp:\n    src: '$HOME/.ssh/aws-private.pem'\n  register: aws_ssh_key\n\n- name: Add Credential\n  credential:\n    name: Workshop Credential\n    credential_type: Machine\n    organization: Default\n    inputs:\n      ssh_key_data: \"{{ aws_ssh_key['content'] | b64decode }}\"\n  run_once: true\n  delegate_to: localhost\n\n- name: Add Credential with Custom Credential Type\n  credential:\n    name: Workshop Credential\n    credential_type: MyCloudCredential\n    organization: Default\n    controller_username: admin\n    controller_password: ansible\n    controller_host: https://localhost\n\n- name: Create a Vaiult credential (example for notes)\n  credential:\n    name: Example password\n    credential_type: Vault\n    organization: Default\n    inputs:\n      vault_password: 'hello'\n      vault_id: 'My ID'\n\n- name: Bad password update (will replace vault_id)\n  credential:\n    name: Example password\n    credential_type: Vault\n    organization: Default\n    inputs:\n      vault_password: 'new_password'\n\n- name: Another bad password update (will replace vault_id)\n  credential:\n    name: Example password\n    credential_type: Vault\n    organization: Default\n    vault_password: 'new_password'\n\n- name: A safe way to update a password and keep vault_id\n  credential:\n    name: Example password\n    credential_type: Vault\n    organization: Default\n    inputs:\n      vault_password: 'new_password'\n      vault_id: 'My ID'\n\n- name: Copy Credential\n  credential:\n    name: Copy password\n    copy_from: Example password\n    credential_type: Vault\n    organization: Foo\n"
  },
  "awx.awx.tower_credential_input_source": {
    "doc": {
      "description": "Create, update, or destroy Automation Platform Controller credential input sources. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "The description to use for the credential input source.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "input_field_name": {
          "aliases": [],
          "description": "The input field the credential source will be used for",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "metadata": {
          "aliases": [],
          "description": "A JSON or YAML string",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "source_credential": {
          "aliases": [],
          "description": "The credential which is the source of the credential lookup",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "target_credential": {
          "aliases": [],
          "description": "The credential which will have its input defined by this source",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "create, update, or destroy Automation Platform Controller credential input sources.",
      "version_added": "2.3.0"
    },
    "examples": "\n- name: Use CyberArk Lookup credential as password source\n  credential_input_source:\n    input_field_name: password\n    target_credential: new_cred\n    source_credential: cyberark_lookup\n    metadata:\n      object_query: \"Safe=MY_SAFE;Object=awxuser\"\n      object_query_format: \"Exact\"\n    state: present\n\n"
  },
  "awx.awx.tower_credential_type": {
    "doc": {
      "description": "Create, update, or destroy Automation Platform Controller credential type. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "The description of the credential type to give more detail about it.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "injectors": {
          "aliases": [],
          "description": "Enter injectors using either JSON or YAML syntax. Refer to the Automation Platform Controller documentation for example syntax.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "inputs": {
          "aliases": [],
          "description": "Enter inputs using either JSON or YAML syntax. Refer to the Automation Platform Controler documentation for example syntax.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "kind": {
          "aliases": [],
          "description": "The type of credential type being added. Note that only cloud and net can be used for creating credential types. Refer to the Ansible for more information.",
          "type": "str",
          "required": false,
          "choices": [
            "ssh",
            "vault",
            "net",
            "scm",
            "cloud",
            "insights"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the credential type.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Create, update, or destroy custom Automation Platform Controller credential type."
    },
    "examples": "\n- credential_type:\n    name: Nexus\n    description: Credentials type for Nexus\n    kind: cloud\n    inputs: \"{{ lookup('file', 'credential_inputs_nexus.json') }}\"\n    injectors: {'extra_vars': {'nexus_credential': 'test' }}\n    state: present\n    validate_certs: false\n\n- credential_type:\n    name: Nexus\n    state: absent\n"
  },
  "awx.awx.tower_execution_environment": {
    "doc": {
      "description": "Create, update, or destroy Execution Environments in Automation Platform Controller. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credential": {
          "aliases": [],
          "description": "Name of the credential to use for the execution environment.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description to use for the execution environment.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "image": {
          "aliases": [],
          "description": "The fully qualified url of the container image.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name to use for the execution environment.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "organization": {
          "aliases": [],
          "description": "The organization the execution environment belongs to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pull": {
          "aliases": [],
          "description": "determine image pull behavior",
          "default": "missing",
          "type": "str",
          "required": false,
          "choices": [
            "always",
            "missing",
            "never"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "create, update, or destroy Execution Environments in Automation Platform Controller."
    },
    "examples": "\n- name: Add EE to the controller instance\n  execution_environment:\n    name: \"My EE\"\n    image: quay.io/ansible/awx-ee\n"
  },
  "awx.awx.tower_export": {
    "doc": {
      "description": "Export assets from Automation Platform Controller.",
      "has_action": false,
      "notes": "Specifying a name of \"all\" for any asset type will export all items of that asset type.\nIf no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "all": {
          "aliases": [],
          "description": "Export all assets",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credential_types": {
          "aliases": [],
          "description": "credential type name to export",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credentials": {
          "aliases": [],
          "description": "credential name to export",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "execution_environments": {
          "aliases": [],
          "description": "execution environment name to export",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "inventory": {
          "aliases": [],
          "description": "inventory name to export",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "inventory_sources": {
          "aliases": [],
          "description": "inventory soruce to export",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "job_templates": {
          "aliases": [],
          "description": "job template name to export",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "notification_templates": {
          "aliases": [],
          "description": "notification template name to export",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "organizations": {
          "aliases": [],
          "description": "organization name to export",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "projects": {
          "aliases": [],
          "description": "project name to export",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "teams": {
          "aliases": [],
          "description": "team name to export",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "users": {
          "aliases": [],
          "description": "user name to export",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "workflow_job_templates": {
          "aliases": [],
          "description": "workflow name to export",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "awxkit >= 9.3.0"
      ],
      "short_description": "export resources from Automation Platform Controller.",
      "version_added": "3.7.0"
    },
    "examples": "\n- name: Export all assets\n  export:\n    all: True\n\n- name: Export all inventories\n  export:\n    inventory: 'all'\n\n- name: Export a job template named \"My Template\" and all Credentials\n  export:\n    job_template: \"My Template\"\n    credential: 'all'\n"
  },
  "awx.awx.tower_group": {
    "doc": {
      "description": "Create, update, or destroy Automation Platform Controller groups. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "children": {
          "aliases": [
            "groups"
          ],
          "description": "List of groups that should be nested inside in this group.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "The description to use for the group.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hosts": {
          "aliases": [],
          "description": "List of hosts that should be put in this group.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "inventory": {
          "aliases": [],
          "description": "Inventory the group should be made a member of.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name to use for the group.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "new_name": {
          "aliases": [],
          "description": "A new name for this group (for renaming)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "preserve_existing_children": {
          "aliases": [
            "preserve_existing_groups"
          ],
          "description": "Provide option (False by default) to preserves existing children in an existing group.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "preserve_existing_hosts": {
          "aliases": [],
          "description": "Provide option (False by default) to preserves existing hosts in an existing group.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "variables": {
          "aliases": [],
          "description": "Variables to use for the group.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "create, update, or destroy Automation Platform Controller group."
    },
    "examples": "\n- name: Add group\n  group:\n    name: localhost\n    description: \"Local Host Group\"\n    inventory: \"Local Inventory\"\n    state: present\n    controller_config_file: \"~/tower_cli.cfg\"\n\n- name: Add group\n  group:\n    name: Cities\n    description: \"Local Host Group\"\n    inventory: Default Inventory\n    hosts:\n      - fda\n    children:\n      - NewYork\n    preserve_existing_hosts: True\n    preserve_existing_children: True\n"
  },
  "awx.awx.tower_host": {
    "doc": {
      "description": "Create, update, or destroy Automation Platform Controller hosts. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "The description to use for the host.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "If the host should be enabled.",
          "default": "yes",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "inventory": {
          "aliases": [],
          "description": "Inventory the host should be made a member of.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name to use for the host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "new_name": {
          "aliases": [],
          "description": "To use when changing a hosts's name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "variables": {
          "aliases": [],
          "description": "Variables to use for the host.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "create, update, or destroy Automation Platform Controller host."
    },
    "examples": "\n- name: Add host\n  host:\n    name: localhost\n    description: \"Local Host Group\"\n    inventory: \"Local Inventory\"\n    state: present\n    controller_config_file: \"~/tower_cli.cfg\"\n    variables:\n      example_var: 123\n"
  },
  "awx.awx.tower_import": {
    "doc": {
      "description": "Import assets into Automation Platform Controller. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "assets": {
          "aliases": [],
          "description": "The assets to import.\nThis can be the output of the export module or loaded from a file",
          "type": "dict",
          "required": true,
          "suboptions": {}
        },
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "awxkit >= 9.3.0"
      ],
      "short_description": "import resources into Automation Platform Controller.",
      "version_added": "3.7.0"
    },
    "examples": "\n- name: Export all assets\n  export:\n    all: True\n  register: export_output\n\n- name: Import all assets from our export\n  import:\n    assets: \"{{ export_output.assets }}\"\n\n- name: Load data from a json file created by a command like awx export --organization Default\n  import:\n    assets: \"{{ lookup('file', 'org.json') | from_json() }}\"\n"
  },
  "awx.awx.tower_instance_group": {
    "doc": {
      "description": "Create, update, or destroy Automation Platform Controller instance groups. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credential": {
          "aliases": [],
          "description": "Credential to authenticate with Kubernetes or OpenShift.  Must be of type \"Kubernetes/OpenShift API Bearer Token\".",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "instances": {
          "aliases": [],
          "description": "The instances associated with this instance_group",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "is_container_group": {
          "aliases": [],
          "description": "Signifies that this InstanceGroup should act as a ContainerGroup. If no credential is specified, the underlying Pod's ServiceAccount will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of this instance group.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "new_name": {
          "aliases": [],
          "description": "Setting this option will change the existing name (looked up via the name field.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pod_spec_override": {
          "aliases": [],
          "description": "A custom Kubernetes or OpenShift Pod specification.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "policy_instance_list": {
          "aliases": [],
          "description": "List of exact-match Instances that will be assigned to this group",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "policy_instance_minimum": {
          "aliases": [],
          "description": "Static minimum number of Instances that will be automatically assign to this group when new instances come online.",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "policy_instance_percentage": {
          "aliases": [],
          "description": "Minimum percentage of all instances that will be automatically assigned to this group when new instances come online.",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "create, update, or destroy Automation Platform Controller instance groups.",
      "version_added": "4.0.0"
    },
    "examples": "\n"
  },
  "awx.awx.tower_inventory": {
    "doc": {
      "description": "Create, update, or destroy Automation Platform Controller inventories. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "copy_from": {
          "aliases": [],
          "description": "Name or id to copy the inventory from.\nThis will copy an existing inventory and change any parameters supplied.\nThe new inventory name will be the one provided in the name parameter.\nThe organization parameter is not used in this, to facilitate copy from one organization to another.\nProvide the id or use the lookup plugin to provide the id if multiple inventories share the same name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "The description to use for the inventory.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host_filter": {
          "aliases": [],
          "description": "The host_filter field. Only useful when C(kind=smart).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "instance_groups": {
          "aliases": [],
          "description": "list of Instance Groups for this Organization to run on.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "kind": {
          "aliases": [],
          "description": "The kind field. Cannot be modified after created.",
          "default": "",
          "type": "str",
          "required": false,
          "choices": [
            "smart"
          ],
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name to use for the inventory.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "organization": {
          "aliases": [],
          "description": "Organization the inventory belongs to.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "variables": {
          "aliases": [],
          "description": "Inventory variables.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "create, update, or destroy Automation Platform Controller inventory."
    },
    "examples": "\n- name: Add inventory\n  inventory:\n    name: \"Foo Inventory\"\n    description: \"Our Foo Cloud Servers\"\n    organization: \"Bar Org\"\n    state: present\n    controller_config_file: \"~/tower_cli.cfg\"\n\n- name: Copy inventory\n  inventory:\n    name: Copy Foo Inventory\n    copy_from: Default Inventory\n    description: \"Our Foo Cloud Servers\"\n    organization: Foo\n    state: present\n"
  },
  "awx.awx.tower_inventory_source": {
    "doc": {
      "description": "Create, update, or destroy Automation Platform Controller inventory source. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credential": {
          "aliases": [],
          "description": "Credential to use for the source.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "custom_virtualenv": {
          "aliases": [],
          "description": "Local absolute file path containing a custom Python virtualenv to use.\nOnly compatible with older versions of AWX/Controller\nDeprecated, will be removed in the future",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "The description to use for the inventory source.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "enabled_value": {
          "aliases": [],
          "description": "Value when the host is considered enabled, e.g., \"powered_on\"",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "enabled_var": {
          "aliases": [],
          "description": "The variable to use to determine enabled state e.g., \"status.power_state\"",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "execution_environment": {
          "aliases": [],
          "description": "Execution Environment to use for the source.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host_filter": {
          "aliases": [],
          "description": "If specified, AWX will only import hosts that match this regular expression.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "inventory": {
          "aliases": [],
          "description": "Inventory the group should be made a member of.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name to use for the inventory source.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "new_name": {
          "aliases": [],
          "description": "A new name for this assets (will rename the asset)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "notification_templates_error": {
          "aliases": [],
          "description": "list of notifications to send on error",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "notification_templates_started": {
          "aliases": [],
          "description": "list of notifications to send on start",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "notification_templates_success": {
          "aliases": [],
          "description": "list of notifications to send on success",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "organization": {
          "aliases": [],
          "description": "Name of the inventory source's inventory's organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "overwrite": {
          "aliases": [],
          "description": "Delete child groups and hosts not found in source.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "overwrite_vars": {
          "aliases": [],
          "description": "Override vars in child groups and hosts with those from external source.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "source": {
          "aliases": [],
          "description": "The source to use for this group.",
          "type": "str",
          "required": false,
          "choices": [
            "scm",
            "ec2",
            "gce",
            "azure_rm",
            "vmware",
            "satellite6",
            "openstack",
            "rhv",
            "controller",
            "insights"
          ],
          "suboptions": {}
        },
        "source_path": {
          "aliases": [],
          "description": "For an SCM based inventory source, the source path points to the file within the repo to use as an inventory.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "source_project": {
          "aliases": [],
          "description": "Project to use as source with scm option",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "source_vars": {
          "aliases": [],
          "description": "The variables or environment fields to apply to this source type.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The amount of time (in seconds) to run before the task is canceled.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "update_cache_timeout": {
          "aliases": [],
          "description": "Time in seconds to consider an inventory sync to be current.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "update_on_launch": {
          "aliases": [],
          "description": "Refresh inventory data from its source each time a job is run.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "update_on_project_update": {
          "aliases": [],
          "description": "Update this source when the related project updates if source is C(scm)",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "verbosity": {
          "aliases": [],
          "description": "The verbosity level to run this inventory source under.",
          "type": "int",
          "required": false,
          "choices": [
            "0",
            "1",
            "2"
          ],
          "suboptions": {}
        }
      },
      "short_description": "create, update, or destroy Automation Platform Controller inventory source."
    },
    "examples": "\n- name: Add an inventory source\n  inventory_source:\n    name: \"source-inventory\"\n    description: Source for inventory\n    inventory: previously-created-inventory\n    credential: previously-created-credential\n    overwrite: True\n    update_on_launch: True\n    organization: Default\n    source_vars:\n      private: false\n"
  },
  "awx.awx.tower_inventory_source_update": {
    "doc": {
      "description": "Update Automation Platform Controller inventory source(s). See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "The interval to request an update from the controller.",
          "default": "1",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "inventory": {
          "aliases": [],
          "description": "Name or id of the inventory that contains the inventory source(s) to update.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "inventory_source"
          ],
          "description": "The name or id of the inventory source to update.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "organization": {
          "aliases": [],
          "description": "Name of the inventory source's inventory's organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "If waiting for the job to complete this will abort after this amount of seconds",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Wait for the job to complete.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Update inventory source(s)."
    },
    "examples": "\n- name: Update a single inventory source\n  inventory_source_update:\n    name: \"Example Inventory Source\"\n    inventory: \"My Inventory\"\n    organization: Default\n\n- name: Update all inventory sources\n  inventory_source_update:\n    name: \"{{ item }}\"\n    inventory: \"My Other Inventory\"\n  loop: \"{{ query('awx.awx.controller_api', 'inventory_sources', query_params={ 'inventory': 30 }, return_ids=True ) }}\"\n"
  },
  "awx.awx.tower_job_cancel": {
    "doc": {
      "description": "Cancel Automation Platform Controller jobs. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fail_if_not_running": {
          "aliases": [],
          "description": "Fail loudly if the I(job_id) can not be canceled",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "job_id": {
          "aliases": [],
          "description": "ID of the job to cancel",
          "type": "int",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Cancel an Automation Platform Controller Job."
    },
    "examples": "\n- name: Cancel job\n  job_cancel:\n    job_id: job.id\n"
  },
  "awx.awx.tower_job_launch": {
    "doc": {
      "description": "Launch an Automation Platform Controller jobs. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credential_passwords": {
          "aliases": [],
          "description": "Passwords for credentials which are set to prompt on launch",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "credentials": {
          "aliases": [
            "credential"
          ],
          "description": "Credential to use for job, only used if prompt for credential is set.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "diff_mode": {
          "aliases": [],
          "description": "Show the changes made by Ansible tasks where supported",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "extra_vars": {
          "aliases": [],
          "description": "extra_vars to use for the Job Template.\nask_extra_vars needs to be set to True via job_template module when creating the Job Template.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "The interval to request an update from the controller.",
          "default": "1",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "inventory": {
          "aliases": [],
          "description": "Inventory to use for the job, only used if prompt for inventory is set.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "job_type": {
          "aliases": [],
          "description": "Job_type to use for the job, only used if prompt for job_type is set.",
          "type": "str",
          "required": false,
          "choices": [
            "run",
            "check"
          ],
          "suboptions": {}
        },
        "limit": {
          "aliases": [],
          "description": "Limit to use for the I(job_template).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "job_template"
          ],
          "description": "Name of the job template to use.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "organization": {
          "aliases": [],
          "description": "Organization the job template exists in.\nUsed to help lookup the object, cannot be modified using this module.\nIf not provided, will lookup by name only, which does not work with duplicates.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "scm_branch": {
          "aliases": [],
          "description": "A specific of the SCM project to run the template on.\nThis is only applicable if your project allows for branch override.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "skip_tags": {
          "aliases": [],
          "description": "Specific tags to skip from the playbook.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "tags": {
          "aliases": [],
          "description": "Specific tags to use for from playbook.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "If waiting for the job to complete this will abort after this amount of seconds",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "verbosity": {
          "aliases": [],
          "description": "Verbosity level for this job run",
          "type": "int",
          "required": false,
          "choices": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5"
          ],
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Wait for the job to complete.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Launch an Ansible Job."
    },
    "examples": "\n- name: Launch a job\n  job_launch:\n    job_template: \"My Job Template\"\n  register: job\n\n- name: Launch a job template with extra_vars on remote controller instance\n  job_launch:\n    job_template: \"My Job Template\"\n    extra_vars:\n      var1: \"My First Variable\"\n      var2: \"My Second Variable\"\n      var3: \"My Third Variable\"\n    job_type: run\n\n- name: Launch a job with inventory and credential\n  job_launch:\n    job_template: \"My Job Template\"\n    inventory: \"My Inventory\"\n    credential: \"My Credential\"\n  register: job\n- name: Wait for job max 120s\n  job_wait:\n    job_id: \"{{ job.id }}\"\n    timeout: 120\n"
  },
  "awx.awx.tower_job_list": {
    "doc": {
      "description": "List Automation Platform Controller jobs. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "all_pages": {
          "aliases": [],
          "description": "Fetch all the pages and return a single result.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "page": {
          "aliases": [],
          "description": "Page number of the results to fetch.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "query": {
          "aliases": [],
          "description": "Query used to further filter the list of jobs. C({\"foo\":\"bar\"}) will be passed at C(?foo=bar)",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "status": {
          "aliases": [],
          "description": "Only list jobs with this status.",
          "type": "str",
          "required": false,
          "choices": [
            "pending",
            "waiting",
            "running",
            "error",
            "failed",
            "canceled",
            "successful"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "List Automation Platform Controller jobs."
    },
    "examples": "\n- name: List running jobs for the testing.yml playbook\n  job_list:\n    status: running\n    query: {\"playbook\": \"testing.yml\"}\n    controller_config_file: \"~/tower_cli.cfg\"\n  register: testing_jobs\n"
  },
  "awx.awx.tower_job_template": {
    "doc": {
      "description": "Create, update, or destroy Automation Platform Controller job templates. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "JSON for survey_spec can be found in the API Documentation. See U(https://docs.ansible.com/ansible-tower/latest/html/towerapi/api_ref.html#/Job_Templates/Job_Templates_job_templates_survey_spec_create) for POST operation payload example.\nIf no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "allow_simultaneous": {
          "aliases": [
            "concurrent_jobs_enabled"
          ],
          "description": "Allow simultaneous runs of the job template.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ask_credential_on_launch": {
          "aliases": [
            "ask_credential"
          ],
          "description": "Prompt user for credential on launch.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ask_diff_mode_on_launch": {
          "aliases": [
            "ask_diff_mode"
          ],
          "description": "Prompt user to enable diff mode (show changes) to files when supported by modules.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ask_inventory_on_launch": {
          "aliases": [
            "ask_inventory"
          ],
          "description": "Prompt user for inventory on launch.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ask_job_type_on_launch": {
          "aliases": [
            "ask_job_type"
          ],
          "description": "Prompt user for job type on launch.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ask_limit_on_launch": {
          "aliases": [
            "ask_limit"
          ],
          "description": "Prompt user for a limit on launch.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ask_scm_branch_on_launch": {
          "aliases": [],
          "description": "Prompt user for (scm branch) on launch.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ask_skip_tags_on_launch": {
          "aliases": [
            "ask_skip_tags"
          ],
          "description": "Prompt user for job tags to skip on launch.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ask_tags_on_launch": {
          "aliases": [
            "ask_tags"
          ],
          "description": "Prompt user for job tags on launch.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ask_variables_on_launch": {
          "aliases": [
            "ask_extra_vars"
          ],
          "description": "Prompt user for (extra_vars) on launch.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ask_verbosity_on_launch": {
          "aliases": [
            "ask_verbosity"
          ],
          "description": "Prompt user to choose a verbosity level on launch.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "become_enabled": {
          "aliases": [],
          "description": "Activate privilege escalation.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "copy_from": {
          "aliases": [],
          "description": "Name or id to copy the job template from.\nThis will copy an existing job template and change any parameters supplied.\nThe new job template name will be the one provided in the name parameter.\nThe organization parameter is not used in this, to facilitate copy from one organization to another.\nProvide the id or use the lookup plugin to provide the id if multiple job templates share the same name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credential": {
          "aliases": [],
          "description": "Name of the credential to use for the job template.\nDeprecated, use 'credentials'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credentials": {
          "aliases": [],
          "description": "List of credentials to use for the job template.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "custom_virtualenv": {
          "aliases": [],
          "description": "Local absolute file path containing a custom Python virtualenv to use.\nOnly compatible with older versions of AWX/Tower\nDeprecated, will be removed in the future",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description to use for the job template.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "diff_mode": {
          "aliases": [
            "diff_mode_enabled"
          ],
          "description": "Enable diff mode for the job template.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "execution_environment": {
          "aliases": [],
          "description": "Execution Environment to use for the JT.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "extra_vars": {
          "aliases": [],
          "description": "Specify C(extra_vars) for the template.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "force_handlers": {
          "aliases": [
            "force_handlers_enabled"
          ],
          "description": "Enable forcing playbook handlers to run even if a task fails.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "forks": {
          "aliases": [],
          "description": "The number of parallel or simultaneous processes to use while executing the playbook.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "host_config_key": {
          "aliases": [],
          "description": "Allow provisioning callbacks using this host config key.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "instance_groups": {
          "aliases": [],
          "description": "list of Instance Groups for this Organization to run on.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "inventory": {
          "aliases": [],
          "description": "Name of the inventory to use for the job template.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "job_slice_count": {
          "aliases": [],
          "description": "The number of jobs to slice into at runtime. Will cause the Job Template to launch a workflow if value is greater than 1.",
          "default": "1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "job_tags": {
          "aliases": [],
          "description": "Comma separated list of the tags to use for the job template.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "job_type": {
          "aliases": [],
          "description": "The job type to use for the job template.",
          "type": "str",
          "required": false,
          "choices": [
            "run",
            "check"
          ],
          "suboptions": {}
        },
        "labels": {
          "aliases": [],
          "description": "The labels applied to this job template",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "limit": {
          "aliases": [],
          "description": "A host pattern to further constrain the list of hosts managed or affected by the playbook",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name to use for the job template.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "new_name": {
          "aliases": [],
          "description": "Setting this option will change the existing name (looed up via the name field.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "notification_templates_error": {
          "aliases": [],
          "description": "list of notifications to send on error",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "notification_templates_started": {
          "aliases": [],
          "description": "list of notifications to send on start",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "notification_templates_success": {
          "aliases": [],
          "description": "list of notifications to send on success",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "organization": {
          "aliases": [],
          "description": "Organization the job template exists in.\nUsed to help lookup the object, cannot be modified using this module.\nThe Organization is inferred from the associated project\nIf not provided, will lookup by name only, which does not work with duplicates.\nRequires Automation Platform Version 3.7.0 or AWX 10.0.0 IS NOT backwards compatible with earlier versions.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "playbook": {
          "aliases": [],
          "description": "Path to the playbook to use for the job template within the project provided.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Name of the project to use for the job template.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "scm_branch": {
          "aliases": [],
          "description": "Branch to use in job run. Project default used if blank. Only allowed if project allow_override field is set to true.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "skip_tags": {
          "aliases": [],
          "description": "Comma separated list of the tags to skip for the job template.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "start_at_task": {
          "aliases": [],
          "description": "Start the playbook at the task matching this name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "survey_enabled": {
          "aliases": [],
          "description": "Enable a survey on the job template.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "survey_spec": {
          "aliases": [],
          "description": "JSON/YAML dict formatted survey definition.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Maximum time in seconds to wait for a job to finish (server-side).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_fact_cache": {
          "aliases": [
            "fact_caching_enabled"
          ],
          "description": "Enable use of fact caching for the job template.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vault_credential": {
          "aliases": [],
          "description": "Name of the vault credential to use for the job template.\nDeprecated, use 'credentials'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "verbosity": {
          "aliases": [],
          "description": "Control the output level Ansible produces as the playbook runs. 0 - Normal, 1 - Verbose, 2 - More Verbose, 3 - Debug, 4 - Connection Debug.",
          "default": "0",
          "type": "int",
          "required": false,
          "choices": [
            "0",
            "1",
            "2",
            "3",
            "4"
          ],
          "suboptions": {}
        },
        "webhook_credential": {
          "aliases": [],
          "description": "Personal Access Token for posting back the status to the service API",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "webhook_service": {
          "aliases": [],
          "description": "Service that webhook requests will be accepted from",
          "type": "str",
          "required": false,
          "choices": [
            "github",
            "gitlab"
          ],
          "suboptions": {}
        }
      },
      "short_description": "create, update, or destroy Automation Platform Controller job templates."
    },
    "examples": "\n- name: Create Ping job template\n  job_template:\n    name: \"Ping\"\n    job_type: \"run\"\n    organization: \"Default\"\n    inventory: \"Local\"\n    project: \"Demo\"\n    playbook: \"ping.yml\"\n    credentials:\n      - \"Local\"\n    state: \"present\"\n    controller_config_file: \"~/tower_cli.cfg\"\n    survey_enabled: yes\n    survey_spec: \"{{ lookup('file', 'my_survey.json') }}\"\n\n- name: Add start notification to Job Template\n  job_template:\n    name: \"Ping\"\n    notification_templates_started:\n      - Notification1\n      - Notification2\n\n- name: Remove Notification1 start notification from Job Template\n  job_template:\n    name: \"Ping\"\n    notification_templates_started:\n      - Notification2\n\n- name: Copy Job Template\n  job_template:\n    name: copy job template\n    copy_from: test job template\n    job_type: \"run\"\n    inventory: Copy Foo Inventory\n    project: test\n    playbook: hello_world.yml\n    state: \"present\"\n"
  },
  "awx.awx.tower_job_wait": {
    "doc": {
      "description": "Wait for Automation Platform Controller job to finish and report success or failure. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "The interval in sections, to request an update from the controller.\nFor backwards compatibility if unset this will be set to the average of min and max intervals",
          "default": "1",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "job_id": {
          "aliases": [],
          "description": "ID of the job to monitor.",
          "type": "int",
          "required": true,
          "suboptions": {}
        },
        "job_type": {
          "aliases": [],
          "description": "Job type to wait for",
          "default": "jobs",
          "type": "str",
          "required": false,
          "choices": [
            "project_updates",
            "jobs",
            "inventory_updates",
            "workflow_jobs"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Maximum time in seconds to wait for a job to finish.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Wait for Automation Platform Controller job to finish."
    },
    "examples": "\n- name: Launch a job\n  job_launch:\n    job_template: \"My Job Template\"\n  register: job\n\n- name: Wait for job max 120s\n  job_wait:\n    job_id: \"{{ job.id }}\"\n    timeout: 120\n"
  },
  "awx.awx.tower_label": {
    "doc": {
      "description": "Create, update, or destroy Automation Platform Controller labels. See U(https://www.ansible.com/tower) for an overview.\nNote, labels can only be created via the API, they can not be deleted. Once they are fully disassociated the API will clean them up on its own.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of this label.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "new_name": {
          "aliases": [],
          "description": "Setting this option will change the existing name (looked up via the name field).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "organization": {
          "aliases": [],
          "description": "Organization this label belongs to.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "create, update, or destroy Automation Platform Controller labels."
    },
    "examples": "\n- name: Add label to organization\n  label:\n    name: Custom Label\n    organization: My Organization\n"
  },
  "awx.awx.tower_license": {
    "doc": {
      "description": "Get or Set Automation Platform Controller license. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "By default, the license manifest will only be applied if Tower is currently unlicensed or trial licensed.  When force=true, the license is always applied.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "manifest": {
          "aliases": [],
          "description": "file path to a Red Hat subscription manifest (a .zip file)",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Set the license for Automation Platform Controller"
    },
    "examples": "\n- name: Set the license using a file\n  license:\n    manifest: \"/tmp/my_manifest.zip\"\n"
  },
  "awx.awx.tower_notification_template": {
    "doc": {
      "description": "Create, update, or destroy Automation Platform Controller notifications. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "copy_from": {
          "aliases": [],
          "description": "Name or id to copy the notification from.\nThis will copy an existing notification and change any parameters supplied.\nThe new notification name will be the one provided in the name parameter.\nThe organization parameter is not used in this, to facilitate copy from one organization to another.\nProvide the id or use the lookup plugin to provide the id if multiple notifications share the same name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "The description of the notification.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "messages": {
          "aliases": [],
          "description": "Optional custom messages for notification template.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the notification.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "new_name": {
          "aliases": [],
          "description": "Setting this option will change the existing name (looked up via the name field.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "notification_configuration": {
          "aliases": [],
          "description": "The notification configuration file. Note providing this field would disable all notification-configuration-related fields.\nusername (the mail server username)\nsender (the sender email address)\nrecipients (the recipients email addresses)\nuse_tls (the TLS trigger)\nhost (the mail server host)\nuse_ssl (the SSL trigger)\npassword (the mail server password)\nport (the mail server port)\nchannels (the destination Slack channels)\ntoken (the access token)\naccount_token (the Twillio account token)\nfrom_number (the source phone number)\nto_numbers (the destination phone numbers)\naccount_sid (the Twillio account SID)\nsubdomain (the PagerDuty subdomain)\nservice_key (the PagerDuty service/integration API key)\nclient_name (the PagerDuty client identifier)\nmessage_from (the label to be shown with the notification)\ncolor (the notification color)\nnotify (the notify channel trigger)\nurl (the target URL)\nheaders (the HTTP headers as JSON string)\nserver (the IRC server address)\nnickname (the IRC nickname)\ntargets (the destination channels or users)",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "notification_type": {
          "aliases": [],
          "description": "The type of notification to be sent.",
          "type": "str",
          "required": false,
          "choices": [
            "email",
            "grafana",
            "irc",
            "mattermost",
            "pagerduty",
            "rocketchat",
            "slack",
            "twilio",
            "webhook"
          ],
          "suboptions": {}
        },
        "organization": {
          "aliases": [],
          "description": "The organization the notification belongs to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "create, update, or destroy Automation Platform Controller notification."
    },
    "examples": "\n- name: Add Slack notification with custom messages\n  notification_template:\n    name: slack notification\n    organization: Default\n    notification_type: slack\n    notification_configuration:\n      channels:\n        - general\n      token: cefda9e2be1f21d11cdd9452f5b7f97fda977f42\n    messages:\n       started:\n         message: \"{{ '{{ job_friendly_name }}{{ job.id }} started' }}\"\n       success:\n         message: \"{{ '{{ job_friendly_name }} completed in {{ job.elapsed }} seconds' }}\"\n       error:\n         message: \"{{ '{{ job_friendly_name }} FAILED! Please look at {{ job.url }}' }}\"\n    state: present\n    controller_config_file: \"~/tower_cli.cfg\"\n\n- name: Add webhook notification\n  notification_template:\n    name: webhook notification\n    notification_type: webhook\n    notification_configuration:\n      url: http://www.example.com/hook\n      headers:\n        X-Custom-Header: value123\n    state: present\n    controller_config_file: \"~/tower_cli.cfg\"\n\n- name: Add email notification\n  notification_template:\n    name: email notification\n    notification_type: email\n    notification_configuration:\n      username: user\n      password: s3cr3t\n      sender: controller@example.com\n      recipients:\n        - user1@example.com\n      host: smtp.example.com\n      port: 25\n      use_tls: no\n      use_ssl: no\n    state: present\n    controller_config_file: \"~/tower_cli.cfg\"\n\n- name: Add twilio notification\n  notification_template:\n    name: twilio notification\n    notification_type: twilio\n    notification_configuration:\n      account_token: a_token\n      account_sid: a_sid\n      from_number: '+15551112222'\n      to_numbers:\n        - '+15553334444'\n    state: present\n    controller_config_file: \"~/tower_cli.cfg\"\n\n- name: Add PagerDuty notification\n  notification_template:\n    name: pagerduty notification\n    notification_type: pagerduty\n    notification_configuration:\n      token: a_token\n      subdomain: sub\n      client_name: client\n      service_key: a_key\n    state: present\n    controller_config_file: \"~/tower_cli.cfg\"\n\n- name: Add IRC notification\n  notification_template:\n    name: irc notification\n    notification_type: irc\n    notification_configuration:\n      nickname: controller\n      password: s3cr3t\n      targets:\n        - user1\n      port: 8080\n      server: irc.example.com\n      use_ssl: no\n    state: present\n    controller_config_file: \"~/tower_cli.cfg\"\n\n- name: Delete notification\n  notification_template:\n    name: old notification\n    state: absent\n    controller_config_file: \"~/tower_cli.cfg\"\n\n- name: Copy webhook notification\n  notification_template:\n    name: foo notification\n    copy_from: email notification\n    organization: Foo\n"
  },
  "awx.awx.tower_organization": {
    "doc": {
      "description": "Create, update, or destroy Automation Platform Controller organizations. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "custom_virtualenv": {
          "aliases": [],
          "description": "Local absolute file path containing a custom Python virtualenv to use.\nOnly compatible with older versions of AWX/Tower\nDeprecated, will be removed in the future",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "default_environment": {
          "aliases": [],
          "description": "Default Execution Environment to use for jobs owned by the Organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "The description to use for the organization.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "galaxy_credentials": {
          "aliases": [],
          "description": "list of Ansible Galaxy credentials to associate to the organization",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "instance_groups": {
          "aliases": [],
          "description": "list of Instance Groups for this Organization to run on.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "max_hosts": {
          "aliases": [],
          "description": "The max hosts allowed in this organizations",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name to use for the organization.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "notification_templates_approvals": {
          "aliases": [],
          "description": "list of notifications to send on start",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "notification_templates_error": {
          "aliases": [],
          "description": "list of notifications to send on error",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "notification_templates_started": {
          "aliases": [],
          "description": "list of notifications to send on start",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "notification_templates_success": {
          "aliases": [],
          "description": "list of notifications to send on success",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "create, update, or destroy Automation Platform Controller organizations"
    },
    "examples": "\n- name: Create organization\n  organization:\n    name: \"Foo\"\n    description: \"Foo bar organization\"\n    state: present\n    controller_config_file: \"~/tower_cli.cfg\"\n\n- name: Create organization using 'foo-venv' as default Python virtualenv\n  organization:\n    name: \"Foo\"\n    description: \"Foo bar organization using foo-venv\"\n    state: present\n    controller_config_file: \"~/tower_cli.cfg\"\n\n- name: Create organization that pulls content from galaxy.ansible.com\n  organization:\n    name: \"Foo\"\n    state: present\n    galaxy_credentials:\n      - Ansible Galaxy\n    controller_config_file: \"~/tower_cli.cfg\"\n"
  },
  "awx.awx.tower_project": {
    "doc": {
      "description": "Create, update, or destroy Automation Platform Controller projects. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "allow_override": {
          "aliases": [
            "scm_allow_override"
          ],
          "description": "Allow changing the SCM branch or revision in a job template that uses this project.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "copy_from": {
          "aliases": [],
          "description": "Name or id to copy the project from.\nThis will copy an existing project and change any parameters supplied.\nThe new project name will be the one provided in the name parameter.\nThe organization parameter is not used in this, to facilitate copy from one organization to another.\nProvide the id or use the lookup plugin to provide the id if multiple projects share the same name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credential": {
          "aliases": [
            "scm_credential"
          ],
          "description": "Name of the credential to use with this SCM resource.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "custom_virtualenv": {
          "aliases": [],
          "description": "Local absolute file path containing a custom Python virtualenv to use.\nOnly compatible with older versions of AWX/Tower\nDeprecated, will be removed in the future",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "default_environment": {
          "aliases": [],
          "description": "Default Execution Environment to use for jobs relating to the project.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description to use for the project.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "The interval to request an update from the controller.\nRequires wait.",
          "default": "1",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "local_path": {
          "aliases": [],
          "description": "The server playbook directory for manual projects.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name to use for the project.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "notification_templates_error": {
          "aliases": [],
          "description": "list of notifications to send on error",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "notification_templates_started": {
          "aliases": [],
          "description": "list of notifications to send on start",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "notification_templates_success": {
          "aliases": [],
          "description": "list of notifications to send on success",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "organization": {
          "aliases": [],
          "description": "Name of organization for project.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "scm_branch": {
          "aliases": [],
          "description": "The branch to use for the SCM resource.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "scm_clean": {
          "aliases": [],
          "description": "Remove local modifications before updating.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "scm_delete_on_update": {
          "aliases": [],
          "description": "Remove the repository completely before updating.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "scm_refspec": {
          "aliases": [],
          "description": "The refspec to use for the SCM resource.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "scm_track_submodules": {
          "aliases": [],
          "description": "Track submodules latest commit on specified branch.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "scm_type": {
          "aliases": [],
          "description": "Type of SCM resource.",
          "default": "manual",
          "type": "str",
          "required": false,
          "choices": [
            "manual",
            "git",
            "svn",
            "insights"
          ],
          "suboptions": {}
        },
        "scm_update_cache_timeout": {
          "aliases": [],
          "description": "Cache Timeout to cache prior project syncs for a certain number of seconds. Only valid if scm_update_on_launch is to True, otherwise ignored.",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "scm_update_on_launch": {
          "aliases": [],
          "description": "Before an update to the local repository before launching a job with this project.",
          "default": "no",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "scm_url": {
          "aliases": [],
          "description": "URL of SCM resource.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [
            "job_timeout"
          ],
          "description": "The amount of time (in seconds) to run before the SCM Update is canceled. A value of 0 means no timeout.\nIf waiting for the project to update this will abort after this amount of seconds",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "update_project": {
          "aliases": [],
          "description": "Force project to update after changes.\nUsed in conjunction with wait, interval, and timeout.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Provides option (True by default) to wait for completed project sync before returning\nCan assure playbook files are populated so that job templates that rely on the project may be successfully created",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "create, update, or destroy Automation Platform Controller projects"
    },
    "examples": "\n- name: Add project\n  project:\n    name: \"Foo\"\n    description: \"Foo bar project\"\n    organization: \"test\"\n    state: present\n    controller_config_file: \"~/tower_cli.cfg\"\n\n- name: Add Project with cache timeout\n  project:\n    name: \"Foo\"\n    description: \"Foo bar project\"\n    organization: \"test\"\n    scm_update_on_launch: True\n    scm_update_cache_timeout: 60\n    state: present\n    controller_config_file: \"~/tower_cli.cfg\"\n\n- name: Copy project\n  project:\n    name: copy\n    copy_from: test\n    description: Foo copy project\n    organization: Foo\n    state: present\n"
  },
  "awx.awx.tower_project_update": {
    "doc": {
      "description": "Update a Automation Platform Controller Project. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "The interval to request an update from the controller.",
          "default": "1",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "project"
          ],
          "description": "The name or id of the project to update.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "organization": {
          "aliases": [],
          "description": "Organization the project exists in.\nUsed to help lookup the object, cannot be modified using this module.\nIf not provided, will lookup by name only, which does not work with duplicates.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "If waiting for the project to update this will abort after this amount of seconds",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Wait for the project to update.\nIf scm revision has not changed module will return not changed.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Update a Project in Automation Platform Controller"
    },
    "examples": "\n- name: Launch a project with a timeout of 10 seconds\n  project_update:\n    project: \"Networking Project\"\n    timeout: 10\n\n- name: Launch a Project with extra_vars without waiting\n  project_update:\n    project: \"Networking Project\"\n    wait: False\n"
  },
  "awx.awx.tower_role": {
    "doc": {
      "description": "Roles are used for access control, this module is for managing user access to server resources.\nGrant or revoke Automation Platform Controller roles to users. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credential": {
          "aliases": [],
          "description": "Credential the role acts on.\nDeprecated, use 'credentials'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credentials": {
          "aliases": [],
          "description": "Credential the role acts on.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "inventories": {
          "aliases": [],
          "description": "Inventory the role acts on.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "inventory": {
          "aliases": [],
          "description": "Inventory the role acts on.\nDeprecated, use 'inventories'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "job_template": {
          "aliases": [],
          "description": "The job template the role acts on.\nDeprecated, use 'job_templates'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "job_templates": {
          "aliases": [],
          "description": "The job template the role acts on.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "lookup_organization": {
          "aliases": [],
          "description": "Organization the inventories, job templates, projects, or workflows the items exists in.\nUsed to help lookup the object, for organization roles see organization.\nIf not provided, will lookup by name only, which does not work with duplicates.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "organization": {
          "aliases": [],
          "description": "Organization the role acts on.\nDeprecated, use 'organizations'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "organizations": {
          "aliases": [],
          "description": "Organization the role acts on.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "project": {
          "aliases": [],
          "description": "Project the role acts on.\nDeprecated, use 'projects'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "projects": {
          "aliases": [],
          "description": "Project the role acts on.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "role": {
          "aliases": [],
          "description": "The role type to grant/revoke.",
          "type": "str",
          "required": true,
          "choices": [
            "admin",
            "read",
            "member",
            "execute",
            "adhoc",
            "update",
            "use",
            "approval",
            "auditor",
            "project_admin",
            "inventory_admin",
            "credential_admin",
            "workflow_admin",
            "notification_admin",
            "job_template_admin"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state.\nState of present indicates the user should have the role.\nState of absent indicates the user should have the role taken away, if they have it.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "target_team": {
          "aliases": [],
          "description": "Team that the role acts on.\nFor example, make someone a member or an admin of a team.\nMembers of a team implicitly receive the permissions that the team has.\nDeprecated, use 'target_teams'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "target_teams": {
          "aliases": [],
          "description": "Team that the role acts on.\nFor example, make someone a member or an admin of a team.\nMembers of a team implicitly receive the permissions that the team has.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "team": {
          "aliases": [],
          "description": "Team that receives the permissions specified by the role.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "User that receives the permissions specified by the role.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "workflow": {
          "aliases": [],
          "description": "The workflow job template the role acts on.\nDeprecated, use 'workflows'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "workflows": {
          "aliases": [],
          "description": "The workflow job template the role acts on.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        }
      },
      "short_description": "grant or revoke an Automation Platform Controller role."
    },
    "examples": "\n- name: Add jdoe to the member role of My Team\n  role:\n    user: jdoe\n    target_team: \"My Team\"\n    role: member\n    state: present\n\n- name: Add Joe to multiple job templates and a workflow\n  role:\n    user: joe\n    role: execute\n    workflow: test-role-workflow\n    job_templates:\n      - jt1\n      - jt2\n    state: present\n"
  },
  "awx.awx.tower_schedule": {
    "doc": {
      "description": "Create, update, or destroy Automation Platform Controller schedules. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credentials": {
          "aliases": [],
          "description": "List of credentials applied as a prompt, assuming job template prompts for credentials",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Optional description of this schedule.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "diff_mode": {
          "aliases": [],
          "description": "Enable diff mode for the job template.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "Enables processing of this schedule.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "extra_data": {
          "aliases": [],
          "description": "Specify C(extra_vars) for the template.",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "inventory": {
          "aliases": [],
          "description": "Inventory applied as a prompt, assuming job template prompts for inventory",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "job_tags": {
          "aliases": [],
          "description": "Comma separated list of the tags to use for the job template.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "job_type": {
          "aliases": [],
          "description": "The job type to use for the job template.",
          "type": "str",
          "required": false,
          "choices": [
            "run",
            "check"
          ],
          "suboptions": {}
        },
        "limit": {
          "aliases": [],
          "description": "A host pattern to further constrain the list of hosts managed or affected by the playbook",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of this schedule.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "new_name": {
          "aliases": [],
          "description": "Setting this option will change the existing name (looked up via the name field.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "organization": {
          "aliases": [],
          "description": "The organization the unified job template exists in.\nUsed for looking up the unified job template, not a direct model field.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "rrule": {
          "aliases": [],
          "description": "A value representing the schedules iCal recurrence rule.\nSee rrule plugin for help constructing this value",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "scm_branch": {
          "aliases": [],
          "description": "Branch to use in job run. Project default used if blank. Only allowed if project allow_override field is set to true.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "skip_tags": {
          "aliases": [],
          "description": "Comma separated list of the tags to skip for the job template.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "unified_job_template": {
          "aliases": [],
          "description": "Name of unified job template to schedule.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "verbosity": {
          "aliases": [],
          "description": "Control the output level Ansible produces as the playbook runs. 0 - Normal, 1 - Verbose, 2 - More Verbose, 3 - Debug, 4 - Connection Debug.",
          "type": "int",
          "required": false,
          "choices": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5"
          ],
          "suboptions": {}
        }
      },
      "short_description": "create, update, or destroy Automation Platform Controller schedules."
    },
    "examples": "\n- name: Build a schedule for Demo Job Template\n  schedule:\n    name: \"{{ sched1 }}\"\n    state: present\n    unified_job_template: \"Demo Job Template\"\n    rrule: \"DTSTART:20191219T130551Z RRULE:FREQ=WEEKLY;INTERVAL=1;COUNT=1\"\n  register: result\n\n- name: Build the same schedule using the rrule plugin\n  schedule:\n    name: \"{{ sched1 }}\"\n    state: present\n    unified_job_template: \"Demo Job Template\"\n    rrule: \"{{ query('awx.awx.schedule_rrule', 'week', start_date='2019-12-19 13:05:51') }}\"\n  register: result\n"
  },
  "awx.awx.tower_settings": {
    "doc": {
      "description": "Modify Automation Platform Controller settings. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of setting to modify",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "settings": {
          "aliases": [],
          "description": "A data structure to be sent into the settings endpoint",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "value": {
          "aliases": [],
          "description": "Value to be modified for given setting.\nIf given a non-string type, will make best effort to cast it to type API expects.\nFor better control over types, use the C(settings) param instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pyyaml"
      ],
      "short_description": "Modify Automation Platform Controller settings."
    },
    "examples": "\n- name: Set the value of AWX_ISOLATION_BASE_PATH\n  settings:\n    name: AWX_ISOLATION_BASE_PATH\n    value: \"/tmp\"\n  register: testing_settings\n\n- name: Set the value of AWX_ISOLATION_SHOW_PATHS\n  settings:\n    name: \"AWX_ISOLATION_SHOW_PATHS\"\n    value: \"'/var/lib/awx/projects/', '/tmp'\"\n  register: testing_settings\n\n- name: Set the LDAP Auth Bind Password\n  settings:\n    name: \"AUTH_LDAP_BIND_PASSWORD\"\n    value: \"Password\"\n  no_log: true\n\n- name: Set all the LDAP Auth Bind Params\n  settings:\n    settings:\n      AUTH_LDAP_BIND_PASSWORD: \"password\"\n      AUTH_LDAP_USER_ATTR_MAP:\n        email: \"mail\"\n        first_name: \"givenName\"\n        last_name: \"surname\"\n"
  },
  "awx.awx.tower_team": {
    "doc": {
      "description": "Create, update, or destroy Automation Platform Controller teams. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "The description to use for the team.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name to use for the team.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "new_name": {
          "aliases": [],
          "description": "To use when changing a team's name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "organization": {
          "aliases": [],
          "description": "Organization the team should be made a member of.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "create, update, or destroy Automation Platform Controller team."
    },
    "examples": "\n- name: Create team\n  team:\n    name: Team Name\n    description: Team Description\n    organization: test-org\n    state: present\n    controller_config_file: \"~/tower_cli.cfg\"\n"
  },
  "awx.awx.tower_token": {
    "doc": {
      "description": "Create or destroy Automation Platform Controller tokens. See U(https://www.ansible.com/tower) for an overview.\nIn addition, the module sets an Ansible fact which can be passed into other controller modules as the parameter controller_oauthtoken. See examples for usage.\nBecause of the sensitive nature of tokens, the created token value is only available once through the Ansible fact. (See RETURN for details)\nDue to the nature of tokens this module is not idempotent. A second will with the same parameters will create a new token.\nIf you are creating a temporary token for use with modules you should delete the token when you are done with it. See the example for how to do it.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "application": {
          "aliases": [],
          "description": "The application tied to this token.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Optional description of this access token.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "existing_token": {
          "aliases": [],
          "description": "The data structure produced from token in create mode to be used with state absent.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "existing_token_id": {
          "aliases": [],
          "description": "A token ID (number) which can be used to delete an arbitrary token with state absent.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "scope": {
          "aliases": [],
          "description": "Allowed scopes, further restricts user's permissions. Must be a simple space-separated string with allowed scopes ['read', 'write'].",
          "default": "write",
          "type": "str",
          "required": false,
          "choices": [
            "read",
            "write"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "create, update, or destroy Automation Platform Controller tokens.",
      "version_added": "2.3.0"
    },
    "examples": "\n- block:\n    - name: Create a new token using an existing token\n      token:\n        description: '{{ token_description }}'\n        scope: \"write\"\n        state: present\n        controller_oauthtoken: \"{{ my_existing_token }}\"\n\n    - name: Delete this token\n      token:\n        existing_token: \"{{ token }}\"\n        state: absent\n\n    - name: Create a new token using username/password\n      token:\n        description: '{{ token_description }}'\n        scope: \"write\"\n        state: present\n        controller_username: \"{{ my_username }}\"\n        controller_password: \"{{ my_password }}\"\n\n    - name: Use our new token to make another call\n      job_list:\n        controller_oauthtoken: \"{{ token }}\"\n\n  always:\n    - name: Delete our Token with the token we created\n      token:\n        existing_token: \"{{ token }}\"\n        state: absent\n      when: token is defined\n\n- name: Delete a token by its id\n  token:\n    existing_token_id: 4\n    state: absent\n"
  },
  "awx.awx.tower_user": {
    "doc": {
      "description": "Create, update, or destroy Automation Platform Controller users. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "email": {
          "aliases": [],
          "description": "Email address of the user.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "first_name": {
          "aliases": [],
          "description": "First name of the user.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "is_superuser": {
          "aliases": [
            "superuser"
          ],
          "description": "Designates that this user has all permissions without explicitly assigning them.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "is_system_auditor": {
          "aliases": [
            "auditor"
          ],
          "description": "User is a system wide auditor.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "last_name": {
          "aliases": [],
          "description": "Last name of the user.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Write-only field used to change the password.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "update_secrets": {
          "aliases": [],
          "description": "C(true) will always change password if user specifies password, even if API gives $encrypted$ for password.\nC(false) will only set the password if other values change too.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "create, update, or destroy Automation Platform Controller users."
    },
    "examples": "\n- name: Add user\n  user:\n    username: jdoe\n    password: foobarbaz\n    email: jdoe@example.org\n    first_name: John\n    last_name: Doe\n    state: present\n    controller_config_file: \"~/tower_cli.cfg\"\n\n- name: Add user as a system administrator\n  user:\n    username: jdoe\n    password: foobarbaz\n    email: jdoe@example.org\n    superuser: yes\n    state: present\n    controller_config_file: \"~/tower_cli.cfg\"\n\n- name: Add user as a system auditor\n  user:\n    username: jdoe\n    password: foobarbaz\n    email: jdoe@example.org\n    auditor: yes\n    state: present\n    controller_config_file: \"~/tower_cli.cfg\"\n\n- name: Delete user\n  user:\n    username: jdoe\n    email: jdoe@example.org\n    state: absent\n    controller_config_file: \"~/tower_cli.cfg\"\n"
  },
  "awx.awx.tower_workflow_approval": {
    "doc": {
      "description": "Approve an approval node in a workflow job. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "action": {
          "aliases": [],
          "description": "Type of action to take.",
          "default": "approve",
          "type": "str",
          "required": false,
          "choices": [
            "approve",
            "deny"
          ],
          "suboptions": {}
        },
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "The interval in sections, to request an update from the controller.",
          "default": "1",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the Approval node to approve or deny.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Maximum time in seconds to wait for a workflow job to to reach approval node.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "workflow_job_id": {
          "aliases": [],
          "description": "ID of the workflow job to monitor for approval.",
          "type": "int",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Approve an approval node in a workflow job."
    },
    "examples": "\n- name: Launch a workflow with a timeout of 10 seconds\n  workflow_launch:\n    workflow_template: \"Test Workflow\"\n    wait: False\n  register: workflow\n\n- name: Wait for approval node to activate and approve\n  workflow_approval:\n    workflow_job_id: \"{{ workflow.id }}\"\n    name: Approve Me\n    interval: 10\n    timeout: 20\n    action: deny\n"
  },
  "awx.awx.tower_workflow_job_template": {
    "doc": {
      "description": "Create, update, or destroy Automation Platform Controller workflow job templates.\nReplaces the deprecated tower_workflow_template module.\nUse workflow_job_template_node after this, or use the schema parameter to build the workflow's graph",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "allow_simultaneous": {
          "aliases": [],
          "description": "Allow simultaneous runs of the workflow job template.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ask_inventory_on_launch": {
          "aliases": [],
          "description": "Prompt user for inventory on launch of this workflow job template",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ask_limit_on_launch": {
          "aliases": [],
          "description": "Prompt user for limit on launch of this workflow job template",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ask_scm_branch_on_launch": {
          "aliases": [],
          "description": "Prompt user for SCM branch on launch of this workflow job template",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ask_variables_on_launch": {
          "aliases": [],
          "description": "Prompt user for C(extra_vars) on launch.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "copy_from": {
          "aliases": [],
          "description": "Name or id to copy the workflow job template from.\nThis will copy an existing workflow job template and change any parameters supplied.\nThe new workflow job template name will be the one provided in the name parameter.\nThe organization parameter is not used in this, to facilitate copy from one organization to another.\nProvide the id or use the lookup plugin to provide the id if multiple workflow job templates share the same name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Optional description of this workflow job template.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "destroy_current_schema": {
          "aliases": [],
          "description": "Set in order to destroy current schema on the workflow.\nThis option is used for full schema update, if not used, nodes not described in schema will persist and keep current associations and links.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "extra_vars": {
          "aliases": [],
          "description": "Variables which will be made available to jobs ran inside the workflow.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "inventory": {
          "aliases": [],
          "description": "Inventory applied as a prompt, assuming job template prompts for inventory",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "labels": {
          "aliases": [],
          "description": "The labels applied to this job template",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "limit": {
          "aliases": [],
          "description": "Limit applied as a prompt, assuming job template prompts for limit",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of this workflow job template.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "new_name": {
          "aliases": [],
          "description": "Setting this option will change the existing name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "notification_templates_approvals": {
          "aliases": [],
          "description": "list of notifications to send on start",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "notification_templates_error": {
          "aliases": [],
          "description": "list of notifications to send on error",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "notification_templates_started": {
          "aliases": [],
          "description": "list of notifications to send on start",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "notification_templates_success": {
          "aliases": [],
          "description": "list of notifications to send on success",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "organization": {
          "aliases": [],
          "description": "Organization the workflow job template exists in.\nUsed to help lookup the object, cannot be modified using this module.\nIf not provided, will lookup by name only, which does not work with duplicates.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "schema": {
          "aliases": [],
          "description": "A json list of nodes and their coresponding options. The following suboptions describe a single node.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "all_parents_must_converge": {
              "aliases": [],
              "description": "If enabled then the node will only run if all of the parent nodes have met the criteria to reach this node",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "diff_mode": {
              "aliases": [],
              "description": "Run diff mode, applied as a prompt, if job template prompts for diff mode",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "extra_data": {
              "aliases": [],
              "description": "Variables to apply at launch time.\nWill only be accepted if job template prompts for vars or has a survey asking for those vars.",
              "default": "{}",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "identifier": {
              "aliases": [],
              "description": "An identifier for this node that is unique within its workflow.\nIt is copied to workflow job nodes corresponding to this node.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "inventory": {
              "aliases": [],
              "description": "Inventory applied as a prompt, if job template prompts for inventory",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "job_tags": {
              "aliases": [],
              "description": "Job tags applied as a prompt, if job template prompts for job tags",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "job_type": {
              "aliases": [],
              "description": "Job type applied as a prompt, if job template prompts for job type",
              "type": "str",
              "required": false,
              "choices": [
                "run",
                "check"
              ],
              "suboptions": {}
            },
            "limit": {
              "aliases": [],
              "description": "Limit to act on, applied as a prompt, if job template prompts for limit",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "related": {
              "aliases": [],
              "description": "Related items to this workflow node.\nMust include credentials, failure_nodes, always_nodes, success_nodes, even if empty.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "always_nodes": {
                  "aliases": [],
                  "description": "Nodes that will run after this node completes.\nList of node identifiers.",
                  "type": "list",
                  "required": false,
                  "suboptions": {
                    "identifier": {
                      "aliases": [],
                      "description": "Identifier of Node that will run after this node completes given this option.",
                      "required": false,
                      "elements": "str",
                      "suboptions": {}
                    }
                  }
                },
                "credentials": {
                  "aliases": [],
                  "description": "Credentials to be applied to job as launch-time prompts.\nList of credential names.\nUniqueness is not handled rigorously.",
                  "type": "list",
                  "required": false,
                  "suboptions": {
                    "name": {
                      "aliases": [],
                      "description": "Name Credentials to be applied to job as launch-time prompts.",
                      "required": false,
                      "elements": "str",
                      "suboptions": {}
                    }
                  }
                },
                "failure_nodes": {
                  "aliases": [],
                  "description": "Nodes that will run after this node on failure.\nList of node identifiers.",
                  "type": "list",
                  "required": false,
                  "suboptions": {
                    "identifier": {
                      "aliases": [],
                      "description": "Identifier of Node that will run after this node completes given this option.",
                      "required": false,
                      "elements": "str",
                      "suboptions": {}
                    }
                  }
                },
                "success_nodes": {
                  "aliases": [],
                  "description": "Nodes that will run after this node on success.\nList of node identifiers.",
                  "type": "list",
                  "required": false,
                  "suboptions": {
                    "identifier": {
                      "aliases": [],
                      "description": "Identifier of Node that will run after this node completes given this option.",
                      "required": false,
                      "elements": "str",
                      "suboptions": {}
                    }
                  }
                }
              }
            },
            "scm_branch": {
              "aliases": [],
              "description": "SCM branch applied as a prompt, if job template prompts for SCM branch",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "skip_tags": {
              "aliases": [],
              "description": "Tags to skip, applied as a prompt, if job tempalte prompts for job tags",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "state": {
              "aliases": [],
              "description": "Desired state of the resource.",
              "default": "present",
              "type": "str",
              "required": false,
              "choices": [
                "present",
                "absent"
              ],
              "suboptions": {}
            },
            "unified_job_template": {
              "aliases": [],
              "description": "Name of unified job template to run in the workflow.\nCan be a job template, project sync, inventory source sync, etc.\nOmit if creating an approval node (not yet implemented).",
              "type": "dict",
              "required": false,
              "suboptions": {
                "description": {
                  "aliases": [],
                  "description": "Optional description of this workflow approval template.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "inventory": {
                  "aliases": [],
                  "description": "Name of key for use in model for organizational reference\nOnly Valid and used if referencing an inventory sync\nThis parameter is mutually exclusive with suboption C(organization).",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "organization": {
                      "aliases": [],
                      "description": "Name of key for use in model for organizational reference",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "name": {
                          "aliases": [],
                          "description": "The organization of the inventory the node exists in.\nUsed for looking up the job template or project, not a direct model field.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    }
                  }
                },
                "name": {
                  "aliases": [],
                  "description": "Name of unified job template to run in the workflow.\nCan be a job template, project, inventory source, etc.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "organization": {
                  "aliases": [],
                  "description": "Name of key for use in model for organizational reference\nOnly Valid and used if referencing a job template or project sync\nThis parameter is mutually exclusive with suboption C(inventory).",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "name": {
                      "aliases": [],
                      "description": "The organization of the job template or project sync the node exists in.\nUsed for looking up the job template or project sync, not a direct model field.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "timeout": {
                  "aliases": [],
                  "description": "The amount of time (in seconds) to wait before Approval is canceled. A value of 0 means no timeout.\nOnly Valid and used if referencing an Approval Node",
                  "default": "0",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "type": {
                  "aliases": [],
                  "description": "Name of unified job template type to run in the workflow.\nCan be a job_template, project, inventory_source, workflow_approval.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "verbosity": {
              "aliases": [],
              "description": "Verbosity applied as a prompt, if job template prompts for verbosity",
              "type": "str",
              "required": false,
              "choices": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5"
              ],
              "suboptions": {}
            }
          }
        },
        "scm_branch": {
          "aliases": [],
          "description": "SCM branch applied as a prompt, assuming job template prompts for SCM branch",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "survey_enabled": {
          "aliases": [],
          "description": "Setting that variable will prompt the user for job type on the workflow launch.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "survey_spec": {
          "aliases": [
            "survey"
          ],
          "description": "The definition of the survey associated to the workflow.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "webhook_credential": {
          "aliases": [],
          "description": "Personal Access Token for posting back the status to the service API",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "webhook_service": {
          "aliases": [],
          "description": "Service that webhook requests will be accepted from",
          "type": "str",
          "required": false,
          "choices": [
            "github",
            "gitlab"
          ],
          "suboptions": {}
        }
      },
      "short_description": "create, update, or destroy Automation Platform Controller workflow job templates."
    },
    "examples": "\n- name: Create a workflow job template\n  workflow_job_template:\n    name: example-workflow\n    description: created by Ansible Playbook\n    organization: Default\n\n- name: Create a workflow job template with schema in template\n  awx.awx.workflow_job_template:\n    name: example-workflow\n    inventory: Demo Inventory\n    extra_vars: {'foo': 'bar', 'another-foo': {'barz': 'bar2'}}\n    schema:\n      - identifier: node101\n        unified_job_template:\n          name: example-project\n          inventory:\n            organization:\n              name: Default\n          type: inventory_source\n        related:\n          success_nodes: []\n          failure_nodes:\n            - identifier: node201\n          always_nodes: []\n          credentials: []\n      - identifier: node201\n        unified_job_template:\n          organization:\n            name: Default\n          name: job template 1\n          type: job_template\n        credentials: []\n        related:\n          success_nodes:\n            - identifier: node301\n          failure_nodes: []\n          always_nodes: []\n          credentials: []\n      - identifier: node202\n        unified_job_template:\n          organization:\n            name: Default\n          name: example-project\n          type: project\n        related:\n          success_nodes: []\n          failure_nodes: []\n          always_nodes: []\n          credentials: []\n      - identifier: node301\n        all_parents_must_converge: false\n        unified_job_template:\n          organization:\n            name: Default\n          name: job template 2\n          type: job_template\n        related:\n          success_nodes: []\n          failure_nodes: []\n          always_nodes: []\n          credentials: []\n  register: result\n\n- name: Copy a workflow job template\n  workflow_job_template:\n    name: copy-workflow\n    copy_from: example-workflow\n    organization: Foo\n\n- name: Create a workflow job template with schema in template\n  awx.awx.workflow_job_template:\n    name: example-workflow\n    inventory: Demo Inventory\n    extra_vars: {'foo': 'bar', 'another-foo': {'barz': 'bar2'}}\n    schema:\n      - identifier: node101\n        unified_job_template:\n          name: example-project\n          inventory:\n            organization:\n              name: Default\n          type: inventory_source\n        related:\n          success_nodes: []\n          failure_nodes:\n            - identifier: node201\n          always_nodes: []\n          credentials: []\n      - identifier: node201\n        unified_job_template:\n          organization:\n            name: Default\n          name: job template 1\n          type: job_template\n        credentials: []\n        related:\n          success_nodes:\n            - identifier: node301\n          failure_nodes: []\n          always_nodes: []\n          credentials: []\n      - identifier: node202\n        unified_job_template:\n          organization:\n            name: Default\n          name: example-project\n          type: project\n        related:\n          success_nodes: []\n          failure_nodes: []\n          always_nodes: []\n          credentials: []\n      - identifier: node301\n        all_parents_must_converge: false\n        unified_job_template:\n          organization:\n            name: Default\n          name: job template 2\n          type: job_template\n        related:\n          success_nodes: []\n          failure_nodes: []\n          always_nodes: []\n          credentials: []\n  register: result\n\n"
  },
  "awx.awx.tower_workflow_job_template_node": {
    "doc": {
      "description": "Create, update, or destroy Automation Platform Controller workflow job template nodes.\nUse this to build a graph for a workflow, which dictates what the workflow runs.\nReplaces the deprecated tower_workflow_template module schema command.\nYou can create nodes first, and link them afterwards, and not worry about ordering. For failsafe referencing of a node, specify identifier, WFJT, and organization. With those specified, you can choose to modify or not modify any other parameter.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "all_parents_must_converge": {
          "aliases": [],
          "description": "If enabled then the node will only run if all of the parent nodes have met the criteria to reach this node",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "always_nodes": {
          "aliases": [],
          "description": "Nodes that will run after this node completes.\nList of node identifiers.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "approval_node": {
          "aliases": [],
          "description": "A dictionary of Name, description, and timeout values for the approval node.\nThis parameter is mutually exclusive with C(unified_job_template).",
          "type": "dict",
          "required": false,
          "suboptions": {
            "description": {
              "aliases": [],
              "description": "Optional description of this workflow approval template.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Name of this workflow approval template.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "The amount of time (in seconds) before the approval node expires and fails.",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credentials": {
          "aliases": [],
          "description": "Credentials to be applied to job as launch-time prompts.\nList of credential names.\nUniqueness is not handled rigorously.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "diff_mode": {
          "aliases": [],
          "description": "Run diff mode, applied as a prompt, if job template prompts for diff mode",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "extra_data": {
          "aliases": [],
          "description": "Variables to apply at launch time.\nWill only be accepted if job template prompts for vars or has a survey asking for those vars.",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "failure_nodes": {
          "aliases": [],
          "description": "Nodes that will run after this node on failure.\nList of node identifiers.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "identifier": {
          "aliases": [],
          "description": "An identifier for this node that is unique within its workflow.\nIt is copied to workflow job nodes corresponding to this node.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "inventory": {
          "aliases": [],
          "description": "Inventory applied as a prompt, if job template prompts for inventory",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "job_tags": {
          "aliases": [],
          "description": "Job tags applied as a prompt, if job template prompts for job tags",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "job_type": {
          "aliases": [],
          "description": "Job type applied as a prompt, if job template prompts for job type",
          "type": "str",
          "required": false,
          "choices": [
            "run",
            "check"
          ],
          "suboptions": {}
        },
        "limit": {
          "aliases": [],
          "description": "Limit to act on, applied as a prompt, if job template prompts for limit",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "lookup_organization": {
          "aliases": [],
          "description": "Organization the inventories, job template, project, inventory source the unified_job_template exists in.\nIf not provided, will lookup by name only, which does not work with duplicates.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "organization": {
          "aliases": [],
          "description": "The organization of the workflow job template the node exists in.\nUsed for looking up the workflow, not a direct model field.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "scm_branch": {
          "aliases": [],
          "description": "SCM branch applied as a prompt, if job template prompts for SCM branch",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "skip_tags": {
          "aliases": [],
          "description": "Tags to skip, applied as a prompt, if job tempalte prompts for job tags",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "success_nodes": {
          "aliases": [],
          "description": "Nodes that will run after this node on success.\nList of node identifiers.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "unified_job_template": {
          "aliases": [],
          "description": "Name of unified job template to run in the workflow.\nCan be a job template, project, inventory source, etc.\nOmit if creating an approval node.\nThis parameter is mutually exclusive with C(approval_node).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "verbosity": {
          "aliases": [],
          "description": "Verbosity applied as a prompt, if job template prompts for verbosity",
          "type": "str",
          "required": false,
          "choices": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5"
          ],
          "suboptions": {}
        },
        "workflow_job_template": {
          "aliases": [
            "workflow"
          ],
          "description": "The workflow job template the node exists in.\nUsed for looking up the node, cannot be modified after creation.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "create, update, or destroy Automation Platform Controller workflow job template nodes."
    },
    "examples": "\n- name: Create a node, follows workflow_job_template example\n  workflow_job_template_node:\n    identifier: my-first-node\n    workflow: example-workflow\n    unified_job_template: jt-for-node-use\n    organization: Default  # organization of workflow job template\n    extra_data:\n      foo_key: bar_value\n\n- name: Create parent node for prior node\n  workflow_job_template_node:\n    identifier: my-root-node\n    workflow: example-workflow\n    unified_job_template: jt-for-node-use\n    organization: Default\n    success_nodes:\n      - my-first-node\n\n- name: Create workflow with 2 Job Templates and an approval node in between\n  block:\n  - name: Create a workflow job template\n    tower_workflow_job_template:\n      name: my-workflow-job-template\n      ask_scm_branch_on_launch: true\n      organization: Default\n\n  - name: Create 1st node\n    tower_workflow_job_template_node:\n      identifier: my-first-node\n      workflow_job_template: my-workflow-job-template\n      unified_job_template: some_job_template\n      organization: Default\n\n  - name: Create 2nd approval node\n    tower_workflow_job_template_node:\n      identifier: my-second-approval-node\n      workflow_job_template: my-workflow-job-template\n      organization: Default\n      approval_node:\n        description: \"Do this?\"\n        name: my-second-approval-node\n        timeout: 3600\n\n  - name: Create 3rd node\n    tower_workflow_job_template_node:\n      identifier: my-third-node\n      workflow_job_template: my-workflow-job-template\n      unified_job_template: some_other_job_template\n      organization: Default\n\n  - name: Link 1st node to 2nd Approval node\n    tower_workflow_job_template_node:\n      identifier: my-first-node\n      workflow_job_template: my-workflow-job-template\n      organization: Default\n      success_nodes:\n        - my-second-approval-node\n\n  - name: Link 2nd Approval Node 3rd node\n    tower_workflow_job_template_node:\n      identifier: my-second-approval-node\n      workflow_job_template: my-workflow-job-template\n      organization: Default\n      success_nodes:\n        - my-third-node\n"
  },
  "awx.awx.tower_workflow_launch": {
    "doc": {
      "description": "Launch an Automation Platform Controller workflows. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "extra_vars": {
          "aliases": [],
          "description": "Any extra vars required to launch the job.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "The interval to request an update from the controller.",
          "default": "1",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "inventory": {
          "aliases": [],
          "description": "Inventory to use for the job ran with this workflow, only used if prompt for inventory is set.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "limit": {
          "aliases": [],
          "description": "Limit to use for the I(job_template).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "workflow_template"
          ],
          "description": "The name of the workflow template to run.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "organization": {
          "aliases": [],
          "description": "Organization the workflow job template exists in.\nUsed to help lookup the object, cannot be modified using this module.\nIf not provided, will lookup by name only, which does not work with duplicates.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "scm_branch": {
          "aliases": [],
          "description": "A specific branch of the SCM project to run the template on.\nThis is only applicable if your project allows for branch override.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "If waiting for the workflow to complete this will abort after this amount of seconds",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Wait for the workflow to complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Run a workflow in Automation Platform Controller"
    },
    "examples": "\n- name: Launch a workflow with a timeout of 10 seconds\n  workflow_launch:\n    workflow_template: \"Test Workflow\"\n    timeout: 10\n\n- name: Launch a Workflow with extra_vars without waiting\n  workflow_launch:\n    workflow_template: \"Test workflow\"\n    extra_vars:\n      var1: My First Variable\n      var2: My Second Variable\n    wait: False\n"
  },
  "awx.awx.tower_workflow_node_wait": {
    "doc": {
      "description": "Approve an approval node in a workflow job. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "The interval in sections, to request an update from the controller.",
          "default": "1",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the workflow node to wait on.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Maximum time in seconds to wait for a workflow job to to reach approval node.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "workflow_job_id": {
          "aliases": [],
          "description": "ID of the workflow job to monitor for node.",
          "type": "int",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Approve an approval node in a workflow job."
    },
    "examples": "\n- name: Launch a workflow with a timeout of 10 seconds\n  workflow_launch:\n    workflow_template: \"Test Workflow\"\n    wait: False\n  register: workflow\n\n- name: Wait for a workflow node to finish\n  workflow_node_wait:\n    workflow_job_id: \"{{ workflow.id }}\"\n    name: Approval Data Step\n    timeout: 120\n"
  },
  "awx.awx.user": {
    "doc": {
      "description": "Create, update, or destroy Automation Platform Controller users. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "email": {
          "aliases": [],
          "description": "Email address of the user.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "first_name": {
          "aliases": [],
          "description": "First name of the user.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "is_superuser": {
          "aliases": [
            "superuser"
          ],
          "description": "Designates that this user has all permissions without explicitly assigning them.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "is_system_auditor": {
          "aliases": [
            "auditor"
          ],
          "description": "User is a system wide auditor.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "last_name": {
          "aliases": [],
          "description": "Last name of the user.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "Write-only field used to change the password.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "update_secrets": {
          "aliases": [],
          "description": "C(true) will always change password if user specifies password, even if API gives $encrypted$ for password.\nC(false) will only set the password if other values change too.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "create, update, or destroy Automation Platform Controller users."
    },
    "examples": "\n- name: Add user\n  user:\n    username: jdoe\n    password: foobarbaz\n    email: jdoe@example.org\n    first_name: John\n    last_name: Doe\n    state: present\n    controller_config_file: \"~/tower_cli.cfg\"\n\n- name: Add user as a system administrator\n  user:\n    username: jdoe\n    password: foobarbaz\n    email: jdoe@example.org\n    superuser: yes\n    state: present\n    controller_config_file: \"~/tower_cli.cfg\"\n\n- name: Add user as a system auditor\n  user:\n    username: jdoe\n    password: foobarbaz\n    email: jdoe@example.org\n    auditor: yes\n    state: present\n    controller_config_file: \"~/tower_cli.cfg\"\n\n- name: Delete user\n  user:\n    username: jdoe\n    email: jdoe@example.org\n    state: absent\n    controller_config_file: \"~/tower_cli.cfg\"\n"
  },
  "awx.awx.workflow_approval": {
    "doc": {
      "description": "Approve an approval node in a workflow job. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "action": {
          "aliases": [],
          "description": "Type of action to take.",
          "default": "approve",
          "type": "str",
          "required": false,
          "choices": [
            "approve",
            "deny"
          ],
          "suboptions": {}
        },
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "The interval in sections, to request an update from the controller.",
          "default": "1",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the Approval node to approve or deny.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Maximum time in seconds to wait for a workflow job to to reach approval node.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "workflow_job_id": {
          "aliases": [],
          "description": "ID of the workflow job to monitor for approval.",
          "type": "int",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Approve an approval node in a workflow job."
    },
    "examples": "\n- name: Launch a workflow with a timeout of 10 seconds\n  workflow_launch:\n    workflow_template: \"Test Workflow\"\n    wait: False\n  register: workflow\n\n- name: Wait for approval node to activate and approve\n  workflow_approval:\n    workflow_job_id: \"{{ workflow.id }}\"\n    name: Approve Me\n    interval: 10\n    timeout: 20\n    action: deny\n"
  },
  "awx.awx.workflow_job_template": {
    "doc": {
      "description": "Create, update, or destroy Automation Platform Controller workflow job templates.\nReplaces the deprecated tower_workflow_template module.\nUse workflow_job_template_node after this, or use the schema parameter to build the workflow's graph",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "allow_simultaneous": {
          "aliases": [],
          "description": "Allow simultaneous runs of the workflow job template.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ask_inventory_on_launch": {
          "aliases": [],
          "description": "Prompt user for inventory on launch of this workflow job template",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ask_limit_on_launch": {
          "aliases": [],
          "description": "Prompt user for limit on launch of this workflow job template",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ask_scm_branch_on_launch": {
          "aliases": [],
          "description": "Prompt user for SCM branch on launch of this workflow job template",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ask_variables_on_launch": {
          "aliases": [],
          "description": "Prompt user for C(extra_vars) on launch.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "copy_from": {
          "aliases": [],
          "description": "Name or id to copy the workflow job template from.\nThis will copy an existing workflow job template and change any parameters supplied.\nThe new workflow job template name will be the one provided in the name parameter.\nThe organization parameter is not used in this, to facilitate copy from one organization to another.\nProvide the id or use the lookup plugin to provide the id if multiple workflow job templates share the same name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Optional description of this workflow job template.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "destroy_current_schema": {
          "aliases": [],
          "description": "Set in order to destroy current schema on the workflow.\nThis option is used for full schema update, if not used, nodes not described in schema will persist and keep current associations and links.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "extra_vars": {
          "aliases": [],
          "description": "Variables which will be made available to jobs ran inside the workflow.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "inventory": {
          "aliases": [],
          "description": "Inventory applied as a prompt, assuming job template prompts for inventory",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "labels": {
          "aliases": [],
          "description": "The labels applied to this job template",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "limit": {
          "aliases": [],
          "description": "Limit applied as a prompt, assuming job template prompts for limit",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of this workflow job template.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "new_name": {
          "aliases": [],
          "description": "Setting this option will change the existing name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "notification_templates_approvals": {
          "aliases": [],
          "description": "list of notifications to send on start",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "notification_templates_error": {
          "aliases": [],
          "description": "list of notifications to send on error",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "notification_templates_started": {
          "aliases": [],
          "description": "list of notifications to send on start",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "notification_templates_success": {
          "aliases": [],
          "description": "list of notifications to send on success",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "organization": {
          "aliases": [],
          "description": "Organization the workflow job template exists in.\nUsed to help lookup the object, cannot be modified using this module.\nIf not provided, will lookup by name only, which does not work with duplicates.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "schema": {
          "aliases": [],
          "description": "A json list of nodes and their coresponding options. The following suboptions describe a single node.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "all_parents_must_converge": {
              "aliases": [],
              "description": "If enabled then the node will only run if all of the parent nodes have met the criteria to reach this node",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "diff_mode": {
              "aliases": [],
              "description": "Run diff mode, applied as a prompt, if job template prompts for diff mode",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "extra_data": {
              "aliases": [],
              "description": "Variables to apply at launch time.\nWill only be accepted if job template prompts for vars or has a survey asking for those vars.",
              "default": "{}",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "identifier": {
              "aliases": [],
              "description": "An identifier for this node that is unique within its workflow.\nIt is copied to workflow job nodes corresponding to this node.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "inventory": {
              "aliases": [],
              "description": "Inventory applied as a prompt, if job template prompts for inventory",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "job_tags": {
              "aliases": [],
              "description": "Job tags applied as a prompt, if job template prompts for job tags",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "job_type": {
              "aliases": [],
              "description": "Job type applied as a prompt, if job template prompts for job type",
              "type": "str",
              "required": false,
              "choices": [
                "run",
                "check"
              ],
              "suboptions": {}
            },
            "limit": {
              "aliases": [],
              "description": "Limit to act on, applied as a prompt, if job template prompts for limit",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "related": {
              "aliases": [],
              "description": "Related items to this workflow node.\nMust include credentials, failure_nodes, always_nodes, success_nodes, even if empty.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "always_nodes": {
                  "aliases": [],
                  "description": "Nodes that will run after this node completes.\nList of node identifiers.",
                  "type": "list",
                  "required": false,
                  "suboptions": {
                    "identifier": {
                      "aliases": [],
                      "description": "Identifier of Node that will run after this node completes given this option.",
                      "required": false,
                      "elements": "str",
                      "suboptions": {}
                    }
                  }
                },
                "credentials": {
                  "aliases": [],
                  "description": "Credentials to be applied to job as launch-time prompts.\nList of credential names.\nUniqueness is not handled rigorously.",
                  "type": "list",
                  "required": false,
                  "suboptions": {
                    "name": {
                      "aliases": [],
                      "description": "Name Credentials to be applied to job as launch-time prompts.",
                      "required": false,
                      "elements": "str",
                      "suboptions": {}
                    }
                  }
                },
                "failure_nodes": {
                  "aliases": [],
                  "description": "Nodes that will run after this node on failure.\nList of node identifiers.",
                  "type": "list",
                  "required": false,
                  "suboptions": {
                    "identifier": {
                      "aliases": [],
                      "description": "Identifier of Node that will run after this node completes given this option.",
                      "required": false,
                      "elements": "str",
                      "suboptions": {}
                    }
                  }
                },
                "success_nodes": {
                  "aliases": [],
                  "description": "Nodes that will run after this node on success.\nList of node identifiers.",
                  "type": "list",
                  "required": false,
                  "suboptions": {
                    "identifier": {
                      "aliases": [],
                      "description": "Identifier of Node that will run after this node completes given this option.",
                      "required": false,
                      "elements": "str",
                      "suboptions": {}
                    }
                  }
                }
              }
            },
            "scm_branch": {
              "aliases": [],
              "description": "SCM branch applied as a prompt, if job template prompts for SCM branch",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "skip_tags": {
              "aliases": [],
              "description": "Tags to skip, applied as a prompt, if job tempalte prompts for job tags",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "state": {
              "aliases": [],
              "description": "Desired state of the resource.",
              "default": "present",
              "type": "str",
              "required": false,
              "choices": [
                "present",
                "absent"
              ],
              "suboptions": {}
            },
            "unified_job_template": {
              "aliases": [],
              "description": "Name of unified job template to run in the workflow.\nCan be a job template, project sync, inventory source sync, etc.\nOmit if creating an approval node (not yet implemented).",
              "type": "dict",
              "required": false,
              "suboptions": {
                "description": {
                  "aliases": [],
                  "description": "Optional description of this workflow approval template.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "inventory": {
                  "aliases": [],
                  "description": "Name of key for use in model for organizational reference\nOnly Valid and used if referencing an inventory sync\nThis parameter is mutually exclusive with suboption C(organization).",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "organization": {
                      "aliases": [],
                      "description": "Name of key for use in model for organizational reference",
                      "type": "dict",
                      "required": false,
                      "suboptions": {
                        "name": {
                          "aliases": [],
                          "description": "The organization of the inventory the node exists in.\nUsed for looking up the job template or project, not a direct model field.",
                          "type": "str",
                          "required": false,
                          "suboptions": {}
                        }
                      }
                    }
                  }
                },
                "name": {
                  "aliases": [],
                  "description": "Name of unified job template to run in the workflow.\nCan be a job template, project, inventory source, etc.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "organization": {
                  "aliases": [],
                  "description": "Name of key for use in model for organizational reference\nOnly Valid and used if referencing a job template or project sync\nThis parameter is mutually exclusive with suboption C(inventory).",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "name": {
                      "aliases": [],
                      "description": "The organization of the job template or project sync the node exists in.\nUsed for looking up the job template or project sync, not a direct model field.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "timeout": {
                  "aliases": [],
                  "description": "The amount of time (in seconds) to wait before Approval is canceled. A value of 0 means no timeout.\nOnly Valid and used if referencing an Approval Node",
                  "default": "0",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "type": {
                  "aliases": [],
                  "description": "Name of unified job template type to run in the workflow.\nCan be a job_template, project, inventory_source, workflow_approval.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "verbosity": {
              "aliases": [],
              "description": "Verbosity applied as a prompt, if job template prompts for verbosity",
              "type": "str",
              "required": false,
              "choices": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5"
              ],
              "suboptions": {}
            }
          }
        },
        "scm_branch": {
          "aliases": [],
          "description": "SCM branch applied as a prompt, assuming job template prompts for SCM branch",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "survey_enabled": {
          "aliases": [],
          "description": "Setting that variable will prompt the user for job type on the workflow launch.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "survey_spec": {
          "aliases": [
            "survey"
          ],
          "description": "The definition of the survey associated to the workflow.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "webhook_credential": {
          "aliases": [],
          "description": "Personal Access Token for posting back the status to the service API",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "webhook_service": {
          "aliases": [],
          "description": "Service that webhook requests will be accepted from",
          "type": "str",
          "required": false,
          "choices": [
            "github",
            "gitlab"
          ],
          "suboptions": {}
        }
      },
      "short_description": "create, update, or destroy Automation Platform Controller workflow job templates."
    },
    "examples": "\n- name: Create a workflow job template\n  workflow_job_template:\n    name: example-workflow\n    description: created by Ansible Playbook\n    organization: Default\n\n- name: Create a workflow job template with schema in template\n  awx.awx.workflow_job_template:\n    name: example-workflow\n    inventory: Demo Inventory\n    extra_vars: {'foo': 'bar', 'another-foo': {'barz': 'bar2'}}\n    schema:\n      - identifier: node101\n        unified_job_template:\n          name: example-project\n          inventory:\n            organization:\n              name: Default\n          type: inventory_source\n        related:\n          success_nodes: []\n          failure_nodes:\n            - identifier: node201\n          always_nodes: []\n          credentials: []\n      - identifier: node201\n        unified_job_template:\n          organization:\n            name: Default\n          name: job template 1\n          type: job_template\n        credentials: []\n        related:\n          success_nodes:\n            - identifier: node301\n          failure_nodes: []\n          always_nodes: []\n          credentials: []\n      - identifier: node202\n        unified_job_template:\n          organization:\n            name: Default\n          name: example-project\n          type: project\n        related:\n          success_nodes: []\n          failure_nodes: []\n          always_nodes: []\n          credentials: []\n      - identifier: node301\n        all_parents_must_converge: false\n        unified_job_template:\n          organization:\n            name: Default\n          name: job template 2\n          type: job_template\n        related:\n          success_nodes: []\n          failure_nodes: []\n          always_nodes: []\n          credentials: []\n  register: result\n\n- name: Copy a workflow job template\n  workflow_job_template:\n    name: copy-workflow\n    copy_from: example-workflow\n    organization: Foo\n\n- name: Create a workflow job template with schema in template\n  awx.awx.workflow_job_template:\n    name: example-workflow\n    inventory: Demo Inventory\n    extra_vars: {'foo': 'bar', 'another-foo': {'barz': 'bar2'}}\n    schema:\n      - identifier: node101\n        unified_job_template:\n          name: example-project\n          inventory:\n            organization:\n              name: Default\n          type: inventory_source\n        related:\n          success_nodes: []\n          failure_nodes:\n            - identifier: node201\n          always_nodes: []\n          credentials: []\n      - identifier: node201\n        unified_job_template:\n          organization:\n            name: Default\n          name: job template 1\n          type: job_template\n        credentials: []\n        related:\n          success_nodes:\n            - identifier: node301\n          failure_nodes: []\n          always_nodes: []\n          credentials: []\n      - identifier: node202\n        unified_job_template:\n          organization:\n            name: Default\n          name: example-project\n          type: project\n        related:\n          success_nodes: []\n          failure_nodes: []\n          always_nodes: []\n          credentials: []\n      - identifier: node301\n        all_parents_must_converge: false\n        unified_job_template:\n          organization:\n            name: Default\n          name: job template 2\n          type: job_template\n        related:\n          success_nodes: []\n          failure_nodes: []\n          always_nodes: []\n          credentials: []\n  register: result\n\n"
  },
  "awx.awx.workflow_job_template_node": {
    "doc": {
      "description": "Create, update, or destroy Automation Platform Controller workflow job template nodes.\nUse this to build a graph for a workflow, which dictates what the workflow runs.\nReplaces the deprecated tower_workflow_template module schema command.\nYou can create nodes first, and link them afterwards, and not worry about ordering. For failsafe referencing of a node, specify identifier, WFJT, and organization. With those specified, you can choose to modify or not modify any other parameter.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "all_parents_must_converge": {
          "aliases": [],
          "description": "If enabled then the node will only run if all of the parent nodes have met the criteria to reach this node",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "always_nodes": {
          "aliases": [],
          "description": "Nodes that will run after this node completes.\nList of node identifiers.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "approval_node": {
          "aliases": [],
          "description": "A dictionary of Name, description, and timeout values for the approval node.\nThis parameter is mutually exclusive with C(unified_job_template).",
          "type": "dict",
          "required": false,
          "suboptions": {
            "description": {
              "aliases": [],
              "description": "Optional description of this workflow approval template.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Name of this workflow approval template.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "The amount of time (in seconds) before the approval node expires and fails.",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "credentials": {
          "aliases": [],
          "description": "Credentials to be applied to job as launch-time prompts.\nList of credential names.\nUniqueness is not handled rigorously.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "diff_mode": {
          "aliases": [],
          "description": "Run diff mode, applied as a prompt, if job template prompts for diff mode",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "extra_data": {
          "aliases": [],
          "description": "Variables to apply at launch time.\nWill only be accepted if job template prompts for vars or has a survey asking for those vars.",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "failure_nodes": {
          "aliases": [],
          "description": "Nodes that will run after this node on failure.\nList of node identifiers.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "identifier": {
          "aliases": [],
          "description": "An identifier for this node that is unique within its workflow.\nIt is copied to workflow job nodes corresponding to this node.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "inventory": {
          "aliases": [],
          "description": "Inventory applied as a prompt, if job template prompts for inventory",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "job_tags": {
          "aliases": [],
          "description": "Job tags applied as a prompt, if job template prompts for job tags",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "job_type": {
          "aliases": [],
          "description": "Job type applied as a prompt, if job template prompts for job type",
          "type": "str",
          "required": false,
          "choices": [
            "run",
            "check"
          ],
          "suboptions": {}
        },
        "limit": {
          "aliases": [],
          "description": "Limit to act on, applied as a prompt, if job template prompts for limit",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "lookup_organization": {
          "aliases": [],
          "description": "Organization the inventories, job template, project, inventory source the unified_job_template exists in.\nIf not provided, will lookup by name only, which does not work with duplicates.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "organization": {
          "aliases": [],
          "description": "The organization of the workflow job template the node exists in.\nUsed for looking up the workflow, not a direct model field.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "scm_branch": {
          "aliases": [],
          "description": "SCM branch applied as a prompt, if job template prompts for SCM branch",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "skip_tags": {
          "aliases": [],
          "description": "Tags to skip, applied as a prompt, if job tempalte prompts for job tags",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the resource.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "success_nodes": {
          "aliases": [],
          "description": "Nodes that will run after this node on success.\nList of node identifiers.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "unified_job_template": {
          "aliases": [],
          "description": "Name of unified job template to run in the workflow.\nCan be a job template, project, inventory source, etc.\nOmit if creating an approval node.\nThis parameter is mutually exclusive with C(approval_node).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "verbosity": {
          "aliases": [],
          "description": "Verbosity applied as a prompt, if job template prompts for verbosity",
          "type": "str",
          "required": false,
          "choices": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5"
          ],
          "suboptions": {}
        },
        "workflow_job_template": {
          "aliases": [
            "workflow"
          ],
          "description": "The workflow job template the node exists in.\nUsed for looking up the node, cannot be modified after creation.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "create, update, or destroy Automation Platform Controller workflow job template nodes."
    },
    "examples": "\n- name: Create a node, follows workflow_job_template example\n  workflow_job_template_node:\n    identifier: my-first-node\n    workflow: example-workflow\n    unified_job_template: jt-for-node-use\n    organization: Default  # organization of workflow job template\n    extra_data:\n      foo_key: bar_value\n\n- name: Create parent node for prior node\n  workflow_job_template_node:\n    identifier: my-root-node\n    workflow: example-workflow\n    unified_job_template: jt-for-node-use\n    organization: Default\n    success_nodes:\n      - my-first-node\n\n- name: Create workflow with 2 Job Templates and an approval node in between\n  block:\n  - name: Create a workflow job template\n    tower_workflow_job_template:\n      name: my-workflow-job-template\n      ask_scm_branch_on_launch: true\n      organization: Default\n\n  - name: Create 1st node\n    tower_workflow_job_template_node:\n      identifier: my-first-node\n      workflow_job_template: my-workflow-job-template\n      unified_job_template: some_job_template\n      organization: Default\n\n  - name: Create 2nd approval node\n    tower_workflow_job_template_node:\n      identifier: my-second-approval-node\n      workflow_job_template: my-workflow-job-template\n      organization: Default\n      approval_node:\n        description: \"Do this?\"\n        name: my-second-approval-node\n        timeout: 3600\n\n  - name: Create 3rd node\n    tower_workflow_job_template_node:\n      identifier: my-third-node\n      workflow_job_template: my-workflow-job-template\n      unified_job_template: some_other_job_template\n      organization: Default\n\n  - name: Link 1st node to 2nd Approval node\n    tower_workflow_job_template_node:\n      identifier: my-first-node\n      workflow_job_template: my-workflow-job-template\n      organization: Default\n      success_nodes:\n        - my-second-approval-node\n\n  - name: Link 2nd Approval Node 3rd node\n    tower_workflow_job_template_node:\n      identifier: my-second-approval-node\n      workflow_job_template: my-workflow-job-template\n      organization: Default\n      success_nodes:\n        - my-third-node\n"
  },
  "awx.awx.workflow_launch": {
    "doc": {
      "description": "Launch an Automation Platform Controller workflows. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "extra_vars": {
          "aliases": [],
          "description": "Any extra vars required to launch the job.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "The interval to request an update from the controller.",
          "default": "1",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "inventory": {
          "aliases": [],
          "description": "Inventory to use for the job ran with this workflow, only used if prompt for inventory is set.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "limit": {
          "aliases": [],
          "description": "Limit to use for the I(job_template).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "workflow_template"
          ],
          "description": "The name of the workflow template to run.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "organization": {
          "aliases": [],
          "description": "Organization the workflow job template exists in.\nUsed to help lookup the object, cannot be modified using this module.\nIf not provided, will lookup by name only, which does not work with duplicates.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "scm_branch": {
          "aliases": [],
          "description": "A specific branch of the SCM project to run the template on.\nThis is only applicable if your project allows for branch override.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "If waiting for the workflow to complete this will abort after this amount of seconds",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Wait for the workflow to complete.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Run a workflow in Automation Platform Controller"
    },
    "examples": "\n- name: Launch a workflow with a timeout of 10 seconds\n  workflow_launch:\n    workflow_template: \"Test Workflow\"\n    timeout: 10\n\n- name: Launch a Workflow with extra_vars without waiting\n  workflow_launch:\n    workflow_template: \"Test workflow\"\n    extra_vars:\n      var1: My First Variable\n      var2: My Second Variable\n    wait: False\n"
  },
  "awx.awx.workflow_node_wait": {
    "doc": {
      "description": "Approve an approval node in a workflow job. See U(https://www.ansible.com/tower) for an overview.",
      "has_action": false,
      "notes": "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your host information.\nI(config_file) should be in the following format host=hostname username=username password=password",
      "options": {
        "controller_config_file": {
          "aliases": [
            "tower_config_file"
          ],
          "description": "Path to the controller config file.\nIf provided, the other locations for config files will not be considered.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "controller_host": {
          "aliases": [
            "tower_host"
          ],
          "description": "URL to your Automation Platform Controller instance.\nIf value not set, will try environment variable C(CONTROLLER_HOST) and then config files\nIf value not specified by any means, the value of C(127.0.0.1) will be used",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_oauthtoken": {
          "aliases": [
            "tower_oauthtoken"
          ],
          "description": "The OAuth token to use.\nThis value can be in one of two formats.\nA string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)\nA dictionary structure as returned by the token module.\nIf value not set, will try environment variable C(CONTROLLER_OAUTH_TOKEN) and then config files",
          "type": "raw",
          "required": false,
          "version_added": "3.7.0",
          "suboptions": {}
        },
        "controller_password": {
          "aliases": [
            "tower_password"
          ],
          "description": "Password for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_PASSWORD) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "controller_username": {
          "aliases": [
            "tower_username"
          ],
          "description": "Username for your controller instance.\nIf value not set, will try environment variable C(CONTROLLER_USERNAME) and then config files",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interval": {
          "aliases": [],
          "description": "The interval in sections, to request an update from the controller.",
          "default": "1",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the workflow node to wait on.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Maximum time in seconds to wait for a workflow job to to reach approval node.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tower_verify_ssl"
          ],
          "description": "Whether to allow insecure connections to AWX.\nIf C(no), SSL certificates will not be validated.\nThis should only be used on personally controlled sites using self-signed certificates.\nIf value not set, will try environment variable C(CONTROLLER_VERIFY_SSL) and then config files",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "workflow_job_id": {
          "aliases": [],
          "description": "ID of the workflow job to monitor for node.",
          "type": "int",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Approve an approval node in a workflow job."
    },
    "examples": "\n- name: Launch a workflow with a timeout of 10 seconds\n  workflow_launch:\n    workflow_template: \"Test Workflow\"\n    wait: False\n  register: workflow\n\n- name: Wait for a workflow node to finish\n  workflow_node_wait:\n    workflow_job_id: \"{{ workflow.id }}\"\n    name: Approval Data Step\n    timeout: 120\n"
  }
}