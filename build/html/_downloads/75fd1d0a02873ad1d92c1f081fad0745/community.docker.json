{
  "community.docker.current_container_facts": {
    "doc": {
      "description": "Return facts about whether the module runs in a Docker container.",
      "has_action": false,
      "short_description": "Return facts about whether the module runs in a Docker container",
      "version_added": "1.1.0"
    },
    "examples": "\n- name: Get facts on current container\n  community.docker.current_container_facts:\n\n- name: Print information on current container when running in a container\n  ansible.builtin.debug:\n    msg: \"Container ID is {{ ansible_module_container_id }}\"\n  when: ansible_module_running_in_container\n"
  },
  "community.docker.docker_compose": {
    "doc": {
      "description": "Uses Docker Compose to start, shutdown and scale services. B(This module requires docker-compose < 2.0.0.)\nConfiguration can be read from a C(docker-compose.yml) or C(docker-compose.yaml) file or inline using the I(definition) option.\nSee the examples for more details.\nSupports check mode.\nThis module was called C(docker_service) before Ansible 2.8. The usage did not change.",
      "has_action": false,
      "notes": "Connect to the Docker daemon by providing parameters with each task or by defining environment variables. You can define C(DOCKER_HOST), C(DOCKER_TLS_HOSTNAME), C(DOCKER_API_VERSION), C(DOCKER_CERT_PATH), C(DOCKER_SSL_VERSION), C(DOCKER_TLS), C(DOCKER_TLS_VERIFY) and C(DOCKER_TIMEOUT). If you are using docker machine, run the script shipped with the product that sets up the environment. It will set these variables for you. See U(https://docs.docker.com/machine/reference/env/) for more details.\nWhen connecting to Docker daemon with TLS, you might need to install additional Python packages. For the Docker SDK for Python, version 2.4 or newer, this can be done by installing C(docker[tls]) with M(ansible.builtin.pip).\nNote that the Docker SDK for Python only allows to specify the path to the Docker configuration for very few functions. In general, it will use C($HOME/.docker/config.json) if the C(DOCKER_CONFIG) environment variable is not specified, and use C($DOCKER_CONFIG/config.json) otherwise.\nThis module uses the L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) to communicate with the Docker daemon.",
      "options": {
        "api_version": {
          "aliases": [
            "docker_api_version"
          ],
          "description": "The version of the Docker API running on the Docker Host.\nDefaults to the latest version of the API supported by Docker SDK for Python and the docker daemon.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_API_VERSION) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "auto",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "build": {
          "aliases": [],
          "description": "Use with I(state) C(present) to always build images prior to starting the application.\nSame as running C(docker-compose build) with the pull option.\nImages will only be rebuilt if Docker detects a change in the Dockerfile or build directory contents.\nUse the I(nocache) option to ignore the image cache when performing the build.\nIf an existing image is replaced, services using the image will be recreated unless I(recreate) is C(never).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "tls_ca_cert",
            "cacert_path"
          ],
          "description": "Use a CA certificate when performing server verification by providing the path to a CA certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(ca.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "tls_client_cert",
            "cert_path"
          ],
          "description": "Path to the client's TLS certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(cert.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "tls_client_key",
            "key_path"
          ],
          "description": "Path to the client's TLS key file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(key.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "debug": {
          "aliases": [],
          "description": "Debug mode",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "definition": {
          "aliases": [],
          "description": "Compose file describing one or more services, networks and volumes.\nMutually exclusive with I(project_src) and I(files).",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "dependencies": {
          "aliases": [],
          "description": "When I(state) is C(present) specify whether or not to include linked services.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "docker_host": {
          "aliases": [
            "docker_url"
          ],
          "description": "The URL or Unix socket path used to connect to the Docker API. To connect to a remote host, provide the TCP connection string. For example, C(tcp://192.0.2.23:2376). If TLS is used to encrypt the connection, the module will automatically replace C(tcp) in the connection URL with C(https).\nIf the value is not specified in the task, the value of environment variable C(DOCKER_HOST) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "unix://var/run/docker.sock",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "env_file": {
          "aliases": [],
          "description": "By default environment files are loaded from a C(.env) file located directly under the I(project_src) directory.\nI(env_file) can be used to specify the path of a custom environment file instead.\nThe path is relative to the I(project_src) directory.\nRequires C(docker-compose) version 1.25.0 or greater.\nNote: C(docker-compose) versions C(<=1.28) load the env file from the current working directory of the C(docker-compose) command rather than I(project_src).",
          "type": "path",
          "required": false,
          "version_added": "1.9.0",
          "suboptions": {}
        },
        "files": {
          "aliases": [],
          "description": "List of Compose file names relative to I(project_src). Overrides C(docker-compose.yml) or C(docker-compose.yaml).\nFiles are loaded and merged in the order given.",
          "type": "list",
          "required": false,
          "elements": "path",
          "suboptions": {}
        },
        "hostname_check": {
          "aliases": [],
          "description": "Whether or not to check the Docker daemon's hostname against the name provided in the client certificate.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "nocache": {
          "aliases": [],
          "description": "Use with the I(build) option to ignore the cache during the image build process.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "profiles": {
          "aliases": [],
          "description": "List of profiles to enable when starting services.\nEquivalent to C(docker-compose --profile).\nRequires C(docker-compose) version 1.28.0 or greater.",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "1.8.0",
          "suboptions": {}
        },
        "project_name": {
          "aliases": [],
          "description": "Provide a project name. If not provided, the project name is taken from the basename of I(project_src).\nRequired when I(definition) is provided.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "project_src": {
          "aliases": [],
          "description": "Path to a directory containing a C(docker-compose.yml) or C(docker-compose.yaml) file.\nMutually exclusive with I(definition).\nRequired when no I(definition) is provided.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "pull": {
          "aliases": [],
          "description": "Use with I(state) C(present) to always pull images prior to starting the application.\nSame as running C(docker-compose pull).\nWhen a new image is pulled, services using the image will be recreated unless I(recreate) is C(never).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "recreate": {
          "aliases": [],
          "description": "By default containers will be recreated when their configuration differs from the service definition.\nSetting to C(never) ignores configuration differences and leaves existing containers unchanged.\nSetting to C(always) forces recreation of all existing containers.",
          "default": "smart",
          "type": "str",
          "required": false,
          "choices": [
            "always",
            "never",
            "smart"
          ],
          "suboptions": {}
        },
        "remove_images": {
          "aliases": [],
          "description": "Use with I(state) C(absent) to remove all images or only local images.",
          "type": "str",
          "required": false,
          "choices": [
            "all",
            "local"
          ],
          "suboptions": {}
        },
        "remove_orphans": {
          "aliases": [],
          "description": "Remove containers for services not defined in the Compose file.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "remove_volumes": {
          "aliases": [],
          "description": "Use with I(state) C(absent) to remove data volumes.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "restarted": {
          "aliases": [],
          "description": "Use with I(state) C(present) to restart all containers defined in the Compose file.\nIf I(services) is defined, only the containers listed there will be restarted.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "scale": {
          "aliases": [],
          "description": "When I(state) is C(present) scale services. Provide a dictionary of key/value pairs where the key is the name of the service and the value is an integer count for the number of containers.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "services": {
          "aliases": [],
          "description": "When I(state) is C(present) run C(docker-compose up) resp. C(docker-compose stop) (with I(stopped)) resp. C(docker-compose restart) (with I(restarted)) on a subset of services.\nIf empty, which is the default, the operation will be performed on all services defined in the Compose file (or inline I(definition)).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "ssl_version": {
          "aliases": [],
          "description": "Provide a valid SSL version number. Default value determined by ssl.py module.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_SSL_VERSION) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of the project.\nSpecifying C(present) is the same as running C(docker-compose up) resp. C(docker-compose stop) (with I(stopped)) resp. C(docker-compose restart) (with I(restarted)).\nSpecifying C(absent) is the same as running C(docker-compose down).",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "stopped": {
          "aliases": [],
          "description": "Use with I(state) C(present) to stop all containers defined in the Compose file.\nIf I(services) is defined, only the containers listed there will be stopped.\nRequires C(docker-compose) version 1.17.0 or greater for full support. For older versions, the services will first be started and then stopped when the service is supposed to be created as stopped.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Timeout in seconds for container shutdown when attached or when containers are already running.\nBy default C(compose) will use a C(10s) timeout unless C(default_grace_period) is defined for a particular service in the I(project_src).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "tls": {
          "aliases": [],
          "description": "Secure the connection to the API by using TLS without verifying the authenticity of the Docker host server. Note that if I(validate_certs) is set to C(yes) as well, it will take precedence.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "tls_hostname": {
          "aliases": [],
          "description": "When verifying the authenticity of the Docker Host server, provide the expected name of the server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_HOSTNAME) will be used instead. If the environment variable is not set, the default value will be used.\nThe current default value is C(localhost). This default is deprecated and will change in community.docker 2.0.0 to be a value computed from I(docker_host). Explicitly specify C(localhost) to make sure this value will still be used, and to disable the deprecation message which will be shown otherwise.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "use_ssh_client": {
          "aliases": [],
          "description": "Currently ignored for this module, but might suddenly be supported later on.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tls_verify"
          ],
          "description": "Secure the connection to the API by using TLS and verifying the authenticity of the Docker host server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_VERIFY) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "Docker API >= 1.20",
        "Docker SDK for Python: Please note that the L(docker-py,https://pypi.org/project/docker-py/) Python module has been superseded by L(docker,https://pypi.org/project/docker/) (see L(here,https://github.com/docker/docker-py/issues/1310) for details). For Python 2.6, C(docker-py) must be used. Otherwise, it is recommended to install the C(docker) Python module. Note that both modules should *not* be installed at the same time. Also note that when both modules are installed and one of them is uninstalled, the other might no longer function and a reinstall of it is required.",
        "L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) >= 1.8.0 (use L(docker-py,https://pypi.org/project/docker-py/) for Python 2.6)",
        "PyYAML >= 3.11",
        "docker-compose >= 1.7.0, < 2.0.0"
      ],
      "short_description": "Manage multi-container Docker applications with Docker Compose."
    },
    "examples": "\n# Examples use the django example at https://docs.docker.com/compose/django. Follow it to create the\n# flask directory\n\n- name: Run using a project directory\n  hosts: localhost\n  gather_facts: no\n  tasks:\n    - name: Tear down existing services\n      community.docker.docker_compose:\n        project_src: flask\n        state: absent\n\n    - name: Create and start services\n      community.docker.docker_compose:\n        project_src: flask\n      register: output\n\n    - ansible.builtin.debug:\n        var: output\n\n    - name: Run `docker-compose up` again\n      community.docker.docker_compose:\n        project_src: flask\n        build: no\n      register: output\n\n    - ansible.builtin.debug:\n        var: output\n\n    - ansible.builtin.assert:\n        that: \"not output.changed \"\n\n    - name: Stop all services\n      community.docker.docker_compose:\n        project_src: flask\n        build: no\n        stopped: yes\n      register: output\n\n    - ansible.builtin.debug:\n        var: output\n\n    - ansible.builtin.assert:\n        that:\n          - \"not web.flask_web_1.state.running\"\n          - \"not db.flask_db_1.state.running\"\n\n    - name: Restart services\n      community.docker.docker_compose:\n        project_src: flask\n        build: no\n        restarted: yes\n      register: output\n\n    - ansible.builtin.debug:\n        var: output\n\n    - ansible.builtin.assert:\n        that:\n          - \"web.flask_web_1.state.running\"\n          - \"db.flask_db_1.state.running\"\n\n- name: Scale the web service to 2\n  hosts: localhost\n  gather_facts: no\n  tasks:\n    - community.docker.docker_compose:\n        project_src: flask\n        scale:\n          web: 2\n      register: output\n\n    - ansible.builtin.debug:\n        var: output\n\n- name: Run with inline v2 compose\n  hosts: localhost\n  gather_facts: no\n  tasks:\n    - community.docker.docker_compose:\n        project_src: flask\n        state: absent\n\n    - community.docker.docker_compose:\n        project_name: flask\n        definition:\n          version: '2'\n          services:\n            db:\n              image: postgres\n            web:\n              build: \"{{ playbook_dir }}/flask\"\n              command: \"python manage.py runserver 0.0.0.0:8000\"\n              volumes:\n                - \"{{ playbook_dir }}/flask:/code\"\n              ports:\n                - \"8000:8000\"\n              depends_on:\n                - db\n      register: output\n\n    - ansible.builtin.debug:\n        var: output\n\n    - ansible.builtin.assert:\n        that:\n          - \"web.flask_web_1.state.running\"\n          - \"db.flask_db_1.state.running\"\n\n- name: Run with inline v1 compose\n  hosts: localhost\n  gather_facts: no\n  tasks:\n    - community.docker.docker_compose:\n        project_src: flask\n        state: absent\n\n    - community.docker.docker_compose:\n        project_name: flask\n        definition:\n            db:\n              image: postgres\n            web:\n              build: \"{{ playbook_dir }}/flask\"\n              command: \"python manage.py runserver 0.0.0.0:8000\"\n              volumes:\n                - \"{{ playbook_dir }}/flask:/code\"\n              ports:\n                - \"8000:8000\"\n              links:\n                - db\n      register: output\n\n    - ansible.builtin.debug:\n        var: output\n\n    - ansible.builtin.assert:\n        that:\n          - \"web.flask_web_1.state.running\"\n          - \"db.flask_db_1.state.running\"\n"
  },
  "community.docker.docker_config": {
    "doc": {
      "description": "Create and remove Docker configs in a Swarm environment. Similar to C(docker config create) and C(docker config rm).\nAdds to the metadata of new configs 'ansible_key', an encrypted hash representation of the data, which is then used in future runs to test if a config has changed. If 'ansible_key' is not present, then a config will not be updated unless the I(force) option is set.\nUpdates to configs are performed by removing the config and creating it again.",
      "has_action": false,
      "notes": "Connect to the Docker daemon by providing parameters with each task or by defining environment variables. You can define C(DOCKER_HOST), C(DOCKER_TLS_HOSTNAME), C(DOCKER_API_VERSION), C(DOCKER_CERT_PATH), C(DOCKER_SSL_VERSION), C(DOCKER_TLS), C(DOCKER_TLS_VERIFY) and C(DOCKER_TIMEOUT). If you are using docker machine, run the script shipped with the product that sets up the environment. It will set these variables for you. See U(https://docs.docker.com/machine/reference/env/) for more details.\nWhen connecting to Docker daemon with TLS, you might need to install additional Python packages. For the Docker SDK for Python, version 2.4 or newer, this can be done by installing C(docker[tls]) with M(ansible.builtin.pip).\nNote that the Docker SDK for Python only allows to specify the path to the Docker configuration for very few functions. In general, it will use C($HOME/.docker/config.json) if the C(DOCKER_CONFIG) environment variable is not specified, and use C($DOCKER_CONFIG/config.json) otherwise.\nThis module uses the L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) to communicate with the Docker daemon.",
      "options": {
        "api_version": {
          "aliases": [
            "docker_api_version"
          ],
          "description": "The version of the Docker API running on the Docker Host.\nDefaults to the latest version of the API supported by Docker SDK for Python and the docker daemon.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_API_VERSION) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "auto",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "tls_ca_cert",
            "cacert_path"
          ],
          "description": "Use a CA certificate when performing server verification by providing the path to a CA certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(ca.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "tls_client_cert",
            "cert_path"
          ],
          "description": "Path to the client's TLS certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(cert.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "tls_client_key",
            "key_path"
          ],
          "description": "Path to the client's TLS key file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(key.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "The value of the config.\nMutually exclusive with I(data_src). One of I(data) and I(data_src) is required if I(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "data_is_b64": {
          "aliases": [],
          "description": "If set to C(true), the data is assumed to be Base64 encoded and will be decoded before being used.\nTo use binary I(data), it is better to keep it Base64 encoded and let it be decoded by this option.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "data_src": {
          "aliases": [],
          "description": "The file on the target from which to read the config.\nMutually exclusive with I(data). One of I(data) and I(data_src) is required if I(state=present).",
          "type": "path",
          "required": false,
          "version_added": "1.10.0",
          "suboptions": {}
        },
        "debug": {
          "aliases": [],
          "description": "Debug mode",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "docker_host": {
          "aliases": [
            "docker_url"
          ],
          "description": "The URL or Unix socket path used to connect to the Docker API. To connect to a remote host, provide the TCP connection string. For example, C(tcp://192.0.2.23:2376). If TLS is used to encrypt the connection, the module will automatically replace C(tcp) in the connection URL with C(https).\nIf the value is not specified in the task, the value of environment variable C(DOCKER_HOST) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "unix://var/run/docker.sock",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Use with state C(present) to always remove and recreate an existing config.\nIf C(true), an existing config will be replaced, even if it has not been changed.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "labels": {
          "aliases": [],
          "description": "A map of key:value meta data, where both the I(key) and I(value) are expected to be a string.\nIf new meta data is provided, or existing meta data is modified, the config will be updated by removing it and creating it again.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the config.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "rolling_versions": {
          "aliases": [],
          "description": "If set to C(true), configs are created with an increasing version number appended to their name.\nAdds a label containing the version number to the managed configs with the name C(ansible_version).",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "2.2.0",
          "suboptions": {}
        },
        "ssl_version": {
          "aliases": [],
          "description": "Provide a valid SSL version number. Default value determined by ssl.py module.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_SSL_VERSION) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Set to C(present), if the config should exist, and C(absent), if it should not.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The maximum amount of time in seconds to wait on a response from the API.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TIMEOUT) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "tls": {
          "aliases": [],
          "description": "Secure the connection to the API by using TLS without verifying the authenticity of the Docker host server. Note that if I(validate_certs) is set to C(yes) as well, it will take precedence.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "tls_hostname": {
          "aliases": [],
          "description": "When verifying the authenticity of the Docker Host server, provide the expected name of the server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_HOSTNAME) will be used instead. If the environment variable is not set, the default value will be used.\nThe current default value is C(localhost). This default is deprecated and will change in community.docker 2.0.0 to be a value computed from I(docker_host). Explicitly specify C(localhost) to make sure this value will still be used, and to disable the deprecation message which will be shown otherwise.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "use_ssh_client": {
          "aliases": [],
          "description": "For SSH transports, use the C(ssh) CLI tool instead of paramiko.\nRequires Docker SDK for Python 4.4.0 or newer.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tls_verify"
          ],
          "description": "Secure the connection to the API by using TLS and verifying the authenticity of the Docker host server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_VERIFY) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "versions_to_keep": {
          "aliases": [],
          "description": "When using I(rolling_versions), the number of old versions of the config to keep.\nExtraneous old configs are deleted after the new one is created.\nSet to C(-1) to keep everything or to C(0) or C(1) to keep only the current one.",
          "default": "5",
          "type": "int",
          "required": false,
          "version_added": "2.2.0",
          "suboptions": {}
        }
      },
      "requirements": [
        "Docker API >= 1.30",
        "Docker SDK for Python: Please note that the L(docker-py,https://pypi.org/project/docker-py/) Python module has been superseded by L(docker,https://pypi.org/project/docker/) (see L(here,https://github.com/docker/docker-py/issues/1310) for details). This module does *not* work with docker-py.",
        "L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) >= 2.6.0",
        "Python >= 2.7"
      ],
      "short_description": "Manage docker configs."
    },
    "examples": "\n\n- name: Create config foo (from a file on the control machine)\n  community.docker.docker_config:\n    name: foo\n    # If the file is JSON or binary, Ansible might modify it (because\n    # it is first decoded and later re-encoded). Base64-encoding the\n    # file directly after reading it prevents this to happen.\n    data: \"{{ lookup('file', '/path/to/config/file') | b64encode }}\"\n    data_is_b64: true\n    state: present\n\n- name: Create config foo (from a file on the target machine)\n  community.docker.docker_config:\n    name: foo\n    data_src: /path/to/config/file\n    state: present\n\n- name: Change the config data\n  community.docker.docker_config:\n    name: foo\n    data: Goodnight everyone!\n    labels:\n      bar: baz\n      one: '1'\n    state: present\n\n- name: Add a new label\n  community.docker.docker_config:\n    name: foo\n    data: Goodnight everyone!\n    labels:\n      bar: baz\n      one: '1'\n      # Adding a new label will cause a remove/create of the config\n      two: '2'\n    state: present\n\n- name: No change\n  community.docker.docker_config:\n    name: foo\n    data: Goodnight everyone!\n    labels:\n      bar: baz\n      one: '1'\n      # Even though 'two' is missing, there is no change to the existing config\n    state: present\n\n- name: Update an existing label\n  community.docker.docker_config:\n    name: foo\n    data: Goodnight everyone!\n    labels:\n      bar: monkey   # Changing a label will cause a remove/create of the config\n      one: '1'\n    state: present\n\n- name: Force the (re-)creation of the config\n  community.docker.docker_config:\n    name: foo\n    data: Goodnight everyone!\n    force: yes\n    state: present\n\n- name: Remove config foo\n  community.docker.docker_config:\n    name: foo\n    state: absent\n"
  },
  "community.docker.docker_container": {
    "doc": {
      "description": "Manage the life cycle of docker containers.\nSupports check mode. Run with C(--check) and C(--diff) to view config difference and list of actions to be taken.",
      "has_action": false,
      "notes": "For most config changes, the container needs to be recreated. This means that the existing container has to be destroyed and a new one created. This can cause unexpected data loss and downtime. You can use the I(comparisons) option to prevent this.\nIf the module needs to recreate the container, it will only use the options provided to the module to create the new container (except I(image)). Therefore, always specify B(all) options relevant to the container.\nWhen I(restart) is set to C(true), the module will only restart the container if no config changes are detected.\nConnect to the Docker daemon by providing parameters with each task or by defining environment variables. You can define C(DOCKER_HOST), C(DOCKER_TLS_HOSTNAME), C(DOCKER_API_VERSION), C(DOCKER_CERT_PATH), C(DOCKER_SSL_VERSION), C(DOCKER_TLS), C(DOCKER_TLS_VERIFY) and C(DOCKER_TIMEOUT). If you are using docker machine, run the script shipped with the product that sets up the environment. It will set these variables for you. See U(https://docs.docker.com/machine/reference/env/) for more details.\nWhen connecting to Docker daemon with TLS, you might need to install additional Python packages. For the Docker SDK for Python, version 2.4 or newer, this can be done by installing C(docker[tls]) with M(ansible.builtin.pip).\nNote that the Docker SDK for Python only allows to specify the path to the Docker configuration for very few functions. In general, it will use C($HOME/.docker/config.json) if the C(DOCKER_CONFIG) environment variable is not specified, and use C($DOCKER_CONFIG/config.json) otherwise.\nThis module uses the L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) to communicate with the Docker daemon.",
      "options": {
        "api_version": {
          "aliases": [
            "docker_api_version"
          ],
          "description": "The version of the Docker API running on the Docker Host.\nDefaults to the latest version of the API supported by Docker SDK for Python and the docker daemon.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_API_VERSION) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "auto",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "auto_remove": {
          "aliases": [],
          "description": "Enable auto-removal of the container on daemon side when the container's process exits.\nIf I(container_default_behavior) is set to C(compatiblity), this option has a default of C(false).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "blkio_weight": {
          "aliases": [],
          "description": "Block IO (relative weight), between 10 and 1000.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "tls_ca_cert",
            "cacert_path"
          ],
          "description": "Use a CA certificate when performing server verification by providing the path to a CA certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(ca.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "cap_drop": {
          "aliases": [],
          "description": "List of capabilities to drop from the container.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "capabilities": {
          "aliases": [],
          "description": "List of capabilities to add to the container.\nThis is equivalent to C(docker run --cap-add), or the docker-compose option C(cap_add).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "cgroup_parent": {
          "aliases": [],
          "description": "Specify the parent cgroup for the container.",
          "type": "str",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {}
        },
        "cleanup": {
          "aliases": [],
          "description": "Use with I(detach=false) to remove the container after successful execution.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "tls_client_cert",
            "cert_path"
          ],
          "description": "Path to the client's TLS certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(cert.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "tls_client_key",
            "key_path"
          ],
          "description": "Path to the client's TLS key file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(key.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "command": {
          "aliases": [],
          "description": "Command to execute when the container starts. A command may be either a string or a list.\nPrior to version 2.4, strings were split on commas.\nSee I(command_handling) for differences in how strings and lists are handled.",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "command_handling": {
          "aliases": [],
          "description": "The default behavior for I(command) (when provided as a list) and I(entrypoint) is to convert them to strings without considering shell quoting rules. (For comparing idempotency, the resulting string is split considering shell quoting rules.)\nAlso, setting I(command) to an empty list of string, and setting I(entrypoint) to an empty list will be handled as if these options are not specified. This is different from idempotency handling for other container-config related options.\nWhen this is set to C(compatiblity), which is the default until community.docker 3.0.0, the current behavior will be kept.\nWhen this is set to C(correct), these options are kept as lists, and an empty value or empty list will be handled correctly for idempotency checks.\nIn community.docker 3.0.0, the default will change to C(correct).",
          "type": "str",
          "required": false,
          "choices": [
            "compatibility",
            "correct"
          ],
          "version_added": "1.9.0",
          "suboptions": {}
        },
        "comparisons": {
          "aliases": [],
          "description": "Allows to specify how properties of existing containers are compared with module options to decide whether the container should be recreated / updated or not.\nOnly options which correspond to the state of a container as handled by the Docker daemon can be specified, as well as C(networks).\nMust be a dictionary specifying for an option one of the keys C(strict), C(ignore) and C(allow_more_present).\nIf C(strict) is specified, values are tested for equality, and changes always result in updating or restarting. If C(ignore) is specified, changes are ignored.\nC(allow_more_present) is allowed only for lists, sets and dicts. If it is specified for lists or sets, the container will only be updated or restarted if the module option contains a value which is not present in the container's options. If the option is specified for a dict, the container will only be updated or restarted if the module option contains a key which is not present in the container's option, or if the value of a key present differs.\nThe wildcard option C(*) can be used to set one of the default values C(strict) or C(ignore) to I(all) comparisons which are not explicitly set to other values.\nSee the examples for details.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "container_default_behavior": {
          "aliases": [],
          "description": "In older versions of this module, various module options used to have default values. This caused problems with containers which use different values for these options.\nThe default value is now C(no_defaults). To restore the old behavior, set it to C(compatibility), which will ensure that the default values are used when the values are not explicitly specified by the user.\nThis affects the I(auto_remove), I(detach), I(init), I(interactive), I(memory), I(paused), I(privileged), I(read_only) and I(tty) options.",
          "default": "no_defaults",
          "type": "str",
          "required": false,
          "choices": [
            "compatibility",
            "no_defaults"
          ],
          "suboptions": {}
        },
        "cpu_period": {
          "aliases": [],
          "description": "Limit CPU CFS (Completely Fair Scheduler) period.\nSee I(cpus) for an easier to use alternative.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "cpu_quota": {
          "aliases": [],
          "description": "Limit CPU CFS (Completely Fair Scheduler) quota.\nSee I(cpus) for an easier to use alternative.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "cpu_shares": {
          "aliases": [],
          "description": "CPU shares (relative weight).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "cpus": {
          "aliases": [],
          "description": "Specify how much of the available CPU resources a container can use.\nA value of C(1.5) means that at most one and a half CPU (core) will be used.",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "cpuset_cpus": {
          "aliases": [],
          "description": "CPUs in which to allow execution C(1,3) or C(1-3).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cpuset_mems": {
          "aliases": [],
          "description": "Memory nodes (MEMs) in which to allow execution C(0-3) or C(0,1).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "debug": {
          "aliases": [],
          "description": "Debug mode",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "default_host_ip": {
          "aliases": [],
          "description": "Define the default host IP to use.\nMust be an empty string, an IPv4 address, or an IPv6 address.\nWith Docker 20.10.2 or newer, this should be set to an empty string (C(\"\")) to avoid the port bindings without an explicit IP address to only bind to IPv4. See U(https://github.com/ansible-collections/community.docker/issues/70) for details.\nBy default, the module will try to auto-detect this value from the C(bridge) network's C(com.docker.network.bridge.host_binding_ipv4) option. If it cannot auto-detect it, it will fall back to C(0.0.0.0).",
          "type": "str",
          "required": false,
          "version_added": "1.2.0",
          "suboptions": {}
        },
        "detach": {
          "aliases": [],
          "description": "Enable detached mode to leave the container running in background.\nIf disabled, the task will reflect the status of the container run (failed if the command failed).\nIf I(container_default_behavior) is set to C(compatiblity), this option has a default of C(true).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "device_read_bps": {
          "aliases": [],
          "description": "List of device path and read rate (bytes per second) from device.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "path": {
              "aliases": [],
              "description": "Device path in the container.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "rate": {
              "aliases": [],
              "description": "Device read limit in format C(<number>[<unit>]).\nNumber is a positive integer. Unit can be one of C(B) (byte), C(K) (kibibyte, 1024B), C(M) (mebibyte), C(G) (gibibyte), C(T) (tebibyte), or C(P) (pebibyte).\nOmitting the unit defaults to bytes.",
              "type": "str",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "device_read_iops": {
          "aliases": [],
          "description": "List of device and read rate (IO per second) from device.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "path": {
              "aliases": [],
              "description": "Device path in the container.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "rate": {
              "aliases": [],
              "description": "Device read limit.\nMust be a positive integer.",
              "type": "int",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "device_requests": {
          "aliases": [],
          "description": "Allows to request additional resources, such as GPUs.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "version_added": "0.1.0",
          "suboptions": {
            "capabilities": {
              "aliases": [],
              "description": "List of lists of strings to request capabilities.\nThe top-level list entries are combined by OR, and for every list entry, the entries in the list it contains are combined by AND.\nThe driver tries to satisfy one of the sub-lists.\nAvailable capabilities for the C(nvidia) driver can be found at U(https://github.com/NVIDIA/nvidia-container-runtime).",
              "type": "list",
              "required": false,
              "elements": "list",
              "suboptions": {}
            },
            "count": {
              "aliases": [],
              "description": "Number or devices to request.\nSet to C(-1) to request all available devices.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "device_ids": {
              "aliases": [],
              "description": "List of device IDs.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "driver": {
              "aliases": [],
              "description": "Which driver to use for this device.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "options": {
              "aliases": [],
              "description": "Driver-specific options.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "device_write_bps": {
          "aliases": [],
          "description": "List of device and write rate (bytes per second) to device.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "path": {
              "aliases": [],
              "description": "Device path in the container.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "rate": {
              "aliases": [],
              "description": "Device read limit in format C(<number>[<unit>]).\nNumber is a positive integer. Unit can be one of C(B) (byte), C(K) (kibibyte, 1024B), C(M) (mebibyte), C(G) (gibibyte), C(T) (tebibyte), or C(P) (pebibyte).\nOmitting the unit defaults to bytes.",
              "type": "str",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "device_write_iops": {
          "aliases": [],
          "description": "List of device and write rate (IO per second) to device.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "path": {
              "aliases": [],
              "description": "Device path in the container.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "rate": {
              "aliases": [],
              "description": "Device read limit.\nMust be a positive integer.",
              "type": "int",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "devices": {
          "aliases": [],
          "description": "List of host device bindings to add to the container.\nEach binding is a mapping expressed in the format C(<path_on_host>:<path_in_container>:<cgroup_permissions>).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "dns_opts": {
          "aliases": [],
          "description": "List of DNS options.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "dns_search_domains": {
          "aliases": [],
          "description": "List of custom DNS search domains.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "dns_servers": {
          "aliases": [],
          "description": "List of custom DNS servers.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "docker_host": {
          "aliases": [
            "docker_url"
          ],
          "description": "The URL or Unix socket path used to connect to the Docker API. To connect to a remote host, provide the TCP connection string. For example, C(tcp://192.0.2.23:2376). If TLS is used to encrypt the connection, the module will automatically replace C(tcp) in the connection URL with C(https).\nIf the value is not specified in the task, the value of environment variable C(DOCKER_HOST) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "unix://var/run/docker.sock",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domainname": {
          "aliases": [],
          "description": "Container domainname.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "entrypoint": {
          "aliases": [],
          "description": "Command that overwrites the default C(ENTRYPOINT) of the image.\nSee I(command_handling) for differences in how strings and lists are handled.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "env": {
          "aliases": [],
          "description": "Dictionary of key,value pairs.\nValues which might be parsed as numbers, booleans or other types by the YAML parser must be quoted (for example C(\"true\")) in order to avoid data loss.\nPlease note that if you are passing values in with Jinja2 templates, like C(\"{{ value }}\"), you need to add C(| string) to prevent Ansible to convert strings such as C(\"true\") back to booleans. The correct way is to use C(\"{{ value | string }}\").",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "env_file": {
          "aliases": [],
          "description": "Path to a file, present on the target, containing environment variables I(FOO=BAR).\nIf variable also present in I(env), then the I(env) value will override.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "etc_hosts": {
          "aliases": [],
          "description": "Dict of host-to-IP mappings, where each host name is a key in the dictionary. Each host name will be added to the container's C(/etc/hosts) file.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "exposed_ports": {
          "aliases": [
            "exposed",
            "expose"
          ],
          "description": "List of additional container ports which informs Docker that the container listens on the specified network ports at runtime.\nIf the port is already exposed using C(EXPOSE) in a Dockerfile, it does not need to be exposed again.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "force_kill": {
          "aliases": [
            "forcekill"
          ],
          "description": "Use the kill command when stopping a running container.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "groups": {
          "aliases": [],
          "description": "List of additional group names and/or IDs that the container process will run as.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "healthcheck": {
          "aliases": [],
          "description": "Configure a check that is run to determine whether or not containers for this service are \"healthy\".\nSee the docs for the L(HEALTHCHECK Dockerfile instruction,https://docs.docker.com/engine/reference/builder/#healthcheck) for details on how healthchecks work.\nI(interval), I(timeout) and I(start_period) are specified as durations. They accept duration as a string in a format that look like: C(5h34m56s), C(1m30s) etc. The supported units are C(us), C(ms), C(s), C(m) and C(h).",
          "type": "dict",
          "required": false,
          "suboptions": {
            "interval": {
              "aliases": [],
              "description": "Time between running the check.\nThe default used by the Docker daemon is C(30s).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "retries": {
              "aliases": [],
              "description": "Consecutive number of failures needed to report unhealthy.\nThe default used by the Docker daemon is C(3).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "start_period": {
              "aliases": [],
              "description": "Start period for the container to initialize before starting health-retries countdown.\nThe default used by the Docker daemon is C(0s).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "test": {
              "aliases": [],
              "description": "Command to run to check health.\nMust be either a string or a list. If it is a list, the first item must be one of C(NONE), C(CMD) or C(CMD-SHELL).",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Maximum time to allow one check to run.\nThe default used by the Docker daemon is C(30s).",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "hostname": {
          "aliases": [],
          "description": "The container's hostname.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ignore_image": {
          "aliases": [],
          "description": "When I(state) is C(present) or C(started), the module compares the configuration of an existing container to requested configuration. The evaluation includes the image version. If the image version in the registry does not match the container, the container will be recreated. You can stop this behavior by setting I(ignore_image) to C(True).\nB(Warning:) This option is ignored if C(image: ignore) or C(*: ignore) is specified in the I(comparisons) option.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "image": {
          "aliases": [],
          "description": "Repository path and tag used to create the container. If an image is not found or pull is true, the image will be pulled from the registry. If no tag is included, C(latest) will be used.\nCan also be an image ID. If this is the case, the image is assumed to be available locally. The I(pull) option is ignored for this case.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "init": {
          "aliases": [],
          "description": "Run an init inside the container that forwards signals and reaps processes.\nThis option requires Docker API >= 1.25.\nIf I(container_default_behavior) is set to C(compatiblity), this option has a default of C(false).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "interactive": {
          "aliases": [],
          "description": "Keep stdin open after a container is launched, even if not attached.\nIf I(container_default_behavior) is set to C(compatiblity), this option has a default of C(false).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ipc_mode": {
          "aliases": [],
          "description": "Set the IPC mode for the container.\nCan be one of C(container:<name|id>) to reuse another container's IPC namespace or C(host) to use the host's IPC namespace within the container.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "keep_volumes": {
          "aliases": [],
          "description": "Retain anonymous volumes associated with a removed container.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "kernel_memory": {
          "aliases": [],
          "description": "Kernel memory limit in format C(<number>[<unit>]). Number is a positive integer. Unit can be C(B) (byte), C(K) (kibibyte, 1024B), C(M) (mebibyte), C(G) (gibibyte), C(T) (tebibyte), or C(P) (pebibyte). Minimum is C(4M).\nOmitting the unit defaults to bytes.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "kill_signal": {
          "aliases": [],
          "description": "Override default signal used to kill a running container.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "labels": {
          "aliases": [],
          "description": "Dictionary of key value pairs.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "links": {
          "aliases": [],
          "description": "List of name aliases for linked containers in the format C(container_name:alias).\nSetting this will force container to be restarted.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "log_driver": {
          "aliases": [],
          "description": "Specify the logging driver. Docker uses C(json-file) by default.\nSee L(here,https://docs.docker.com/config/containers/logging/configure/) for possible choices.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "log_options": {
          "aliases": [
            "log_opt"
          ],
          "description": "Dictionary of options specific to the chosen I(log_driver).\nSee U(https://docs.docker.com/engine/admin/logging/overview/) for details.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "mac_address": {
          "aliases": [],
          "description": "Container MAC address (for example, C(92:d0:c6:0a:29:33)).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "memory": {
          "aliases": [],
          "description": "Memory limit in format C(<number>[<unit>]). Number is a positive integer. Unit can be C(B) (byte), C(K) (kibibyte, 1024B), C(M) (mebibyte), C(G) (gibibyte), C(T) (tebibyte), or C(P) (pebibyte).\nOmitting the unit defaults to bytes.\nIf I(container_default_behavior) is set to C(compatiblity), this option has a default of C(\"0\").",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "memory_reservation": {
          "aliases": [],
          "description": "Memory soft limit in format C(<number>[<unit>]). Number is a positive integer. Unit can be C(B) (byte), C(K) (kibibyte, 1024B), C(M) (mebibyte), C(G) (gibibyte), C(T) (tebibyte), or C(P) (pebibyte).\nOmitting the unit defaults to bytes.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "memory_swap": {
          "aliases": [],
          "description": "Total memory limit (memory + swap) in format C(<number>[<unit>]), or the special values C(unlimited) or C(-1) for unlimited swap usage. Number is a positive integer. Unit can be C(B) (byte), C(K) (kibibyte, 1024B), C(M) (mebibyte), C(G) (gibibyte), C(T) (tebibyte), or C(P) (pebibyte).\nOmitting the unit defaults to bytes.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "memory_swappiness": {
          "aliases": [],
          "description": "Tune a container's memory swappiness behavior. Accepts an integer between 0 and 100.\nIf not set, the value will be remain the same if container exists and will be inherited from the host machine if it is (re-)created.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "mounts": {
          "aliases": [],
          "description": "Specification for mounts to be added to the container. More powerful alternative to I(volumes).",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "consistency": {
              "aliases": [],
              "description": "The consistency requirement for the mount.",
              "type": "str",
              "required": false,
              "choices": [
                "cached",
                "consistent",
                "default",
                "delegated"
              ],
              "suboptions": {}
            },
            "labels": {
              "aliases": [],
              "description": "User-defined name and labels for the volume. Only valid for the C(volume) type.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "no_copy": {
              "aliases": [],
              "description": "False if the volume should be populated with the data from the target. Only valid for the C(volume) type.\nThe default value is C(false).",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "propagation": {
              "aliases": [],
              "description": "Propagation mode. Only valid for the C(bind) type.",
              "type": "str",
              "required": false,
              "choices": [
                "private",
                "rprivate",
                "shared",
                "rshared",
                "slave",
                "rslave"
              ],
              "suboptions": {}
            },
            "read_only": {
              "aliases": [],
              "description": "Whether the mount should be read-only.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "source": {
              "aliases": [],
              "description": "Mount source.\nFor example, this can be a volume name or a host path.\nIf not supplied when I(type=volume) an anonymous volume will be created.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "target": {
              "aliases": [],
              "description": "Path inside the container.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "tmpfs_mode": {
              "aliases": [],
              "description": "The permission mode for the tmpfs mount.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "tmpfs_size": {
              "aliases": [],
              "description": "The size for the tmpfs mount in bytes in format <number>[<unit>].\nNumber is a positive integer. Unit can be one of C(B) (byte), C(K) (kibibyte, 1024B), C(M) (mebibyte), C(G) (gibibyte), C(T) (tebibyte), or C(P) (pebibyte).\nOmitting the unit defaults to bytes.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "The mount type.\nNote that C(npipe) is only supported by Docker for Windows.",
              "default": "volume",
              "type": "str",
              "required": false,
              "choices": [
                "bind",
                "npipe",
                "tmpfs",
                "volume"
              ],
              "suboptions": {}
            },
            "volume_driver": {
              "aliases": [],
              "description": "Specify the volume driver. Only valid for the C(volume) type.\nSee L(here,https://docs.docker.com/storage/volumes/#use-a-volume-driver) for details.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "volume_options": {
              "aliases": [],
              "description": "Dictionary of options specific to the chosen volume_driver. See L(here,https://docs.docker.com/storage/volumes/#use-a-volume-driver) for details.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "Assign a name to a new container or match an existing container.\nWhen identifying an existing container name may be a name or a long or short container ID.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "network_mode": {
          "aliases": [],
          "description": "Connect the container to a network. Choices are C(bridge), C(host), C(none), C(container:<name|id>), C(<network_name>) or C(default).\nSince community.docker 2.0.0, if I(networks_cli_compatible) is C(true) and I(networks) contains at least one network, the default value for I(network_mode) is the name of the first network in the I(networks) list. You can prevent this by explicitly specifying a value for I(network_mode), like the default value C(default) which will be used by Docker if I(network_mode) is not specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "networks": {
          "aliases": [],
          "description": "List of networks the container belongs to.\nFor examples of the data structure and usage see EXAMPLES below.\nTo remove a container from one or more networks, use the I(purge_networks) option.\nIf I(networks_cli_compatible) is set to C(false), this will not remove the default network if I(networks) is specified. This is different from the behavior of C(docker run ...). You need to explicitly use I(purge_networks) to enforce the removal of the default network (and all other networks not explicitly mentioned in I(networks)) in that case.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "aliases": {
              "aliases": [],
              "description": "List of aliases for this container in this network. These names can be used in the network to reach this container.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "ipv4_address": {
              "aliases": [],
              "description": "The container's IPv4 address in this network.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "ipv6_address": {
              "aliases": [],
              "description": "The container's IPv6 address in this network.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "links": {
              "aliases": [],
              "description": "A list of containers to link to.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "The network's name.",
              "type": "str",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "networks_cli_compatible": {
          "aliases": [],
          "description": "If I(networks_cli_compatible) is set to C(yes) (default), this module will behave as C(docker run --network) and will B(not) add the default network if I(networks) is specified. If I(networks) is not specified, the default network will be attached.\nWhen I(networks_cli_compatible) is set to C(no) and networks are provided to the module via the I(networks) option, the module behaves differently than C(docker run --network): C(docker run --network other) will create a container with network C(other) attached, but the default network not attached. This module with I(networks: {name: other}) will create a container with both C(default) and C(other) attached. If I(purge_networks) is set to C(yes), the C(default) network will be removed afterwards.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "oom_killer": {
          "aliases": [],
          "description": "Whether or not to disable OOM Killer for the container.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "oom_score_adj": {
          "aliases": [],
          "description": "An integer value containing the score given to the container in order to tune OOM killer preferences.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "output_logs": {
          "aliases": [],
          "description": "If set to true, output of the container command will be printed.\nOnly effective when I(log_driver) is set to C(json-file) or C(journald).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "paused": {
          "aliases": [],
          "description": "Use with the started state to pause running processes inside the container.\nIf I(container_default_behavior) is set to C(compatiblity), this option has a default of C(false).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "pid_mode": {
          "aliases": [],
          "description": "Set the PID namespace mode for the container.\nNote that Docker SDK for Python < 2.0 only supports C(host). Newer versions of the Docker SDK for Python (docker) allow all values supported by the Docker daemon.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pids_limit": {
          "aliases": [],
          "description": "Set PIDs limit for the container. It accepts an integer value.\nSet C(-1) for unlimited PIDs.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "privileged": {
          "aliases": [],
          "description": "Give extended privileges to the container.\nIf I(container_default_behavior) is set to C(compatiblity), this option has a default of C(false).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "publish_all_ports": {
          "aliases": [],
          "description": "Publish all ports to the host.\nAny specified port bindings from I(published_ports) will remain intact when C(true).",
          "type": "bool",
          "required": false,
          "version_added": "1.8.0",
          "suboptions": {}
        },
        "published_ports": {
          "aliases": [
            "ports"
          ],
          "description": "List of ports to publish from the container to the host.\nUse docker CLI syntax: C(8000), C(9000:8000), or C(0.0.0.0:9000:8000), where 8000 is a container port, 9000 is a host port, and 0.0.0.0 is a host interface.\nPort ranges can be used for source and destination ports. If two ranges with different lengths are specified, the shorter range will be used. Since community.general 0.2.0, if the source port range has length 1, the port will not be assigned to the first port of the destination range, but to a free port in that range. This is the same behavior as for C(docker) command line utility.\nBind addresses must be either IPv4 or IPv6 addresses. Hostnames are B(not) allowed. This is different from the C(docker) command line utility. Use the R(dig lookup,ansible_collections.community.general.dig_lookup) to resolve hostnames.\nA value of C(all) will publish all exposed container ports to random host ports, ignoring any other mappings. This is deprecated since version 2.0.0 and will be disallowed in community.docker 3.0.0. Use the I(publish_all_ports) option instead.\nIf I(networks) parameter is provided, will inspect each network to see if there exists a bridge network with optional parameter C(com.docker.network.bridge.host_binding_ipv4). If such a network is found, then published ports where no host IP address is specified will be bound to the host IP pointed to by C(com.docker.network.bridge.host_binding_ipv4). Note that the first bridge network with a C(com.docker.network.bridge.host_binding_ipv4) value encountered in the list of I(networks) is the one that will be used.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "pull": {
          "aliases": [],
          "description": "If true, always pull the latest version of an image. Otherwise, will only pull an image when missing.\nB(Note:) images are only pulled when specified by name. If the image is specified as a image ID (hash), it cannot be pulled.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "purge_networks": {
          "aliases": [],
          "description": "Remove the container from ALL networks not included in I(networks) parameter.\nAny default networks such as C(bridge), if not found in I(networks), will be removed as well.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "read_only": {
          "aliases": [],
          "description": "Mount the container's root file system as read-only.\nIf I(container_default_behavior) is set to C(compatiblity), this option has a default of C(false).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "recreate": {
          "aliases": [],
          "description": "Use with present and started states to force the re-creation of an existing container.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "removal_wait_timeout": {
          "aliases": [],
          "description": "When removing an existing container, the docker daemon API call exists after the container is scheduled for removal. Removal usually is very fast, but it can happen that during high I/O load, removal can take longer. By default, the module will wait until the container has been removed before trying to (re-)create it, however long this takes.\nBy setting this option, the module will wait at most this many seconds for the container to be removed. If the container is still in the removal phase after this many seconds, the module will fail.",
          "type": "float",
          "required": false,
          "suboptions": {}
        },
        "restart": {
          "aliases": [],
          "description": "Use with started state to force a matching container to be stopped and restarted.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "restart_policy": {
          "aliases": [],
          "description": "Container restart policy.\nPlace quotes around C(no) option.",
          "type": "str",
          "required": false,
          "choices": [
            "no",
            "on-failure",
            "always",
            "unless-stopped"
          ],
          "suboptions": {}
        },
        "restart_retries": {
          "aliases": [],
          "description": "Use with restart policy to control maximum number of restart attempts.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "runtime": {
          "aliases": [],
          "description": "Runtime to use for the container.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "security_opts": {
          "aliases": [],
          "description": "List of security options in the form of C(\"label:user:User\").",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "shm_size": {
          "aliases": [],
          "description": "Size of C(/dev/shm) in format C(<number>[<unit>]). Number is positive integer. Unit can be C(B) (byte), C(K) (kibibyte, 1024B), C(M) (mebibyte), C(G) (gibibyte), C(T) (tebibyte), or C(P) (pebibyte).\nOmitting the unit defaults to bytes. If you omit the size entirely, Docker daemon uses C(64M).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_version": {
          "aliases": [],
          "description": "Provide a valid SSL version number. Default value determined by ssl.py module.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_SSL_VERSION) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "C(absent) - A container matching the specified name will be stopped and removed. Use I(force_kill) to kill the container rather than stopping it. Use I(keep_volumes) to retain anonymous volumes associated with the removed container.\nC(present) - Asserts the existence of a container matching the name and any provided configuration parameters. If no container matches the name, a container will be created. If a container matches the name but the provided configuration does not match, the container will be updated, if it can be. If it cannot be updated, it will be removed and re-created with the requested config.\nC(started) - Asserts that the container is first C(present), and then if the container is not running moves it to a running state. Use I(restart) to force a matching container to be stopped and restarted.\nC(stopped) - Asserts that the container is first C(present), and then if the container is running moves it to a stopped state.\nTo control what will be taken into account when comparing configuration, see the I(comparisons) option. To avoid that the image version will be taken into account, you can also use the I(ignore_image) option.\nUse the I(recreate) option to always force re-creation of a matching container, even if it is running.\nIf the container should be killed instead of stopped in case it needs to be stopped for recreation, or because I(state) is C(stopped), please use the I(force_kill) option. Use I(keep_volumes) to retain anonymous volumes associated with a removed container.\nUse I(keep_volumes) to retain anonymous volumes associated with a removed container.",
          "default": "started",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present",
            "stopped",
            "started"
          ],
          "suboptions": {}
        },
        "stop_signal": {
          "aliases": [],
          "description": "Override default signal used to stop the container.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "stop_timeout": {
          "aliases": [],
          "description": "Number of seconds to wait for the container to stop before sending C(SIGKILL). When the container is created by this module, its C(StopTimeout) configuration will be set to this value.\nWhen the container is stopped, will be used as a timeout for stopping the container. In case the container has a custom C(StopTimeout) configuration, the behavior depends on the version of the docker daemon. New versions of the docker daemon will always use the container's configured C(StopTimeout) value if it has been configured.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "storage_opts": {
          "aliases": [],
          "description": "Storage driver options for this container as a key-value mapping.",
          "type": "dict",
          "required": false,
          "version_added": "1.3.0",
          "suboptions": {}
        },
        "sysctls": {
          "aliases": [],
          "description": "Dictionary of key,value pairs.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The maximum amount of time in seconds to wait on a response from the API.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TIMEOUT) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "tls": {
          "aliases": [],
          "description": "Secure the connection to the API by using TLS without verifying the authenticity of the Docker host server. Note that if I(validate_certs) is set to C(yes) as well, it will take precedence.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "tls_hostname": {
          "aliases": [],
          "description": "When verifying the authenticity of the Docker Host server, provide the expected name of the server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_HOSTNAME) will be used instead. If the environment variable is not set, the default value will be used.\nThe current default value is C(localhost). This default is deprecated and will change in community.docker 2.0.0 to be a value computed from I(docker_host). Explicitly specify C(localhost) to make sure this value will still be used, and to disable the deprecation message which will be shown otherwise.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tmpfs": {
          "aliases": [],
          "description": "Mount a tmpfs directory.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "tty": {
          "aliases": [],
          "description": "Allocate a pseudo-TTY.\nIf I(container_default_behavior) is set to C(compatiblity), this option has a default of C(false).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ulimits": {
          "aliases": [],
          "description": "List of ulimit options. A ulimit is specified as C(nofile:262144:262144).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "use_ssh_client": {
          "aliases": [],
          "description": "For SSH transports, use the C(ssh) CLI tool instead of paramiko.\nRequires Docker SDK for Python 4.4.0 or newer.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "Sets the username or UID used and optionally the groupname or GID for the specified command.\nCan be of the forms C(user), C(user:group), C(uid), C(uid:gid), C(user:gid) or C(uid:group).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "userns_mode": {
          "aliases": [],
          "description": "Set the user namespace mode for the container. Currently, the only valid value are C(host) and the empty string.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uts": {
          "aliases": [],
          "description": "Set the UTS namespace mode for the container.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tls_verify"
          ],
          "description": "Secure the connection to the API by using TLS and verifying the authenticity of the Docker host server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_VERIFY) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "volume_driver": {
          "aliases": [],
          "description": "The container volume driver.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "volumes": {
          "aliases": [],
          "description": "List of volumes to mount within the container.\nUse docker CLI-style syntax: C(/host:/container[:mode])\nMount modes can be a comma-separated list of various modes such as C(ro), C(rw), C(consistent), C(delegated), C(cached), C(rprivate), C(private), C(rshared), C(shared), C(rslave), C(slave), and C(nocopy). Note that the docker daemon might not support all modes and combinations of such modes.\nSELinux hosts can additionally use C(z) or C(Z) to use a shared or private label for the volume.\nNote that Ansible 2.7 and earlier only supported one mode, which had to be one of C(ro), C(rw), C(z), and C(Z).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "volumes_from": {
          "aliases": [],
          "description": "List of container names or IDs to get volumes from.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "working_dir": {
          "aliases": [],
          "description": "Path to the working directory.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "Docker API >= 1.20",
        "Docker SDK for Python: Please note that the L(docker-py,https://pypi.org/project/docker-py/) Python module has been superseded by L(docker,https://pypi.org/project/docker/) (see L(here,https://github.com/docker/docker-py/issues/1310) for details). For Python 2.6, C(docker-py) must be used. Otherwise, it is recommended to install the C(docker) Python module. Note that both modules should *not* be installed at the same time. Also note that when both modules are installed and one of them is uninstalled, the other might no longer function and a reinstall of it is required.",
        "L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) >= 1.8.0 (use L(docker-py,https://pypi.org/project/docker-py/) for Python 2.6)"
      ],
      "short_description": "manage docker containers"
    },
    "examples": "\n- name: Create a data container\n  community.docker.docker_container:\n    name: mydata\n    image: busybox\n    volumes:\n      - /data\n\n- name: Re-create a redis container\n  community.docker.docker_container:\n    name: myredis\n    image: redis\n    command: redis-server --appendonly yes\n    state: present\n    recreate: yes\n    exposed_ports:\n      - 6379\n    volumes_from:\n      - mydata\n\n- name: Restart a container\n  community.docker.docker_container:\n    name: myapplication\n    image: someuser/appimage\n    state: started\n    restart: yes\n    links:\n     - \"myredis:aliasedredis\"\n    devices:\n     - \"/dev/sda:/dev/xvda:rwm\"\n    ports:\n     # Publish container port 9000 as host port 8080\n     - \"8080:9000\"\n     # Publish container UDP port 9001 as host port 8081 on interface 127.0.0.1\n     - \"127.0.0.1:8081:9001/udp\"\n     # Publish container port 9002 as a random host port\n     - \"9002\"\n     # Publish container port 9003 as a free host port in range 8000-8100\n     # (the host port will be selected by the Docker daemon)\n     - \"8000-8100:9003\"\n     # Publish container ports 9010-9020 to host ports 7000-7010\n     - \"7000-7010:9010-9020\"\n    env:\n        SECRET_KEY: \"ssssh\"\n        # Values which might be parsed as numbers, booleans or other types by the YAML parser need to be quoted\n        BOOLEAN_KEY: \"yes\"\n\n- name: Container present\n  community.docker.docker_container:\n    name: mycontainer\n    state: present\n    image: ubuntu:14.04\n    command: sleep infinity\n\n- name: Stop a container\n  community.docker.docker_container:\n    name: mycontainer\n    state: stopped\n\n- name: Start 4 load-balanced containers\n  community.docker.docker_container:\n    name: \"container{{ item }}\"\n    recreate: yes\n    image: someuser/anotherappimage\n    command: sleep 1d\n  with_sequence: count=4\n\n- name: Remove container\n  community.docker.docker_container:\n    name: ohno\n    state: absent\n\n- name: Syslogging output\n  community.docker.docker_container:\n    name: myservice\n    image: busybox\n    log_driver: syslog\n    log_options:\n      syslog-address: tcp://my-syslog-server:514\n      syslog-facility: daemon\n      # NOTE: in Docker 1.13+ the \"syslog-tag\" option was renamed to \"tag\" for\n      # older docker installs, use \"syslog-tag\" instead\n      tag: myservice\n\n- name: Create db container and connect to network\n  community.docker.docker_container:\n    name: db_test\n    image: \"postgres:latest\"\n    networks:\n      - name: \"{{ docker_network_name }}\"\n\n- name: Start container, connect to network and link\n  community.docker.docker_container:\n    name: sleeper\n    image: ubuntu:14.04\n    networks:\n      - name: TestingNet\n        ipv4_address: \"172.16.1.100\"\n        aliases:\n          - sleepyzz\n        links:\n          - db_test:db\n      - name: TestingNet2\n\n- name: Start a container with a command\n  community.docker.docker_container:\n    name: sleepy\n    image: ubuntu:14.04\n    command: [\"sleep\", \"infinity\"]\n\n- name: Add container to networks\n  community.docker.docker_container:\n    name: sleepy\n    networks:\n      - name: TestingNet\n        ipv4_address: 172.16.1.18\n        links:\n          - sleeper\n      - name: TestingNet2\n        ipv4_address: 172.16.10.20\n\n- name: Update network with aliases\n  community.docker.docker_container:\n    name: sleepy\n    networks:\n      - name: TestingNet\n        aliases:\n          - sleepyz\n          - zzzz\n\n- name: Remove container from one network\n  community.docker.docker_container:\n    name: sleepy\n    networks:\n      - name: TestingNet2\n    purge_networks: yes\n\n- name: Remove container from all networks\n  community.docker.docker_container:\n    name: sleepy\n    purge_networks: yes\n\n- name: Start a container and use an env file\n  community.docker.docker_container:\n    name: agent\n    image: jenkinsci/ssh-slave\n    env_file: /var/tmp/jenkins/agent.env\n\n- name: Create a container with limited capabilities\n  community.docker.docker_container:\n    name: sleepy\n    image: ubuntu:16.04\n    command: sleep infinity\n    capabilities:\n      - sys_time\n    cap_drop:\n      - all\n\n- name: Finer container restart/update control\n  community.docker.docker_container:\n    name: test\n    image: ubuntu:18.04\n    env:\n      arg1: \"true\"\n      arg2: \"whatever\"\n    volumes:\n      - /tmp:/tmp\n    comparisons:\n      image: ignore   # do not restart containers with older versions of the image\n      env: strict   # we want precisely this environment\n      volumes: allow_more_present   # if there are more volumes, that's ok, as long as `/tmp:/tmp` is there\n\n- name: Finer container restart/update control II\n  community.docker.docker_container:\n    name: test\n    image: ubuntu:18.04\n    env:\n      arg1: \"true\"\n      arg2: \"whatever\"\n    comparisons:\n      '*': ignore  # by default, ignore *all* options (including image)\n      env: strict   # except for environment variables; there, we want to be strict\n\n- name: Start container with healthstatus\n  community.docker.docker_container:\n    name: nginx-proxy\n    image: nginx:1.13\n    state: started\n    healthcheck:\n      # Check if nginx server is healthy by curl'ing the server.\n      # If this fails or timeouts, the healthcheck fails.\n      test: [\"CMD\", \"curl\", \"--fail\", \"http://nginx.host.com\"]\n      interval: 1m30s\n      timeout: 10s\n      retries: 3\n      start_period: 30s\n\n- name: Remove healthcheck from container\n  community.docker.docker_container:\n    name: nginx-proxy\n    image: nginx:1.13\n    state: started\n    healthcheck:\n      # The \"NONE\" check needs to be specified\n      test: [\"NONE\"]\n\n- name: Start container with block device read limit\n  community.docker.docker_container:\n    name: test\n    image: ubuntu:18.04\n    state: started\n    device_read_bps:\n      # Limit read rate for /dev/sda to 20 mebibytes per second\n      - path: /dev/sda\n        rate: 20M\n    device_read_iops:\n      # Limit read rate for /dev/sdb to 300 IO per second\n      - path: /dev/sdb\n        rate: 300\n\n- name: Start container with GPUs\n  community.docker.docker_container:\n    name: test\n    image: ubuntu:18.04\n    state: started\n    device_requests:\n      - # Add some specific devices to this container\n        device_ids:\n          - '0'\n          - 'GPU-3a23c669-1f69-c64e-cf85-44e9b07e7a2a'\n      - # Add nVidia GPUs to this container\n        driver: nvidia\n        count: -1  # this means we want all\n        capabilities:\n          # We have one OR condition: 'gpu' AND 'utility'\n          - - gpu\n            - utility\n          # See https://github.com/NVIDIA/nvidia-container-runtime#supported-driver-capabilities\n          # for a list of capabilities supported by the nvidia driver\n\n- name: Start container with storage options\n  community.docker.docker_container:\n    name: test\n    image: ubuntu:18.04\n    state: started\n    storage_opts:\n      # Limit root filesystem to 12 MB - note that this requires special storage backends\n      # (https://fabianlee.org/2020/01/15/docker-use-overlay2-with-an-xfs-backing-filesystem-to-limit-rootfs-size/)\n      size: 12m\n"
  },
  "community.docker.docker_container_exec": {
    "doc": {
      "description": "Executes a command in a Docker container.",
      "has_action": false,
      "notes": "Does not support C(check_mode).\nConnect to the Docker daemon by providing parameters with each task or by defining environment variables. You can define C(DOCKER_HOST), C(DOCKER_TLS_HOSTNAME), C(DOCKER_API_VERSION), C(DOCKER_CERT_PATH), C(DOCKER_SSL_VERSION), C(DOCKER_TLS), C(DOCKER_TLS_VERIFY) and C(DOCKER_TIMEOUT). If you are using docker machine, run the script shipped with the product that sets up the environment. It will set these variables for you. See U(https://docs.docker.com/machine/reference/env/) for more details.\nWhen connecting to Docker daemon with TLS, you might need to install additional Python packages. For the Docker SDK for Python, version 2.4 or newer, this can be done by installing C(docker[tls]) with M(ansible.builtin.pip).\nNote that the Docker SDK for Python only allows to specify the path to the Docker configuration for very few functions. In general, it will use C($HOME/.docker/config.json) if the C(DOCKER_CONFIG) environment variable is not specified, and use C($DOCKER_CONFIG/config.json) otherwise.\nThis module uses the L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) to communicate with the Docker daemon.",
      "options": {
        "api_version": {
          "aliases": [
            "docker_api_version"
          ],
          "description": "The version of the Docker API running on the Docker Host.\nDefaults to the latest version of the API supported by Docker SDK for Python and the docker daemon.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_API_VERSION) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "auto",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "argv": {
          "aliases": [],
          "description": "The command to execute.\nSince this is a list of arguments, no quoting is needed.\nExactly one of I(argv) and I(command) must be specified.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "tls_ca_cert",
            "cacert_path"
          ],
          "description": "Use a CA certificate when performing server verification by providing the path to a CA certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(ca.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "chdir": {
          "aliases": [],
          "description": "The directory to run the command in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "tls_client_cert",
            "cert_path"
          ],
          "description": "Path to the client's TLS certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(cert.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "tls_client_key",
            "key_path"
          ],
          "description": "Path to the client's TLS key file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(key.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "command": {
          "aliases": [],
          "description": "The command to execute.\nExactly one of I(argv) and I(command) must be specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "container": {
          "aliases": [],
          "description": "The name of the container to execute the command in.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "debug": {
          "aliases": [],
          "description": "Debug mode",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "detach": {
          "aliases": [],
          "description": "Whether to run the command synchronously (I(detach=false), default) or asynchronously (I(detach=true)).\nIf set to C(true), I(stdin) cannot be provided, and the return values C(stdout), C(stderr) and C(rc) are not returned.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "2.1.0",
          "suboptions": {}
        },
        "docker_host": {
          "aliases": [
            "docker_url"
          ],
          "description": "The URL or Unix socket path used to connect to the Docker API. To connect to a remote host, provide the TCP connection string. For example, C(tcp://192.0.2.23:2376). If TLS is used to encrypt the connection, the module will automatically replace C(tcp) in the connection URL with C(https).\nIf the value is not specified in the task, the value of environment variable C(DOCKER_HOST) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "unix://var/run/docker.sock",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "env": {
          "aliases": [],
          "description": "Dictionary of environment variables with their respective values to be passed to the command ran inside the container.\nValues which might be parsed as numbers, booleans or other types by the YAML parser must be quoted (for example C(\"true\")) in order to avoid data loss.\nPlease note that if you are passing values in with Jinja2 templates, like C(\"{{ value }}\"), you need to add C(| string) to prevent Ansible to convert strings such as C(\"true\") back to booleans. The correct way is to use C(\"{{ value | string }}\").",
          "type": "dict",
          "required": false,
          "version_added": "2.1.0",
          "suboptions": {}
        },
        "ssl_version": {
          "aliases": [],
          "description": "Provide a valid SSL version number. Default value determined by ssl.py module.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_SSL_VERSION) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "stdin": {
          "aliases": [],
          "description": "Set the stdin of the command directly to the specified value.\nCan only be used if I(detach=false).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "stdin_add_newline": {
          "aliases": [],
          "description": "If set to C(true), appends a newline to I(stdin).",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "strip_empty_ends": {
          "aliases": [],
          "description": "Strip empty lines from the end of stdout/stderr in result.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The maximum amount of time in seconds to wait on a response from the API.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TIMEOUT) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "tls": {
          "aliases": [],
          "description": "Secure the connection to the API by using TLS without verifying the authenticity of the Docker host server. Note that if I(validate_certs) is set to C(yes) as well, it will take precedence.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "tls_hostname": {
          "aliases": [],
          "description": "When verifying the authenticity of the Docker Host server, provide the expected name of the server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_HOSTNAME) will be used instead. If the environment variable is not set, the default value will be used.\nThe current default value is C(localhost). This default is deprecated and will change in community.docker 2.0.0 to be a value computed from I(docker_host). Explicitly specify C(localhost) to make sure this value will still be used, and to disable the deprecation message which will be shown otherwise.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tty": {
          "aliases": [],
          "description": "Whether to allocate a TTY.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_ssh_client": {
          "aliases": [],
          "description": "For SSH transports, use the C(ssh) CLI tool instead of paramiko.\nRequires Docker SDK for Python 4.4.0 or newer.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "If specified, the user to execute this command with.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tls_verify"
          ],
          "description": "Secure the connection to the API by using TLS and verifying the authenticity of the Docker host server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_VERIFY) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "Docker API >= 1.20",
        "Docker SDK for Python: Please note that the L(docker-py,https://pypi.org/project/docker-py/) Python module has been superseded by L(docker,https://pypi.org/project/docker/) (see L(here,https://github.com/docker/docker-py/issues/1310) for details). For Python 2.6, C(docker-py) must be used. Otherwise, it is recommended to install the C(docker) Python module. Note that both modules should *not* be installed at the same time. Also note that when both modules are installed and one of them is uninstalled, the other might no longer function and a reinstall of it is required.",
        "L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) >= 1.8.0 (use L(docker-py,https://pypi.org/project/docker-py/) for Python 2.6)"
      ],
      "short_description": "Execute command in a docker container",
      "version_added": "1.5.0"
    },
    "examples": "\n- name: Run a simple command (command)\n  community.docker.docker_container_exec:\n    container: foo\n    command: /bin/bash -c \"ls -lah\"\n    chdir: /root\n  register: result\n\n- name: Print stdout\n  debug:\n    var: result.stdout\n\n- name: Run a simple command (argv)\n  community.docker.docker_container_exec:\n    container: foo\n    argv:\n      - /bin/bash\n      - \"-c\"\n      - \"ls -lah > /dev/stderr\"\n    chdir: /root\n  register: result\n\n- name: Print stderr lines\n  debug:\n    var: result.stderr_lines\n"
  },
  "community.docker.docker_container_info": {
    "doc": {
      "description": "Retrieves facts about a docker container.\nEssentially returns the output of C(docker inspect <name>), similar to what M(community.docker.docker_container) returns for a non-absent container.",
      "has_action": false,
      "notes": "Connect to the Docker daemon by providing parameters with each task or by defining environment variables. You can define C(DOCKER_HOST), C(DOCKER_TLS_HOSTNAME), C(DOCKER_API_VERSION), C(DOCKER_CERT_PATH), C(DOCKER_SSL_VERSION), C(DOCKER_TLS), C(DOCKER_TLS_VERIFY) and C(DOCKER_TIMEOUT). If you are using docker machine, run the script shipped with the product that sets up the environment. It will set these variables for you. See U(https://docs.docker.com/machine/reference/env/) for more details.\nWhen connecting to Docker daemon with TLS, you might need to install additional Python packages. For the Docker SDK for Python, version 2.4 or newer, this can be done by installing C(docker[tls]) with M(ansible.builtin.pip).\nNote that the Docker SDK for Python only allows to specify the path to the Docker configuration for very few functions. In general, it will use C($HOME/.docker/config.json) if the C(DOCKER_CONFIG) environment variable is not specified, and use C($DOCKER_CONFIG/config.json) otherwise.\nThis module uses the L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) to communicate with the Docker daemon.",
      "options": {
        "api_version": {
          "aliases": [
            "docker_api_version"
          ],
          "description": "The version of the Docker API running on the Docker Host.\nDefaults to the latest version of the API supported by Docker SDK for Python and the docker daemon.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_API_VERSION) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "auto",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "tls_ca_cert",
            "cacert_path"
          ],
          "description": "Use a CA certificate when performing server verification by providing the path to a CA certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(ca.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "tls_client_cert",
            "cert_path"
          ],
          "description": "Path to the client's TLS certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(cert.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "tls_client_key",
            "key_path"
          ],
          "description": "Path to the client's TLS key file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(key.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "debug": {
          "aliases": [],
          "description": "Debug mode",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "docker_host": {
          "aliases": [
            "docker_url"
          ],
          "description": "The URL or Unix socket path used to connect to the Docker API. To connect to a remote host, provide the TCP connection string. For example, C(tcp://192.0.2.23:2376). If TLS is used to encrypt the connection, the module will automatically replace C(tcp) in the connection URL with C(https).\nIf the value is not specified in the task, the value of environment variable C(DOCKER_HOST) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "unix://var/run/docker.sock",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the container to inspect.\nWhen identifying an existing container name may be a name or a long or short container ID.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ssl_version": {
          "aliases": [],
          "description": "Provide a valid SSL version number. Default value determined by ssl.py module.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_SSL_VERSION) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The maximum amount of time in seconds to wait on a response from the API.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TIMEOUT) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "tls": {
          "aliases": [],
          "description": "Secure the connection to the API by using TLS without verifying the authenticity of the Docker host server. Note that if I(validate_certs) is set to C(yes) as well, it will take precedence.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "tls_hostname": {
          "aliases": [],
          "description": "When verifying the authenticity of the Docker Host server, provide the expected name of the server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_HOSTNAME) will be used instead. If the environment variable is not set, the default value will be used.\nThe current default value is C(localhost). This default is deprecated and will change in community.docker 2.0.0 to be a value computed from I(docker_host). Explicitly specify C(localhost) to make sure this value will still be used, and to disable the deprecation message which will be shown otherwise.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "use_ssh_client": {
          "aliases": [],
          "description": "For SSH transports, use the C(ssh) CLI tool instead of paramiko.\nRequires Docker SDK for Python 4.4.0 or newer.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tls_verify"
          ],
          "description": "Secure the connection to the API by using TLS and verifying the authenticity of the Docker host server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_VERIFY) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "Docker API >= 1.20",
        "Docker SDK for Python: Please note that the L(docker-py,https://pypi.org/project/docker-py/) Python module has been superseded by L(docker,https://pypi.org/project/docker/) (see L(here,https://github.com/docker/docker-py/issues/1310) for details). For Python 2.6, C(docker-py) must be used. Otherwise, it is recommended to install the C(docker) Python module. Note that both modules should *not* be installed at the same time. Also note that when both modules are installed and one of them is uninstalled, the other might no longer function and a reinstall of it is required.",
        "L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) >= 1.8.0 (use L(docker-py,https://pypi.org/project/docker-py/) for Python 2.6)"
      ],
      "short_description": "Retrieves facts about docker container"
    },
    "examples": "\n- name: Get infos on container\n  community.docker.docker_container_info:\n    name: mydata\n  register: result\n\n- name: Does container exist?\n  ansible.builtin.debug:\n    msg: \"The container {{ 'exists' if result.exists else 'does not exist' }}\"\n\n- name: Print information about container\n  ansible.builtin.debug:\n    var: result.container\n  when: result.exists\n"
  },
  "community.docker.docker_host_info": {
    "doc": {
      "description": "Retrieves facts about a docker host.\nEssentially returns the output of C(docker system info).\nThe module also allows to list object names for containers, images, networks and volumes. It also allows to query information on disk usage.\nThe output differs depending on API version of the docker daemon.\nIf the docker daemon cannot be contacted or does not meet the API version requirements, the module will fail.",
      "has_action": false,
      "notes": "Connect to the Docker daemon by providing parameters with each task or by defining environment variables. You can define C(DOCKER_HOST), C(DOCKER_TLS_HOSTNAME), C(DOCKER_API_VERSION), C(DOCKER_CERT_PATH), C(DOCKER_SSL_VERSION), C(DOCKER_TLS), C(DOCKER_TLS_VERIFY) and C(DOCKER_TIMEOUT). If you are using docker machine, run the script shipped with the product that sets up the environment. It will set these variables for you. See U(https://docs.docker.com/machine/reference/env/) for more details.\nWhen connecting to Docker daemon with TLS, you might need to install additional Python packages. For the Docker SDK for Python, version 2.4 or newer, this can be done by installing C(docker[tls]) with M(ansible.builtin.pip).\nNote that the Docker SDK for Python only allows to specify the path to the Docker configuration for very few functions. In general, it will use C($HOME/.docker/config.json) if the C(DOCKER_CONFIG) environment variable is not specified, and use C($DOCKER_CONFIG/config.json) otherwise.\nThis module uses the L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) to communicate with the Docker daemon.",
      "options": {
        "api_version": {
          "aliases": [
            "docker_api_version"
          ],
          "description": "The version of the Docker API running on the Docker Host.\nDefaults to the latest version of the API supported by Docker SDK for Python and the docker daemon.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_API_VERSION) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "auto",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "tls_ca_cert",
            "cacert_path"
          ],
          "description": "Use a CA certificate when performing server verification by providing the path to a CA certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(ca.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "tls_client_cert",
            "cert_path"
          ],
          "description": "Path to the client's TLS certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(cert.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "tls_client_key",
            "key_path"
          ],
          "description": "Path to the client's TLS key file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(key.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "containers": {
          "aliases": [],
          "description": "Whether to list containers.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "containers_filters": {
          "aliases": [],
          "description": "A dictionary of filter values used for selecting containers to list.\nFor example, C(until: 24h).\nC(label) is a special case of filter which can be a string C(<key>) matching when a label is present, a string C(<key>=<value>) matching when a label has a particular value, or a list of strings C(<key>)/C(<key>=<value).\nSee L(the docker documentation,https://docs.docker.com/engine/reference/commandline/container_prune/#filtering) for more information on possible filters.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "debug": {
          "aliases": [],
          "description": "Debug mode",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "disk_usage": {
          "aliases": [],
          "description": "Summary information on used disk space by all Docker layers.\nThe output is a sum of images, volumes, containers and build cache.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "docker_host": {
          "aliases": [
            "docker_url"
          ],
          "description": "The URL or Unix socket path used to connect to the Docker API. To connect to a remote host, provide the TCP connection string. For example, C(tcp://192.0.2.23:2376). If TLS is used to encrypt the connection, the module will automatically replace C(tcp) in the connection URL with C(https).\nIf the value is not specified in the task, the value of environment variable C(DOCKER_HOST) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "unix://var/run/docker.sock",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "images": {
          "aliases": [],
          "description": "Whether to list images.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "images_filters": {
          "aliases": [],
          "description": "A dictionary of filter values used for selecting images to list.\nFor example, C(dangling: true).\nC(label) is a special case of filter which can be a string C(<key>) matching when a label is present, a string C(<key>=<value>) matching when a label has a particular value, or a list of strings C(<key>)/C(<key>=<value).\nSee L(the docker documentation,https://docs.docker.com/engine/reference/commandline/image_prune/#filtering) for more information on possible filters.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "networks": {
          "aliases": [],
          "description": "Whether to list networks.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "networks_filters": {
          "aliases": [],
          "description": "A dictionary of filter values used for selecting networks to list.\nC(label) is a special case of filter which can be a string C(<key>) matching when a label is present, a string C(<key>=<value>) matching when a label has a particular value, or a list of strings C(<key>)/C(<key>=<value).\nSee L(the docker documentation,https://docs.docker.com/engine/reference/commandline/network_prune/#filtering) for more information on possible filters.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "ssl_version": {
          "aliases": [],
          "description": "Provide a valid SSL version number. Default value determined by ssl.py module.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_SSL_VERSION) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The maximum amount of time in seconds to wait on a response from the API.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TIMEOUT) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "tls": {
          "aliases": [],
          "description": "Secure the connection to the API by using TLS without verifying the authenticity of the Docker host server. Note that if I(validate_certs) is set to C(yes) as well, it will take precedence.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "tls_hostname": {
          "aliases": [],
          "description": "When verifying the authenticity of the Docker Host server, provide the expected name of the server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_HOSTNAME) will be used instead. If the environment variable is not set, the default value will be used.\nThe current default value is C(localhost). This default is deprecated and will change in community.docker 2.0.0 to be a value computed from I(docker_host). Explicitly specify C(localhost) to make sure this value will still be used, and to disable the deprecation message which will be shown otherwise.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "use_ssh_client": {
          "aliases": [],
          "description": "For SSH transports, use the C(ssh) CLI tool instead of paramiko.\nRequires Docker SDK for Python 4.4.0 or newer.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tls_verify"
          ],
          "description": "Secure the connection to the API by using TLS and verifying the authenticity of the Docker host server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_VERIFY) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "verbose_output": {
          "aliases": [],
          "description": "When set to C(yes) and I(networks), I(volumes), I(images), I(containers) or I(disk_usage) is set to C(yes) then output will contain verbose information about objects matching the full output of API method. For details see the documentation of your version of Docker API at U(https://docs.docker.com/engine/api/).\nThe verbose output in this module contains only subset of information returned by I(_info) module for each type of the objects.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "volumes": {
          "aliases": [],
          "description": "Whether to list volumes.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "volumes_filters": {
          "aliases": [],
          "description": "A dictionary of filter values used for selecting volumes to list.\nC(label) is a special case of filter which can be a string C(<key>) matching when a label is present, a string C(<key>=<value>) matching when a label has a particular value, or a list of strings C(<key>)/C(<key>=<value).\nSee L(the docker documentation,https://docs.docker.com/engine/reference/commandline/volume_prune/#filtering) for more information on possible filters.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "Docker API >= 1.21",
        "Docker SDK for Python: Please note that the L(docker-py,https://pypi.org/project/docker-py/) Python module has been superseded by L(docker,https://pypi.org/project/docker/) (see L(here,https://github.com/docker/docker-py/issues/1310) for details). For Python 2.6, C(docker-py) must be used. Otherwise, it is recommended to install the C(docker) Python module. Note that both modules should *not* be installed at the same time. Also note that when both modules are installed and one of them is uninstalled, the other might no longer function and a reinstall of it is required.",
        "L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) >= 1.10.0 (use L(docker-py,https://pypi.org/project/docker-py/) for Python 2.6)"
      ],
      "short_description": "Retrieves facts about docker host and lists of objects of the services."
    },
    "examples": "\n- name: Get info on docker host\n  community.docker.docker_host_info:\n  register: result\n\n- name: Get info on docker host and list images\n  community.docker.docker_host_info:\n    images: yes\n  register: result\n\n- name: Get info on docker host and list images matching the filter\n  community.docker.docker_host_info:\n    images: yes\n    images_filters:\n      label: \"mylabel\"\n  register: result\n\n- name: Get info on docker host and verbose list images\n  community.docker.docker_host_info:\n    images: yes\n    verbose_output: yes\n  register: result\n\n- name: Get info on docker host and used disk space\n  community.docker.docker_host_info:\n    disk_usage: yes\n  register: result\n\n- name: Get info on docker host and list containers matching the filter\n  community.docker.docker_host_info:\n    containers: yes\n    containers_filters:\n      label:\n        - key1=value1\n        - key2=value2\n  register: result\n\n- ansible.builtin.debug:\n    var: result.host_info\n\n"
  },
  "community.docker.docker_image": {
    "doc": {
      "description": "Build, load or pull an image, making the image available for creating containers. Also supports tagging an image, pushing an image, and archiving an image to a C(.tar) file.",
      "has_action": false,
      "notes": "Connect to the Docker daemon by providing parameters with each task or by defining environment variables. You can define C(DOCKER_HOST), C(DOCKER_TLS_HOSTNAME), C(DOCKER_API_VERSION), C(DOCKER_CERT_PATH), C(DOCKER_SSL_VERSION), C(DOCKER_TLS), C(DOCKER_TLS_VERIFY) and C(DOCKER_TIMEOUT). If you are using docker machine, run the script shipped with the product that sets up the environment. It will set these variables for you. See U(https://docs.docker.com/machine/reference/env/) for more details.\nWhen connecting to Docker daemon with TLS, you might need to install additional Python packages. For the Docker SDK for Python, version 2.4 or newer, this can be done by installing C(docker[tls]) with M(ansible.builtin.pip).\nNote that the Docker SDK for Python only allows to specify the path to the Docker configuration for very few functions. In general, it will use C($HOME/.docker/config.json) if the C(DOCKER_CONFIG) environment variable is not specified, and use C($DOCKER_CONFIG/config.json) otherwise.\nThis module uses the L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) to communicate with the Docker daemon.",
      "options": {
        "api_version": {
          "aliases": [
            "docker_api_version"
          ],
          "description": "The version of the Docker API running on the Docker Host.\nDefaults to the latest version of the API supported by Docker SDK for Python and the docker daemon.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_API_VERSION) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "auto",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "archive_path": {
          "aliases": [],
          "description": "Use with state C(present) to archive an image to a .tar file.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "build": {
          "aliases": [],
          "description": "Specifies options used for building images.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "args": {
              "aliases": [],
              "description": "Provide a dictionary of C(key:value) build arguments that map to Dockerfile ARG directive.\nDocker expects the value to be a string. For convenience any non-string values will be converted to strings.\nRequires Docker API >= 1.21.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "cache_from": {
              "aliases": [],
              "description": "List of image names to consider as cache source.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "container_limits": {
              "aliases": [],
              "description": "A dictionary of limits applied to each container created by the build process.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "cpusetcpus": {
                  "aliases": [],
                  "description": "CPUs in which to allow execution.\nFor example, C(0-3) or C(0,1).",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "cpushares": {
                  "aliases": [],
                  "description": "CPU shares (relative weight).",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "memory": {
                  "aliases": [],
                  "description": "Set memory limit for build.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "memswap": {
                  "aliases": [],
                  "description": "Total memory (memory + swap).\nUse C(-1) to disable swap.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "dockerfile": {
              "aliases": [],
              "description": "Use with state C(present) and source C(build) to provide an alternate name for the Dockerfile to use when building an image.\nThis can also include a relative path (relative to I(path)).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "etc_hosts": {
              "aliases": [],
              "description": "Extra hosts to add to C(/etc/hosts) in building containers, as a mapping of hostname to IP address.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "http_timeout": {
              "aliases": [],
              "description": "Timeout for HTTP requests during the image build operation. Provide a positive integer value for the number of seconds.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "network": {
              "aliases": [],
              "description": "The network to use for C(RUN) build instructions.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "nocache": {
              "aliases": [],
              "description": "Do not use cache when building an image.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "path": {
              "aliases": [],
              "description": "Use with state 'present' to build an image. Will be the path to a directory containing the context and Dockerfile for building an image.",
              "type": "path",
              "required": true,
              "suboptions": {}
            },
            "platform": {
              "aliases": [],
              "description": "Platform in the format C(os[/arch[/variant]]).",
              "type": "str",
              "required": false,
              "version_added": "1.1.0",
              "suboptions": {}
            },
            "pull": {
              "aliases": [],
              "description": "When building an image downloads any updates to the FROM image in Dockerfile.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "rm": {
              "aliases": [],
              "description": "Remove intermediate containers after build.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "target": {
              "aliases": [],
              "description": "When building an image specifies an intermediate build stage by name as a final stage for the resulting image.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "use_config_proxy": {
              "aliases": [],
              "description": "If set to C(yes) and a proxy configuration is specified in the docker client configuration (by default C($HOME/.docker/config.json)), the corresponding environment variables will be set in the container being built.\nNeeds Docker SDK for Python >= 3.7.0.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "ca_cert": {
          "aliases": [
            "tls_ca_cert",
            "cacert_path"
          ],
          "description": "Use a CA certificate when performing server verification by providing the path to a CA certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(ca.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "tls_client_cert",
            "cert_path"
          ],
          "description": "Path to the client's TLS certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(cert.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "tls_client_key",
            "key_path"
          ],
          "description": "Path to the client's TLS key file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(key.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "debug": {
          "aliases": [],
          "description": "Debug mode",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "docker_host": {
          "aliases": [
            "docker_url"
          ],
          "description": "The URL or Unix socket path used to connect to the Docker API. To connect to a remote host, provide the TCP connection string. For example, C(tcp://192.0.2.23:2376). If TLS is used to encrypt the connection, the module will automatically replace C(tcp) in the connection URL with C(https).\nIf the value is not specified in the task, the value of environment variable C(DOCKER_HOST) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "unix://var/run/docker.sock",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "force_absent": {
          "aliases": [],
          "description": "Use with state I(absent) to un-tag and remove all images matching the specified name.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "force_source": {
          "aliases": [],
          "description": "Use with state C(present) to build, load or pull an image (depending on the value of the I(source) option) when the image already exists.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "force_tag": {
          "aliases": [],
          "description": "Use with state C(present) to force tagging an image.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "load_path": {
          "aliases": [],
          "description": "Use with state C(present) to load an image from a .tar file.\nSet I(source) to C(load) if you want to load the image.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Image name. Name format will be one of: C(name), C(repository/name), C(registry_server:port/name). When pushing or pulling an image the name can optionally include the tag by appending C(:tag_name).\nNote that image IDs (hashes) are only supported for I(state=absent), for I(state=present) with I(source=load), and for I(state=present) with I(source=local).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "pull": {
          "aliases": [],
          "description": "Specifies options used for pulling images.",
          "type": "dict",
          "required": false,
          "version_added": "1.3.0",
          "suboptions": {
            "platform": {
              "aliases": [],
              "description": "When pulling an image, ask for this specific platform.\nNote that this value is not used to determine whether the image needs to be pulled. This might change in the future in a minor release, though.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "push": {
          "aliases": [],
          "description": "Push the image to the registry. Specify the registry as part of the I(name) or I(repository) parameter.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "repository": {
          "aliases": [],
          "description": "Use with state C(present) to tag the image.\nExpects format C(repository:tag). If no tag is provided, will use the value of the I(tag) parameter or C(latest).\nIf I(push=true), I(repository) must either include a registry, or will be assumed to belong to the default registry (Docker Hub).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "source": {
          "aliases": [],
          "description": "Determines where the module will try to retrieve the image from.\nUse C(build) to build the image from a C(Dockerfile). I(build.path) must be specified when this value is used.\nUse C(load) to load the image from a C(.tar) file. I(load_path) must be specified when this value is used.\nUse C(pull) to pull the image from a registry.\nUse C(local) to make sure that the image is already available on the local docker daemon. This means that the module does not try to build, pull or load the image.",
          "type": "str",
          "required": false,
          "choices": [
            "build",
            "load",
            "pull",
            "local"
          ],
          "suboptions": {}
        },
        "ssl_version": {
          "aliases": [],
          "description": "Provide a valid SSL version number. Default value determined by ssl.py module.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_SSL_VERSION) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Make assertions about the state of an image.\nWhen C(absent) an image will be removed. Use the force option to un-tag and remove all images matching the provided name.\nWhen C(present) check if an image exists using the provided name and tag. If the image is not found or the force option is used, the image will either be pulled, built or loaded, depending on the I(source) option.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tag": {
          "aliases": [],
          "description": "Used to select an image when pulling. Will be added to the image when pushing, tagging or building. Defaults to I(latest).\nIf I(name) parameter format is I(name:tag), then tag value from I(name) will take precedence.",
          "default": "latest",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The maximum amount of time in seconds to wait on a response from the API.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TIMEOUT) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "tls": {
          "aliases": [],
          "description": "Secure the connection to the API by using TLS without verifying the authenticity of the Docker host server. Note that if I(validate_certs) is set to C(yes) as well, it will take precedence.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "tls_hostname": {
          "aliases": [],
          "description": "When verifying the authenticity of the Docker Host server, provide the expected name of the server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_HOSTNAME) will be used instead. If the environment variable is not set, the default value will be used.\nThe current default value is C(localhost). This default is deprecated and will change in community.docker 2.0.0 to be a value computed from I(docker_host). Explicitly specify C(localhost) to make sure this value will still be used, and to disable the deprecation message which will be shown otherwise.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "use_ssh_client": {
          "aliases": [],
          "description": "For SSH transports, use the C(ssh) CLI tool instead of paramiko.\nRequires Docker SDK for Python 4.4.0 or newer.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tls_verify"
          ],
          "description": "Secure the connection to the API by using TLS and verifying the authenticity of the Docker host server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_VERIFY) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "Docker API >= 1.20",
        "Docker SDK for Python: Please note that the L(docker-py,https://pypi.org/project/docker-py/) Python module has been superseded by L(docker,https://pypi.org/project/docker/) (see L(here,https://github.com/docker/docker-py/issues/1310) for details). For Python 2.6, C(docker-py) must be used. Otherwise, it is recommended to install the C(docker) Python module. Note that both modules should *not* be installed at the same time. Also note that when both modules are installed and one of them is uninstalled, the other might no longer function and a reinstall of it is required.",
        "L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) >= 1.8.0 (use L(docker-py,https://pypi.org/project/docker-py/) for Python 2.6)"
      ],
      "short_description": "Manage docker images"
    },
    "examples": "\n\n- name: Pull an image\n  community.docker.docker_image:\n    name: pacur/centos-7\n    source: pull\n    # Select platform for pulling. If not specified, will pull whatever docker prefers.\n    pull:\n      platform: amd64\n\n- name: Tag and push to docker hub\n  community.docker.docker_image:\n    name: pacur/centos-7:56\n    repository: dcoppenhagan/myimage:7.56\n    push: yes\n    source: local\n\n- name: Tag and push to local registry\n  community.docker.docker_image:\n    # Image will be centos:7\n    name: centos\n    # Will be pushed to localhost:5000/centos:7\n    repository: localhost:5000/centos\n    tag: 7\n    push: yes\n    source: local\n\n- name: Add tag latest to image\n  community.docker.docker_image:\n    name: myimage:7.1.2\n    repository: myimage:latest\n    # As 'latest' usually already is present, we need to enable overwriting of existing tags:\n    force_tag: yes\n    source: local\n\n- name: Remove image\n  community.docker.docker_image:\n    state: absent\n    name: registry.ansible.com/chouseknecht/sinatra\n    tag: v1\n\n- name: Build an image and push it to a private repo\n  community.docker.docker_image:\n    build:\n      path: ./sinatra\n    name: registry.ansible.com/chouseknecht/sinatra\n    tag: v1\n    push: yes\n    source: build\n\n- name: Archive image\n  community.docker.docker_image:\n    name: registry.ansible.com/chouseknecht/sinatra\n    tag: v1\n    archive_path: my_sinatra.tar\n    source: local\n\n- name: Load image from archive and push to a private registry\n  community.docker.docker_image:\n    name: localhost:5000/myimages/sinatra\n    tag: v1\n    push: yes\n    load_path: my_sinatra.tar\n    source: load\n\n- name: Build image and with build args\n  community.docker.docker_image:\n    name: myimage\n    build:\n      path: /path/to/build/dir\n      args:\n        log_volume: /var/log/myapp\n        listen_port: 8080\n    source: build\n\n- name: Build image using cache source\n  community.docker.docker_image:\n    name: myimage:latest\n    build:\n      path: /path/to/build/dir\n      # Use as cache source for building myimage\n      cache_from:\n        - nginx:latest\n        - alpine:3.8\n    source: build\n"
  },
  "community.docker.docker_image_info": {
    "doc": {
      "description": "Provide one or more image names, and the module will inspect each, returning an array of inspection results.\nIf an image does not exist locally, it will not appear in the results. If you want to check whether an image exists locally, you can call the module with the image name, then check whether the result list is empty (image does not exist) or has one element (the image exists locally).\nThe module will not attempt to pull images from registries. Use M(community.docker.docker_image) with I(source) set to C(pull) to ensure an image is pulled.",
      "has_action": false,
      "notes": "This module was called C(docker_image_facts) before Ansible 2.8. The usage did not change.\nConnect to the Docker daemon by providing parameters with each task or by defining environment variables. You can define C(DOCKER_HOST), C(DOCKER_TLS_HOSTNAME), C(DOCKER_API_VERSION), C(DOCKER_CERT_PATH), C(DOCKER_SSL_VERSION), C(DOCKER_TLS), C(DOCKER_TLS_VERIFY) and C(DOCKER_TIMEOUT). If you are using docker machine, run the script shipped with the product that sets up the environment. It will set these variables for you. See U(https://docs.docker.com/machine/reference/env/) for more details.\nWhen connecting to Docker daemon with TLS, you might need to install additional Python packages. For the Docker SDK for Python, version 2.4 or newer, this can be done by installing C(docker[tls]) with M(ansible.builtin.pip).\nNote that the Docker SDK for Python only allows to specify the path to the Docker configuration for very few functions. In general, it will use C($HOME/.docker/config.json) if the C(DOCKER_CONFIG) environment variable is not specified, and use C($DOCKER_CONFIG/config.json) otherwise.\nThis module uses the L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) to communicate with the Docker daemon.",
      "options": {
        "api_version": {
          "aliases": [
            "docker_api_version"
          ],
          "description": "The version of the Docker API running on the Docker Host.\nDefaults to the latest version of the API supported by Docker SDK for Python and the docker daemon.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_API_VERSION) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "auto",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "tls_ca_cert",
            "cacert_path"
          ],
          "description": "Use a CA certificate when performing server verification by providing the path to a CA certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(ca.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "tls_client_cert",
            "cert_path"
          ],
          "description": "Path to the client's TLS certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(cert.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "tls_client_key",
            "key_path"
          ],
          "description": "Path to the client's TLS key file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(key.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "debug": {
          "aliases": [],
          "description": "Debug mode",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "docker_host": {
          "aliases": [
            "docker_url"
          ],
          "description": "The URL or Unix socket path used to connect to the Docker API. To connect to a remote host, provide the TCP connection string. For example, C(tcp://192.0.2.23:2376). If TLS is used to encrypt the connection, the module will automatically replace C(tcp) in the connection URL with C(https).\nIf the value is not specified in the task, the value of environment variable C(DOCKER_HOST) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "unix://var/run/docker.sock",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "An image name or a list of image names. Name format will be C(name[:tag]) or C(repository/name[:tag]), where C(tag) is optional. If a tag is not provided, C(latest) will be used. Instead of image names, also image IDs can be used.\nIf no name is provided, a list of all images will be returned.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "ssl_version": {
          "aliases": [],
          "description": "Provide a valid SSL version number. Default value determined by ssl.py module.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_SSL_VERSION) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The maximum amount of time in seconds to wait on a response from the API.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TIMEOUT) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "tls": {
          "aliases": [],
          "description": "Secure the connection to the API by using TLS without verifying the authenticity of the Docker host server. Note that if I(validate_certs) is set to C(yes) as well, it will take precedence.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "tls_hostname": {
          "aliases": [],
          "description": "When verifying the authenticity of the Docker Host server, provide the expected name of the server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_HOSTNAME) will be used instead. If the environment variable is not set, the default value will be used.\nThe current default value is C(localhost). This default is deprecated and will change in community.docker 2.0.0 to be a value computed from I(docker_host). Explicitly specify C(localhost) to make sure this value will still be used, and to disable the deprecation message which will be shown otherwise.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "use_ssh_client": {
          "aliases": [],
          "description": "For SSH transports, use the C(ssh) CLI tool instead of paramiko.\nRequires Docker SDK for Python 4.4.0 or newer.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tls_verify"
          ],
          "description": "Secure the connection to the API by using TLS and verifying the authenticity of the Docker host server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_VERIFY) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "Docker API >= 1.20",
        "Docker SDK for Python: Please note that the L(docker-py,https://pypi.org/project/docker-py/) Python module has been superseded by L(docker,https://pypi.org/project/docker/) (see L(here,https://github.com/docker/docker-py/issues/1310) for details). For Python 2.6, C(docker-py) must be used. Otherwise, it is recommended to install the C(docker) Python module. Note that both modules should *not* be installed at the same time. Also note that when both modules are installed and one of them is uninstalled, the other might no longer function and a reinstall of it is required.",
        "L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) >= 1.8.0 (use L(docker-py,https://pypi.org/project/docker-py/) for Python 2.6)"
      ],
      "short_description": "Inspect docker images"
    },
    "examples": "\n- name: Inspect a single image\n  community.docker.docker_image_info:\n    name: pacur/centos-7\n\n- name: Inspect multiple images\n  community.docker.docker_image_info:\n    name:\n      - pacur/centos-7\n      - sinatra\n  register: result\n\n- name: Make sure that both images pacur/centos-7 and sinatra exist locally\n  ansible.builtin.assert:\n    that:\n      - result.images | length == 2\n"
  },
  "community.docker.docker_image_load": {
    "doc": {
      "description": "Load one or multiple Docker images from a C(.tar) archive, and return information on the loaded image(s).",
      "has_action": false,
      "notes": "Does not support C(check_mode).\nConnect to the Docker daemon by providing parameters with each task or by defining environment variables. You can define C(DOCKER_HOST), C(DOCKER_TLS_HOSTNAME), C(DOCKER_API_VERSION), C(DOCKER_CERT_PATH), C(DOCKER_SSL_VERSION), C(DOCKER_TLS), C(DOCKER_TLS_VERIFY) and C(DOCKER_TIMEOUT). If you are using docker machine, run the script shipped with the product that sets up the environment. It will set these variables for you. See U(https://docs.docker.com/machine/reference/env/) for more details.\nWhen connecting to Docker daemon with TLS, you might need to install additional Python packages. For the Docker SDK for Python, version 2.4 or newer, this can be done by installing C(docker[tls]) with M(ansible.builtin.pip).\nNote that the Docker SDK for Python only allows to specify the path to the Docker configuration for very few functions. In general, it will use C($HOME/.docker/config.json) if the C(DOCKER_CONFIG) environment variable is not specified, and use C($DOCKER_CONFIG/config.json) otherwise.\nThis module uses the L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) to communicate with the Docker daemon.",
      "options": {
        "api_version": {
          "aliases": [
            "docker_api_version"
          ],
          "description": "The version of the Docker API running on the Docker Host.\nDefaults to the latest version of the API supported by Docker SDK for Python and the docker daemon.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_API_VERSION) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "auto",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "tls_ca_cert",
            "cacert_path"
          ],
          "description": "Use a CA certificate when performing server verification by providing the path to a CA certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(ca.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "tls_client_cert",
            "cert_path"
          ],
          "description": "Path to the client's TLS certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(cert.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "tls_client_key",
            "key_path"
          ],
          "description": "Path to the client's TLS key file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(key.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "debug": {
          "aliases": [],
          "description": "Debug mode",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "docker_host": {
          "aliases": [
            "docker_url"
          ],
          "description": "The URL or Unix socket path used to connect to the Docker API. To connect to a remote host, provide the TCP connection string. For example, C(tcp://192.0.2.23:2376). If TLS is used to encrypt the connection, the module will automatically replace C(tcp) in the connection URL with C(https).\nIf the value is not specified in the task, the value of environment variable C(DOCKER_HOST) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "unix://var/run/docker.sock",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "The path to the C(.tar) archive to load Docker image(s) from.",
          "type": "path",
          "required": true,
          "suboptions": {}
        },
        "ssl_version": {
          "aliases": [],
          "description": "Provide a valid SSL version number. Default value determined by ssl.py module.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_SSL_VERSION) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The maximum amount of time in seconds to wait on a response from the API.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TIMEOUT) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "tls": {
          "aliases": [],
          "description": "Secure the connection to the API by using TLS without verifying the authenticity of the Docker host server. Note that if I(validate_certs) is set to C(yes) as well, it will take precedence.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "tls_hostname": {
          "aliases": [],
          "description": "When verifying the authenticity of the Docker Host server, provide the expected name of the server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_HOSTNAME) will be used instead. If the environment variable is not set, the default value will be used.\nThe current default value is C(localhost). This default is deprecated and will change in community.docker 2.0.0 to be a value computed from I(docker_host). Explicitly specify C(localhost) to make sure this value will still be used, and to disable the deprecation message which will be shown otherwise.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "use_ssh_client": {
          "aliases": [],
          "description": "For SSH transports, use the C(ssh) CLI tool instead of paramiko.\nRequires Docker SDK for Python 4.4.0 or newer.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tls_verify"
          ],
          "description": "Secure the connection to the API by using TLS and verifying the authenticity of the Docker host server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_VERIFY) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "Docker API >= 1.23",
        "Docker SDK for Python: Please note that the L(docker-py,https://pypi.org/project/docker-py/) Python module has been superseded by L(docker,https://pypi.org/project/docker/) (see L(here,https://github.com/docker/docker-py/issues/1310) for details). This module does *not* work with docker-py.",
        "L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) >= 2.5.0",
        "Python >= 2.7"
      ],
      "short_description": "Load docker image(s) from archives",
      "version_added": "1.3.0"
    },
    "examples": "\n- name: Load all image(s) from the given tar file\n  community.docker.docker_image_load:\n    path: /path/to/images.tar\n  register: result\n\n- name: Print the loaded image names\n  ansible.builtin.debug:\n    msg: \"Loaded the following images: {{ result.image_names | join(', ') }}\"\n"
  },
  "community.docker.docker_login": {
    "doc": {
      "description": "Provides functionality similar to the C(docker login) command.\nAuthenticate with a docker registry and add the credentials to your local Docker config file respectively the credentials store associated to the registry. Adding the credentials to the config files resp. the credential store allows future connections to the registry using tools such as Ansible's Docker modules, the Docker CLI and Docker SDK for Python without needing to provide credentials.\nRunning in check mode will perform the authentication without updating the config file.",
      "has_action": false,
      "notes": "Connect to the Docker daemon by providing parameters with each task or by defining environment variables. You can define C(DOCKER_HOST), C(DOCKER_TLS_HOSTNAME), C(DOCKER_API_VERSION), C(DOCKER_CERT_PATH), C(DOCKER_SSL_VERSION), C(DOCKER_TLS), C(DOCKER_TLS_VERIFY) and C(DOCKER_TIMEOUT). If you are using docker machine, run the script shipped with the product that sets up the environment. It will set these variables for you. See U(https://docs.docker.com/machine/reference/env/) for more details.\nWhen connecting to Docker daemon with TLS, you might need to install additional Python packages. For the Docker SDK for Python, version 2.4 or newer, this can be done by installing C(docker[tls]) with M(ansible.builtin.pip).\nNote that the Docker SDK for Python only allows to specify the path to the Docker configuration for very few functions. In general, it will use C($HOME/.docker/config.json) if the C(DOCKER_CONFIG) environment variable is not specified, and use C($DOCKER_CONFIG/config.json) otherwise.\nThis module uses the L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) to communicate with the Docker daemon.",
      "options": {
        "api_version": {
          "aliases": [
            "docker_api_version"
          ],
          "description": "The version of the Docker API running on the Docker Host.\nDefaults to the latest version of the API supported by Docker SDK for Python and the docker daemon.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_API_VERSION) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "auto",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "tls_ca_cert",
            "cacert_path"
          ],
          "description": "Use a CA certificate when performing server verification by providing the path to a CA certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(ca.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "tls_client_cert",
            "cert_path"
          ],
          "description": "Path to the client's TLS certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(cert.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "tls_client_key",
            "key_path"
          ],
          "description": "Path to the client's TLS key file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(key.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "config_path": {
          "aliases": [
            "dockercfg_path"
          ],
          "description": "Custom path to the Docker CLI configuration file.",
          "default": "~/.docker/config.json",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "debug": {
          "aliases": [],
          "description": "Debug mode",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "docker_host": {
          "aliases": [
            "docker_url"
          ],
          "description": "The URL or Unix socket path used to connect to the Docker API. To connect to a remote host, provide the TCP connection string. For example, C(tcp://192.0.2.23:2376). If TLS is used to encrypt the connection, the module will automatically replace C(tcp) in the connection URL with C(https).\nIf the value is not specified in the task, the value of environment variable C(DOCKER_HOST) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "unix://var/run/docker.sock",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The plaintext password for the registry account.\nRequired when I(state) is C(present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "reauthorize": {
          "aliases": [
            "reauth"
          ],
          "description": "Refresh existing authentication found in the configuration file.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "registry_url": {
          "aliases": [
            "registry",
            "url"
          ],
          "description": "The registry URL.",
          "default": "https://index.docker.io/v1/",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_version": {
          "aliases": [],
          "description": "Provide a valid SSL version number. Default value determined by ssl.py module.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_SSL_VERSION) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "This controls the current state of the user. C(present) will login in a user, C(absent) will log them out.\nTo logout you only need the registry server, which defaults to DockerHub.\nBefore 2.1 you could ONLY log in.\nDocker does not support 'logout' with a custom config file.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The maximum amount of time in seconds to wait on a response from the API.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TIMEOUT) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "tls": {
          "aliases": [],
          "description": "Secure the connection to the API by using TLS without verifying the authenticity of the Docker host server. Note that if I(validate_certs) is set to C(yes) as well, it will take precedence.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "tls_hostname": {
          "aliases": [],
          "description": "When verifying the authenticity of the Docker Host server, provide the expected name of the server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_HOSTNAME) will be used instead. If the environment variable is not set, the default value will be used.\nThe current default value is C(localhost). This default is deprecated and will change in community.docker 2.0.0 to be a value computed from I(docker_host). Explicitly specify C(localhost) to make sure this value will still be used, and to disable the deprecation message which will be shown otherwise.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "use_ssh_client": {
          "aliases": [],
          "description": "For SSH transports, use the C(ssh) CLI tool instead of paramiko.\nRequires Docker SDK for Python 4.4.0 or newer.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "The username for the registry account.\nRequired when I(state) is C(present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tls_verify"
          ],
          "description": "Secure the connection to the API by using TLS and verifying the authenticity of the Docker host server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_VERIFY) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "Docker API >= 1.20",
        "Docker SDK for Python: Please note that the L(docker-py,https://pypi.org/project/docker-py/) Python module has been superseded by L(docker,https://pypi.org/project/docker/) (see L(here,https://github.com/docker/docker-py/issues/1310) for details). For Python 2.6, C(docker-py) must be used. Otherwise, it is recommended to install the C(docker) Python module. Note that both modules should *not* be installed at the same time. Also note that when both modules are installed and one of them is uninstalled, the other might no longer function and a reinstall of it is required.",
        "L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) >= 1.8.0 (use L(docker-py,https://pypi.org/project/docker-py/) for Python 2.6)",
        "Python bindings for docker credentials store API >= 0.2.1 (use L(docker-pycreds,https://pypi.org/project/docker-pycreds/) when using Docker SDK for Python < 4.0.0)"
      ],
      "short_description": "Log into a Docker registry."
    },
    "examples": "\n\n- name: Log into DockerHub\n  community.docker.docker_login:\n    username: docker\n    password: rekcod\n\n- name: Log into private registry and force re-authorization\n  community.docker.docker_login:\n    registry_url: your.private.registry.io\n    username: yourself\n    password: secrets3\n    reauthorize: yes\n\n- name: Log into DockerHub using a custom config file\n  community.docker.docker_login:\n    username: docker\n    password: rekcod\n    config_path: /tmp/.mydockercfg\n\n- name: Log out of DockerHub\n  community.docker.docker_login:\n    state: absent\n"
  },
  "community.docker.docker_network": {
    "doc": {
      "description": "Create/remove Docker networks and connect containers to them.\nPerforms largely the same function as the C(docker network) CLI subcommand.",
      "has_action": false,
      "notes": "When network options are changed, the module disconnects all containers from the network, deletes the network, and re-creates the network. It does not try to reconnect containers, except the ones listed in (I(connected), and even for these, it does not consider specific connection options like fixed IP addresses or MAC addresses. If you need more control over how the containers are connected to the network, loop the M(community.docker.docker_container) module to loop over your containers to make sure they are connected properly.\nThe module does not support Docker Swarm. This means that it will not try to disconnect or reconnect services. If services are connected to the network, deleting the network will fail. When network options are changed, the network has to be deleted and recreated, so this will fail as well.\nConnect to the Docker daemon by providing parameters with each task or by defining environment variables. You can define C(DOCKER_HOST), C(DOCKER_TLS_HOSTNAME), C(DOCKER_API_VERSION), C(DOCKER_CERT_PATH), C(DOCKER_SSL_VERSION), C(DOCKER_TLS), C(DOCKER_TLS_VERIFY) and C(DOCKER_TIMEOUT). If you are using docker machine, run the script shipped with the product that sets up the environment. It will set these variables for you. See U(https://docs.docker.com/machine/reference/env/) for more details.\nWhen connecting to Docker daemon with TLS, you might need to install additional Python packages. For the Docker SDK for Python, version 2.4 or newer, this can be done by installing C(docker[tls]) with M(ansible.builtin.pip).\nNote that the Docker SDK for Python only allows to specify the path to the Docker configuration for very few functions. In general, it will use C($HOME/.docker/config.json) if the C(DOCKER_CONFIG) environment variable is not specified, and use C($DOCKER_CONFIG/config.json) otherwise.\nThis module uses the L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) to communicate with the Docker daemon.",
      "options": {
        "api_version": {
          "aliases": [
            "docker_api_version"
          ],
          "description": "The version of the Docker API running on the Docker Host.\nDefaults to the latest version of the API supported by Docker SDK for Python and the docker daemon.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_API_VERSION) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "auto",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "appends": {
          "aliases": [
            "incremental"
          ],
          "description": "By default the connected list is canonical, meaning containers not on the list are removed from the network.\nUse I(appends) to leave existing containers connected.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "attachable": {
          "aliases": [],
          "description": "If enabled, and the network is in the global scope, non-service containers on worker nodes will be able to connect to the network.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "tls_ca_cert",
            "cacert_path"
          ],
          "description": "Use a CA certificate when performing server verification by providing the path to a CA certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(ca.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "tls_client_cert",
            "cert_path"
          ],
          "description": "Path to the client's TLS certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(cert.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "tls_client_key",
            "key_path"
          ],
          "description": "Path to the client's TLS key file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(key.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "connected": {
          "aliases": [
            "containers"
          ],
          "description": "List of container names or container IDs to connect to a network.\nPlease note that the module only makes sure that these containers are connected to the network, but does not care about connection options. If you rely on specific IP addresses etc., use the M(community.docker.docker_container) module to ensure your containers are correctly connected to this network.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "debug": {
          "aliases": [],
          "description": "Debug mode",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "docker_host": {
          "aliases": [
            "docker_url"
          ],
          "description": "The URL or Unix socket path used to connect to the Docker API. To connect to a remote host, provide the TCP connection string. For example, C(tcp://192.0.2.23:2376). If TLS is used to encrypt the connection, the module will automatically replace C(tcp) in the connection URL with C(https).\nIf the value is not specified in the task, the value of environment variable C(DOCKER_HOST) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "unix://var/run/docker.sock",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "driver": {
          "aliases": [],
          "description": "Specify the type of network. Docker provides bridge and overlay drivers, but 3rd party drivers can also be used.",
          "default": "bridge",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "driver_options": {
          "aliases": [],
          "description": "Dictionary of network settings. Consult docker docs for valid options and values.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "enable_ipv6": {
          "aliases": [],
          "description": "Enable IPv6 networking.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "With state C(absent) forces disconnecting all containers from the network prior to deleting the network. With state C(present) will disconnect all containers, delete the network and re-create the network.\nThis option is required if you have changed the IPAM or driver options and want an existing network to be updated to use the new options.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "internal": {
          "aliases": [],
          "description": "Restrict external access to the network.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ipam_config": {
          "aliases": [],
          "description": "List of IPAM config blocks. Consult L(Docker docs,https://docs.docker.com/compose/compose-file/compose-file-v2/#ipam) for valid options and values. Note that I(iprange) is spelled differently here (we use the notation from the Docker SDK for Python).",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "aux_addresses": {
              "aliases": [],
              "description": "Auxiliary IP addresses used by Network driver, as a mapping from hostname to IP.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "gateway": {
              "aliases": [],
              "description": "IP gateway address.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "iprange": {
              "aliases": [],
              "description": "IP address range in CIDR notation.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "subnet": {
              "aliases": [],
              "description": "IP subset in CIDR notation.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "ipam_driver": {
          "aliases": [],
          "description": "Specify an IPAM driver.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ipam_driver_options": {
          "aliases": [],
          "description": "Dictionary of IPAM driver options.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "labels": {
          "aliases": [],
          "description": "Dictionary of labels.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "network_name"
          ],
          "description": "Name of the network to operate on.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "scope": {
          "aliases": [],
          "description": "Specify the network's scope.",
          "type": "str",
          "required": false,
          "choices": [
            "local",
            "global",
            "swarm"
          ],
          "suboptions": {}
        },
        "ssl_version": {
          "aliases": [],
          "description": "Provide a valid SSL version number. Default value determined by ssl.py module.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_SSL_VERSION) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "C(absent) deletes the network. If a network has connected containers, it cannot be deleted. Use the I(force) option to disconnect all containers and delete the network.\nC(present) creates the network, if it does not already exist with the specified parameters, and connects the list of containers provided via the connected parameter. Containers not on the list will be disconnected. An empty list will leave no containers connected to the network. Use the I(appends) option to leave existing containers connected. Use the I(force) options to force re-creation of the network.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The maximum amount of time in seconds to wait on a response from the API.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TIMEOUT) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "tls": {
          "aliases": [],
          "description": "Secure the connection to the API by using TLS without verifying the authenticity of the Docker host server. Note that if I(validate_certs) is set to C(yes) as well, it will take precedence.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "tls_hostname": {
          "aliases": [],
          "description": "When verifying the authenticity of the Docker Host server, provide the expected name of the server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_HOSTNAME) will be used instead. If the environment variable is not set, the default value will be used.\nThe current default value is C(localhost). This default is deprecated and will change in community.docker 2.0.0 to be a value computed from I(docker_host). Explicitly specify C(localhost) to make sure this value will still be used, and to disable the deprecation message which will be shown otherwise.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "use_ssh_client": {
          "aliases": [],
          "description": "For SSH transports, use the C(ssh) CLI tool instead of paramiko.\nRequires Docker SDK for Python 4.4.0 or newer.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tls_verify"
          ],
          "description": "Secure the connection to the API by using TLS and verifying the authenticity of the Docker host server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_VERIFY) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "Docker SDK for Python: Please note that the L(docker-py,https://pypi.org/project/docker-py/) Python module has been superseded by L(docker,https://pypi.org/project/docker/) (see L(here,https://github.com/docker/docker-py/issues/1310) for details). For Python 2.6, C(docker-py) must be used. Otherwise, it is recommended to install the C(docker) Python module. Note that both modules should *not* be installed at the same time. Also note that when both modules are installed and one of them is uninstalled, the other might no longer function and a reinstall of it is required.",
        "L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) >= 1.10.0 (use L(docker-py,https://pypi.org/project/docker-py/) for Python 2.6)",
        "The docker server >= 1.10.0"
      ],
      "short_description": "Manage Docker networks"
    },
    "examples": "\n- name: Create a network\n  community.docker.docker_network:\n    name: network_one\n\n- name: Remove all but selected list of containers\n  community.docker.docker_network:\n    name: network_one\n    connected:\n      - container_a\n      - container_b\n      - container_c\n\n- name: Remove a single container\n  community.docker.docker_network:\n    name: network_one\n    connected: \"{{ fulllist|difference(['container_a']) }}\"\n\n- name: Add a container to a network, leaving existing containers connected\n  community.docker.docker_network:\n    name: network_one\n    connected:\n      - container_a\n    appends: yes\n\n- name: Create a network with driver options\n  community.docker.docker_network:\n    name: network_two\n    driver_options:\n      com.docker.network.bridge.name: net2\n\n- name: Create a network with custom IPAM config\n  community.docker.docker_network:\n    name: network_three\n    ipam_config:\n      - subnet: 172.23.27.0/24\n        gateway: 172.23.27.2\n        iprange: 172.23.27.0/26\n        aux_addresses:\n          host1: 172.23.27.3\n          host2: 172.23.27.4\n\n- name: Create a network with labels\n  community.docker.docker_network:\n    name: network_four\n    labels:\n      key1: value1\n      key2: value2\n\n- name: Create a network with IPv6 IPAM config\n  community.docker.docker_network:\n    name: network_ipv6_one\n    enable_ipv6: yes\n    ipam_config:\n      - subnet: fdd1:ac8c:0557:7ce1::/64\n\n- name: Create a network with IPv6 and custom IPv4 IPAM config\n  community.docker.docker_network:\n    name: network_ipv6_two\n    enable_ipv6: yes\n    ipam_config:\n      - subnet: 172.24.27.0/24\n      - subnet: fdd1:ac8c:0557:7ce2::/64\n\n- name: Delete a network, disconnecting all containers\n  community.docker.docker_network:\n    name: network_one\n    state: absent\n    force: yes\n"
  },
  "community.docker.docker_network_info": {
    "doc": {
      "description": "Retrieves facts about a docker network.\nEssentially returns the output of C(docker network inspect <name>), similar to what M(community.docker.docker_network) returns for a non-absent network.",
      "has_action": false,
      "notes": "Connect to the Docker daemon by providing parameters with each task or by defining environment variables. You can define C(DOCKER_HOST), C(DOCKER_TLS_HOSTNAME), C(DOCKER_API_VERSION), C(DOCKER_CERT_PATH), C(DOCKER_SSL_VERSION), C(DOCKER_TLS), C(DOCKER_TLS_VERIFY) and C(DOCKER_TIMEOUT). If you are using docker machine, run the script shipped with the product that sets up the environment. It will set these variables for you. See U(https://docs.docker.com/machine/reference/env/) for more details.\nWhen connecting to Docker daemon with TLS, you might need to install additional Python packages. For the Docker SDK for Python, version 2.4 or newer, this can be done by installing C(docker[tls]) with M(ansible.builtin.pip).\nNote that the Docker SDK for Python only allows to specify the path to the Docker configuration for very few functions. In general, it will use C($HOME/.docker/config.json) if the C(DOCKER_CONFIG) environment variable is not specified, and use C($DOCKER_CONFIG/config.json) otherwise.\nThis module uses the L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) to communicate with the Docker daemon.",
      "options": {
        "api_version": {
          "aliases": [
            "docker_api_version"
          ],
          "description": "The version of the Docker API running on the Docker Host.\nDefaults to the latest version of the API supported by Docker SDK for Python and the docker daemon.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_API_VERSION) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "auto",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "tls_ca_cert",
            "cacert_path"
          ],
          "description": "Use a CA certificate when performing server verification by providing the path to a CA certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(ca.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "tls_client_cert",
            "cert_path"
          ],
          "description": "Path to the client's TLS certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(cert.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "tls_client_key",
            "key_path"
          ],
          "description": "Path to the client's TLS key file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(key.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "debug": {
          "aliases": [],
          "description": "Debug mode",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "docker_host": {
          "aliases": [
            "docker_url"
          ],
          "description": "The URL or Unix socket path used to connect to the Docker API. To connect to a remote host, provide the TCP connection string. For example, C(tcp://192.0.2.23:2376). If TLS is used to encrypt the connection, the module will automatically replace C(tcp) in the connection URL with C(https).\nIf the value is not specified in the task, the value of environment variable C(DOCKER_HOST) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "unix://var/run/docker.sock",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the network to inspect.\nWhen identifying an existing network name may be a name or a long or short network ID.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ssl_version": {
          "aliases": [],
          "description": "Provide a valid SSL version number. Default value determined by ssl.py module.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_SSL_VERSION) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The maximum amount of time in seconds to wait on a response from the API.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TIMEOUT) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "tls": {
          "aliases": [],
          "description": "Secure the connection to the API by using TLS without verifying the authenticity of the Docker host server. Note that if I(validate_certs) is set to C(yes) as well, it will take precedence.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "tls_hostname": {
          "aliases": [],
          "description": "When verifying the authenticity of the Docker Host server, provide the expected name of the server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_HOSTNAME) will be used instead. If the environment variable is not set, the default value will be used.\nThe current default value is C(localhost). This default is deprecated and will change in community.docker 2.0.0 to be a value computed from I(docker_host). Explicitly specify C(localhost) to make sure this value will still be used, and to disable the deprecation message which will be shown otherwise.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "use_ssh_client": {
          "aliases": [],
          "description": "For SSH transports, use the C(ssh) CLI tool instead of paramiko.\nRequires Docker SDK for Python 4.4.0 or newer.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tls_verify"
          ],
          "description": "Secure the connection to the API by using TLS and verifying the authenticity of the Docker host server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_VERIFY) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "Docker API >= 1.21",
        "Docker SDK for Python: Please note that the L(docker-py,https://pypi.org/project/docker-py/) Python module has been superseded by L(docker,https://pypi.org/project/docker/) (see L(here,https://github.com/docker/docker-py/issues/1310) for details). For Python 2.6, C(docker-py) must be used. Otherwise, it is recommended to install the C(docker) Python module. Note that both modules should *not* be installed at the same time. Also note that when both modules are installed and one of them is uninstalled, the other might no longer function and a reinstall of it is required.",
        "L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) >= 1.8.0 (use L(docker-py,https://pypi.org/project/docker-py/) for Python 2.6)"
      ],
      "short_description": "Retrieves facts about docker network"
    },
    "examples": "\n- name: Get infos on network\n  community.docker.docker_network_info:\n    name: mydata\n  register: result\n\n- name: Does network exist?\n  ansible.builtin.debug:\n    msg: \"The network {{ 'exists' if result.exists else 'does not exist' }}\"\n\n- name: Print information about network\n  ansible.builtin.debug:\n    var: result.network\n  when: result.exists\n"
  },
  "community.docker.docker_node": {
    "doc": {
      "description": "Manages the Docker nodes via Swarm Manager.\nThis module allows to change the node's role, its availability, and to modify, add or remove node labels.",
      "has_action": false,
      "notes": "Connect to the Docker daemon by providing parameters with each task or by defining environment variables. You can define C(DOCKER_HOST), C(DOCKER_TLS_HOSTNAME), C(DOCKER_API_VERSION), C(DOCKER_CERT_PATH), C(DOCKER_SSL_VERSION), C(DOCKER_TLS), C(DOCKER_TLS_VERIFY) and C(DOCKER_TIMEOUT). If you are using docker machine, run the script shipped with the product that sets up the environment. It will set these variables for you. See U(https://docs.docker.com/machine/reference/env/) for more details.\nWhen connecting to Docker daemon with TLS, you might need to install additional Python packages. For the Docker SDK for Python, version 2.4 or newer, this can be done by installing C(docker[tls]) with M(ansible.builtin.pip).\nNote that the Docker SDK for Python only allows to specify the path to the Docker configuration for very few functions. In general, it will use C($HOME/.docker/config.json) if the C(DOCKER_CONFIG) environment variable is not specified, and use C($DOCKER_CONFIG/config.json) otherwise.\nThis module uses the L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) to communicate with the Docker daemon.",
      "options": {
        "api_version": {
          "aliases": [
            "docker_api_version"
          ],
          "description": "The version of the Docker API running on the Docker Host.\nDefaults to the latest version of the API supported by Docker SDK for Python and the docker daemon.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_API_VERSION) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "auto",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "availability": {
          "aliases": [],
          "description": "Node availability to assign. If not provided then node availability remains unchanged.",
          "type": "str",
          "required": false,
          "choices": [
            "active",
            "pause",
            "drain"
          ],
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "tls_ca_cert",
            "cacert_path"
          ],
          "description": "Use a CA certificate when performing server verification by providing the path to a CA certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(ca.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "tls_client_cert",
            "cert_path"
          ],
          "description": "Path to the client's TLS certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(cert.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "tls_client_key",
            "key_path"
          ],
          "description": "Path to the client's TLS key file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(key.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "debug": {
          "aliases": [],
          "description": "Debug mode",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "docker_host": {
          "aliases": [
            "docker_url"
          ],
          "description": "The URL or Unix socket path used to connect to the Docker API. To connect to a remote host, provide the TCP connection string. For example, C(tcp://192.0.2.23:2376). If TLS is used to encrypt the connection, the module will automatically replace C(tcp) in the connection URL with C(https).\nIf the value is not specified in the task, the value of environment variable C(DOCKER_HOST) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "unix://var/run/docker.sock",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or ID of node as registered in Swarm.\nIf more than one node is registered using the same hostname the ID must be used, otherwise module will fail.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "labels": {
          "aliases": [],
          "description": "User-defined key/value metadata that will be assigned as node attribute.\nLabel operations in this module apply to the docker swarm node specified by I(hostname). Use M(community.docker.docker_swarm) module to add/modify/remove swarm cluster labels.\nThe actual state of labels assigned to the node when module completes its work depends on I(labels_state) and I(labels_to_remove) parameters values. See description below.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "labels_state": {
          "aliases": [],
          "description": "It defines the operation on the labels assigned to node and labels specified in I(labels) option.\nSet to C(merge) to combine labels provided in I(labels) with those already assigned to the node. If no labels are assigned then it will add listed labels. For labels that are already assigned to the node, it will update their values. The labels not specified in I(labels) will remain unchanged. If I(labels) is empty then no changes will be made.\nSet to C(replace) to replace all assigned labels with provided ones. If I(labels) is empty then all labels assigned to the node will be removed.",
          "default": "merge",
          "type": "str",
          "required": false,
          "choices": [
            "merge",
            "replace"
          ],
          "suboptions": {}
        },
        "labels_to_remove": {
          "aliases": [],
          "description": "List of labels that will be removed from the node configuration. The list has to contain only label names, not their values.\nIf the label provided on the list is not assigned to the node, the entry is ignored.\nIf the label is both on the I(labels_to_remove) and I(labels), then value provided in I(labels) remains assigned to the node.\nIf I(labels_state) is C(replace) and I(labels) is not provided or empty then all labels assigned to node are removed and I(labels_to_remove) is ignored.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "role": {
          "aliases": [],
          "description": "Node role to assign. If not provided then node role remains unchanged.",
          "type": "str",
          "required": false,
          "choices": [
            "manager",
            "worker"
          ],
          "suboptions": {}
        },
        "ssl_version": {
          "aliases": [],
          "description": "Provide a valid SSL version number. Default value determined by ssl.py module.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_SSL_VERSION) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The maximum amount of time in seconds to wait on a response from the API.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TIMEOUT) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "tls": {
          "aliases": [],
          "description": "Secure the connection to the API by using TLS without verifying the authenticity of the Docker host server. Note that if I(validate_certs) is set to C(yes) as well, it will take precedence.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "tls_hostname": {
          "aliases": [],
          "description": "When verifying the authenticity of the Docker Host server, provide the expected name of the server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_HOSTNAME) will be used instead. If the environment variable is not set, the default value will be used.\nThe current default value is C(localhost). This default is deprecated and will change in community.docker 2.0.0 to be a value computed from I(docker_host). Explicitly specify C(localhost) to make sure this value will still be used, and to disable the deprecation message which will be shown otherwise.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "use_ssh_client": {
          "aliases": [],
          "description": "For SSH transports, use the C(ssh) CLI tool instead of paramiko.\nRequires Docker SDK for Python 4.4.0 or newer.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tls_verify"
          ],
          "description": "Secure the connection to the API by using TLS and verifying the authenticity of the Docker host server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_VERIFY) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "Docker API >= 1.25",
        "Docker SDK for Python: Please note that the L(docker-py,https://pypi.org/project/docker-py/) Python module has been superseded by L(docker,https://pypi.org/project/docker/) (see L(here,https://github.com/docker/docker-py/issues/1310) for details). For Python 2.6, C(docker-py) must be used. Otherwise, it is recommended to install the C(docker) Python module. Note that both modules should *not* be installed at the same time. Also note that when both modules are installed and one of them is uninstalled, the other might no longer function and a reinstall of it is required.",
        "L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) >= 2.4.0"
      ],
      "short_description": "Manage Docker Swarm node"
    },
    "examples": "\n- name: Set node role\n  community.docker.docker_node:\n    hostname: mynode\n    role: manager\n\n- name: Set node availability\n  community.docker.docker_node:\n    hostname: mynode\n    availability: drain\n\n- name: Replace node labels with new labels\n  community.docker.docker_node:\n    hostname: mynode\n    labels:\n      key: value\n    labels_state: replace\n\n- name: Merge node labels and new labels\n  community.docker.docker_node:\n    hostname: mynode\n    labels:\n      key: value\n\n- name: Remove all labels assigned to node\n  community.docker.docker_node:\n    hostname: mynode\n    labels_state: replace\n\n- name: Remove selected labels from the node\n  community.docker.docker_node:\n    hostname: mynode\n    labels_to_remove:\n      - key1\n      - key2\n"
  },
  "community.docker.docker_node_info": {
    "doc": {
      "description": "Retrieves facts about a docker node.\nEssentially returns the output of C(docker node inspect <name>).\nMust be executed on a host running as Swarm Manager, otherwise the module will fail.",
      "has_action": false,
      "notes": "Connect to the Docker daemon by providing parameters with each task or by defining environment variables. You can define C(DOCKER_HOST), C(DOCKER_TLS_HOSTNAME), C(DOCKER_API_VERSION), C(DOCKER_CERT_PATH), C(DOCKER_SSL_VERSION), C(DOCKER_TLS), C(DOCKER_TLS_VERIFY) and C(DOCKER_TIMEOUT). If you are using docker machine, run the script shipped with the product that sets up the environment. It will set these variables for you. See U(https://docs.docker.com/machine/reference/env/) for more details.\nWhen connecting to Docker daemon with TLS, you might need to install additional Python packages. For the Docker SDK for Python, version 2.4 or newer, this can be done by installing C(docker[tls]) with M(ansible.builtin.pip).\nNote that the Docker SDK for Python only allows to specify the path to the Docker configuration for very few functions. In general, it will use C($HOME/.docker/config.json) if the C(DOCKER_CONFIG) environment variable is not specified, and use C($DOCKER_CONFIG/config.json) otherwise.\nThis module uses the L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) to communicate with the Docker daemon.",
      "options": {
        "api_version": {
          "aliases": [
            "docker_api_version"
          ],
          "description": "The version of the Docker API running on the Docker Host.\nDefaults to the latest version of the API supported by Docker SDK for Python and the docker daemon.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_API_VERSION) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "auto",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "tls_ca_cert",
            "cacert_path"
          ],
          "description": "Use a CA certificate when performing server verification by providing the path to a CA certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(ca.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "tls_client_cert",
            "cert_path"
          ],
          "description": "Path to the client's TLS certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(cert.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "tls_client_key",
            "key_path"
          ],
          "description": "Path to the client's TLS key file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(key.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "debug": {
          "aliases": [],
          "description": "Debug mode",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "docker_host": {
          "aliases": [
            "docker_url"
          ],
          "description": "The URL or Unix socket path used to connect to the Docker API. To connect to a remote host, provide the TCP connection string. For example, C(tcp://192.0.2.23:2376). If TLS is used to encrypt the connection, the module will automatically replace C(tcp) in the connection URL with C(https).\nIf the value is not specified in the task, the value of environment variable C(DOCKER_HOST) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "unix://var/run/docker.sock",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the node to inspect.\nThe list of nodes names to inspect.\nIf empty then return information of all nodes in Swarm cluster.\nWhen identifying the node use either the hostname of the node (as registered in Swarm) or node ID.\nIf I(self) is C(true) then this parameter is ignored.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "self": {
          "aliases": [],
          "description": "If C(true), queries the node (that is, the docker daemon) the module communicates with.\nIf C(true) then I(name) is ignored.\nIf C(false) then query depends on I(name) presence and value.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ssl_version": {
          "aliases": [],
          "description": "Provide a valid SSL version number. Default value determined by ssl.py module.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_SSL_VERSION) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The maximum amount of time in seconds to wait on a response from the API.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TIMEOUT) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "tls": {
          "aliases": [],
          "description": "Secure the connection to the API by using TLS without verifying the authenticity of the Docker host server. Note that if I(validate_certs) is set to C(yes) as well, it will take precedence.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "tls_hostname": {
          "aliases": [],
          "description": "When verifying the authenticity of the Docker Host server, provide the expected name of the server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_HOSTNAME) will be used instead. If the environment variable is not set, the default value will be used.\nThe current default value is C(localhost). This default is deprecated and will change in community.docker 2.0.0 to be a value computed from I(docker_host). Explicitly specify C(localhost) to make sure this value will still be used, and to disable the deprecation message which will be shown otherwise.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "use_ssh_client": {
          "aliases": [],
          "description": "For SSH transports, use the C(ssh) CLI tool instead of paramiko.\nRequires Docker SDK for Python 4.4.0 or newer.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tls_verify"
          ],
          "description": "Secure the connection to the API by using TLS and verifying the authenticity of the Docker host server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_VERIFY) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "Docker API >= 1.24",
        "Docker SDK for Python: Please note that the L(docker-py,https://pypi.org/project/docker-py/) Python module has been superseded by L(docker,https://pypi.org/project/docker/) (see L(here,https://github.com/docker/docker-py/issues/1310) for details). For Python 2.6, C(docker-py) must be used. Otherwise, it is recommended to install the C(docker) Python module. Note that both modules should *not* be installed at the same time. Also note that when both modules are installed and one of them is uninstalled, the other might no longer function and a reinstall of it is required.",
        "L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) >= 2.4.0"
      ],
      "short_description": "Retrieves facts about docker swarm node from Swarm Manager"
    },
    "examples": "\n- name: Get info on all nodes\n  community.docker.docker_node_info:\n  register: result\n\n- name: Get info on node\n  community.docker.docker_node_info:\n    name: mynode\n  register: result\n\n- name: Get info on list of nodes\n  community.docker.docker_node_info:\n    name:\n      - mynode1\n      - mynode2\n  register: result\n\n- name: Get info on host if it is Swarm Manager\n  community.docker.docker_node_info:\n    self: true\n  register: result\n"
  },
  "community.docker.docker_plugin": {
    "doc": {
      "description": "This module allows to install, delete, enable and disable Docker plugins.\nPerforms largely the same function as the C(docker plugin) CLI subcommand.",
      "has_action": false,
      "notes": "Connect to the Docker daemon by providing parameters with each task or by defining environment variables. You can define C(DOCKER_HOST), C(DOCKER_TLS_HOSTNAME), C(DOCKER_API_VERSION), C(DOCKER_CERT_PATH), C(DOCKER_SSL_VERSION), C(DOCKER_TLS), C(DOCKER_TLS_VERIFY) and C(DOCKER_TIMEOUT). If you are using docker machine, run the script shipped with the product that sets up the environment. It will set these variables for you. See U(https://docs.docker.com/machine/reference/env/) for more details.\nWhen connecting to Docker daemon with TLS, you might need to install additional Python packages. For the Docker SDK for Python, version 2.4 or newer, this can be done by installing C(docker[tls]) with M(ansible.builtin.pip).\nNote that the Docker SDK for Python only allows to specify the path to the Docker configuration for very few functions. In general, it will use C($HOME/.docker/config.json) if the C(DOCKER_CONFIG) environment variable is not specified, and use C($DOCKER_CONFIG/config.json) otherwise.\nThis module uses the L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) to communicate with the Docker daemon.",
      "options": {
        "alias": {
          "aliases": [],
          "description": "Local name for plugin.",
          "type": "str",
          "required": false,
          "version_added": "1.8.0",
          "suboptions": {}
        },
        "api_version": {
          "aliases": [
            "docker_api_version"
          ],
          "description": "The version of the Docker API running on the Docker Host.\nDefaults to the latest version of the API supported by Docker SDK for Python and the docker daemon.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_API_VERSION) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "auto",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "tls_ca_cert",
            "cacert_path"
          ],
          "description": "Use a CA certificate when performing server verification by providing the path to a CA certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(ca.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "tls_client_cert",
            "cert_path"
          ],
          "description": "Path to the client's TLS certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(cert.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "tls_client_key",
            "key_path"
          ],
          "description": "Path to the client's TLS key file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(key.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "debug": {
          "aliases": [],
          "description": "Debug mode",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "docker_host": {
          "aliases": [
            "docker_url"
          ],
          "description": "The URL or Unix socket path used to connect to the Docker API. To connect to a remote host, provide the TCP connection string. For example, C(tcp://192.0.2.23:2376). If TLS is used to encrypt the connection, the module will automatically replace C(tcp) in the connection URL with C(https).\nIf the value is not specified in the task, the value of environment variable C(DOCKER_HOST) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "unix://var/run/docker.sock",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "enable_timeout": {
          "aliases": [],
          "description": "Timeout in seconds.",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "force_remove": {
          "aliases": [],
          "description": "Remove even if the plugin is enabled.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "plugin_name": {
          "aliases": [],
          "description": "Name of the plugin to operate on.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "plugin_options": {
          "aliases": [],
          "description": "Dictionary of plugin settings.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "ssl_version": {
          "aliases": [],
          "description": "Provide a valid SSL version number. Default value determined by ssl.py module.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_SSL_VERSION) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "C(absent) remove the plugin.\nC(present) install the plugin, if it does not already exist.\nC(enable) enable the plugin.\nC(disable) disable the plugin.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present",
            "enable",
            "disable"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The maximum amount of time in seconds to wait on a response from the API.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TIMEOUT) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "tls": {
          "aliases": [],
          "description": "Secure the connection to the API by using TLS without verifying the authenticity of the Docker host server. Note that if I(validate_certs) is set to C(yes) as well, it will take precedence.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "tls_hostname": {
          "aliases": [],
          "description": "When verifying the authenticity of the Docker Host server, provide the expected name of the server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_HOSTNAME) will be used instead. If the environment variable is not set, the default value will be used.\nThe current default value is C(localhost). This default is deprecated and will change in community.docker 2.0.0 to be a value computed from I(docker_host). Explicitly specify C(localhost) to make sure this value will still be used, and to disable the deprecation message which will be shown otherwise.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "use_ssh_client": {
          "aliases": [],
          "description": "For SSH transports, use the C(ssh) CLI tool instead of paramiko.\nRequires Docker SDK for Python 4.4.0 or newer.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tls_verify"
          ],
          "description": "Secure the connection to the API by using TLS and verifying the authenticity of the Docker host server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_VERIFY) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "Docker API >= 1.25",
        "Docker SDK for Python: Please note that the L(docker-py,https://pypi.org/project/docker-py/) Python module has been superseded by L(docker,https://pypi.org/project/docker/) (see L(here,https://github.com/docker/docker-py/issues/1310) for details). This module does *not* work with docker-py.",
        "L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) >= 2.6.0",
        "Python >= 2.7",
        "python >= 2.7"
      ],
      "short_description": "Manage Docker plugins",
      "version_added": "1.3.0"
    },
    "examples": "\n- name: Install a plugin\n  community.docker.docker_plugin:\n    plugin_name: plugin_one\n    state: present\n\n- name: Remove a plugin\n  community.docker.docker_plugin:\n    plugin_name: plugin_one\n    state: absent\n\n- name: Enable the plugin\n  community.docker.docker_plugin:\n    plugin_name: plugin_one\n    state: enable\n\n- name: Disable the plugin\n  community.docker.docker_plugin:\n    plugin_name: plugin_one\n    state: disable\n\n- name: Install a plugin with options\n  community.docker.docker_plugin:\n    plugin_name: weaveworks/net-plugin:latest_release\n    plugin_options:\n      IPALLOC_RANGE: \"10.32.0.0/12\"\n      WEAVE_PASSWORD: \"PASSWORD\"\n"
  },
  "community.docker.docker_prune": {
    "doc": {
      "description": "Allows to run C(docker container prune), C(docker image prune), C(docker network prune) and C(docker volume prune) via the Docker API.",
      "has_action": false,
      "notes": "Connect to the Docker daemon by providing parameters with each task or by defining environment variables. You can define C(DOCKER_HOST), C(DOCKER_TLS_HOSTNAME), C(DOCKER_API_VERSION), C(DOCKER_CERT_PATH), C(DOCKER_SSL_VERSION), C(DOCKER_TLS), C(DOCKER_TLS_VERIFY) and C(DOCKER_TIMEOUT). If you are using docker machine, run the script shipped with the product that sets up the environment. It will set these variables for you. See U(https://docs.docker.com/machine/reference/env/) for more details.\nWhen connecting to Docker daemon with TLS, you might need to install additional Python packages. For the Docker SDK for Python, version 2.4 or newer, this can be done by installing C(docker[tls]) with M(ansible.builtin.pip).\nNote that the Docker SDK for Python only allows to specify the path to the Docker configuration for very few functions. In general, it will use C($HOME/.docker/config.json) if the C(DOCKER_CONFIG) environment variable is not specified, and use C($DOCKER_CONFIG/config.json) otherwise.\nThis module uses the L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) to communicate with the Docker daemon.",
      "options": {
        "api_version": {
          "aliases": [
            "docker_api_version"
          ],
          "description": "The version of the Docker API running on the Docker Host.\nDefaults to the latest version of the API supported by Docker SDK for Python and the docker daemon.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_API_VERSION) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "auto",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "builder_cache": {
          "aliases": [],
          "description": "Whether to prune the builder cache.\nRequires version 3.3.0 of the Docker SDK for Python or newer.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "tls_ca_cert",
            "cacert_path"
          ],
          "description": "Use a CA certificate when performing server verification by providing the path to a CA certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(ca.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "tls_client_cert",
            "cert_path"
          ],
          "description": "Path to the client's TLS certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(cert.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "tls_client_key",
            "key_path"
          ],
          "description": "Path to the client's TLS key file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(key.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "containers": {
          "aliases": [],
          "description": "Whether to prune containers.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "containers_filters": {
          "aliases": [],
          "description": "A dictionary of filter values used for selecting containers to delete.\nFor example, C(until: 24h).\nSee L(the docker documentation,https://docs.docker.com/engine/reference/commandline/container_prune/#filtering) for more information on possible filters.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "debug": {
          "aliases": [],
          "description": "Debug mode",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "docker_host": {
          "aliases": [
            "docker_url"
          ],
          "description": "The URL or Unix socket path used to connect to the Docker API. To connect to a remote host, provide the TCP connection string. For example, C(tcp://192.0.2.23:2376). If TLS is used to encrypt the connection, the module will automatically replace C(tcp) in the connection URL with C(https).\nIf the value is not specified in the task, the value of environment variable C(DOCKER_HOST) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "unix://var/run/docker.sock",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "images": {
          "aliases": [],
          "description": "Whether to prune images.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "images_filters": {
          "aliases": [],
          "description": "A dictionary of filter values used for selecting images to delete.\nFor example, C(dangling: true).\nSee L(the docker documentation,https://docs.docker.com/engine/reference/commandline/image_prune/#filtering) for more information on possible filters.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "networks": {
          "aliases": [],
          "description": "Whether to prune networks.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "networks_filters": {
          "aliases": [],
          "description": "A dictionary of filter values used for selecting networks to delete.\nSee L(the docker documentation,https://docs.docker.com/engine/reference/commandline/network_prune/#filtering) for more information on possible filters.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "ssl_version": {
          "aliases": [],
          "description": "Provide a valid SSL version number. Default value determined by ssl.py module.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_SSL_VERSION) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The maximum amount of time in seconds to wait on a response from the API.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TIMEOUT) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "tls": {
          "aliases": [],
          "description": "Secure the connection to the API by using TLS without verifying the authenticity of the Docker host server. Note that if I(validate_certs) is set to C(yes) as well, it will take precedence.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "tls_hostname": {
          "aliases": [],
          "description": "When verifying the authenticity of the Docker Host server, provide the expected name of the server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_HOSTNAME) will be used instead. If the environment variable is not set, the default value will be used.\nThe current default value is C(localhost). This default is deprecated and will change in community.docker 2.0.0 to be a value computed from I(docker_host). Explicitly specify C(localhost) to make sure this value will still be used, and to disable the deprecation message which will be shown otherwise.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "use_ssh_client": {
          "aliases": [],
          "description": "For SSH transports, use the C(ssh) CLI tool instead of paramiko.\nRequires Docker SDK for Python 4.4.0 or newer.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tls_verify"
          ],
          "description": "Secure the connection to the API by using TLS and verifying the authenticity of the Docker host server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_VERIFY) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "volumes": {
          "aliases": [],
          "description": "Whether to prune volumes.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "volumes_filters": {
          "aliases": [],
          "description": "A dictionary of filter values used for selecting volumes to delete.\nSee L(the docker documentation,https://docs.docker.com/engine/reference/commandline/volume_prune/#filtering) for more information on possible filters.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "Docker API >= 1.25",
        "Docker SDK for Python: Please note that the L(docker-py,https://pypi.org/project/docker-py/) Python module has been superseded by L(docker,https://pypi.org/project/docker/) (see L(here,https://github.com/docker/docker-py/issues/1310) for details). This module does *not* work with docker-py.",
        "L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) >= 2.1.0",
        "Python >= 2.7"
      ],
      "short_description": "Allows to prune various docker objects"
    },
    "examples": "\n- name: Prune containers older than 24h\n  community.docker.docker_prune:\n    containers: yes\n    containers_filters:\n      # only consider containers created more than 24 hours ago\n      until: 24h\n\n- name: Prune everything\n  community.docker.docker_prune:\n    containers: yes\n    images: yes\n    networks: yes\n    volumes: yes\n    builder_cache: yes\n\n- name: Prune everything (including non-dangling images)\n  community.docker.docker_prune:\n    containers: yes\n    images: yes\n    images_filters:\n      dangling: false\n    networks: yes\n    volumes: yes\n    builder_cache: yes\n"
  },
  "community.docker.docker_secret": {
    "doc": {
      "description": "Create and remove Docker secrets in a Swarm environment. Similar to C(docker secret create) and C(docker secret rm).\nAdds to the metadata of new secrets C(ansible_key), an encrypted hash representation of the data, which is then used in future runs to test if a secret has changed. If C(ansible_key) is not present, then a secret will not be updated unless the I(force) option is set.\nUpdates to secrets are performed by removing the secret and creating it again.",
      "has_action": false,
      "notes": "Connect to the Docker daemon by providing parameters with each task or by defining environment variables. You can define C(DOCKER_HOST), C(DOCKER_TLS_HOSTNAME), C(DOCKER_API_VERSION), C(DOCKER_CERT_PATH), C(DOCKER_SSL_VERSION), C(DOCKER_TLS), C(DOCKER_TLS_VERIFY) and C(DOCKER_TIMEOUT). If you are using docker machine, run the script shipped with the product that sets up the environment. It will set these variables for you. See U(https://docs.docker.com/machine/reference/env/) for more details.\nWhen connecting to Docker daemon with TLS, you might need to install additional Python packages. For the Docker SDK for Python, version 2.4 or newer, this can be done by installing C(docker[tls]) with M(ansible.builtin.pip).\nNote that the Docker SDK for Python only allows to specify the path to the Docker configuration for very few functions. In general, it will use C($HOME/.docker/config.json) if the C(DOCKER_CONFIG) environment variable is not specified, and use C($DOCKER_CONFIG/config.json) otherwise.\nThis module uses the L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) to communicate with the Docker daemon.",
      "options": {
        "api_version": {
          "aliases": [
            "docker_api_version"
          ],
          "description": "The version of the Docker API running on the Docker Host.\nDefaults to the latest version of the API supported by Docker SDK for Python and the docker daemon.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_API_VERSION) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "auto",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "tls_ca_cert",
            "cacert_path"
          ],
          "description": "Use a CA certificate when performing server verification by providing the path to a CA certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(ca.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "tls_client_cert",
            "cert_path"
          ],
          "description": "Path to the client's TLS certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(cert.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "tls_client_key",
            "key_path"
          ],
          "description": "Path to the client's TLS key file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(key.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "data": {
          "aliases": [],
          "description": "The value of the secret.\nMutually exclusive with I(data_src). One of I(data) and I(data_src) is required if I(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "data_is_b64": {
          "aliases": [],
          "description": "If set to C(true), the data is assumed to be Base64 encoded and will be decoded before being used.\nTo use binary I(data), it is better to keep it Base64 encoded and let it be decoded by this option.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "data_src": {
          "aliases": [],
          "description": "The file on the target from which to read the secret.\nMutually exclusive with I(data). One of I(data) and I(data_src) is required if I(state=present).",
          "type": "path",
          "required": false,
          "version_added": "1.10.0",
          "suboptions": {}
        },
        "debug": {
          "aliases": [],
          "description": "Debug mode",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "docker_host": {
          "aliases": [
            "docker_url"
          ],
          "description": "The URL or Unix socket path used to connect to the Docker API. To connect to a remote host, provide the TCP connection string. For example, C(tcp://192.0.2.23:2376). If TLS is used to encrypt the connection, the module will automatically replace C(tcp) in the connection URL with C(https).\nIf the value is not specified in the task, the value of environment variable C(DOCKER_HOST) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "unix://var/run/docker.sock",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Use with state C(present) to always remove and recreate an existing secret.\nIf C(true), an existing secret will be replaced, even if it has not changed.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "labels": {
          "aliases": [],
          "description": "A map of key:value meta data, where both key and value are expected to be strings.\nIf new meta data is provided, or existing meta data is modified, the secret will be updated by removing it and creating it again.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the secret.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "rolling_versions": {
          "aliases": [],
          "description": "If set to C(true), secrets are created with an increasing version number appended to their name.\nAdds a label containing the version number to the managed secrets with the name C(ansible_version).",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "2.2.0",
          "suboptions": {}
        },
        "ssl_version": {
          "aliases": [],
          "description": "Provide a valid SSL version number. Default value determined by ssl.py module.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_SSL_VERSION) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Set to C(present), if the secret should exist, and C(absent), if it should not.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The maximum amount of time in seconds to wait on a response from the API.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TIMEOUT) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "tls": {
          "aliases": [],
          "description": "Secure the connection to the API by using TLS without verifying the authenticity of the Docker host server. Note that if I(validate_certs) is set to C(yes) as well, it will take precedence.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "tls_hostname": {
          "aliases": [],
          "description": "When verifying the authenticity of the Docker Host server, provide the expected name of the server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_HOSTNAME) will be used instead. If the environment variable is not set, the default value will be used.\nThe current default value is C(localhost). This default is deprecated and will change in community.docker 2.0.0 to be a value computed from I(docker_host). Explicitly specify C(localhost) to make sure this value will still be used, and to disable the deprecation message which will be shown otherwise.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "use_ssh_client": {
          "aliases": [],
          "description": "For SSH transports, use the C(ssh) CLI tool instead of paramiko.\nRequires Docker SDK for Python 4.4.0 or newer.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tls_verify"
          ],
          "description": "Secure the connection to the API by using TLS and verifying the authenticity of the Docker host server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_VERIFY) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "versions_to_keep": {
          "aliases": [],
          "description": "When using I(rolling_versions), the number of old versions of the secret to keep.\nExtraneous old secrets are deleted after the new one is created.\nSet to C(-1) to keep everything or to C(0) or C(1) to keep only the current one.",
          "default": "5",
          "type": "int",
          "required": false,
          "version_added": "2.2.0",
          "suboptions": {}
        }
      },
      "requirements": [
        "Docker API >= 1.25",
        "Docker SDK for Python: Please note that the L(docker-py,https://pypi.org/project/docker-py/) Python module has been superseded by L(docker,https://pypi.org/project/docker/) (see L(here,https://github.com/docker/docker-py/issues/1310) for details). This module does *not* work with docker-py.",
        "L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) >= 2.1.0",
        "Python >= 2.7"
      ],
      "short_description": "Manage docker secrets."
    },
    "examples": "\n\n- name: Create secret foo (from a file on the control machine)\n  community.docker.docker_secret:\n    name: foo\n    # If the file is JSON or binary, Ansible might modify it (because\n    # it is first decoded and later re-encoded). Base64-encoding the\n    # file directly after reading it prevents this to happen.\n    data: \"{{ lookup('file', '/path/to/secret/file') | b64encode }}\"\n    data_is_b64: true\n    state: present\n\n- name: Create secret foo (from a file on the target machine)\n  community.docker.docker_secret:\n    name: foo\n    data_src: /path/to/secret/file\n    state: present\n\n- name: Change the secret data\n  community.docker.docker_secret:\n    name: foo\n    data: Goodnight everyone!\n    labels:\n      bar: baz\n      one: '1'\n    state: present\n\n- name: Add a new label\n  community.docker.docker_secret:\n    name: foo\n    data: Goodnight everyone!\n    labels:\n      bar: baz\n      one: '1'\n      # Adding a new label will cause a remove/create of the secret\n      two: '2'\n    state: present\n\n- name: No change\n  community.docker.docker_secret:\n    name: foo\n    data: Goodnight everyone!\n    labels:\n      bar: baz\n      one: '1'\n      # Even though 'two' is missing, there is no change to the existing secret\n    state: present\n\n- name: Update an existing label\n  community.docker.docker_secret:\n    name: foo\n    data: Goodnight everyone!\n    labels:\n      bar: monkey   # Changing a label will cause a remove/create of the secret\n      one: '1'\n    state: present\n\n- name: Force the removal/creation of the secret\n  community.docker.docker_secret:\n    name: foo\n    data: Goodnight everyone!\n    force: yes\n    state: present\n\n- name: Remove secret foo\n  community.docker.docker_secret:\n    name: foo\n    state: absent\n"
  },
  "community.docker.docker_stack": {
    "doc": {
      "description": "Manage docker stacks using the C(docker stack) command on the target node (see examples).",
      "has_action": false,
      "notes": "Return values I(out) and I(err) have been deprecated and will be removed in community.docker 2.0.0. Use I(stdout) and I(stderr) instead.",
      "options": {
        "absent_retries": {
          "aliases": [],
          "description": "If C(>0) and I(state) is C(absent) the module will retry up to I(absent_retries) times to delete the stack until all the resources have been effectively deleted. If the last try still reports the stack as not completely removed the module will fail.",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "absent_retries_interval": {
          "aliases": [],
          "description": "Interval in seconds between consecutive I(absent_retries).",
          "default": "1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "compose": {
          "aliases": [],
          "description": "List of compose definitions. Any element may be a string referring to the path of the compose file on the target host or the YAML contents of a compose file nested as dictionary.",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "raw",
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Stack name",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "prune": {
          "aliases": [],
          "description": "If true will add the C(--prune) option to the C(docker stack deploy) command. This will have docker remove the services not present in the current stack definition.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "resolve_image": {
          "aliases": [],
          "description": "If set will add the C(--resolve-image) option to the C(docker stack deploy) command. This will have docker query the registry to resolve image digest and supported platforms. If not set, docker use \"always\" by default.",
          "type": "str",
          "required": false,
          "choices": [
            "always",
            "changed",
            "never"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Service state.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "with_registry_auth": {
          "aliases": [],
          "description": "If true will add the C(--with-registry-auth) option to the C(docker stack deploy) command. This will have docker send registry authentication details to Swarm agents.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "jsondiff",
        "pyyaml"
      ],
      "short_description": "docker stack module"
    },
    "examples": "\n  - name: Deploy stack from a compose file\n    community.docker.docker_stack:\n      state: present\n      name: mystack\n      compose:\n        - /opt/docker-compose.yml\n\n  - name: Deploy stack from base compose file and override the web service\n    community.docker.docker_stack:\n      state: present\n      name: mystack\n      compose:\n        - /opt/docker-compose.yml\n        - version: '3'\n          services:\n            web:\n              image: nginx:latest\n              environment:\n                ENVVAR: envvar\n\n  - name: Remove stack\n    community.docker.docker_stack:\n      name: mystack\n      state: absent\n"
  },
  "community.docker.docker_stack_info": {
    "doc": {
      "description": "Retrieve information on docker stacks using the C(docker stack) command on the target node (see examples).",
      "has_action": false,
      "short_description": "Return information on a docker stack"
    },
    "examples": "\n  - name: Shows stack info\n    community.docker.docker_stack_info:\n    register: result\n\n  - name: Show results\n    ansible.builtin.debug:\n      var: result.results\n"
  },
  "community.docker.docker_stack_task_info": {
    "doc": {
      "description": "Retrieve information on docker stacks tasks using the C(docker stack) command on the target node (see examples).",
      "has_action": false,
      "options": {
        "name": {
          "aliases": [],
          "description": "Stack name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "short_description": "Return information of the tasks on a docker stack"
    },
    "examples": "\n  - name: Shows stack info\n    community.docker.docker_stack_task_info:\n      name: test_stack\n    register: result\n\n  - name: Show results\n    ansible.builtin.debug:\n      var: result.results\n"
  },
  "community.docker.docker_swarm": {
    "doc": {
      "description": "Create a new Swarm cluster.\nAdd/Remove nodes or managers to an existing cluster.",
      "has_action": false,
      "notes": "Connect to the Docker daemon by providing parameters with each task or by defining environment variables. You can define C(DOCKER_HOST), C(DOCKER_TLS_HOSTNAME), C(DOCKER_API_VERSION), C(DOCKER_CERT_PATH), C(DOCKER_SSL_VERSION), C(DOCKER_TLS), C(DOCKER_TLS_VERIFY) and C(DOCKER_TIMEOUT). If you are using docker machine, run the script shipped with the product that sets up the environment. It will set these variables for you. See U(https://docs.docker.com/machine/reference/env/) for more details.\nWhen connecting to Docker daemon with TLS, you might need to install additional Python packages. For the Docker SDK for Python, version 2.4 or newer, this can be done by installing C(docker[tls]) with M(ansible.builtin.pip).\nNote that the Docker SDK for Python only allows to specify the path to the Docker configuration for very few functions. In general, it will use C($HOME/.docker/config.json) if the C(DOCKER_CONFIG) environment variable is not specified, and use C($DOCKER_CONFIG/config.json) otherwise.\nThis module uses the L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) to communicate with the Docker daemon.",
      "options": {
        "advertise_addr": {
          "aliases": [],
          "description": "Externally reachable address advertised to other nodes.\nThis can either be an address/port combination in the form C(192.168.1.1:4567), or an interface followed by a port number, like C(eth0:4567).\nIf the port number is omitted, the port number from the listen address is used.\nIf I(advertise_addr) is not specified, it will be automatically detected when possible.\nOnly used when swarm is initialised or joined. Because of this it's not considered for idempotency checking.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "api_version": {
          "aliases": [
            "docker_api_version"
          ],
          "description": "The version of the Docker API running on the Docker Host.\nDefaults to the latest version of the API supported by Docker SDK for Python and the docker daemon.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_API_VERSION) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "auto",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "autolock_managers": {
          "aliases": [],
          "description": "If set, generate a key and use it to lock data stored on the managers.\nDocker default value is C(no).\nM(community.docker.docker_swarm_info) can be used to retrieve the unlock key.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "tls_ca_cert",
            "cacert_path"
          ],
          "description": "Use a CA certificate when performing server verification by providing the path to a CA certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(ca.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "ca_force_rotate": {
          "aliases": [],
          "description": "An integer whose purpose is to force swarm to generate a new signing CA certificate and key, if none have been specified.\nDocker default value is C(0).\nRequires API version >= 1.30.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "tls_client_cert",
            "cert_path"
          ],
          "description": "Path to the client's TLS certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(cert.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "tls_client_key",
            "key_path"
          ],
          "description": "Path to the client's TLS key file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(key.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "debug": {
          "aliases": [],
          "description": "Debug mode",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "default_addr_pool": {
          "aliases": [],
          "description": "Default address pool in CIDR format.\nOnly used when swarm is initialised. Because of this it's not considered for idempotency checking.\nRequires API version >= 1.39.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "dispatcher_heartbeat_period": {
          "aliases": [],
          "description": "The delay for an agent to send a heartbeat to the dispatcher.\nDocker default value is C(5s).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "docker_host": {
          "aliases": [
            "docker_url"
          ],
          "description": "The URL or Unix socket path used to connect to the Docker API. To connect to a remote host, provide the TCP connection string. For example, C(tcp://192.0.2.23:2376). If TLS is used to encrypt the connection, the module will automatically replace C(tcp) in the connection URL with C(https).\nIf the value is not specified in the task, the value of environment variable C(DOCKER_HOST) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "unix://var/run/docker.sock",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "election_tick": {
          "aliases": [],
          "description": "Amount of ticks (in seconds) needed without a leader to trigger a new election.\nDocker default value is C(10s).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Use with state C(present) to force creating a new Swarm, even if already part of one.\nUse with state C(absent) to Leave the swarm even if this node is a manager.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "heartbeat_tick": {
          "aliases": [],
          "description": "Amount of ticks (in seconds) between each heartbeat.\nDocker default value is C(1s).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "join_token": {
          "aliases": [],
          "description": "Swarm token used to join a swarm cluster.\nUsed with I(state=join).\nIf this value is specified, the corresponding value in the return values will be censored by Ansible. This is a side-effect of this value not being logged.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "keep_old_snapshots": {
          "aliases": [],
          "description": "Number of snapshots to keep beyond the current snapshot.\nDocker default value is C(0).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "labels": {
          "aliases": [],
          "description": "User-defined key/value metadata.\nLabel operations in this module apply to the docker swarm cluster. Use M(community.docker.docker_node) module to add/modify/remove swarm node labels.\nRequires API version >= 1.32.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "listen_addr": {
          "aliases": [],
          "description": "Listen address used for inter-manager communication.\nThis can either be an address/port combination in the form C(192.168.1.1:4567), or an interface followed by a port number, like C(eth0:4567).\nIf the port number is omitted, the default swarm listening port is used.\nOnly used when swarm is initialised or joined. Because of this it's not considered for idempotency checking.",
          "default": "0.0.0.0:2377",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "log_entries_for_slow_followers": {
          "aliases": [],
          "description": "Number of log entries to keep around to sync up slow followers after a snapshot is created.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the swarm.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "node_cert_expiry": {
          "aliases": [],
          "description": "Automatic expiry for nodes certificates.\nDocker default value is C(3months).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "node_id": {
          "aliases": [],
          "description": "Swarm id of the node to remove.\nUsed with I(state=remove).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "remote_addrs": {
          "aliases": [],
          "description": "Remote address of one or more manager nodes of an existing Swarm to connect to.\nUsed with I(state=join).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "rotate_manager_token": {
          "aliases": [],
          "description": "Rotate the manager join token.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "rotate_worker_token": {
          "aliases": [],
          "description": "Rotate the worker join token.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "signing_ca_cert": {
          "aliases": [],
          "description": "The desired signing CA certificate for all swarm node TLS leaf certificates, in PEM format.\nThis must not be a path to a certificate, but the contents of the certificate.\nRequires API version >= 1.30.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "signing_ca_key": {
          "aliases": [],
          "description": "The desired signing CA key for all swarm node TLS leaf certificates, in PEM format.\nThis must not be a path to a key, but the contents of the key.\nRequires API version >= 1.30.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "snapshot_interval": {
          "aliases": [],
          "description": "Number of logs entries between snapshot.\nDocker default value is C(10000).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ssl_version": {
          "aliases": [],
          "description": "Provide a valid SSL version number. Default value determined by ssl.py module.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_SSL_VERSION) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Set to C(present), to create/update a new cluster.\nSet to C(join), to join an existing cluster.\nSet to C(absent), to leave an existing cluster.\nSet to C(remove), to remove an absent node from the cluster. Note that removing requires Docker SDK for Python >= 2.4.0.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "join",
            "absent",
            "remove"
          ],
          "suboptions": {}
        },
        "subnet_size": {
          "aliases": [],
          "description": "Default address pool subnet mask length.\nOnly used when swarm is initialised. Because of this it's not considered for idempotency checking.\nRequires API version >= 1.39.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "task_history_retention_limit": {
          "aliases": [],
          "description": "Maximum number of tasks history stored.\nDocker default value is C(5).",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The maximum amount of time in seconds to wait on a response from the API.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TIMEOUT) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "tls": {
          "aliases": [],
          "description": "Secure the connection to the API by using TLS without verifying the authenticity of the Docker host server. Note that if I(validate_certs) is set to C(yes) as well, it will take precedence.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "tls_hostname": {
          "aliases": [],
          "description": "When verifying the authenticity of the Docker Host server, provide the expected name of the server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_HOSTNAME) will be used instead. If the environment variable is not set, the default value will be used.\nThe current default value is C(localhost). This default is deprecated and will change in community.docker 2.0.0 to be a value computed from I(docker_host). Explicitly specify C(localhost) to make sure this value will still be used, and to disable the deprecation message which will be shown otherwise.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "use_ssh_client": {
          "aliases": [],
          "description": "For SSH transports, use the C(ssh) CLI tool instead of paramiko.\nRequires Docker SDK for Python 4.4.0 or newer.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tls_verify"
          ],
          "description": "Secure the connection to the API by using TLS and verifying the authenticity of the Docker host server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_VERIFY) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "Docker API >= 1.25",
        "Docker SDK for Python: Please note that the L(docker-py,https://pypi.org/project/docker-py/) Python module has been superseded by L(docker,https://pypi.org/project/docker/) (see L(here,https://github.com/docker/docker-py/issues/1310) for details). For Python 2.6, C(docker-py) must be used. Otherwise, it is recommended to install the C(docker) Python module. Note that both modules should *not* be installed at the same time. Also note that when both modules are installed and one of them is uninstalled, the other might no longer function and a reinstall of it is required.",
        "L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) >= 1.10.0 (use L(docker-py,https://pypi.org/project/docker-py/) for Python 2.6)"
      ],
      "short_description": "Manage Swarm cluster"
    },
    "examples": "\n\n- name: Init a new swarm with default parameters\n  community.docker.docker_swarm:\n    state: present\n\n- name: Update swarm configuration\n  community.docker.docker_swarm:\n    state: present\n    election_tick: 5\n\n- name: Add nodes\n  community.docker.docker_swarm:\n    state: join\n    advertise_addr: 192.168.1.2\n    join_token: SWMTKN-1--xxxxx\n    remote_addrs: [ '192.168.1.1:2377' ]\n\n- name: Leave swarm for a node\n  community.docker.docker_swarm:\n    state: absent\n\n- name: Remove a swarm manager\n  community.docker.docker_swarm:\n    state: absent\n    force: true\n\n- name: Remove node from swarm\n  community.docker.docker_swarm:\n    state: remove\n    node_id: mynode\n"
  },
  "community.docker.docker_swarm_info": {
    "doc": {
      "description": "Retrieves facts about a Docker Swarm.\nReturns lists of swarm objects names for the services - nodes, services, tasks.\nThe output differs depending on API version available on docker host.\nMust be run on Swarm Manager node; otherwise module fails with error message. It does return boolean flags in on both error and success which indicate whether the docker daemon can be communicated with, whether it is in Swarm mode, and whether it is a Swarm Manager node.",
      "has_action": false,
      "notes": "Connect to the Docker daemon by providing parameters with each task or by defining environment variables. You can define C(DOCKER_HOST), C(DOCKER_TLS_HOSTNAME), C(DOCKER_API_VERSION), C(DOCKER_CERT_PATH), C(DOCKER_SSL_VERSION), C(DOCKER_TLS), C(DOCKER_TLS_VERIFY) and C(DOCKER_TIMEOUT). If you are using docker machine, run the script shipped with the product that sets up the environment. It will set these variables for you. See U(https://docs.docker.com/machine/reference/env/) for more details.\nWhen connecting to Docker daemon with TLS, you might need to install additional Python packages. For the Docker SDK for Python, version 2.4 or newer, this can be done by installing C(docker[tls]) with M(ansible.builtin.pip).\nNote that the Docker SDK for Python only allows to specify the path to the Docker configuration for very few functions. In general, it will use C($HOME/.docker/config.json) if the C(DOCKER_CONFIG) environment variable is not specified, and use C($DOCKER_CONFIG/config.json) otherwise.\nThis module uses the L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) to communicate with the Docker daemon.",
      "options": {
        "api_version": {
          "aliases": [
            "docker_api_version"
          ],
          "description": "The version of the Docker API running on the Docker Host.\nDefaults to the latest version of the API supported by Docker SDK for Python and the docker daemon.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_API_VERSION) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "auto",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "tls_ca_cert",
            "cacert_path"
          ],
          "description": "Use a CA certificate when performing server verification by providing the path to a CA certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(ca.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "tls_client_cert",
            "cert_path"
          ],
          "description": "Path to the client's TLS certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(cert.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "tls_client_key",
            "key_path"
          ],
          "description": "Path to the client's TLS key file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(key.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "debug": {
          "aliases": [],
          "description": "Debug mode",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "docker_host": {
          "aliases": [
            "docker_url"
          ],
          "description": "The URL or Unix socket path used to connect to the Docker API. To connect to a remote host, provide the TCP connection string. For example, C(tcp://192.0.2.23:2376). If TLS is used to encrypt the connection, the module will automatically replace C(tcp) in the connection URL with C(https).\nIf the value is not specified in the task, the value of environment variable C(DOCKER_HOST) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "unix://var/run/docker.sock",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "nodes": {
          "aliases": [],
          "description": "Whether to list swarm nodes.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "nodes_filters": {
          "aliases": [],
          "description": "A dictionary of filter values used for selecting nodes to list.\nFor example, C(name: mynode).\nSee L(the docker documentation,https://docs.docker.com/engine/reference/commandline/node_ls/#filtering) for more information on possible filters.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "services": {
          "aliases": [],
          "description": "Whether to list swarm services.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "services_filters": {
          "aliases": [],
          "description": "A dictionary of filter values used for selecting services to list.\nFor example, C(name: myservice).\nSee L(the docker documentation,https://docs.docker.com/engine/reference/commandline/service_ls/#filtering) for more information on possible filters.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "ssl_version": {
          "aliases": [],
          "description": "Provide a valid SSL version number. Default value determined by ssl.py module.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_SSL_VERSION) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tasks": {
          "aliases": [],
          "description": "Whether to list containers.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "tasks_filters": {
          "aliases": [],
          "description": "A dictionary of filter values used for selecting tasks to list.\nFor example, C(node: mynode-1).\nSee L(the docker documentation,https://docs.docker.com/engine/reference/commandline/service_ps/#filtering) for more information on possible filters.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The maximum amount of time in seconds to wait on a response from the API.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TIMEOUT) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "tls": {
          "aliases": [],
          "description": "Secure the connection to the API by using TLS without verifying the authenticity of the Docker host server. Note that if I(validate_certs) is set to C(yes) as well, it will take precedence.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "tls_hostname": {
          "aliases": [],
          "description": "When verifying the authenticity of the Docker Host server, provide the expected name of the server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_HOSTNAME) will be used instead. If the environment variable is not set, the default value will be used.\nThe current default value is C(localhost). This default is deprecated and will change in community.docker 2.0.0 to be a value computed from I(docker_host). Explicitly specify C(localhost) to make sure this value will still be used, and to disable the deprecation message which will be shown otherwise.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "unlock_key": {
          "aliases": [],
          "description": "Whether to retrieve the swarm unlock key.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_ssh_client": {
          "aliases": [],
          "description": "For SSH transports, use the C(ssh) CLI tool instead of paramiko.\nRequires Docker SDK for Python 4.4.0 or newer.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tls_verify"
          ],
          "description": "Secure the connection to the API by using TLS and verifying the authenticity of the Docker host server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_VERIFY) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "verbose_output": {
          "aliases": [],
          "description": "When set to C(yes) and I(nodes), I(services) or I(tasks) is set to C(yes), then the module output will contain verbose information about objects matching the full output of API method.\nFor details see the documentation of your version of Docker API at U(https://docs.docker.com/engine/api/).\nThe verbose output in this module contains only subset of information returned by I(_info) module for each type of the objects.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "Docker API >= 1.24",
        "Docker SDK for Python: Please note that the L(docker-py,https://pypi.org/project/docker-py/) Python module has been superseded by L(docker,https://pypi.org/project/docker/) (see L(here,https://github.com/docker/docker-py/issues/1310) for details). For Python 2.6, C(docker-py) must be used. Otherwise, it is recommended to install the C(docker) Python module. Note that both modules should *not* be installed at the same time. Also note that when both modules are installed and one of them is uninstalled, the other might no longer function and a reinstall of it is required.",
        "L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) >= 1.10.0 (use L(docker-py,https://pypi.org/project/docker-py/) for Python 2.6)"
      ],
      "short_description": "Retrieves facts about Docker Swarm cluster."
    },
    "examples": "\n- name: Get info on Docker Swarm\n  community.docker.docker_swarm_info:\n  ignore_errors: yes\n  register: result\n\n- name: Inform about basic flags\n  ansible.builtin.debug:\n    msg: |\n      Was able to talk to docker daemon: {{ result.can_talk_to_docker }}\n      Docker in Swarm mode: {{ result.docker_swarm_active }}\n      This is a Manager node: {{ result.docker_swarm_manager }}\n\n- block:\n\n- name: Get info on Docker Swarm and list of registered nodes\n  community.docker.docker_swarm_info:\n    nodes: yes\n  register: result\n\n- name: Get info on Docker Swarm and extended list of registered nodes\n  community.docker.docker_swarm_info:\n    nodes: yes\n    verbose_output: yes\n  register: result\n\n- name: Get info on Docker Swarm and filtered list of registered nodes\n  community.docker.docker_swarm_info:\n    nodes: yes\n    nodes_filters:\n      name: mynode\n  register: result\n\n- ansible.builtin.debug:\n    var: result.swarm_facts\n\n- name: Get the swarm unlock key\n  community.docker.docker_swarm_info:\n    unlock_key: yes\n  register: result\n\n- ansible.builtin.debug:\n    var: result.swarm_unlock_key\n\n"
  },
  "community.docker.docker_swarm_service": {
    "doc": {
      "description": "Manages docker services via a swarm manager node.",
      "has_action": false,
      "notes": "Images will only resolve to the latest digest when using Docker API >= 1.30 and Docker SDK for Python >= 3.2.0. When using older versions use C(force_update: true) to trigger the swarm to resolve a new image.\nConnect to the Docker daemon by providing parameters with each task or by defining environment variables. You can define C(DOCKER_HOST), C(DOCKER_TLS_HOSTNAME), C(DOCKER_API_VERSION), C(DOCKER_CERT_PATH), C(DOCKER_SSL_VERSION), C(DOCKER_TLS), C(DOCKER_TLS_VERIFY) and C(DOCKER_TIMEOUT). If you are using docker machine, run the script shipped with the product that sets up the environment. It will set these variables for you. See U(https://docs.docker.com/machine/reference/env/) for more details.\nWhen connecting to Docker daemon with TLS, you might need to install additional Python packages. For the Docker SDK for Python, version 2.4 or newer, this can be done by installing C(docker[tls]) with M(ansible.builtin.pip).\nNote that the Docker SDK for Python only allows to specify the path to the Docker configuration for very few functions. In general, it will use C($HOME/.docker/config.json) if the C(DOCKER_CONFIG) environment variable is not specified, and use C($DOCKER_CONFIG/config.json) otherwise.\nThis module uses the L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) to communicate with the Docker daemon.",
      "options": {
        "api_version": {
          "aliases": [
            "docker_api_version"
          ],
          "description": "The version of the Docker API running on the Docker Host.\nDefaults to the latest version of the API supported by Docker SDK for Python and the docker daemon.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_API_VERSION) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "auto",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "args": {
          "aliases": [],
          "description": "List arguments to be passed to the container.\nCorresponds to the C(ARG) parameter of C(docker service create).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "tls_ca_cert",
            "cacert_path"
          ],
          "description": "Use a CA certificate when performing server verification by providing the path to a CA certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(ca.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "cap_add": {
          "aliases": [],
          "description": "List of capabilities to add to the container.\nRequires API version >= 1.41.",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "2.2.0",
          "suboptions": {}
        },
        "cap_drop": {
          "aliases": [],
          "description": "List of capabilities to drop from the container.\nRequires API version >= 1.41.",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "2.2.0",
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "tls_client_cert",
            "cert_path"
          ],
          "description": "Path to the client's TLS certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(cert.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "tls_client_key",
            "key_path"
          ],
          "description": "Path to the client's TLS key file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(key.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "command": {
          "aliases": [],
          "description": "Command to execute when the container starts.\nA command may be either a string or a list or a list of strings.\nCorresponds to the C(COMMAND) parameter of C(docker service create).",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "configs": {
          "aliases": [],
          "description": "List of dictionaries describing the service configs.\nCorresponds to the C(--config) option of C(docker service create).\nRequires API version >= 1.30.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "config_id": {
              "aliases": [],
              "description": "Config's ID.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "config_name": {
              "aliases": [],
              "description": "Config's name as defined at its creation.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "filename": {
              "aliases": [],
              "description": "Name of the file containing the config. Defaults to the I(config_name) if not specified.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "gid": {
              "aliases": [],
              "description": "GID of the config file's group.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "mode": {
              "aliases": [],
              "description": "File access mode inside the container. Must be an octal number (like C(0644) or C(0444)).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "uid": {
              "aliases": [],
              "description": "UID of the config file's owner.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "container_labels": {
          "aliases": [],
          "description": "Dictionary of key value pairs.\nCorresponds to the C(--container-label) option of C(docker service create).",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "debug": {
          "aliases": [],
          "description": "Debug mode",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "dns": {
          "aliases": [],
          "description": "List of custom DNS servers.\nCorresponds to the C(--dns) option of C(docker service create).\nRequires API version >= 1.25.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "dns_options": {
          "aliases": [],
          "description": "List of custom DNS options.\nCorresponds to the C(--dns-option) option of C(docker service create).\nRequires API version >= 1.25.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "dns_search": {
          "aliases": [],
          "description": "List of custom DNS search domains.\nCorresponds to the C(--dns-search) option of C(docker service create).\nRequires API version >= 1.25.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "docker_host": {
          "aliases": [
            "docker_url"
          ],
          "description": "The URL or Unix socket path used to connect to the Docker API. To connect to a remote host, provide the TCP connection string. For example, C(tcp://192.0.2.23:2376). If TLS is used to encrypt the connection, the module will automatically replace C(tcp) in the connection URL with C(https).\nIf the value is not specified in the task, the value of environment variable C(DOCKER_HOST) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "unix://var/run/docker.sock",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "endpoint_mode": {
          "aliases": [],
          "description": "Service endpoint mode.\nCorresponds to the C(--endpoint-mode) option of C(docker service create).\nRequires API version >= 1.25.",
          "type": "str",
          "required": false,
          "choices": [
            "vip",
            "dnsrr"
          ],
          "suboptions": {}
        },
        "env": {
          "aliases": [],
          "description": "List or dictionary of the service environment variables.\nIf passed a list each items need to be in the format of C(KEY=VALUE).\nIf passed a dictionary values which might be parsed as numbers, booleans or other types by the YAML parser must be quoted (for example C(\"true\")) in order to avoid data loss.\nCorresponds to the C(--env) option of C(docker service create).",
          "type": "raw",
          "required": false,
          "suboptions": {}
        },
        "env_files": {
          "aliases": [],
          "description": "List of paths to files, present on the target, containing environment variables C(FOO=BAR).\nThe order of the list is significant in determining the value assigned to a variable that shows up more than once.\nIf variable also present in I(env), then I(env) value will override.",
          "type": "list",
          "required": false,
          "elements": "path",
          "suboptions": {}
        },
        "force_update": {
          "aliases": [],
          "description": "Force update even if no changes require it.\nCorresponds to the C(--force) option of C(docker service update).\nRequires API version >= 1.25.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "groups": {
          "aliases": [],
          "description": "List of additional group names and/or IDs that the container process will run as.\nCorresponds to the C(--group) option of C(docker service update).\nRequires API version >= 1.25.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "healthcheck": {
          "aliases": [],
          "description": "Configure a check that is run to determine whether or not containers for this service are \"healthy\". See the docs for the L(HEALTHCHECK Dockerfile instruction,https://docs.docker.com/engine/reference/builder/#healthcheck) for details on how healthchecks work.\nI(interval), I(timeout) and I(start_period) are specified as durations. They accept duration as a string in a format that look like: C(5h34m56s), C(1m30s) etc. The supported units are C(us), C(ms), C(s), C(m) and C(h).\nRequires API version >= 1.25.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "interval": {
              "aliases": [],
              "description": "Time between running the check.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "retries": {
              "aliases": [],
              "description": "Consecutive failures needed to report unhealthy. It accept integer value.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "start_period": {
              "aliases": [],
              "description": "Start period for the container to initialize before starting health-retries countdown.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "test": {
              "aliases": [],
              "description": "Command to run to check health.\nMust be either a string or a list. If it is a list, the first item must be one of C(NONE), C(CMD) or C(CMD-SHELL).",
              "type": "raw",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "Maximum time to allow one check to run.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "hostname": {
          "aliases": [],
          "description": "Container hostname.\nCorresponds to the C(--hostname) option of C(docker service create).\nRequires API version >= 1.25.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hosts": {
          "aliases": [],
          "description": "Dict of host-to-IP mappings, where each host name is a key in the dictionary. Each host name will be added to the container's /etc/hosts file.\nCorresponds to the C(--host) option of C(docker service create).\nRequires API version >= 1.25.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "image": {
          "aliases": [],
          "description": "Service image path and tag.\nCorresponds to the C(IMAGE) parameter of C(docker service create).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "init": {
          "aliases": [],
          "description": "Use an init inside each service container to forward signals and reap processes.\nCorresponds to the C(--init) option of C(docker service create).\nRequires API version >= 1.37.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "labels": {
          "aliases": [],
          "description": "Dictionary of key value pairs.\nCorresponds to the C(--label) option of C(docker service create).",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "limits": {
          "aliases": [],
          "description": "Configures service resource limits.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "cpus": {
              "aliases": [],
              "description": "Service CPU limit. C(0) equals no limit.\nCorresponds to the C(--limit-cpu) option of C(docker service create).",
              "type": "float",
              "required": false,
              "suboptions": {}
            },
            "memory": {
              "aliases": [],
              "description": "Service memory limit in format C(<number>[<unit>]). Number is a positive integer. Unit can be C(B) (byte), C(K) (kibibyte, 1024B), C(M) (mebibyte), C(G) (gibibyte), C(T) (tebibyte), or C(P) (pebibyte).\nC(0) equals no limit.\nOmitting the unit defaults to bytes.\nCorresponds to the C(--limit-memory) option of C(docker service create).",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "logging": {
          "aliases": [],
          "description": "Logging configuration for the service.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "driver": {
              "aliases": [],
              "description": "Configure the logging driver for a service.\nCorresponds to the C(--log-driver) option of C(docker service create).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "options": {
              "aliases": [],
              "description": "Options for service logging driver.\nCorresponds to the C(--log-opt) option of C(docker service create).",
              "type": "dict",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "mode": {
          "aliases": [],
          "description": "Service replication mode.\nService will be removed and recreated when changed.\nCorresponds to the C(--mode) option of C(docker service create).",
          "default": "replicated",
          "type": "str",
          "required": false,
          "choices": [
            "replicated",
            "global"
          ],
          "suboptions": {}
        },
        "mounts": {
          "aliases": [],
          "description": "List of dictionaries describing the service mounts.\nCorresponds to the C(--mount) option of C(docker service create).",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "driver_config": {
              "aliases": [],
              "description": "Volume driver configuration.\nCan only be used when I(type) is C(volume).",
              "type": "dict",
              "required": false,
              "suboptions": {
                "name": {
                  "aliases": [],
                  "description": "Name of the volume-driver plugin to use for the volume.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "options": {
                  "aliases": [],
                  "description": "Options as key-value pairs to pass to the driver for this volume.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "labels": {
              "aliases": [],
              "description": "Volume labels to apply.",
              "type": "dict",
              "required": false,
              "suboptions": {}
            },
            "no_copy": {
              "aliases": [],
              "description": "Disable copying of data from a container when a volume is created.\nCan only be used when I(type) is C(volume).",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "propagation": {
              "aliases": [],
              "description": "The propagation mode to use.\nCan only be used when I(type) is C(bind).",
              "type": "str",
              "required": false,
              "choices": [
                "shared",
                "slave",
                "private",
                "rshared",
                "rslave",
                "rprivate"
              ],
              "suboptions": {}
            },
            "readonly": {
              "aliases": [],
              "description": "Whether the mount should be read-only.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "source": {
              "aliases": [],
              "description": "Mount source (for example a volume name or a host path).\nMust be specified if I(type) is not C(tmpfs).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "target": {
              "aliases": [],
              "description": "Container path.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "tmpfs_mode": {
              "aliases": [],
              "description": "File mode of the tmpfs in octal.\nCan only be used when I(type) is C(tmpfs).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "tmpfs_size": {
              "aliases": [],
              "description": "Size of the tmpfs mount in format C(<number>[<unit>]). Number is a positive integer. Unit can be C(B) (byte), C(K) (kibibyte, 1024B), C(M) (mebibyte), C(G) (gibibyte), C(T) (tebibyte), or C(P) (pebibyte).\nCan only be used when I(type) is C(tmpfs).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "The mount type.\nNote that C(npipe) is only supported by Docker for Windows. Also note that C(npipe) was added in Ansible 2.9.",
              "default": "bind",
              "type": "str",
              "required": false,
              "choices": [
                "bind",
                "volume",
                "tmpfs",
                "npipe"
              ],
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "Service name.\nCorresponds to the C(--name) option of C(docker service create).",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "networks": {
          "aliases": [],
          "description": "List of the service networks names or dictionaries.\nWhen passed dictionaries valid sub-options are I(name), which is required, and I(aliases) and I(options).\nPrior to API version 1.29, updating and removing networks is not supported. If changes are made the service will then be removed and recreated.\nCorresponds to the C(--network) option of C(docker service create).",
          "type": "list",
          "required": false,
          "elements": "raw",
          "suboptions": {}
        },
        "placement": {
          "aliases": [],
          "description": "Configures service placement preferences and constraints.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "constraints": {
              "aliases": [],
              "description": "List of the service constraints.\nCorresponds to the C(--constraint) option of C(docker service create).",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "preferences": {
              "aliases": [],
              "description": "List of the placement preferences as key value pairs.\nCorresponds to the C(--placement-pref) option of C(docker service create).\nRequires API version >= 1.27.",
              "type": "list",
              "required": false,
              "elements": "dict",
              "suboptions": {}
            },
            "replicas_max_per_node": {
              "aliases": [],
              "description": "Maximum number of tasks per node.\nCorresponds to the C(--replicas_max_per_node) option of C(docker service create).\nRequires API version >= 1.40",
              "type": "int",
              "required": false,
              "version_added": "1.3.0",
              "suboptions": {}
            }
          }
        },
        "publish": {
          "aliases": [],
          "description": "List of dictionaries describing the service published ports.\nCorresponds to the C(--publish) option of C(docker service create).\nRequires API version >= 1.25.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "mode": {
              "aliases": [],
              "description": "What publish mode to use.\nRequires API version >= 1.32.",
              "type": "str",
              "required": false,
              "choices": [
                "ingress",
                "host"
              ],
              "suboptions": {}
            },
            "protocol": {
              "aliases": [],
              "description": "What protocol to use.",
              "default": "tcp",
              "type": "str",
              "required": false,
              "choices": [
                "tcp",
                "udp"
              ],
              "suboptions": {}
            },
            "published_port": {
              "aliases": [],
              "description": "The port to make externally available.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "target_port": {
              "aliases": [],
              "description": "The port inside the container to expose.",
              "type": "int",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "read_only": {
          "aliases": [],
          "description": "Mount the containers root filesystem as read only.\nCorresponds to the C(--read-only) option of C(docker service create).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "replicas": {
          "aliases": [],
          "description": "Number of containers instantiated in the service. Valid only if I(mode) is C(replicated).\nIf set to C(-1), and service is not present, service replicas will be set to C(1).\nIf set to C(-1), and service is present, service replicas will be unchanged.\nCorresponds to the C(--replicas) option of C(docker service create).",
          "default": "-1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "reservations": {
          "aliases": [],
          "description": "Configures service resource reservations.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "cpus": {
              "aliases": [],
              "description": "Service CPU reservation. C(0) equals no reservation.\nCorresponds to the C(--reserve-cpu) option of C(docker service create).",
              "type": "float",
              "required": false,
              "suboptions": {}
            },
            "memory": {
              "aliases": [],
              "description": "Service memory reservation in format C(<number>[<unit>]). Number is a positive integer. Unit can be C(B) (byte), C(K) (kibibyte, 1024B), C(M) (mebibyte), C(G) (gibibyte), C(T) (tebibyte), or C(P) (pebibyte).\nC(0) equals no reservation.\nOmitting the unit defaults to bytes.\nCorresponds to the C(--reserve-memory) option of C(docker service create).",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "resolve_image": {
          "aliases": [],
          "description": "If the current image digest should be resolved from registry and updated if changed.\nRequires API version >= 1.30.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "restart_config": {
          "aliases": [],
          "description": "Configures if and how to restart containers when they exit.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "condition": {
              "aliases": [],
              "description": "Restart condition of the service.\nCorresponds to the C(--restart-condition) option of C(docker service create).",
              "type": "str",
              "required": false,
              "choices": [
                "none",
                "on-failure",
                "any"
              ],
              "suboptions": {}
            },
            "delay": {
              "aliases": [],
              "description": "Delay between restarts.\nAccepts a a string in a format that look like: C(5h34m56s), C(1m30s) etc. The supported units are C(us), C(ms), C(s), C(m) and C(h).\nCorresponds to the C(--restart-delay) option of C(docker service create).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "max_attempts": {
              "aliases": [],
              "description": "Maximum number of service restarts.\nCorresponds to the C(--restart-condition) option of C(docker service create).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "window": {
              "aliases": [],
              "description": "Restart policy evaluation window.\nAccepts a string in a format that look like: C(5h34m56s), C(1m30s) etc. The supported units are C(us), C(ms), C(s), C(m) and C(h).\nCorresponds to the C(--restart-window) option of C(docker service create).",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "rollback_config": {
          "aliases": [],
          "description": "Configures how the service should be rolled back in case of a failing update.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "delay": {
              "aliases": [],
              "description": "Delay between task rollbacks.\nAccepts a string in a format that look like: C(5h34m56s), C(1m30s) etc. The supported units are C(us), C(ms), C(s), C(m) and C(h).\nCorresponds to the C(--rollback-delay) option of C(docker service create).\nRequires API version >= 1.28.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "failure_action": {
              "aliases": [],
              "description": "Action to take in case of rollback failure.\nCorresponds to the C(--rollback-failure-action) option of C(docker service create).\nRequires API version >= 1.28.",
              "type": "str",
              "required": false,
              "choices": [
                "continue",
                "pause"
              ],
              "suboptions": {}
            },
            "max_failure_ratio": {
              "aliases": [],
              "description": "Fraction of tasks that may fail during a rollback.\nCorresponds to the C(--rollback-max-failure-ratio) option of C(docker service create).\nRequires API version >= 1.28.",
              "type": "float",
              "required": false,
              "suboptions": {}
            },
            "monitor": {
              "aliases": [],
              "description": "Duration after each task rollback to monitor for failure.\nAccepts a string in a format that look like: C(5h34m56s), C(1m30s) etc. The supported units are C(us), C(ms), C(s), C(m) and C(h).\nCorresponds to the C(--rollback-monitor) option of C(docker service create).\nRequires API version >= 1.28.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "order": {
              "aliases": [],
              "description": "Specifies the order of operations during rollbacks.\nCorresponds to the C(--rollback-order) option of C(docker service create).\nRequires API version >= 1.29.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "parallelism": {
              "aliases": [],
              "description": "The number of containers to rollback at a time. If set to 0, all containers rollback simultaneously.\nCorresponds to the C(--rollback-parallelism) option of C(docker service create).\nRequires API version >= 1.28.",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "secrets": {
          "aliases": [],
          "description": "List of dictionaries describing the service secrets.\nCorresponds to the C(--secret) option of C(docker service create).\nRequires API version >= 1.25.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "filename": {
              "aliases": [],
              "description": "Name of the file containing the secret. Defaults to the I(secret_name) if not specified.\nCorresponds to the C(target) key of C(docker service create --secret).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "gid": {
              "aliases": [],
              "description": "GID of the secret file's group.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "mode": {
              "aliases": [],
              "description": "File access mode inside the container. Must be an octal number (like C(0644) or C(0444)).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "secret_id": {
              "aliases": [],
              "description": "Secret's ID.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "secret_name": {
              "aliases": [],
              "description": "Secret's name as defined at its creation.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "uid": {
              "aliases": [],
              "description": "UID of the secret file's owner.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "ssl_version": {
          "aliases": [],
          "description": "Provide a valid SSL version number. Default value determined by ssl.py module.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_SSL_VERSION) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "C(absent) - A service matching the specified name will be removed and have its tasks stopped.\nC(present) - Asserts the existence of a service matching the name and provided configuration parameters. Unspecified configuration parameters will be set to docker defaults.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "stop_grace_period": {
          "aliases": [],
          "description": "Time to wait before force killing a container.\nAccepts a duration as a string in a format that look like: C(5h34m56s), C(1m30s) etc. The supported units are C(us), C(ms), C(s), C(m) and C(h).\nCorresponds to the C(--stop-grace-period) option of C(docker service create).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "stop_signal": {
          "aliases": [],
          "description": "Override default signal used to stop the container.\nCorresponds to the C(--stop-signal) option of C(docker service create).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The maximum amount of time in seconds to wait on a response from the API.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TIMEOUT) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "tls": {
          "aliases": [],
          "description": "Secure the connection to the API by using TLS without verifying the authenticity of the Docker host server. Note that if I(validate_certs) is set to C(yes) as well, it will take precedence.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "tls_hostname": {
          "aliases": [],
          "description": "When verifying the authenticity of the Docker Host server, provide the expected name of the server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_HOSTNAME) will be used instead. If the environment variable is not set, the default value will be used.\nThe current default value is C(localhost). This default is deprecated and will change in community.docker 2.0.0 to be a value computed from I(docker_host). Explicitly specify C(localhost) to make sure this value will still be used, and to disable the deprecation message which will be shown otherwise.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tty": {
          "aliases": [],
          "description": "Allocate a pseudo-TTY.\nCorresponds to the C(--tty) option of C(docker service create).\nRequires API version >= 1.25.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "update_config": {
          "aliases": [],
          "description": "Configures how the service should be updated. Useful for configuring rolling updates.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "delay": {
              "aliases": [],
              "description": "Rolling update delay.\nAccepts a string in a format that look like: C(5h34m56s), C(1m30s) etc. The supported units are C(us), C(ms), C(s), C(m) and C(h).\nCorresponds to the C(--update-delay) option of C(docker service create).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "failure_action": {
              "aliases": [],
              "description": "Action to take in case of container failure.\nCorresponds to the C(--update-failure-action) option of C(docker service create).\nUsage of I(rollback) requires API version >= 1.29.",
              "type": "str",
              "required": false,
              "choices": [
                "continue",
                "pause",
                "rollback"
              ],
              "suboptions": {}
            },
            "max_failure_ratio": {
              "aliases": [],
              "description": "Fraction of tasks that may fail during an update before the failure action is invoked.\nCorresponds to the C(--update-max-failure-ratio) option of C(docker service create).\nRequires API version >= 1.25.",
              "type": "float",
              "required": false,
              "suboptions": {}
            },
            "monitor": {
              "aliases": [],
              "description": "Time to monitor updated tasks for failures.\nAccepts a string in a format that look like: C(5h34m56s), C(1m30s) etc. The supported units are C(us), C(ms), C(s), C(m) and C(h).\nCorresponds to the C(--update-monitor) option of C(docker service create).\nRequires API version >= 1.25.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "order": {
              "aliases": [],
              "description": "Specifies the order of operations when rolling out an updated task.\nCorresponds to the C(--update-order) option of C(docker service create).\nRequires API version >= 1.29.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "parallelism": {
              "aliases": [],
              "description": "Rolling update parallelism.\nCorresponds to the C(--update-parallelism) option of C(docker service create).",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "use_ssh_client": {
          "aliases": [],
          "description": "For SSH transports, use the C(ssh) CLI tool instead of paramiko.\nRequires Docker SDK for Python 4.4.0 or newer.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "user": {
          "aliases": [],
          "description": "Sets the username or UID used for the specified command.\nBefore Ansible 2.8, the default value for this option was C(root).\nThe default has been removed so that the user defined in the image is used if no user is specified here.\nCorresponds to the C(--user) option of C(docker service create).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tls_verify"
          ],
          "description": "Secure the connection to the API by using TLS and verifying the authenticity of the Docker host server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_VERIFY) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "working_dir": {
          "aliases": [],
          "description": "Path to the working directory.\nCorresponds to the C(--workdir) option of C(docker service create).",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "Docker API >= 1.24",
        "Docker SDK for Python: Please note that the L(docker-py,https://pypi.org/project/docker-py/) Python module has been superseded by L(docker,https://pypi.org/project/docker/) (see L(here,https://github.com/docker/docker-py/issues/1310) for details). This module does *not* work with docker-py.",
        "L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) >= 2.0.2",
        "Python >= 2.7"
      ],
      "short_description": "docker swarm service"
    },
    "examples": "\n- name: Set command and arguments\n  community.docker.docker_swarm_service:\n    name: myservice\n    image: alpine\n    command: sleep\n    args:\n      - \"3600\"\n\n- name: Set a bind mount\n  community.docker.docker_swarm_service:\n    name: myservice\n    image: alpine\n    mounts:\n      - source: /tmp/\n        target: /remote_tmp/\n        type: bind\n\n- name: Set service labels\n  community.docker.docker_swarm_service:\n    name: myservice\n    image: alpine\n    labels:\n      com.example.description: \"Accounting webapp\"\n      com.example.department: \"Finance\"\n\n- name: Set environment variables\n  community.docker.docker_swarm_service:\n    name: myservice\n    image: alpine\n    env:\n      ENVVAR1: envvar1\n      ENVVAR2: envvar2\n    env_files:\n      - envs/common.env\n      - envs/apps/web.env\n\n- name: Set fluentd logging\n  community.docker.docker_swarm_service:\n    name: myservice\n    image: alpine\n    logging:\n      driver: fluentd\n      options:\n        fluentd-address: \"127.0.0.1:24224\"\n        fluentd-async-connect: \"true\"\n        tag: myservice\n\n- name: Set restart policies\n  community.docker.docker_swarm_service:\n    name: myservice\n    image: alpine\n    restart_config:\n      condition: on-failure\n      delay: 5s\n      max_attempts: 3\n      window: 120s\n\n- name: Set update config\n  community.docker.docker_swarm_service:\n    name: myservice\n    image: alpine\n    update_config:\n      parallelism: 2\n      delay: 10s\n      order: stop-first\n\n- name: Set rollback config\n  community.docker.docker_swarm_service:\n    name: myservice\n    image: alpine\n    update_config:\n      failure_action: rollback\n    rollback_config:\n      parallelism: 2\n      delay: 10s\n      order: stop-first\n\n- name: Set placement preferences\n  community.docker.docker_swarm_service:\n    name: myservice\n    image: alpine:edge\n    placement:\n      preferences:\n        - spread: node.labels.mylabel\n      constraints:\n        - node.role == manager\n        - engine.labels.operatingsystem == ubuntu 14.04\n      replicas_max_per_node: 2\n\n- name: Set configs\n  community.docker.docker_swarm_service:\n    name: myservice\n    image: alpine:edge\n    configs:\n      - config_name: myconfig_name\n        filename: \"/tmp/config.txt\"\n\n- name: Set networks\n  community.docker.docker_swarm_service:\n    name: myservice\n    image: alpine:edge\n    networks:\n      - mynetwork\n\n- name: Set networks as a dictionary\n  community.docker.docker_swarm_service:\n    name: myservice\n    image: alpine:edge\n    networks:\n      - name: \"mynetwork\"\n        aliases:\n          - \"mynetwork_alias\"\n        options:\n          foo: bar\n\n- name: Set secrets\n  community.docker.docker_swarm_service:\n    name: myservice\n    image: alpine:edge\n    secrets:\n      - secret_name: mysecret_name\n        filename: \"/run/secrets/secret.txt\"\n\n- name: Start service with healthcheck\n  community.docker.docker_swarm_service:\n    name: myservice\n    image: nginx:1.13\n    healthcheck:\n      # Check if nginx server is healthy by curl'ing the server.\n      # If this fails or timeouts, the healthcheck fails.\n      test: [\"CMD\", \"curl\", \"--fail\", \"http://nginx.host.com\"]\n      interval: 1m30s\n      timeout: 10s\n      retries: 3\n      start_period: 30s\n\n- name: Configure service resources\n  community.docker.docker_swarm_service:\n    name: myservice\n    image: alpine:edge\n    reservations:\n      cpus: 0.25\n      memory: 20M\n    limits:\n      cpus: 0.50\n      memory: 50M\n\n- name: Remove service\n  community.docker.docker_swarm_service:\n    name: myservice\n    state: absent\n"
  },
  "community.docker.docker_swarm_service_info": {
    "doc": {
      "description": "Retrieves information about a docker service.\nEssentially returns the output of C(docker service inspect <name>).\nMust be executed on a host running as Swarm Manager, otherwise the module will fail.",
      "has_action": false,
      "notes": "Connect to the Docker daemon by providing parameters with each task or by defining environment variables. You can define C(DOCKER_HOST), C(DOCKER_TLS_HOSTNAME), C(DOCKER_API_VERSION), C(DOCKER_CERT_PATH), C(DOCKER_SSL_VERSION), C(DOCKER_TLS), C(DOCKER_TLS_VERIFY) and C(DOCKER_TIMEOUT). If you are using docker machine, run the script shipped with the product that sets up the environment. It will set these variables for you. See U(https://docs.docker.com/machine/reference/env/) for more details.\nWhen connecting to Docker daemon with TLS, you might need to install additional Python packages. For the Docker SDK for Python, version 2.4 or newer, this can be done by installing C(docker[tls]) with M(ansible.builtin.pip).\nNote that the Docker SDK for Python only allows to specify the path to the Docker configuration for very few functions. In general, it will use C($HOME/.docker/config.json) if the C(DOCKER_CONFIG) environment variable is not specified, and use C($DOCKER_CONFIG/config.json) otherwise.\nThis module uses the L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) to communicate with the Docker daemon.",
      "options": {
        "api_version": {
          "aliases": [
            "docker_api_version"
          ],
          "description": "The version of the Docker API running on the Docker Host.\nDefaults to the latest version of the API supported by Docker SDK for Python and the docker daemon.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_API_VERSION) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "auto",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "tls_ca_cert",
            "cacert_path"
          ],
          "description": "Use a CA certificate when performing server verification by providing the path to a CA certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(ca.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "tls_client_cert",
            "cert_path"
          ],
          "description": "Path to the client's TLS certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(cert.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "tls_client_key",
            "key_path"
          ],
          "description": "Path to the client's TLS key file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(key.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "debug": {
          "aliases": [],
          "description": "Debug mode",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "docker_host": {
          "aliases": [
            "docker_url"
          ],
          "description": "The URL or Unix socket path used to connect to the Docker API. To connect to a remote host, provide the TCP connection string. For example, C(tcp://192.0.2.23:2376). If TLS is used to encrypt the connection, the module will automatically replace C(tcp) in the connection URL with C(https).\nIf the value is not specified in the task, the value of environment variable C(DOCKER_HOST) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "unix://var/run/docker.sock",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "The name of the service to inspect.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ssl_version": {
          "aliases": [],
          "description": "Provide a valid SSL version number. Default value determined by ssl.py module.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_SSL_VERSION) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The maximum amount of time in seconds to wait on a response from the API.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TIMEOUT) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "tls": {
          "aliases": [],
          "description": "Secure the connection to the API by using TLS without verifying the authenticity of the Docker host server. Note that if I(validate_certs) is set to C(yes) as well, it will take precedence.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "tls_hostname": {
          "aliases": [],
          "description": "When verifying the authenticity of the Docker Host server, provide the expected name of the server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_HOSTNAME) will be used instead. If the environment variable is not set, the default value will be used.\nThe current default value is C(localhost). This default is deprecated and will change in community.docker 2.0.0 to be a value computed from I(docker_host). Explicitly specify C(localhost) to make sure this value will still be used, and to disable the deprecation message which will be shown otherwise.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "use_ssh_client": {
          "aliases": [],
          "description": "For SSH transports, use the C(ssh) CLI tool instead of paramiko.\nRequires Docker SDK for Python 4.4.0 or newer.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tls_verify"
          ],
          "description": "Secure the connection to the API by using TLS and verifying the authenticity of the Docker host server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_VERIFY) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "Docker API >= 1.24",
        "Docker SDK for Python: Please note that the L(docker-py,https://pypi.org/project/docker-py/) Python module has been superseded by L(docker,https://pypi.org/project/docker/) (see L(here,https://github.com/docker/docker-py/issues/1310) for details). For Python 2.6, C(docker-py) must be used. Otherwise, it is recommended to install the C(docker) Python module. Note that both modules should *not* be installed at the same time. Also note that when both modules are installed and one of them is uninstalled, the other might no longer function and a reinstall of it is required.",
        "L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) >= 2.0.0"
      ],
      "short_description": "Retrieves information about docker services from a Swarm Manager"
    },
    "examples": "\n- name: Get info from a service\n  community.docker.docker_swarm_service_info:\n    name: myservice\n  register: result\n"
  },
  "community.docker.docker_volume": {
    "doc": {
      "description": "Create/remove Docker volumes.\nPerforms largely the same function as the C(docker volume) CLI subcommand.",
      "has_action": false,
      "notes": "Connect to the Docker daemon by providing parameters with each task or by defining environment variables. You can define C(DOCKER_HOST), C(DOCKER_TLS_HOSTNAME), C(DOCKER_API_VERSION), C(DOCKER_CERT_PATH), C(DOCKER_SSL_VERSION), C(DOCKER_TLS), C(DOCKER_TLS_VERIFY) and C(DOCKER_TIMEOUT). If you are using docker machine, run the script shipped with the product that sets up the environment. It will set these variables for you. See U(https://docs.docker.com/machine/reference/env/) for more details.\nWhen connecting to Docker daemon with TLS, you might need to install additional Python packages. For the Docker SDK for Python, version 2.4 or newer, this can be done by installing C(docker[tls]) with M(ansible.builtin.pip).\nNote that the Docker SDK for Python only allows to specify the path to the Docker configuration for very few functions. In general, it will use C($HOME/.docker/config.json) if the C(DOCKER_CONFIG) environment variable is not specified, and use C($DOCKER_CONFIG/config.json) otherwise.\nThis module uses the L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) to communicate with the Docker daemon.",
      "options": {
        "api_version": {
          "aliases": [
            "docker_api_version"
          ],
          "description": "The version of the Docker API running on the Docker Host.\nDefaults to the latest version of the API supported by Docker SDK for Python and the docker daemon.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_API_VERSION) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "auto",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "tls_ca_cert",
            "cacert_path"
          ],
          "description": "Use a CA certificate when performing server verification by providing the path to a CA certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(ca.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "tls_client_cert",
            "cert_path"
          ],
          "description": "Path to the client's TLS certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(cert.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "tls_client_key",
            "key_path"
          ],
          "description": "Path to the client's TLS key file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(key.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "debug": {
          "aliases": [],
          "description": "Debug mode",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "docker_host": {
          "aliases": [
            "docker_url"
          ],
          "description": "The URL or Unix socket path used to connect to the Docker API. To connect to a remote host, provide the TCP connection string. For example, C(tcp://192.0.2.23:2376). If TLS is used to encrypt the connection, the module will automatically replace C(tcp) in the connection URL with C(https).\nIf the value is not specified in the task, the value of environment variable C(DOCKER_HOST) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "unix://var/run/docker.sock",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "driver": {
          "aliases": [],
          "description": "Specify the type of volume. Docker provides the C(local) driver, but 3rd party drivers can also be used.",
          "default": "local",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "driver_options": {
          "aliases": [],
          "description": "Dictionary of volume settings. Consult docker docs for valid options and values: U(https://docs.docker.com/engine/reference/commandline/volume_create/#driver-specific-options).",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "labels": {
          "aliases": [],
          "description": "Dictionary of label key/values to set for the volume",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "recreate": {
          "aliases": [],
          "description": "Controls when a volume will be recreated when I(state) is C(present). Please note that recreating an existing volume will cause B(any data in the existing volume to be lost!) The volume will be deleted and a new volume with the same name will be created.\nThe value C(always) forces the volume to be always recreated.\nThe value C(never) makes sure the volume will not be recreated.\nThe value C(options-changed) makes sure the volume will be recreated if the volume already exist and the driver, driver options or labels differ.",
          "default": "never",
          "type": "str",
          "required": false,
          "choices": [
            "always",
            "never",
            "options-changed"
          ],
          "suboptions": {}
        },
        "ssl_version": {
          "aliases": [],
          "description": "Provide a valid SSL version number. Default value determined by ssl.py module.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_SSL_VERSION) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "C(absent) deletes the volume.\nC(present) creates the volume, if it does not already exist.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The maximum amount of time in seconds to wait on a response from the API.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TIMEOUT) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "tls": {
          "aliases": [],
          "description": "Secure the connection to the API by using TLS without verifying the authenticity of the Docker host server. Note that if I(validate_certs) is set to C(yes) as well, it will take precedence.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "tls_hostname": {
          "aliases": [],
          "description": "When verifying the authenticity of the Docker Host server, provide the expected name of the server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_HOSTNAME) will be used instead. If the environment variable is not set, the default value will be used.\nThe current default value is C(localhost). This default is deprecated and will change in community.docker 2.0.0 to be a value computed from I(docker_host). Explicitly specify C(localhost) to make sure this value will still be used, and to disable the deprecation message which will be shown otherwise.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "use_ssh_client": {
          "aliases": [],
          "description": "For SSH transports, use the C(ssh) CLI tool instead of paramiko.\nRequires Docker SDK for Python 4.4.0 or newer.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tls_verify"
          ],
          "description": "Secure the connection to the API by using TLS and verifying the authenticity of the Docker host server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_VERIFY) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "volume_name": {
          "aliases": [
            "name"
          ],
          "description": "Name of the volume to operate on.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "Docker SDK for Python: Please note that the L(docker-py,https://pypi.org/project/docker-py/) Python module has been superseded by L(docker,https://pypi.org/project/docker/) (see L(here,https://github.com/docker/docker-py/issues/1310) for details). For Python 2.6, C(docker-py) must be used. Otherwise, it is recommended to install the C(docker) Python module. Note that both modules should *not* be installed at the same time. Also note that when both modules are installed and one of them is uninstalled, the other might no longer function and a reinstall of it is required.",
        "L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) >= 1.10.0 (use L(docker-py,https://pypi.org/project/docker-py/) for Python 2.6)",
        "The docker server >= 1.9.0"
      ],
      "short_description": "Manage Docker volumes"
    },
    "examples": "\n- name: Create a volume\n  community.docker.docker_volume:\n    name: volume_one\n\n- name: Remove a volume\n  community.docker.docker_volume:\n    name: volume_one\n    state: absent\n\n- name: Create a volume with options\n  community.docker.docker_volume:\n    name: volume_two\n    driver_options:\n      type: btrfs\n      device: /dev/sda2\n"
  },
  "community.docker.docker_volume_info": {
    "doc": {
      "description": "Performs largely the same function as the C(docker volume inspect) CLI subcommand.",
      "has_action": false,
      "notes": "Connect to the Docker daemon by providing parameters with each task or by defining environment variables. You can define C(DOCKER_HOST), C(DOCKER_TLS_HOSTNAME), C(DOCKER_API_VERSION), C(DOCKER_CERT_PATH), C(DOCKER_SSL_VERSION), C(DOCKER_TLS), C(DOCKER_TLS_VERIFY) and C(DOCKER_TIMEOUT). If you are using docker machine, run the script shipped with the product that sets up the environment. It will set these variables for you. See U(https://docs.docker.com/machine/reference/env/) for more details.\nWhen connecting to Docker daemon with TLS, you might need to install additional Python packages. For the Docker SDK for Python, version 2.4 or newer, this can be done by installing C(docker[tls]) with M(ansible.builtin.pip).\nNote that the Docker SDK for Python only allows to specify the path to the Docker configuration for very few functions. In general, it will use C($HOME/.docker/config.json) if the C(DOCKER_CONFIG) environment variable is not specified, and use C($DOCKER_CONFIG/config.json) otherwise.\nThis module uses the L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) to communicate with the Docker daemon.",
      "options": {
        "api_version": {
          "aliases": [
            "docker_api_version"
          ],
          "description": "The version of the Docker API running on the Docker Host.\nDefaults to the latest version of the API supported by Docker SDK for Python and the docker daemon.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_API_VERSION) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "auto",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ca_cert": {
          "aliases": [
            "tls_ca_cert",
            "cacert_path"
          ],
          "description": "Use a CA certificate when performing server verification by providing the path to a CA certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(ca.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_cert": {
          "aliases": [
            "tls_client_cert",
            "cert_path"
          ],
          "description": "Path to the client's TLS certificate file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(cert.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "client_key": {
          "aliases": [
            "tls_client_key",
            "key_path"
          ],
          "description": "Path to the client's TLS key file.\nIf the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(key.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "debug": {
          "aliases": [],
          "description": "Debug mode",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "docker_host": {
          "aliases": [
            "docker_url"
          ],
          "description": "The URL or Unix socket path used to connect to the Docker API. To connect to a remote host, provide the TCP connection string. For example, C(tcp://192.0.2.23:2376). If TLS is used to encrypt the connection, the module will automatically replace C(tcp) in the connection URL with C(https).\nIf the value is not specified in the task, the value of environment variable C(DOCKER_HOST) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "unix://var/run/docker.sock",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "volume_name"
          ],
          "description": "Name of the volume to inspect.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "ssl_version": {
          "aliases": [],
          "description": "Provide a valid SSL version number. Default value determined by ssl.py module.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_SSL_VERSION) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The maximum amount of time in seconds to wait on a response from the API.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TIMEOUT) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "60",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "tls": {
          "aliases": [],
          "description": "Secure the connection to the API by using TLS without verifying the authenticity of the Docker host server. Note that if I(validate_certs) is set to C(yes) as well, it will take precedence.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "tls_hostname": {
          "aliases": [],
          "description": "When verifying the authenticity of the Docker Host server, provide the expected name of the server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_HOSTNAME) will be used instead. If the environment variable is not set, the default value will be used.\nThe current default value is C(localhost). This default is deprecated and will change in community.docker 2.0.0 to be a value computed from I(docker_host). Explicitly specify C(localhost) to make sure this value will still be used, and to disable the deprecation message which will be shown otherwise.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "use_ssh_client": {
          "aliases": [],
          "description": "For SSH transports, use the C(ssh) CLI tool instead of paramiko.\nRequires Docker SDK for Python 4.4.0 or newer.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "tls_verify"
          ],
          "description": "Secure the connection to the API by using TLS and verifying the authenticity of the Docker host server.\nIf the value is not specified in the task, the value of environment variable C(DOCKER_TLS_VERIFY) will be used instead. If the environment variable is not set, the default value will be used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "Docker API >= 1.21",
        "Docker SDK for Python: Please note that the L(docker-py,https://pypi.org/project/docker-py/) Python module has been superseded by L(docker,https://pypi.org/project/docker/) (see L(here,https://github.com/docker/docker-py/issues/1310) for details). For Python 2.6, C(docker-py) must be used. Otherwise, it is recommended to install the C(docker) Python module. Note that both modules should *not* be installed at the same time. Also note that when both modules are installed and one of them is uninstalled, the other might no longer function and a reinstall of it is required.",
        "L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) >= 1.8.0 (use L(docker-py,https://pypi.org/project/docker-py/) for Python 2.6)"
      ],
      "short_description": "Retrieve facts about Docker volumes"
    },
    "examples": "\n- name: Get infos on volume\n  community.docker.docker_volume_info:\n    name: mydata\n  register: result\n\n- name: Does volume exist?\n  ansible.builtin.debug:\n    msg: \"The volume {{ 'exists' if result.exists else 'does not exist' }}\"\n\n- name: Print information about volume\n  ansible.builtin.debug:\n    var: result.volume\n  when: result.exists\n"
  }
}