{
  "community.vmware.vca_fw": {
    "doc": {
      "description": "Adds or removes firewall rules from a gateway in a vca environment",
      "has_action": false,
      "options": {
        "api_version": {
          "aliases": [],
          "description": "The API version to be used with the vca.",
          "default": "5.7",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fw_rules": {
          "aliases": [],
          "description": "A list of firewall rules to be added to the gateway, Please see examples on valid entries",
          "default": "False",
          "required": true,
          "suboptions": {}
        },
        "gateway_name": {
          "aliases": [],
          "description": "The name of the gateway of the vdc where the rule should be added.",
          "default": "gateway",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "The authentication host to be used when service type is vcd.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "instance_id": {
          "aliases": [],
          "description": "The instance ID in a vchs environment to be used for creating the vapp.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "org": {
          "aliases": [],
          "description": "The org to login to for creating vapp.\nThis option is required when the C(service_type) is I(vdc).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "passwd"
          ],
          "description": "The vca password, if not set the environment variable C(VCA_PASS) is checked for the password.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "service_type": {
          "aliases": [],
          "description": "The type of service we are authenticating against.",
          "default": "vca",
          "type": "str",
          "required": false,
          "choices": [
            "vca",
            "vcd",
            "vchs"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the object should be added or removed.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "user"
          ],
          "description": "The vca username or email address, if not set the environment variable C(VCA_USER) is checked for the username.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify_certs"
          ],
          "description": "If the certificates of the authentication is to be verified.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vdc_name": {
          "aliases": [],
          "description": "The name of the vdc where the gateway is located.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "add remove firewall rules in a gateway  in a vca"
    },
    "examples": "\n\n#Add a set of firewall rules\n\n- hosts: localhost\n  connection: local\n  tasks:\n   - community.vmware.vca_fw:\n       instance_id: 'b15ff1e5-1024-4f55-889f-ea0209726282'\n       vdc_name: 'benz_ansible'\n       fw_rules:\n         - description: \"ben testing\"\n           source_ip: \"Any\"\n           dest_ip: 192.0.2.23\n         - description: \"ben testing 2\"\n           source_ip: 192.0.2.50\n           source_port: \"Any\"\n           dest_port: \"22\"\n           dest_ip: 192.0.2.101\n           is_enable: \"true\"\n           enable_logging: \"false\"\n           protocol: \"Tcp\"\n           policy: \"allow\"\n\n"
  },
  "community.vmware.vca_nat": {
    "doc": {
      "description": "Adds or removes nat rules from a gateway in a vca environment",
      "has_action": false,
      "options": {
        "api_version": {
          "aliases": [],
          "description": "The API version to be used with the vca.",
          "default": "5.7",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "gateway_name": {
          "aliases": [],
          "description": "The name of the gateway of the vdc where the rule should be added.",
          "default": "gateway",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "The authentication host to be used when service type is vcd.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "instance_id": {
          "aliases": [],
          "description": "The instance ID in a vchs environment to be used for creating the vapp.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "nat_rules": {
          "aliases": [],
          "description": "A list of rules to be added to the gateway, Please see examples on valid entries",
          "default": "False",
          "required": true,
          "suboptions": {}
        },
        "org": {
          "aliases": [],
          "description": "The org to login to for creating vapp.\nThis option is required when the C(service_type) is I(vdc).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "passwd"
          ],
          "description": "The vca password, if not set the environment variable C(VCA_PASS) is checked for the password.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "purge_rules": {
          "aliases": [],
          "description": "If set to true, it will delete all rules in the gateway that are not given as parameter to this module.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "service_type": {
          "aliases": [],
          "description": "The type of service we are authenticating against.",
          "default": "vca",
          "type": "str",
          "required": false,
          "choices": [
            "vca",
            "vcd",
            "vchs"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether the object should be added or removed.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "user"
          ],
          "description": "The vca username or email address, if not set the environment variable C(VCA_USER) is checked for the username.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify_certs"
          ],
          "description": "If the certificates of the authentication is to be verified.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vdc_name": {
          "aliases": [],
          "description": "The name of the vdc where the gateway is located.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "add remove nat rules in a gateway  in a vca"
    },
    "examples": "\n\n#An example for a source nat\n\n- hosts: localhost\n  connection: local\n  tasks:\n   - community.vmware.vca_nat:\n       instance_id: 'b15ff1e5-1024-4f55-889f-ea0209726282'\n       vdc_name: 'benz_ansible'\n       state: 'present'\n       nat_rules:\n         - rule_type: SNAT\n           original_ip: 192.0.2.42\n           translated_ip: 203.0.113.23\n\n#example for a DNAT\n- hosts: localhost\n  connection: local\n  tasks:\n   - community.vmware.vca_nat:\n       instance_id: 'b15ff1e5-1024-4f55-889f-ea0209726282'\n       vdc_name: 'benz_ansible'\n       state: 'present'\n       nat_rules:\n         - rule_type: DNAT\n           original_ip: 203.0.113.23\n           original_port: 22\n           translated_ip: 192.0.2.42\n           translated_port: 22\n\n"
  },
  "community.vmware.vca_vapp": {
    "doc": {
      "description": "This module will actively managed vCloud Air vApp instances.  Instances can be created and deleted as well as both deployed and undeployed.",
      "has_action": false,
      "notes": "VMware sold their vCloud Air service in Q2 2017.\nVMware made significant changes to the pyvcloud interface around this time.  The C(vca_vapp) module relies on now deprecated code.\nMileage with C(vca_vapp) may vary as vCloud Director APIs advance.\nA viable alternative maybe U(https://github.com/vmware/ansible-module-vcloud-director)",
      "options": {
        "api_version": {
          "aliases": [],
          "description": "The api version to be used with the vca",
          "default": "5.7",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "gateway_name": {
          "aliases": [],
          "description": "The name of the gateway of the vdc where the rule should be added.",
          "default": "gateway",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "The authentication host to be used when service type  is vcd.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "instance_id": {
          "aliases": [],
          "description": "The instance id in a vchs environment to be used for creating the vapp",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "network_mode": {
          "aliases": [],
          "description": "Configures the mode of the network connection.",
          "default": "pool",
          "required": false,
          "choices": [
            "pool",
            "dhcp",
            "static"
          ],
          "suboptions": {}
        },
        "network_name": {
          "aliases": [],
          "description": "The name of the network that should be attached to the virtual machine in the vApp.  The virtual network specified must already be created in the vCloud Air VDC.  If the I(state) is not 'absent' then the I(network_name) argument must be provided.",
          "required": false,
          "suboptions": {}
        },
        "operation": {
          "aliases": [],
          "description": "Specifies an operation to be performed on the vApp.",
          "default": "noop",
          "required": false,
          "choices": [
            "noop",
            "poweron",
            "poweroff",
            "suspend",
            "shutdown",
            "reboot",
            "reset"
          ],
          "suboptions": {}
        },
        "org": {
          "aliases": [],
          "description": "The org to login to for creating vapp, mostly set when the service_type is vdc.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "passwd"
          ],
          "description": "The vCloud Air password to use during authentication",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "service_type": {
          "aliases": [],
          "description": "The type of service we are authenticating against",
          "default": "vca",
          "type": "str",
          "required": false,
          "choices": [
            "vca",
            "vchs",
            "vcd"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Configures the state of the vApp.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "deployed",
            "undeployed"
          ],
          "suboptions": {}
        },
        "template_name": {
          "aliases": [],
          "description": "The name of the vApp template to use to create the vApp instance.  If the I(state) is not `absent` then the I(template_name) value must be provided.  The I(template_name) must be previously uploaded to the catalog specified by I(catalog_name)",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "user"
          ],
          "description": "The vCloud Air username to use during authentication",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [
            "verify_certs"
          ],
          "description": "If the certificates of the authentication is to be verified.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vapp_name": {
          "aliases": [],
          "description": "The name of the vCloud Air vApp instance",
          "required": true,
          "suboptions": {}
        },
        "vdc_name": {
          "aliases": [],
          "description": "The name of the virtual data center (VDC) where the vm should be created or contains the vAPP.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vm_cpus": {
          "aliases": [],
          "description": "The number of vCPUs to configure for the VM in the vApp.   If the I(vm_name) argument is provided, then this becomes a per VM setting otherwise it is applied to all VMs in the vApp.",
          "required": false,
          "suboptions": {}
        },
        "vm_memory": {
          "aliases": [],
          "description": "The amount of memory in MB to allocate to VMs in the vApp.  If the I(vm_name) argument is provided, then this becomes a per VM setting otherwise it is applied to all VMs in the vApp.",
          "required": false,
          "suboptions": {}
        },
        "vm_name": {
          "aliases": [],
          "description": "The name of the virtual machine instance in the vApp to manage.",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pyvcloud <= 18.2.2"
      ],
      "short_description": "Manages vCloud Air vApp instances."
    },
    "examples": "\n- name: Creates a new vApp in a VCA instance\n  community.vmware.vca_vapp:\n    vapp_name: tower\n    state: present\n    template_name: 'Ubuntu Server 12.04 LTS (amd64 20150127)'\n    vdc_name: VDC1\n    instance_id: '<your instance id here>'\n    username: '<your username here>'\n    password: '<your password here>'\n  delegate_to: localhost\n"
  },
  "community.vmware.vcenter_domain_user_group_info": {
    "doc": {
      "description": "This module can be used to gather information about user or group of a domain.",
      "has_action": false,
      "notes": "All modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "belongs_to_group": {
          "aliases": [],
          "description": "If a group existing, returned contains only users or groups that directly belong to the specified group.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "belongs_to_user": {
          "aliases": [],
          "description": "If a user existing, returned contains only groups that directly contain the specified user.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "The I(domain) to be specified searching.",
          "default": "vsphere.local",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "exact_match": {
          "aliases": [],
          "description": "If I(exact_match) is C(True), it indicates the I(search_string) passed should match a user or group name exactly.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "find_groups": {
          "aliases": [],
          "description": "If I(find_groups) is C(True), domain groups will be included in the result.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "find_users": {
          "aliases": [],
          "description": "If I(find_users) is C(True), domain users will be included in the result.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "search_string": {
          "aliases": [],
          "description": "The I(search_string) is a string to be specified searching.\nSpecify the domain user or group name to be searched.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "PyVmomi"
      ],
      "short_description": "Gather user or group information of a domain",
      "version_added": "1.6.0"
    },
    "examples": "\n- name: Gather all domain user and group of vsphere.local\n  community.vmware.vcenter_domain_user_group_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    validate_certs: false\n    domain: vsphere.local\n    search_string: ''\n  register: gather_all_domain_user_group_result\n\n- name: Gather all domain user and group included the administrator string\n  community.vmware.vcenter_domain_user_group_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    validate_certs: false\n    domain: vsphere.local\n    search_string: administrator\n  register: gather_domain_user_group_result\n\n- name: Gather all domain user of vsphere.local\n  community.vmware.vcenter_domain_user_group_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    validate_certs: false\n    domain: vsphere.local\n    search_string: ''\n    find_users: true\n    find_groups: false\n  register: gather_all_domain_user_result\n\n- name: Gather administrator user by exact match condition\n  community.vmware.vcenter_domain_user_group_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    validate_certs: false\n    domain: vsphere.local\n    search_string: \"vsphere.local\\\\administrator\"\n    exact_match: true\n  register: gather_administrator_user_exact_match_result\n"
  },
  "community.vmware.vcenter_extension": {
    "doc": {
      "description": "This module can be used to register/deregister vCenter Extensions.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "client_type": {
          "aliases": [],
          "description": "Required for C(state=present). Type of client the extension is (win32, .net, linux, etc.).",
          "default": "vsphere-client-serenity",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "company": {
          "aliases": [],
          "description": "Required for C(state=present). The name of the company that makes the extension.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Required for C(state=present). A short description of the extension.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "email": {
          "aliases": [],
          "description": "Required for C(state=present). Administrator email to use for extension.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "extension_key": {
          "aliases": [],
          "description": "The extension key of the extension to install or uninstall.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Required for C(state=present). The name of the extension you are installing.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "server_type": {
          "aliases": [],
          "description": "Required for C(state=present). Type of server being used to install the extension (SOAP, REST, HTTP, etc.).",
          "default": "vsphere-client-serenity",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ssl_thumbprint": {
          "aliases": [],
          "description": "Required for C(state=present). SSL thumbprint of the extension hosting server.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Add or remove vCenter Extension.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "url": {
          "aliases": [],
          "description": "Required for C(state=present). Link to server hosting extension zip file to install.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "version": {
          "aliases": [],
          "description": "The version of the extension you are installing or uninstalling.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "visible": {
          "aliases": [],
          "description": "Show the extension in solution manager inside vCenter.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Register/deregister vCenter Extensions"
    },
    "examples": "\n    - name: Register vCenter Extension\n      community.vmware.vcenter_extension:\n         hostname: \"{{ groups['vcsa'][0] }}\"\n         username: \"{{ vcenter_username }}\"\n         password: \"{{ site_password }}\"\n         extension_key: \"{{ extension_key }}\"\n         version: \"1.0\"\n         company: \"Acme\"\n         name: \"Acme Extension\"\n         description: \"acme management\"\n         email: \"user@example.com\"\n         url: \"https://10.0.0.1/ACME-vSphere-web-plugin-1.0.zip\"\n         ssl_thumbprint: \"{{ ssl_thumbprint }}\"\n         state: present\n      delegate_to: localhost\n      register: register_extension\n\n    - name: Deregister vCenter Extension\n      community.vmware.vcenter_extension:\n         hostname: \"{{ groups['vcsa'][0] }}\"\n         username: \"{{ vcenter_username }}\"\n         password: \"{{ site_password }}\"\n         extension_key: \"{{ extension_key }}\"\n         version: \"1.0\"\n         state: absent\n      delegate_to: localhost\n      register: deregister_extension\n"
  },
  "community.vmware.vcenter_extension_facts": {
    "doc": {
      "description": "This module can be used to gather facts about vCenter extension.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gather facts vCenter extensions"
    },
    "examples": "\n- name: Gather facts about vCenter Extensions\n  community.vmware.vcenter_extension_facts:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n  register: ext_facts\n  delegate_to: localhost\n"
  },
  "community.vmware.vcenter_extension_info": {
    "doc": {
      "description": "This module can be used to gather information about vCenter extension.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gather info vCenter extensions"
    },
    "examples": "\n- name: Gather info about vCenter Extensions\n  community.vmware.vcenter_extension_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n  register: ext_info\n  delegate_to: localhost\n"
  },
  "community.vmware.vcenter_folder": {
    "doc": {
      "description": "This module can be used to create, delete, move and rename folder on then given datacenter.\nThis module is only supported for vCenter.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "datacenter": {
          "aliases": [
            "datacenter_name"
          ],
          "description": "Name of the datacenter.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "folder_name": {
          "aliases": [],
          "description": "Name of folder to be managed.\nThis is case sensitive parameter.\nFolder name should be under 80 characters. This is a VMware restriction.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "folder_type": {
          "aliases": [],
          "description": "This is type of folder.\nIf set to C(vm), then 'VM and Template Folder' is created under datacenter.\nIf set to C(host), then 'Host and Cluster Folder' is created under datacenter.\nIf set to C(datastore), then 'Storage Folder' is created under datacenter.\nIf set to C(network), then 'Network Folder' is created under datacenter.\nThis parameter is required, if C(state) is set to C(present) and parent_folder is absent.\nThis option is ignored, if C(parent_folder) is set.",
          "default": "vm",
          "type": "str",
          "required": false,
          "choices": [
            "datastore",
            "host",
            "network",
            "vm"
          ],
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "parent_folder": {
          "aliases": [],
          "description": "Name of the parent folder under which new folder needs to be created.\nThis is case sensitive parameter.\nIf user wants to create a folder under '/DC0/vm/vm_folder', this value will be 'vm_folder'.\nIf user wants to create a folder under '/DC0/vm/folder1/folder2', this value will be 'folder1/folder2'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of folder.\nIf set to C(present) without parent folder parameter, then folder with C(folder_type) is created.\nIf set to C(present) with parent folder parameter,  then folder in created under parent folder. C(folder_type) is ignored.\nIf set to C(absent), then folder is unregistered and destroyed.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Manage folders on given datacenter"
    },
    "examples": "\n- name: Create a VM folder on given datacenter\n  community.vmware.vcenter_folder:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter_name: datacenter_name\n    folder_name: sample_vm_folder\n    folder_type: vm\n    state: present\n  register: vm_folder_creation_result\n  delegate_to: localhost\n\n- name: Create a datastore folder on given datacenter\n  community.vmware.vcenter_folder:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter_name: datacenter_name\n    folder_name: sample_datastore_folder\n    folder_type: datastore\n    state: present\n  register: datastore_folder_creation_result\n  delegate_to: localhost\n\n- name: Create a sub folder under VM folder on given datacenter\n  community.vmware.vcenter_folder:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter_name: datacenter_name\n    folder_name: sample_sub_folder\n    parent_folder: vm_folder\n    state: present\n  register: sub_folder_creation_result\n  delegate_to: localhost\n\n- name: Delete a VM folder on given datacenter\n  community.vmware.vcenter_folder:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter_name: datacenter_name\n    folder_name: sample_vm_folder\n    folder_type: vm\n    state: absent\n  register: vm_folder_deletion_result\n  delegate_to: localhost\n"
  },
  "community.vmware.vcenter_license": {
    "doc": {
      "description": "Add and delete vCenter, ESXi server license keys.",
      "has_action": false,
      "notes": "This module will also auto-assign the current vCenter to the license key if the product matches the license key, and vCenter us currently assigned an evaluation license only.\nThe evaluation license (00000-00000-00000-00000-00000) is not listed when unused.\nIf C(esxi_hostname) is specified, then will assign the C(license) key to the ESXi host.\nIf C(esxi_hostname) is not specified, then will just register the C(license) key to vCenter inventory without assigning it to an ESXi host.\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster to apply vSAN license.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "datacenter": {
          "aliases": [],
          "description": "The datacenter name to use for the operation.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "The hostname of the ESXi server to which the specified license will be assigned.\nThis parameter is optional.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable supported added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "labels": {
          "aliases": [],
          "description": "The optional labels of the license key to manage in vSphere vCenter.\nThis is dictionary with key/value pair.",
          "default": "{'source': 'ansible'}",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "license": {
          "aliases": [],
          "description": "The license key to manage in vSphere vCenter.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable supported added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable supported added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "version_added": "2.5",
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.",
          "type": "str",
          "required": false,
          "version_added": "2.9",
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "version_added": "2.9",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Whether to add (C(present)) or remove (C(absent)) the license key.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable supported added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable supported added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pyVmomi"
      ],
      "short_description": "Manage VMware vCenter license keys"
    },
    "examples": "\n- name: Add a new vCenter license\n  community.vmware.vcenter_license:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    license: f600d-21ae3-5592b-249e0-cc341\n    state: present\n  delegate_to: localhost\n\n- name: Remove an (unused) vCenter license\n  community.vmware.vcenter_license:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    license: f600d-21ae3-5592b-249e0-cc341\n    state: absent\n  delegate_to: localhost\n\n- name: Add ESXi license and assign to the ESXi host\n  community.vmware.vcenter_license:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n    license: f600d-21ae3-5592b-249e0-dd502\n    state: present\n  delegate_to: localhost\n\n- name: Add vSAN license and assign to the given cluster\n  community.vmware.vcenter_license:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter: '{{ datacenter_name }}'\n    cluster_name: '{{ cluster_name }}'\n    license: f600d-21ae3-5592b-249e0-dd502\n    state: present\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_about_facts": {
    "doc": {
      "description": "This module can be used to gather information about VMware server to which user is trying to connect.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Provides information about VMware server to which user is connecting to"
    },
    "examples": "\n- name: Provide information about vCenter\n  community.vmware.vmware_about_facts:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n  delegate_to: localhost\n  register: vcenter_about_info\n\n- name: Provide information about a standalone ESXi server\n  community.vmware.vmware_about_facts:\n    hostname: '{{ esxi_hostname }}'\n    username: '{{ esxi_username }}'\n    password: '{{ esxi_password }}'\n  delegate_to: localhost\n  register: esxi_about_info\n"
  },
  "community.vmware.vmware_about_info": {
    "doc": {
      "description": "This module can be used to gather information about VMware server to which user is trying to connect.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Provides information about VMware server to which user is connecting to"
    },
    "examples": "\n- name: Provide information about vCenter\n  community.vmware.vmware_about_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n  delegate_to: localhost\n  register: vcenter_about_info\n\n- name: Provide information about a standalone ESXi server\n  community.vmware.vmware_about_info:\n    hostname: '{{ esxi_hostname }}'\n    username: '{{ esxi_username }}'\n    password: '{{ esxi_password }}'\n  delegate_to: localhost\n  register: esxi_about_info\n"
  },
  "community.vmware.vmware_category": {
    "doc": {
      "description": "This module can be used to create / delete / update VMware categories.\nTag feature is introduced in vSphere 6 version, so this module is not supported in the earlier versions of vSphere.\nAll variables and VMware object names are case sensitive.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5",
      "options": {
        "associable_object_types": {
          "aliases": [],
          "description": "List of object types that can be associated with the given category.",
          "type": "list",
          "required": false,
          "choices": [
            "All objects",
            "Cluster",
            "Content Library",
            "Datacenter",
            "Datastore",
            "Datastore Cluster",
            "Distributed Port Group",
            "Distributed Switch",
            "Folder",
            "Host",
            "Library item",
            "Network",
            "Host Network",
            "Opaque Network",
            "Resource Pool",
            "vApp",
            "Virtual Machine"
          ],
          "elements": "str",
          "suboptions": {}
        },
        "category_cardinality": {
          "aliases": [],
          "description": "The category cardinality.\nThis parameter is ignored, when updating existing category.",
          "default": "multiple",
          "type": "str",
          "required": false,
          "choices": [
            "multiple",
            "single"
          ],
          "suboptions": {}
        },
        "category_description": {
          "aliases": [],
          "description": "The category description.\nThis is required only if C(state) is set to C(present).\nThis parameter is ignored, when C(state) is set to C(absent).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "category_name": {
          "aliases": [],
          "description": "The name of category to manage.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "new_category_name": {
          "aliases": [],
          "description": "The new name for an existing category.\nThis value is used while updating an existing category.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "The connection to protocol.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.",
          "type": "str",
          "required": false,
          "version_added": "1.12.0",
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "version_added": "1.12.0",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of category.\nIf set to C(present) and category does not exists, then category is created.\nIf set to C(present) and category exists, then category is updated.\nIf set to C(absent) and category exists, then category is deleted.\nIf set to C(absent) and category does not exists, no action is taken.\nProcess of updating category only allows name, description change.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid.\nSet to C(False) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi",
        "vSphere Automation SDK"
      ],
      "short_description": "Manage VMware categories"
    },
    "examples": "\n- name: Create a category\n  community.vmware.vmware_category:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    category_name: Sample_Cat_0001\n    category_description: Sample Description\n    category_cardinality: 'multiple'\n    state: present\n\n- name: Rename category\n  community.vmware.vmware_category:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    category_name: Sample_Category_0001\n    new_category_name: Sample_Category_0002\n    state: present\n\n- name: Update category description\n  community.vmware.vmware_category:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    category_name: Sample_Category_0001\n    category_description: Some fancy description\n    state: present\n\n- name: Delete category\n  community.vmware.vmware_category:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    category_name: Sample_Category_0002\n    state: absent\n\n- name: Create category with 2 associable object types\n  community.vmware.vmware_category:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    category_name: 'Sample_Category_0003'\n    category_description: 'sample description'\n    associable_object_types:\n    - Datastore\n    - Cluster\n    state: present\n"
  },
  "community.vmware.vmware_category_facts": {
    "doc": {
      "description": "This module can be used to gather facts about VMware tag categories.\nTag feature is introduced in vSphere 6 version, so this module is not supported in earlier versions of vSphere.\nAll variables and VMware object names are case sensitive.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5",
      "options": {
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "The connection to protocol.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.",
          "type": "str",
          "required": false,
          "version_added": "1.12.0",
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "version_added": "1.12.0",
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid.\nSet to C(False) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi",
        "vSphere Automation SDK"
      ],
      "short_description": "Gather facts about VMware tag categories"
    },
    "examples": "\n- name: Gather facts about tag categories\n  community.vmware.vmware_category_facts:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n  delegate_to: localhost\n  register: all_tag_category_facts\n\n- name: Gather category id from given tag category\n  community.vmware.vmware_category_facts:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n  delegate_to: localhost\n  register: tag_category_results\n\n- set_fact:\n    category_id: \"{{ item.category_id }}\"\n  loop: \"{{ tag_category_results.tag_category_facts|json_query(query) }}\"\n  vars:\n    query: \"[?category_name==`Category0001`]\"\n- debug: var=category_id\n\n"
  },
  "community.vmware.vmware_category_info": {
    "doc": {
      "description": "This module can be used to gather information about VMware tag categories.\nTag feature is introduced in vSphere 6 version, so this module is not supported in earlier versions of vSphere.\nAll variables and VMware object names are case sensitive.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5",
      "options": {
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "The connection to protocol.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.",
          "type": "str",
          "required": false,
          "version_added": "1.12.0",
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "version_added": "1.12.0",
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid.\nSet to C(False) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi",
        "vSphere Automation SDK"
      ],
      "short_description": "Gather info about VMware tag categories"
    },
    "examples": "\n- name: Gather info about tag categories\n  community.vmware.vmware_category_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n  delegate_to: localhost\n  register: all_tag_category_info\n\n- name: Gather category id from given tag category\n  community.vmware.vmware_category_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n  delegate_to: localhost\n  register: tag_category_results\n\n- set_fact:\n    category_id: \"{{ item.category_id }}\"\n  loop: \"{{ tag_category_results.tag_category_info|json_query(query) }}\"\n  vars:\n    query: \"[?category_name==`Category0001`]\"\n- debug: var=category_id\n\n"
  },
  "community.vmware.vmware_cfg_backup": {
    "doc": {
      "description": "This module can be used to perform various operations related to backup, restore and reset of ESXi host configuration.",
      "has_action": false,
      "notes": "Tested on ESXi 6.0\nWorks only for ESXi hosts\nFor configuration load or reset, the host will be switched automatically to maintenance mode.\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "dest": {
          "aliases": [],
          "description": "The destination where the ESXi configuration bundle will be saved. The I(dest) can be a folder or a file.\nIf I(dest) is a folder, the backup file will be saved in the folder with the default filename generated from the ESXi server.\nIf I(dest) is a file, the backup file will be saved with that filename. The file extension will always be .tgz.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "Name of ESXi server. This is required only if authentication against a vCenter is done.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "src": {
          "aliases": [],
          "description": "The file containing the ESXi configuration that will be restored.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "If C(saved), the .tgz backup bundle will be saved in I(dest).\nIf C(absent), the host configuration will be reset to default values.\nIf C(loaded), the backup file in I(src) will be loaded to the ESXi host rewriting the hosts settings.",
          "type": "str",
          "required": true,
          "choices": [
            "saved",
            "absent",
            "loaded"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi installed"
      ],
      "short_description": "Backup / Restore / Reset ESXi host configuration"
    },
    "examples": "\n- name: Save the ESXi configuration locally by authenticating directly against the ESXi host\n  community.vmware.vmware_cfg_backup:\n    hostname: '{{ esxi_hostname }}'\n    username: '{{ esxi_username }}'\n    password: '{{ esxi_password }}'\n    state: saved\n    dest: /tmp/\n  delegate_to: localhost\n\n- name: Save the ESXi configuration locally by authenticating against the vCenter and selecting the ESXi host\n  community.vmware.vmware_cfg_backup:\n    hostname: '{{ vcenter_hostname }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n    username: '{{ esxi_username }}'\n    password: '{{ esxi_password }}'\n    state: saved\n    dest: /tmp/\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_cluster": {
    "doc": {
      "description": "Adds or removes VMware vSphere clusters.\nAlthough this module can manage DRS, HA and VSAN related configurations, this functionality is deprecated and will be removed in 2.12.\nTo manage DRS, HA and VSAN related configurations, use the new modules vmware_cluster_drs, vmware_cluster_ha and vmware_cluster_vsan.\nAll values and VMware object names are case sensitive.",
      "has_action": false,
      "notes": "All modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "The name of the cluster to be managed.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "datacenter": {
          "aliases": [
            "datacenter_name"
          ],
          "description": "The name of the datacenter.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "drs_default_vm_behavior": {
          "aliases": [],
          "description": "Specifies the cluster-wide default DRS behavior for virtual machines.\nIf set to C(partiallyAutomated), then vCenter generate recommendations for virtual machine migration and for the placement with a host. vCenter automatically implement placement at power on.\nIf set to C(manual), then vCenter generate recommendations for virtual machine migration and for the placement with a host. vCenter should not implement the recommendations automatically.\nIf set to C(fullyAutomated), then vCenter should automate both the migration of virtual machines and their placement with a host at power on.\nUse C(drs_default_vm_behavior) of M(community.vmware.vmware_cluster_drs) instead.\nDeprecated option, will be removed in version 2.12.",
          "default": "fullyAutomated",
          "type": "str",
          "required": false,
          "choices": [
            "fullyAutomated",
            "manual",
            "partiallyAutomated"
          ],
          "suboptions": {}
        },
        "drs_enable_vm_behavior_overrides": {
          "aliases": [],
          "description": "Determines whether DRS Behavior overrides for individual virtual machines are enabled.\nIf set to C(True), overrides C(drs_default_vm_behavior).\nUse C(drs_enable_vm_behavior_overrides) of M(community.vmware.vmware_cluster_drs) instead.\nDeprecated option, will be removed in version 2.12.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "drs_vmotion_rate": {
          "aliases": [],
          "description": "Threshold for generated ClusterRecommendations.\nUse C(drs_vmotion_rate) of M(community.vmware.vmware_cluster_drs) instead.\nDeprecated option, will be removed in version 2.12.",
          "default": "3",
          "type": "int",
          "required": false,
          "choices": [
            "1",
            "2",
            "3",
            "4",
            "5"
          ],
          "suboptions": {}
        },
        "enable_drs": {
          "aliases": [],
          "description": "If set to C(True), will enable DRS when the cluster is created.\nUse C(enable_drs) of M(community.vmware.vmware_cluster_drs) instead.\nDeprecated option, will be removed in version 2.12.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "enable_ha": {
          "aliases": [],
          "description": "If set to C(True) will enable HA when the cluster is created.\nUse C(enable_ha) of M(community.vmware.vmware_cluster_ha) instead.\nDeprecated option, will be removed in version 2.12.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "enable_vsan": {
          "aliases": [],
          "description": "If set to C(True) will enable vSAN when the cluster is created.\nUse C(enable_vsan) of M(community.vmware.vmware_cluster_vsan) instead.\nDeprecated option, will be removed in version 2.12.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ha_admission_control_enabled": {
          "aliases": [],
          "description": "Determines if strict admission control is enabled.\nIt is recommended to set this parameter to C(True), please refer documentation for more details.\nUse C(slot_based_admission_control), C(reservation_based_admission_control) or C(failover_host_admission_control) of M(community.vmware.vmware_cluster_ha) instead.\nDeprecated option, will be removed in version 2.12.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ha_failover_level": {
          "aliases": [],
          "description": "Number of host failures that should be tolerated, still guaranteeing sufficient resources to restart virtual machines on available hosts.\nAccepts integer values only.\nUse C(slot_based_admission_control), C(reservation_based_admission_control) or C(failover_host_admission_control) of M(community.vmware.vmware_cluster_ha) instead.\nDeprecated option, will be removed in version 2.12.",
          "default": "2",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ha_host_monitoring": {
          "aliases": [],
          "description": "Indicates whether HA restarts virtual machines after a host fails.\nIf set to C(enabled), HA restarts virtual machines after a host fails.\nIf set to C(disabled), HA does not restart virtual machines after a host fails.\nIf C(enable_ha) is set to C(False), then this value is ignored.\nUse C(ha_host_monitoring) of M(community.vmware.vmware_cluster_ha) instead.\nDeprecated option, will be removed in version 2.12.",
          "default": "enabled",
          "type": "str",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "ha_restart_priority": {
          "aliases": [],
          "description": "Determines the preference that HA gives to a virtual machine if sufficient capacity is not available to power on all failed virtual machines.\nThis setting is only valid if C(ha_vm_monitoring) is set to, either C(vmAndAppMonitoring) or C(vmMonitoringOnly).\nIf set to C(disabled), then HA is disabled for this virtual machine.\nIf set to C(high), then virtual machine with this priority have a higher chance of powering on after a failure, when there is insufficient capacity on hosts to meet all virtual machine needs.\nIf set to C(medium), then virtual machine with this priority have an intermediate chance of powering on after a failure, when there is insufficient capacity on hosts to meet all virtual machine needs.\nIf set to C(low), then virtual machine with this priority have a lower chance of powering on after a failure, when there is insufficient capacity on hosts to meet all virtual machine needs.\nUse C(ha_restart_priority) of M(community.vmware.vmware_cluster_ha) instead.\nDeprecated option, will be removed in version 2.12.",
          "default": "medium",
          "type": "str",
          "required": false,
          "choices": [
            "disabled",
            "high",
            "low",
            "medium"
          ],
          "suboptions": {}
        },
        "ha_vm_failure_interval": {
          "aliases": [],
          "description": "The number of seconds after which virtual machine is declared as failed if no heartbeat has been received.\nThis setting is only valid if C(ha_vm_monitoring) is set to, either C(vmAndAppMonitoring) or C(vmMonitoringOnly).\nUnit is seconds.\nUse C(ha_vm_failure_interval) of M(community.vmware.vmware_cluster_ha) instead.\nDeprecated option, will be removed in version 2.12.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ha_vm_max_failure_window": {
          "aliases": [],
          "description": "The number of seconds for the window during which up to C(ha_vm_max_failures) resets can occur before automated responses stop.\nThis setting is only valid if C(ha_vm_monitoring) is set to, either C(vmAndAppMonitoring) or C(vmMonitoringOnly).\nUnit is seconds.\nDefault specifies no failure window.\nUse C(ha_vm_max_failure_window) of M(community.vmware.vmware_cluster_ha) instead.\nDeprecated option, will be removed in version 2.12.",
          "default": "-1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ha_vm_max_failures": {
          "aliases": [],
          "description": "Maximum number of failures and automated resets allowed during the time that C(ha_vm_max_failure_window) specifies.\nThis setting is only valid if C(ha_vm_monitoring) is set to, either C(vmAndAppMonitoring) or C(vmMonitoringOnly).\nUse C(ha_vm_max_failures) of M(community.vmware.vmware_cluster_ha) instead.\nDeprecated option, will be removed in version 2.12.",
          "default": "3",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ha_vm_min_up_time": {
          "aliases": [],
          "description": "The number of seconds for the virtual machine's heartbeats to stabilize after the virtual machine has been powered on.\nThis setting is only valid if C(ha_vm_monitoring) is set to, either C(vmAndAppMonitoring) or C(vmMonitoringOnly).\nUnit is seconds.\nUse C(ha_vm_min_up_time) of M(community.vmware.vmware_cluster_ha) instead.\nDeprecated option, will be removed in version 2.12.",
          "default": "120",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ha_vm_monitoring": {
          "aliases": [],
          "description": "Indicates the state of virtual machine health monitoring service.\nIf set to C(vmAndAppMonitoring), HA response to both virtual machine and application heartbeat failure.\nIf set to C(vmMonitoringDisabled), virtual machine health monitoring is disabled.\nIf set to C(vmMonitoringOnly), HA response to virtual machine heartbeat failure.\nIf C(enable_ha) is set to C(False), then this value is ignored.\nUse C(ha_vm_monitoring) of M(community.vmware.vmware_cluster_ha) instead.\nDeprecated option, will be removed in version 2.12.",
          "default": "vmMonitoringDisabled",
          "type": "str",
          "required": false,
          "choices": [
            "vmAndAppMonitoring",
            "vmMonitoringOnly",
            "vmMonitoringDisabled"
          ],
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ignore_drs": {
          "aliases": [],
          "description": "If set to C(True), DRS will not be configured; all explicit and default DRS related configurations will be ignored.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ignore_ha": {
          "aliases": [],
          "description": "If set to C(True), HA will not be configured; all explicit and default HA related configurations will be ignored.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "ignore_vsan": {
          "aliases": [],
          "description": "If set to C(True), VSAN will not be configured; all explicit and default VSAN related configurations will be ignored.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Create C(present) or remove C(absent) a VMware vSphere cluster.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vsan_auto_claim_storage": {
          "aliases": [],
          "description": "Determines whether the VSAN service is configured to automatically claim local storage on VSAN-enabled hosts in the cluster.\nUse C(vsan_auto_claim_storage) of M(community.vmware.vmware_cluster_vsan) instead.\nDeprecated option, will be removed in version 2.12.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "Tested on ESXi 5.5 and 6.5.",
        "PyVmomi installed."
      ],
      "short_description": "Manage VMware vSphere clusters"
    },
    "examples": "\n- name: Create Cluster\n  community.vmware.vmware_cluster:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter_name: datacenter\n    cluster_name: cluster\n    enable_ha: true\n    enable_drs: true\n    enable_vsan: true\n  delegate_to: localhost\n\n- name: Create Cluster with additional changes\n  community.vmware.vmware_cluster:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter_name: DC0\n    cluster_name: \"{{ cluster_name }}\"\n    enable_ha: True\n    ha_vm_monitoring: vmMonitoringOnly\n    enable_drs: True\n    drs_default_vm_behavior: partiallyAutomated\n    enable_vsan: True\n  register: cl_result\n  delegate_to: localhost\n\n- name: Delete Cluster\n  community.vmware.vmware_cluster:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter_name: datacenter\n    cluster_name: cluster\n    enable_ha: true\n    enable_drs: true\n    enable_vsan: true\n    state: absent\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_cluster_drs": {
    "doc": {
      "description": "Manages DRS on VMware vSphere clusters.\nAll values and VMware object names are case sensitive.",
      "has_action": false,
      "notes": "All modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "advanced_settings": {
          "aliases": [],
          "description": "A dictionary of advanced DRS settings.",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "cluster_name": {
          "aliases": [],
          "description": "The name of the cluster to be managed.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "datacenter": {
          "aliases": [
            "datacenter_name"
          ],
          "description": "The name of the datacenter.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "drs_default_vm_behavior": {
          "aliases": [],
          "description": "Specifies the cluster-wide default DRS behavior for virtual machines.\nIf set to C(partiallyAutomated), vCenter generates recommendations for virtual machine migration and for the placement with a host, then automatically implements placement recommendations at power on.\nIf set to C(manual), then vCenter generates recommendations for virtual machine migration and for the placement with a host, but does not implement the recommendations automatically.\nIf set to C(fullyAutomated), then vCenter automates both the migration of virtual machines and their placement with a host at power on.",
          "default": "fullyAutomated",
          "type": "str",
          "required": false,
          "choices": [
            "fullyAutomated",
            "manual",
            "partiallyAutomated"
          ],
          "suboptions": {}
        },
        "drs_enable_vm_behavior_overrides": {
          "aliases": [],
          "description": "Whether DRS Behavior overrides for individual virtual machines are enabled.\nIf set to C(True), overrides C(drs_default_vm_behavior).",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "drs_vmotion_rate": {
          "aliases": [],
          "description": "Threshold for generated ClusterRecommendations.",
          "default": "3",
          "type": "int",
          "required": false,
          "choices": [
            "1",
            "2",
            "3",
            "4",
            "5"
          ],
          "suboptions": {}
        },
        "enable": {
          "aliases": [
            "enable_drs"
          ],
          "description": "Whether to enable DRS.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "Tested on ESXi 5.5 and 6.5.",
        "PyVmomi installed."
      ],
      "short_description": "Manage Distributed Resource Scheduler (DRS) on VMware vSphere clusters"
    },
    "examples": "\n- name: Enable DRS\n  community.vmware.vmware_cluster_drs:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter_name: datacenter\n    cluster_name: cluster\n    enable: true\n  delegate_to: localhost\n\n- name: Enable DRS and distribute a more even number of virtual machines across hosts for availability\n  community.vmware.vmware_cluster_drs:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter_name: datacenter\n    cluster_name: cluster\n    enable: true\n    advanced_settings:\n      'TryBalanceVmsPerHost': '1'\n  delegate_to: localhost\n\n- name: Enable DRS and set default VM behavior to partially automated\n  community.vmware.vmware_cluster_drs:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter_name: DC0\n    cluster_name: \"{{ cluster_name }}\"\n    enable: True\n    drs_default_vm_behavior: partiallyAutomated\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_cluster_facts": {
    "doc": {
      "description": "This module can be used to gather information about clusters in VMWare infrastructure.\nAll values and VMware object names are case sensitive.\nThis module was called C(vmware_cluster_facts) before Ansible 2.9. The usage did not change.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5, 6.7\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster.\nIf set, information of this cluster will be returned.\nThis parameter is required, if C(datacenter) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "datacenter": {
          "aliases": [],
          "description": "Datacenter to search for cluster/s.\nThis parameter is required, if C(cluster_name) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "properties": {
          "aliases": [],
          "description": "Specify the properties to retrieve.\nExample:\n   properties: [\n      \"name\",\n      \"configuration.dasConfig.enabled\",\n      \"summary.totalCpu\"\n   ]\nOnly valid when C(schema) is C(vsphere).",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "1.0.0",
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "schema": {
          "aliases": [],
          "description": "Specify the output schema desired.\nThe 'summary' output schema is the legacy output from the module.\nThe 'vsphere' output schema is the vSphere API class definition which requires pyvmomi>6.7.1.",
          "default": "summary",
          "type": "str",
          "required": false,
          "choices": [
            "summary",
            "vsphere"
          ],
          "version_added": "1.0.0",
          "suboptions": {}
        },
        "show_tag": {
          "aliases": [],
          "description": "Tags related to cluster are shown if set to C(True).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gather info about clusters available in given vCenter"
    },
    "examples": "\n- name: Gather cluster info from given datacenter\n  community.vmware.vmware_cluster_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter: ha-datacenter\n  delegate_to: localhost\n  register: cluster_info\n\n- name: Gather info from datacenter about specific cluster\n  community.vmware.vmware_cluster_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: DC0_C0\n  delegate_to: localhost\n  register: cluster_info\n\n- name: Gather info from datacenter about specific cluster with tags\n  community.vmware.vmware_cluster_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: DC0_C0\n    show_tag: True\n  delegate_to: localhost\n  register: cluster_info\n\n- name: Gather some info from a cluster using the vSphere API output schema\n  vmware_cluster_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: DC0_C0\n    schema: vsphere\n    properties:\n      - name\n      - configuration.dasConfig.enabled\n      - summary.totalCpu\n  delegate_to: localhost\n  register: cluster_info\n"
  },
  "community.vmware.vmware_cluster_ha": {
    "doc": {
      "description": "Manages HA configuration on VMware vSphere clusters.\nAll values and VMware object names are case sensitive.",
      "has_action": false,
      "notes": "All modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "advanced_settings": {
          "aliases": [],
          "description": "A dictionary of advanced HA settings.",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "apd_response": {
          "aliases": [],
          "description": "VM storage protection setting for storage failures categorized as All Paths Down (APD).",
          "default": "warning",
          "type": "str",
          "required": false,
          "choices": [
            "disabled",
            "warning",
            "restartConservative",
            "restartAggressive"
          ],
          "version_added": "1.4.0",
          "suboptions": {}
        },
        "cluster_name": {
          "aliases": [],
          "description": "The name of the cluster to be managed.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "datacenter": {
          "aliases": [
            "datacenter_name"
          ],
          "description": "The name of the datacenter.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "enable": {
          "aliases": [
            "enable_ha"
          ],
          "description": "Whether to enable HA.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "failover_host_admission_control": {
          "aliases": [],
          "description": "Configure dedicated failover hosts.\nC(slot_based_admission_control), C(reservation_based_admission_control) and C(failover_host_admission_control) are mutually exclusive.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "failover_hosts": {
              "aliases": [],
              "description": "List of dedicated failover hosts.",
              "type": "list",
              "required": true,
              "elements": "str",
              "suboptions": {}
            }
          }
        },
        "ha_host_monitoring": {
          "aliases": [],
          "description": "Whether HA restarts virtual machines after a host fails.\nIf set to C(enabled), HA restarts virtual machines after a host fails.\nIf set to C(disabled), HA does not restart virtual machines after a host fails.\nIf C(enable) is set to C(False), then this value is ignored.",
          "default": "enabled",
          "type": "str",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "ha_restart_priority": {
          "aliases": [],
          "description": "Priority HA gives to a virtual machine if sufficient capacity is not available to power on all failed virtual machines.\nValid only if I(ha_vm_monitoring) is set to either C(vmAndAppMonitoring) or C(vmMonitoringOnly).\nIf set to C(disabled), then HA is disabled for this virtual machine.\nIf set to C(high), then virtual machine with this priority have a higher chance of powering on after a failure, when there is insufficient capacity on hosts to meet all virtual machine needs.\nIf set to C(medium), then virtual machine with this priority have an intermediate chance of powering on after a failure, when there is insufficient capacity on hosts to meet all virtual machine needs.\nIf set to C(low), then virtual machine with this priority have a lower chance of powering on after a failure, when there is insufficient capacity on hosts to meet all virtual machine needs.",
          "default": "medium",
          "type": "str",
          "required": false,
          "choices": [
            "disabled",
            "high",
            "low",
            "medium"
          ],
          "suboptions": {}
        },
        "ha_vm_failure_interval": {
          "aliases": [],
          "description": "The number of seconds after which virtual machine is declared as failed if no heartbeat has been received.\nThis setting is only valid if C(ha_vm_monitoring) is set to, either C(vmAndAppMonitoring) or C(vmMonitoringOnly).\nUnit is seconds.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ha_vm_max_failure_window": {
          "aliases": [],
          "description": "The number of seconds for the window during which up to C(ha_vm_max_failures) resets can occur before automated responses stop.\nValid only when I(ha_vm_monitoring) is set to either C(vmAndAppMonitoring) or C(vmMonitoringOnly).\nUnit is seconds.\nDefault specifies no failure window.",
          "default": "-1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ha_vm_max_failures": {
          "aliases": [],
          "description": "Maximum number of failures and automated resets allowed during the time that C(ha_vm_max_failure_window) specifies.\nValid only when I(ha_vm_monitoring) is set to either C(vmAndAppMonitoring) or C(vmMonitoringOnly).",
          "default": "3",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ha_vm_min_up_time": {
          "aliases": [],
          "description": "The number of seconds for the virtual machine's heartbeats to stabilize after the virtual machine has been powered on.\nValid only when I(ha_vm_monitoring) is set to either C(vmAndAppMonitoring) or C(vmMonitoringOnly).\nUnit is seconds.",
          "default": "120",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "ha_vm_monitoring": {
          "aliases": [],
          "description": "State of virtual machine health monitoring service.\nIf set to C(vmAndAppMonitoring), HA response to both virtual machine and application heartbeat failure.\nIf set to C(vmMonitoringDisabled), virtual machine health monitoring is disabled.\nIf set to C(vmMonitoringOnly), HA response to virtual machine heartbeat failure.\nIf C(enable) is set to C(False), then this value is ignored.",
          "default": "vmMonitoringDisabled",
          "type": "str",
          "required": false,
          "choices": [
            "vmAndAppMonitoring",
            "vmMonitoringOnly",
            "vmMonitoringDisabled"
          ],
          "suboptions": {}
        },
        "host_isolation_response": {
          "aliases": [],
          "description": "Indicates whether or VMs should be powered off if a host determines that it is isolated from the rest of the compute resource.\nIf set to C(none), do not power off VMs in the event of a host network isolation.\nIf set to C(powerOff), power off VMs in the event of a host network isolation.\nIf set to C(shutdown), shut down VMs guest operating system in the event of a host network isolation.",
          "default": "none",
          "type": "str",
          "required": false,
          "choices": [
            "none",
            "powerOff",
            "shutdown"
          ],
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "pdl_response": {
          "aliases": [],
          "description": "VM storage protection setting for storage failures categorized as Permenant Device Loss (PDL).",
          "default": "warning",
          "type": "str",
          "required": false,
          "choices": [
            "disabled",
            "warning",
            "restartAggressive"
          ],
          "version_added": "1.4.0",
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "reservation_based_admission_control": {
          "aliases": [],
          "description": "Configure reservation based admission control policy.\nC(slot_based_admission_control), C(reservation_based_admission_control) and C(failover_host_admission_control) are mutually exclusive.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "auto_compute_percentages": {
              "aliases": [],
              "description": "By default, C(failover_level) is used to calculate C(cpu_failover_resources_percent) and C(memory_failover_resources_percent). If a user wants to override the percentage values, he has to set this field to false.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "cpu_failover_resources_percent": {
              "aliases": [],
              "description": "Percentage of CPU resources in the cluster to reserve for failover. Ignored if C(auto_compute_percentages) is not set to false.",
              "default": "50",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "failover_level": {
              "aliases": [],
              "description": "Number of host failures that should be tolerated.",
              "type": "int",
              "required": true,
              "suboptions": {}
            },
            "memory_failover_resources_percent": {
              "aliases": [],
              "description": "Percentage of memory resources in the cluster to reserve for failover. Ignored if C(auto_compute_percentages) is not set to false.",
              "default": "50",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "slot_based_admission_control": {
          "aliases": [],
          "description": "Configure slot based admission control policy.\nC(slot_based_admission_control), C(reservation_based_admission_control) and C(failover_host_admission_control) are mutually exclusive.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "failover_level": {
              "aliases": [],
              "description": "Number of host failures that should be tolerated.",
              "type": "int",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "Tested on ESXi 5.5 and 6.5.",
        "PyVmomi installed."
      ],
      "short_description": "Manage High Availability (HA) on VMware vSphere clusters"
    },
    "examples": "\n- name: Enable HA without admission control\n  community.vmware.vmware_cluster_ha:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter_name: datacenter\n    cluster_name: cluster\n    enable: true\n  delegate_to: localhost\n\n- name: Enable HA and VM monitoring without admission control\n  community.vmware.vmware_cluster_ha:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter_name: DC0\n    cluster_name: \"{{ cluster_name }}\"\n    enable: True\n    ha_vm_monitoring: vmMonitoringOnly\n  delegate_to: localhost\n\n- name: Enable HA with admission control reserving 50% of resources for HA\n  community.vmware.vmware_cluster_ha:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter_name: datacenter\n    cluster_name: cluster\n    enable: true\n    reservation_based_admission_control:\n      auto_compute_percentages: False\n      failover_level: 1\n      cpu_failover_resources_percent: 50\n      memory_failover_resources_percent: 50\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_cluster_info": {
    "doc": {
      "description": "This module can be used to gather information about clusters in VMWare infrastructure.\nAll values and VMware object names are case sensitive.\nThis module was called C(vmware_cluster_facts) before Ansible 2.9. The usage did not change.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5, 6.7\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster.\nIf set, information of this cluster will be returned.\nThis parameter is required, if C(datacenter) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "datacenter": {
          "aliases": [],
          "description": "Datacenter to search for cluster/s.\nThis parameter is required, if C(cluster_name) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "properties": {
          "aliases": [],
          "description": "Specify the properties to retrieve.\nExample:\n   properties: [\n      \"name\",\n      \"configuration.dasConfig.enabled\",\n      \"summary.totalCpu\"\n   ]\nOnly valid when C(schema) is C(vsphere).",
          "type": "list",
          "required": false,
          "elements": "str",
          "version_added": "1.0.0",
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "schema": {
          "aliases": [],
          "description": "Specify the output schema desired.\nThe 'summary' output schema is the legacy output from the module.\nThe 'vsphere' output schema is the vSphere API class definition which requires pyvmomi>6.7.1.",
          "default": "summary",
          "type": "str",
          "required": false,
          "choices": [
            "summary",
            "vsphere"
          ],
          "version_added": "1.0.0",
          "suboptions": {}
        },
        "show_tag": {
          "aliases": [],
          "description": "Tags related to cluster are shown if set to C(True).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gather info about clusters available in given vCenter"
    },
    "examples": "\n- name: Gather cluster info from given datacenter\n  community.vmware.vmware_cluster_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter: ha-datacenter\n  delegate_to: localhost\n  register: cluster_info\n\n- name: Gather info from datacenter about specific cluster\n  community.vmware.vmware_cluster_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: DC0_C0\n  delegate_to: localhost\n  register: cluster_info\n\n- name: Gather info from datacenter about specific cluster with tags\n  community.vmware.vmware_cluster_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: DC0_C0\n    show_tag: True\n  delegate_to: localhost\n  register: cluster_info\n\n- name: Gather some info from a cluster using the vSphere API output schema\n  vmware_cluster_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: DC0_C0\n    schema: vsphere\n    properties:\n      - name\n      - configuration.dasConfig.enabled\n      - summary.totalCpu\n  delegate_to: localhost\n  register: cluster_info\n"
  },
  "community.vmware.vmware_cluster_vsan": {
    "doc": {
      "description": "Manages vSAN on VMware vSphere clusters.\nAll values and VMware object names are case sensitive.",
      "has_action": false,
      "notes": "All modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "advanced_options": {
          "aliases": [],
          "description": "Advanced VSAN Options.",
          "type": "dict",
          "required": false,
          "version_added": "1.1.0",
          "suboptions": {
            "automatic_rebalance": {
              "aliases": [],
              "description": "If enabled, vSAN automatically rebalances (moves the data among disks) when a capacity disk fullness hits proactive rebalance threshold.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "disable_site_read_locality": {
              "aliases": [],
              "description": "For vSAN stretched clusters, reads to vSAN objects occur on the site the VM resides on.\nSetting to C(True) will force reads across all mirrors.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "large_cluster_support": {
              "aliases": [],
              "description": "Allow > 32 VSAN hosts per cluster; if this is changed on an existing vSAN cluster, all hosts are required to reboot to apply this change.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "object_repair_timer": {
              "aliases": [],
              "description": "Delay time in minutes for VSAN to wait for the absent component to come back before starting to repair it.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "thin_swap": {
              "aliases": [],
              "description": "When C(enabled), swap objects would not reserve 100% space of their size on vSAN datastore.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "cluster_name": {
          "aliases": [],
          "description": "The name of the cluster to be managed.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "datacenter": {
          "aliases": [
            "datacenter_name"
          ],
          "description": "The name of the datacenter.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "enable": {
          "aliases": [
            "enable_vsan"
          ],
          "description": "Whether to enable vSAN.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vsan_auto_claim_storage": {
          "aliases": [],
          "description": "Whether the VSAN service is configured to automatically claim local storage on VSAN-enabled hosts in the cluster.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "Tested on ESXi 6.7.",
        "PyVmomi installed.",
        "vSAN Management SDK, which needs to be downloaded from VMware and installed manually."
      ],
      "short_description": "Manages virtual storage area network (vSAN) configuration on VMware vSphere clusters"
    },
    "examples": "\n- name: Enable vSAN\n  community.vmware.vmware_cluster_vsan:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter_name: datacenter\n    cluster_name: cluster\n    enable: true\n  delegate_to: localhost\n\n- name: Enable vSAN and automatic rebalancing\n  community.vmware.vmware_cluster_vsan:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter_name: datacenter\n    cluster_name: cluster\n    enable: true\n    advanced_options:\n      automatic_rebalance: True\n  delegate_to: localhost\n\n- name: Enable vSAN and claim storage automatically\n  community.vmware.vmware_cluster_vsan:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter_name: DC0\n    cluster_name: \"{{ cluster_name }}\"\n    enable: True\n    vsan_auto_claim_storage: True\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_content_deploy_ovf_template": {
    "doc": {
      "description": "Module to deploy virtual machine from ovf template in content library.\nAll variables and VMware object names are case sensitive.",
      "has_action": false,
      "notes": "Tested on vSphere 6.7",
      "options": {
        "cluster": {
          "aliases": [],
          "description": "Name of the cluster in datacenter in which to place deployed VM.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "datacenter": {
          "aliases": [],
          "description": "Name of the datacenter, where VM to be deployed.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "datastore": {
          "aliases": [],
          "description": "Name of the datastore to store deployed VM and disk.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "datastore_cluster": {
          "aliases": [],
          "description": "Name of the datastore cluster housing a datastore to store deployed VM and disk.\nIf datastore is not specified, the recommended datastore from this cluster will be used.",
          "type": "str",
          "required": false,
          "version_added": "1.9.0",
          "suboptions": {}
        },
        "folder": {
          "aliases": [],
          "description": "Name of the folder in datacenter in which to place deployed VM.",
          "default": "vm",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Name of the ESX Host in datacenter in which to place deployed VM. The host has to be a member of the cluster that contains the resource pool.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "library": {
          "aliases": [
            "content_library",
            "content_library_src"
          ],
          "description": "The name of the content library from where the template resides.",
          "type": "str",
          "required": false,
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "log_level": {
          "aliases": [],
          "description": "The level of logging desired in this module.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "info",
            "normal"
          ],
          "version_added": "1.12.0",
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "vm_name"
          ],
          "description": "The name of the VM to be deployed.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "The connection to protocol.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.",
          "type": "str",
          "required": false,
          "version_added": "1.12.0",
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "version_added": "1.12.0",
          "suboptions": {}
        },
        "resource_pool": {
          "aliases": [],
          "description": "Name of the resourcepool in datacenter in which to place deployed VM.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "storage_provisioning": {
          "aliases": [],
          "description": "Default storage provisioning type to use for all sections of type vmw:StorageSection in the OVF descriptor.",
          "default": "thin",
          "type": "str",
          "required": false,
          "choices": [
            "thin",
            "thick",
            "eagerZeroedThick",
            "eagerzeroedthick"
          ],
          "suboptions": {}
        },
        "template": {
          "aliases": [
            "ovf",
            "ovf_template",
            "template_src"
          ],
          "description": "The name of OVF template from which VM to be deployed.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid.\nSet to C(False) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi",
        "vSphere Automation SDK"
      ],
      "short_description": "Deploy Virtual Machine from ovf template stored in content library."
    },
    "examples": "\n- name: Deploy Virtual Machine from OVF template in content library\n  community.vmware.vmware_content_deploy_ovf_template:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    ovf_template: rhel_test_template\n    datastore: Shared_NFS_Volume\n    folder: vm\n    datacenter: Sample_DC_1\n    name: Sample_VM\n    resource_pool: test_rp\n  delegate_to: localhost\n\n- name: Deploy Virtual Machine from OVF template in content library with eagerZeroedThick storage\n  vmware_content_deploy_ovf_template:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    ovf_template: rhel_test_template\n    datastore: Shared_NFS_Volume\n    folder: vm\n    datacenter: Sample_DC_1\n    name: Sample_VM\n    resource_pool: test_rp\n    storage_provisioning: eagerZeroedThick\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_content_deploy_template": {
    "doc": {
      "description": "Module to deploy virtual machine from template in content library.\nContent Library feature is introduced in vSphere 6.0 version.\nvmtx templates feature is introduced in vSphere 67U1 and APIs for clone template from content library in 67U2.\nThis module does not work with vSphere version older than 67U2.\nAll variables and VMware object names are case sensitive.",
      "has_action": false,
      "notes": "Tested on vSphere 6.7 U3",
      "options": {
        "cluster": {
          "aliases": [],
          "description": "Name of the cluster in datacenter in which to place deployed VM.\nRequired if I(resource_pool) is not specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "datacenter": {
          "aliases": [],
          "description": "Name of the datacenter, where VM to be deployed.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "datastore": {
          "aliases": [],
          "description": "Name of the datastore to store deployed VM and disk.\nRequired if I(datastore_cluster) is not provided.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "datastore_cluster": {
          "aliases": [],
          "description": "Name of the datastore cluster to store deployed VM and disk.\nPlease make sure Storage DRS is active for recommended datastore from the given datastore cluster.\nIf Storage DRS is not enabled, datastore with largest free storage space is selected.\nRequired if I(datastore) is not provided.",
          "type": "str",
          "required": false,
          "version_added": "1.7.0",
          "suboptions": {}
        },
        "folder": {
          "aliases": [],
          "description": "Name of the folder in datacenter in which to place deployed VM.",
          "default": "vm",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host": {
          "aliases": [],
          "description": "Name of the ESX Host in datacenter in which to place deployed VM.\nThe host has to be a member of the cluster that contains the resource pool.\nRequired with I(resource_pool) to find resource pool details. This will be used as additional information when there are resource pools with same name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "library": {
          "aliases": [
            "content_library",
            "content_library_src"
          ],
          "description": "The name of the content library from where the template resides.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "log_level": {
          "aliases": [],
          "description": "The level of logging desired in this module.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "info",
            "normal"
          ],
          "version_added": "1.9.0",
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "vm_name"
          ],
          "description": "The name of the VM to be deployed.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "The connection to protocol.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.",
          "type": "str",
          "required": false,
          "version_added": "1.12.0",
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "version_added": "1.12.0",
          "suboptions": {}
        },
        "resource_pool": {
          "aliases": [],
          "description": "Name of the resource pool in datacenter in which to place deployed VM.\nRequired if I(cluster) is not specified.\nFor default or non-unique resource pool names, specify I(host) and I(cluster).\nC(Resources) is the default name of resource pool.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of Virtual Machine deployed from template in content library.\nIf set to C(present) and VM does not exists, then VM is created.\nIf set to C(present) and VM exists, no action is taken.\nIf set to C(poweredon) and VM does not exists, then VM is created with powered on state.\nIf set to C(poweredon) and VM exists, no action is taken.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "poweredon"
          ],
          "suboptions": {}
        },
        "template": {
          "aliases": [
            "template_src"
          ],
          "description": "The name of template from which VM to be deployed.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid.\nSet to C(False) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi",
        "vSphere Automation SDK"
      ],
      "short_description": "Deploy Virtual Machine from template stored in content library."
    },
    "examples": "\n- name: Deploy Virtual Machine from template in content library\n  community.vmware.vmware_content_deploy_template:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    template: rhel_test_template\n    datastore: Shared_NFS_Volume\n    folder: vm\n    datacenter: Sample_DC_1\n    name: Sample_VM\n    resource_pool: test_rp\n    state: present\n  delegate_to: localhost\n\n- name: Deploy Virtual Machine from template in content library with PowerON State\n  community.vmware.vmware_content_deploy_template:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    template: rhel_test_template\n    content_library: test_content_library\n    datastore: Shared_NFS_Volume\n    folder: vm\n    datacenter: Sample_DC_1\n    name: Sample_VM\n    resource_pool: test_rp\n    state: poweredon\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_content_library_info": {
    "doc": {
      "description": "Module to list the content libraries.\nModule to get information about specific content library.\nContent Library feature is introduced in vSphere 6.0 version, so this module is not supported in the earlier versions of vSphere.\nAll variables and VMware object names are case sensitive.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5, 6.7",
      "options": {
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "library_id": {
          "aliases": [],
          "description": "content library id for which details needs to be fetched.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "The connection to protocol.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.",
          "type": "str",
          "required": false,
          "version_added": "1.12.0",
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "version_added": "1.12.0",
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid.\nSet to C(False) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi",
        "vSphere Automation SDK"
      ],
      "short_description": "Gather information about VMWare Content Library"
    },
    "examples": "\n- name: Get List of Content Libraries\n  community.vmware.vmware_content_library_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n  delegate_to: localhost\n\n- name: Get information about content library\n  community.vmware.vmware_content_library_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    library_id: '13b0f060-f4d3-4f84-b61f-0fe1b0c0a5a8'\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_content_library_manager": {
    "doc": {
      "description": "Module to manage VMware content Library\nContent Library feature is introduced in vSphere 6.0 version, so this module is not supported in the earlier versions of vSphere.\nAll variables and VMware object names are case sensitive.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5, 6.7, and 7.0",
      "options": {
        "datastore_name": {
          "aliases": [
            "datastore"
          ],
          "description": "Name of the datastore on which backing content library is created.\nThis is required only if I(state) is set to C(present).\nThis parameter is ignored, when I(state) is set to C(absent).\nCurrently only datastore backing creation is supported.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "library_description": {
          "aliases": [],
          "description": "The content library description.\nThis is required only if I(state) is set to C(present).\nThis parameter is ignored, when I(state) is set to C(absent).\nProcess of updating content library only allows description change.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "library_name": {
          "aliases": [],
          "description": "The name of VMware content library to manage.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "library_type": {
          "aliases": [],
          "description": "The content library type.\nThis is required only if I(state) is set to C(present).\nThis parameter is ignored, when I(state) is set to C(absent).",
          "default": "local",
          "type": "str",
          "required": false,
          "choices": [
            "local",
            "subscribed"
          ],
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "The connection to protocol.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.",
          "type": "str",
          "required": false,
          "version_added": "1.12.0",
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "version_added": "1.12.0",
          "suboptions": {}
        },
        "ssl_thumbprint": {
          "aliases": [],
          "description": "The SHA1 SSL thumbprint of the subscribed content library to subscribe to.\nThis is required only if I(library_type) is set to C(subscribed) and the library is https.\nThis parameter is ignored, when I(state) is set to C(absent).\nThe information can be extracted using openssl using the following example: C(echo | openssl s_client -connect test-library.com:443 |& openssl x509 -fingerprint -noout)",
          "type": "str",
          "required": false,
          "version_added": "1.7.0",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of content library.\nIf set to C(present) and library does not exists, then content library is created.\nIf set to C(present) and library exists, then content library is updated.\nIf set to C(absent) and library exists, then content library is deleted.\nIf set to C(absent) and library does not exists, no action is taken.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "subscription_url": {
          "aliases": [],
          "description": "The url of the content library to subscribe to.\nThis is required only if I(library_type) is set to C(subscribed).\nThis parameter is ignored, when I(state) is set to C(absent).",
          "type": "str",
          "required": false,
          "version_added": "1.7.0",
          "suboptions": {}
        },
        "update_on_demand": {
          "aliases": [],
          "description": "Whether to download all content on demand.\nIf set to C(True), all content will be downloaded on demand.\nIf set to C(False) content will be downloaded ahead of time.\nThis is required only if I(library_type) is set to C(subscribed).\nThis parameter is ignored, when I(state) is set to C(absent).",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "1.7.0",
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid.\nSet to C(False) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi",
        "vSphere Automation SDK"
      ],
      "short_description": "Create, update and delete VMware content library"
    },
    "examples": "\n- name: Create Local Content Library\n  community.vmware.vmware_content_library_manager:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    library_name: test-content-lib\n    library_description: 'Library with Datastore Backing'\n    library_type: local\n    datastore_name: datastore\n    state: present\n  delegate_to: localhost\n\n- name: Create Subscribed Content Library\n  community.vmware.vmware_content_library_manager:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    library_name: test-content-lib\n    library_description: 'Subscribed Library with Datastore Backing'\n    library_type: subscribed\n    datastore_name: datastore\n    subscription_url: 'https://library.url'\n    ssl_thumbprint: 'aa:bb:cc:dd:ee:ff:gg:hh:ii:jj:kk:ll:mm:nn:oo:pp:qq:rr:ss:tt'\n    update_on_demand: true\n    state: present\n  delegate_to: localhost\n\n- name: Update Content Library\n  community.vmware.vmware_content_library_manager:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    library_name: test-content-lib\n    library_description: 'Library with Datastore Backing'\n    state: present\n  delegate_to: localhost\n\n- name: Delete Content Library\n  community.vmware.vmware_content_library_manager:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    library_name: test-content-lib\n    state: absent\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_datacenter": {
    "doc": {
      "description": "This module can be used to manage (create, delete) VMware vSphere Datacenters.",
      "has_action": false,
      "notes": "Tested on vSphere 6.0, 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "datacenter_name": {
          "aliases": [],
          "description": "The name of the datacenter the cluster will be created in.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "If the datacenter should be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Manage VMware vSphere Datacenters"
    },
    "examples": "\n- name: Create Datacenter\n  community.vmware.vmware_datacenter:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter_name: '{{ datacenter_name }}'\n    state: present\n  delegate_to: localhost\n\n- name: Delete Datacenter\n  community.vmware.vmware_datacenter:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter_name: '{{ datacenter_name }}'\n    state: absent\n  delegate_to: localhost\n  register: datacenter_delete_result\n"
  },
  "community.vmware.vmware_datacenter_info": {
    "doc": {
      "description": "This module can be used to gather information VMware vSphere Datacenters.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "datacenter": {
          "aliases": [
            "datacenter_name"
          ],
          "description": "The name of the datacenter to gather information for.\nIf not provided, will gather information about all datacenters from the VMware infra.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "properties": {
          "aliases": [],
          "description": "Specify the properties to retrieve.\nIf not specified, all properties are retrieved (deeply).\nResults are returned in a structure identical to the vSphere API.\nExample:\n   properties: [\n      \"overallStatus\"\n   ]\nOnly valid when C(schema) is C(vsphere).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "schema": {
          "aliases": [],
          "description": "Specify the output schema desired.\nThe 'summary' output schema is the legacy output from the module.\nThe 'vsphere' output schema is the vSphere API class definition which requires pyvmomi>6.7.1.",
          "default": "summary",
          "type": "str",
          "required": false,
          "choices": [
            "summary",
            "vsphere"
          ],
          "suboptions": {}
        },
        "show_tag": {
          "aliases": [],
          "description": "Tags related to Datacenter are shown if set to C(True).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "PyVmomi"
      ],
      "short_description": "Gather information about VMware vSphere Datacenters"
    },
    "examples": "\n- name: Gather information about all datacenters\n  community.vmware.vmware_datacenter_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n  delegate_to: localhost\n\n- name: Gather information about a particular datacenter\n  community.vmware.vmware_datacenter_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter: '{{ datacenter_name }}'\n  delegate_to: localhost\n\n- name: Gather information about a particular datacenter\n  community.vmware.vmware_datacenter_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter: '{{ datacenter_name }}'\n    show_tag: True\n  delegate_to: localhost\n\n- name: Gather vSphere schema information\n  community.vmware.vmware_datacenter_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter: '{{ datacenter_name }}'\n    schema: vsphere\n    properties:\n    - configStatus\n    - overallStatus\n"
  },
  "community.vmware.vmware_datastore_cluster": {
    "doc": {
      "description": "This module can be used to add and delete datastore cluster in given VMware environment.\nAll parameters and VMware object values are case sensitive.",
      "has_action": false,
      "notes": "Tested on vSphere 6.0, 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "automation_level": {
          "aliases": [],
          "description": "Run SDRS automated or manually.",
          "default": "manual",
          "type": "str",
          "required": false,
          "choices": [
            "automated",
            "manual"
          ],
          "suboptions": {}
        },
        "datacenter_name": {
          "aliases": [
            "datacenter"
          ],
          "description": "The name of the datacenter.\nYou must specify either a C(datacenter_name) or a C(folder).\nMutually exclusive with C(folder) parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "datastore_cluster_name": {
          "aliases": [],
          "description": "The name of the datastore cluster.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "enable_io_loadbalance": {
          "aliases": [],
          "description": "Whether or not storage DRS takes into account storage I/O workload when making load balancing and initial placement recommendations.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "enable_sdrs": {
          "aliases": [],
          "description": "Whether or not storage DRS is enabled.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "folder": {
          "aliases": [],
          "description": "Destination folder, absolute path to place datastore cluster in.\nThe folder should include the datacenter.\nThis parameter is case sensitive.\nYou must specify either a C(folder) or a C(datacenter_name).\nExamples:\n   folder: /datacenter1/datastore\n   folder: datacenter1/datastore\n   folder: /datacenter1/datastore/folder1\n   folder: datacenter1/datastore/folder1\n   folder: /folder1/datacenter1/datastore\n   folder: folder1/datacenter1/datastore\n   folder: /folder1/datacenter1/datastore/folder2",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "keep_vmdks_together": {
          "aliases": [],
          "description": "Specifies whether or not each VM in this datastore cluster should have its virtual disks on the same datastore by default.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "loadbalance_interval": {
          "aliases": [],
          "description": "Specify the interval in minutes that storage DRS runs to load balance among datastores.",
          "default": "480",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "If the datastore cluster should be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Manage VMware vSphere datastore clusters"
    },
    "examples": "\n- name: Create datastore cluster and enable SDRS\n  community.vmware.vmware_datastore_cluster:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter_name: '{{ datacenter_name }}'\n    datastore_cluster_name: '{{ datastore_cluster_name }}'\n    enable_sdrs: True\n    state: present\n  delegate_to: localhost\n\n- name: Create datastore cluster using folder\n  community.vmware.vmware_datastore_cluster:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    folder: '/{{ datacenter_name }}/datastore/ds_folder'\n    datastore_cluster_name: '{{ datastore_cluster_name }}'\n    state: present\n  delegate_to: localhost\n\n- name: Delete datastore cluster\n  community.vmware.vmware_datastore_cluster:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter_name: '{{ datacenter_name }}'\n    datastore_cluster_name: '{{ datastore_cluster_name }}'\n    state: absent\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_datastore_cluster_manager": {
    "doc": {
      "description": "This module can be used to add datastore in the datastore cluster.\nAll parameters and VMware object values are case sensitive.",
      "has_action": false,
      "notes": "Tested on vSphere 6.0, 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "datacenter_name": {
          "aliases": [
            "datacenter"
          ],
          "description": "The name of the datacenter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "datastore_cluster_name": {
          "aliases": [
            "datastore_cluster"
          ],
          "description": "The name of the datastore cluster.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "datastores": {
          "aliases": [],
          "description": "A list of datastores to be manage.",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "If set to I(present), datastores specified by I(datastores) will be added to the given datastore cluster.\nIf set to I(absent), datastores specified by I(datastores) will be moved from the given datastore cluster to datstore folder of the parent datacenter.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "PyVmomi"
      ],
      "short_description": "Manage VMware vSphere datastore cluster's members"
    },
    "examples": "\n- name: Add datastore to the given datastore cluster\n  community.vmware.vmware_datastore_cluster_manager:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter_name: '{{ datacenter_name }}'\n    datastore_cluster_name: '{{ datastore_cluster_name }}'\n    datastores:\n    - ds_001\n    - ds_002\n    - ds_003\n    state: present\n  delegate_to: localhost\n\n- name: Move datastore from the given datastore cluster\n  community.vmware.vmware_datastore_cluster_manager:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter_name: '{{ datacenter_name }}'\n    datastore_cluster_name: '{{ datastore_cluster_name }}'\n    datastores:\n    - ds_001\n    state: absent\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_datastore_facts": {
    "doc": {
      "description": "This module can be used to gather information about datastores in VMWare infrastructure.\nAll values and VMware object names are case sensitive.\nThis module was called C(vmware_datastore_facts) before Ansible 2.9. The usage did not change.",
      "has_action": false,
      "notes": "Tested on vSphere 5.5, 6.0 and 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster": {
          "aliases": [],
          "description": "Cluster to search for datastores.\nIf set, information of datastores belonging this clusters will be returned.\nThis parameter is required, if C(datacenter) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "datacenter": {
          "aliases": [
            "datacenter_name"
          ],
          "description": "Datacenter to search for datastores.\nThis parameter is required, if C(cluster) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "gather_nfs_mount_info": {
          "aliases": [],
          "description": "Gather mount information of NFS datastores.\nDisabled per default because this slows down the execution if you have a lot of datastores.\nOnly valid when C(schema) is C(summary).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "gather_vmfs_mount_info": {
          "aliases": [],
          "description": "Gather mount information of VMFS datastores.\nDisabled per default because this slows down the execution if you have a lot of datastores.\nOnly valid when C(schema) is C(summary).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the datastore to match.\nIf set, information of specific datastores are returned.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "properties": {
          "aliases": [],
          "description": "Specify the properties to retrieve.\nIf not specified, all properties are retrieved (deeply).\nResults are returned in a structure identical to the vsphere API.\nExample:\n   properties: [\n      \"name\",\n      \"info.vmfs.ssd\",\n      \"capability.vsanSparseSupported\",\n      \"overallStatus\"\n   ]\nOnly valid when C(schema) is C(vsphere).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "schema": {
          "aliases": [],
          "description": "Specify the output schema desired.\nThe 'summary' output schema is the legacy output from the module\nThe 'vsphere' output schema is the vSphere API class definition which requires pyvmomi>6.7.1",
          "default": "summary",
          "type": "str",
          "required": false,
          "choices": [
            "summary",
            "vsphere"
          ],
          "suboptions": {}
        },
        "show_tag": {
          "aliases": [],
          "description": "Tags related to Datastore are shown if set to C(True).",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "1.16.0",
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gather info about datastores available in given vCenter"
    },
    "examples": "\n- name: Gather info from standalone ESXi server having datacenter as 'ha-datacenter'\n  community.vmware.vmware_datastore_info:\n    hostname: '{{ esxi_hostname }}'\n    username: '{{ esxi_username }}'\n    password: '{{ esxi_password }}'\n    datacenter_name: \"ha-datacenter\"\n  delegate_to: localhost\n  register: info\n\n- name: Gather info from datacenter about specific datastore\n  community.vmware.vmware_datastore_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter_name: '{{ datacenter_name }}'\n    name: datastore1\n  delegate_to: localhost\n  register: info\n\n- name: Gather some info from a datastore using the vSphere API output schema\n  community.vmware.vmware_datastore_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter_name: '{{ datacenter_name }}'\n    schema: vsphere\n    properties:\n      - name\n      - info.vmfs.ssd\n      - capability.vsanSparseSupported\n      - overallStatus\n  delegate_to: localhost\n  register: info\n"
  },
  "community.vmware.vmware_datastore_info": {
    "doc": {
      "description": "This module can be used to gather information about datastores in VMWare infrastructure.\nAll values and VMware object names are case sensitive.\nThis module was called C(vmware_datastore_facts) before Ansible 2.9. The usage did not change.",
      "has_action": false,
      "notes": "Tested on vSphere 5.5, 6.0 and 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster": {
          "aliases": [],
          "description": "Cluster to search for datastores.\nIf set, information of datastores belonging this clusters will be returned.\nThis parameter is required, if C(datacenter) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "datacenter": {
          "aliases": [
            "datacenter_name"
          ],
          "description": "Datacenter to search for datastores.\nThis parameter is required, if C(cluster) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "gather_nfs_mount_info": {
          "aliases": [],
          "description": "Gather mount information of NFS datastores.\nDisabled per default because this slows down the execution if you have a lot of datastores.\nOnly valid when C(schema) is C(summary).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "gather_vmfs_mount_info": {
          "aliases": [],
          "description": "Gather mount information of VMFS datastores.\nDisabled per default because this slows down the execution if you have a lot of datastores.\nOnly valid when C(schema) is C(summary).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the datastore to match.\nIf set, information of specific datastores are returned.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "properties": {
          "aliases": [],
          "description": "Specify the properties to retrieve.\nIf not specified, all properties are retrieved (deeply).\nResults are returned in a structure identical to the vsphere API.\nExample:\n   properties: [\n      \"name\",\n      \"info.vmfs.ssd\",\n      \"capability.vsanSparseSupported\",\n      \"overallStatus\"\n   ]\nOnly valid when C(schema) is C(vsphere).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "schema": {
          "aliases": [],
          "description": "Specify the output schema desired.\nThe 'summary' output schema is the legacy output from the module\nThe 'vsphere' output schema is the vSphere API class definition which requires pyvmomi>6.7.1",
          "default": "summary",
          "type": "str",
          "required": false,
          "choices": [
            "summary",
            "vsphere"
          ],
          "suboptions": {}
        },
        "show_tag": {
          "aliases": [],
          "description": "Tags related to Datastore are shown if set to C(True).",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "1.16.0",
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gather info about datastores available in given vCenter"
    },
    "examples": "\n- name: Gather info from standalone ESXi server having datacenter as 'ha-datacenter'\n  community.vmware.vmware_datastore_info:\n    hostname: '{{ esxi_hostname }}'\n    username: '{{ esxi_username }}'\n    password: '{{ esxi_password }}'\n    datacenter_name: \"ha-datacenter\"\n  delegate_to: localhost\n  register: info\n\n- name: Gather info from datacenter about specific datastore\n  community.vmware.vmware_datastore_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter_name: '{{ datacenter_name }}'\n    name: datastore1\n  delegate_to: localhost\n  register: info\n\n- name: Gather some info from a datastore using the vSphere API output schema\n  community.vmware.vmware_datastore_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter_name: '{{ datacenter_name }}'\n    schema: vsphere\n    properties:\n      - name\n      - info.vmfs.ssd\n      - capability.vsanSparseSupported\n      - overallStatus\n  delegate_to: localhost\n  register: info\n"
  },
  "community.vmware.vmware_datastore_maintenancemode": {
    "doc": {
      "description": "This module can be used to manage maintenance mode of a datastore.",
      "has_action": false,
      "notes": "Tested on vSphere 5.5, 6.0 and 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster where datastore is connected to.\nIf multiple datastores are connected to the given cluster, then all datastores will be managed by C(state).\nIf C(datastore) or C(datastore_cluster) are not set, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "datastore": {
          "aliases": [],
          "description": "Name of datastore to manage.\nIf C(datastore_cluster) or C(cluster_name) are not set, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "datastore_cluster": {
          "aliases": [],
          "description": "Name of the datastore cluster from all child datastores to be managed.\nIf C(datastore) or C(cluster_name) are not set, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "If set to C(present), then enter datastore into maintenance mode.\nIf set to C(present) and datastore is already in maintenance mode, then no action will be taken.\nIf set to C(absent) and datastore is in maintenance mode, then exit maintenance mode.\nIf set to C(absent) and datastore is not in maintenance mode, then no action will be taken.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Place a datastore into maintenance mode"
    },
    "examples": "\n- name: Enter datastore into Maintenance Mode\n  community.vmware.vmware_datastore_maintenancemode:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datastore: '{{ datastore_name }}'\n    state: present\n  delegate_to: localhost\n\n- name: Enter all datastores under cluster into Maintenance Mode\n  community.vmware.vmware_datastore_maintenancemode:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: '{{ cluster_name }}'\n    state: present\n  delegate_to: localhost\n\n- name: Enter all datastores under datastore cluster into Maintenance Mode\n  community.vmware.vmware_datastore_maintenancemode:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datastore_cluster: '{{ datastore_cluster_name }}'\n    state: present\n  delegate_to: localhost\n\n- name: Exit datastore into Maintenance Mode\n  community.vmware.vmware_datastore_maintenancemode:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datastore: '{{ datastore_name }}'\n    state: absent\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_deploy_ovf": {
    "doc": {
      "description": "This module can be used to deploy a VMware VM from an OVF or OVA file",
      "has_action": false,
      "notes": "All modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "allow_duplicates": {
          "aliases": [],
          "description": "Whether or not to allow duplicate VM names. ESXi allows duplicates, vCenter may not.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "cluster": {
          "aliases": [],
          "description": "Cluster to deploy to.\nThis is a required parameter, if C(esxi_hostname) is not set and C(hostname) is set to the vCenter server.\nC(esxi_hostname) and C(cluster) are mutually exclusive parameters.\nThis parameter is case sensitive.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "datacenter": {
          "aliases": [],
          "description": "Datacenter to deploy to.",
          "default": "ha-datacenter",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "datastore": {
          "aliases": [],
          "description": "Datastore to deploy to.",
          "default": "datastore1",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "deployment_option": {
          "aliases": [],
          "description": "The key of the chosen deployment option.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "disk_provisioning": {
          "aliases": [],
          "description": "Disk provisioning type.",
          "default": "thin",
          "type": "str",
          "required": false,
          "choices": [
            "flat",
            "eagerZeroedThick",
            "monolithicSparse",
            "twoGbMaxExtentSparse",
            "twoGbMaxExtentFlat",
            "thin",
            "sparse",
            "thick",
            "seSparse",
            "monolithicFlat"
          ],
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "The ESXi hostname where the virtual machine will run.\nThis is a required parameter, if C(cluster) is not set and C(hostname) is set to the vCenter server.\nC(esxi_hostname) and C(cluster) are mutually exclusive parameters.\nThis parameter is case sensitive.",
          "type": "str",
          "required": false,
          "version_added": "1.9.0",
          "suboptions": {}
        },
        "fail_on_spec_warnings": {
          "aliases": [],
          "description": "Cause the module to treat OVF Import Spec warnings as errors.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "folder": {
          "aliases": [],
          "description": "Absolute path of folder to place the virtual machine.\nIf not specified, defaults to the value of C(datacenter.vmFolder).\nExamples:\n   folder: /ha-datacenter/vm\n   folder: ha-datacenter/vm\n   folder: /datacenter1/vm\n   folder: datacenter1/vm\n   folder: /datacenter1/vm/folder1\n   folder: datacenter1/vm/folder1\n   folder: /folder1/datacenter1/vm\n   folder: folder1/datacenter1/vm\n   folder: /folder1/datacenter1/vm/folder2",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "inject_ovf_env": {
          "aliases": [],
          "description": "Force the given properties to be inserted into an OVF Environment and injected through VMware Tools.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the VM to work with.\nVirtual machine names in vCenter are not necessarily unique, which may be problematic.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "networks": {
          "aliases": [],
          "description": "C(key: value) mapping of OVF network name, to the vCenter network name.",
          "default": "{'VM Network': 'VM Network'}",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "ovf": {
          "aliases": [
            "ova"
          ],
          "description": "Path to OVF or OVA file to deploy.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "power_on": {
          "aliases": [],
          "description": "Whether or not to power on the virtual machine after creation.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "properties": {
          "aliases": [],
          "description": "The assignment of values to the properties found in the OVF as key value pairs.",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "resource_pool": {
          "aliases": [],
          "description": "Resource Pool to deploy to.",
          "default": "Resources",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait": {
          "aliases": [],
          "description": "Wait for the host to power on.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_for_ip_address": {
          "aliases": [],
          "description": "Wait until vCenter detects an IP address for the VM.\nThis requires vmware-tools (vmtoolsd) to properly work after creation.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pyvmomi"
      ],
      "short_description": "Deploys a VMware virtual machine from an OVF or OVA file"
    },
    "examples": "\n- community.vmware.vmware_deploy_ovf:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    ovf: /path/to/ubuntu-16.04-amd64.ovf\n    wait_for_ip_address: true\n  delegate_to: localhost\n\n# Deploys a new VM named 'NewVM' in specific datacenter/cluster, with network mapping taken from variable and using ova template from an absolute path\n- community.vmware.vmware_deploy_ovf:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter: Datacenter1\n    cluster: Cluster1\n    datastore: vsandatastore\n    name: NewVM\n    networks: \"{u'VM Network':u'{{ ProvisioningNetworkLabel }}'}\"\n    power_on: no\n    ovf: /absolute/path/to/template/mytemplate.ova\n  delegate_to: localhost\n\n- community.vmware.vmware_deploy_ovf:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter: Datacenter1\n    esxi_hostname: test-server\n    datastore: test-datastore\n    ovf: /path/to/ubuntu-16.04-amd64.ovf\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_dns_config": {
    "doc": {
      "description": "Manage VMware ESXi DNS Configuration",
      "has_action": false,
      "notes": "Tested on vSphere 5.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "change_hostname_to": {
          "aliases": [],
          "description": "The hostname that an ESXi host should be changed to.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "dns_servers": {
          "aliases": [],
          "description": "The DNS servers that the host should be configured to use.",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "domainname": {
          "aliases": [],
          "description": "The domain the ESXi host should be apart of.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Manage VMware ESXi DNS Configuration"
    },
    "examples": "\n- name: Configure ESXi hostname and DNS servers\n  community.vmware.vmware_dns_config:\n    hostname: '{{ esxi_hostname }}'\n    username: '{{ esxi_username }}'\n    password: '{{ esxi_password }}'\n    change_hostname_to: esx01\n    domainname: foo.org\n    dns_servers:\n        - 8.8.8.8\n        - 8.8.4.4\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_drs_group": {
    "doc": {
      "description": "This module can be used to create VM/Host groups in a given cluster. Creates a vm group if C(vms) is set. Creates a host group if C(hosts) is set.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5, and 6.7\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Cluster to create vm/host group.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "datacenter": {
          "aliases": [
            "datacenter_name"
          ],
          "description": "Datacenter to search for given cluster. If not set, we use first cluster we encounter with C(cluster_name).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "group_name": {
          "aliases": [],
          "description": "The name of the group to create or remove.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hosts": {
          "aliases": [],
          "description": "List of hosts to create in group.\nRequired only if C(vms) is not set.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "If set to C(present) and the group doesn't exists then the group will be created.\nIf set to C(absent) and the group exists then the group will be deleted.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vms": {
          "aliases": [],
          "description": "List of vms to create in group.\nRequired only if C(hosts) is not set.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "PyVmomi"
      ],
      "short_description": "Creates vm/host group in a given cluster."
    },
    "examples": "\n---\n- name: \"Create DRS VM group\"\n  delegate_to: localhost\n  community.vmware.vmware_drs_group:\n    hostname: \"{{ vcenter_hostname }}\"\n    password: \"{{ vcenter_password }}\"\n    username: \"{{ vcenter_username }}\"\n    cluster_name: DC0_C0\n    datacenter_name: DC0\n    group_name: TEST_VM_01\n    vms:\n      - DC0_C0_RP0_VM0\n      - DC0_C0_RP0_VM1\n    state: present\n\n- name: \"Create DRS Host group\"\n  delegate_to: localhost\n  community.vmware.vmware_drs_group:\n    hostname: \"{{ vcenter_hostname }}\"\n    password: \"{{ vcenter_password }}\"\n    username: \"{{ vcenter_username }}\"\n    cluster_name: DC0_C0\n    datacenter_name: DC0\n    group_name: TEST_HOST_01\n    hosts:\n      - DC0_C0_H0\n      - DC0_C0_H1\n      - DC0_C0_H2\n    state: present\n\n- name: \"Delete DRS Host group\"\n  delegate_to: localhost\n  community.vmware.vmware_drs_group:\n    hostname: \"{{ vcenter_hostname }}\"\n    password: \"{{ vcenter_password }}\"\n    username: \"{{ vcenter_username }}\"\n    cluster_name: DC0_C0\n    datacenter_name: DC0\n    group_name: TEST_HOST_01\n    state: absent\n"
  },
  "community.vmware.vmware_drs_group_facts": {
    "doc": {
      "description": "This module can be used to gather facts about DRS VM/HOST groups from the given cluster.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5 and 6.7\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Cluster to search for VM/Host groups.\nIf set, facts of DRS groups belonging this cluster will be returned.\nNot needed if C(datacenter) is set.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "datacenter": {
          "aliases": [
            "datacenter_name"
          ],
          "description": "Datacenter to search for DRS VM/Host groups.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gathers facts about DRS VM/Host groups on the given cluster"
    },
    "examples": "\n---\n- name: \"Gather DRS facts about given Cluster\"\n  register: cluster_drs_group_facts\n  community.vmware.vmware_drs_group_facts:\n    hostname: \"{{ vcenter_hostname }}\"\n    password: \"{{ vcenter_password }}\"\n    username: \"{{ vcenter_username }}\"\n    cluster_name: \"{{ cluster_name }}\"\n    datacenter: \"{{ datacenter }}\"\n  delegate_to: localhost\n\n- name: \"Gather DRS group facts about all clusters in given datacenter\"\n  register: cluster_drs_group_facts\n  community.vmware.vmware_drs_group_facts:\n    hostname: \"{{ vcenter_hostname }}\"\n    password: \"{{ vcenter_password }}\"\n    username: \"{{ vcenter_username }}\"\n    datacenter: \"{{ datacenter }}\"\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_drs_group_info": {
    "doc": {
      "description": "This module can be used to gather information about DRS VM/HOST groups from the given cluster.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5 and 6.7\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Cluster to search for VM/Host groups.\nIf set, information of DRS groups belonging this cluster will be returned.\nNot needed if C(datacenter) is set.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "datacenter": {
          "aliases": [
            "datacenter_name"
          ],
          "description": "Datacenter to search for DRS VM/Host groups.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gathers info about DRS VM/Host groups on the given cluster"
    },
    "examples": "\n---\n- name: \"Gather DRS info about given Cluster\"\n  register: cluster_drs_group_info\n  community.vmware.vmware_drs_group_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    password: \"{{ vcenter_password }}\"\n    username: \"{{ vcenter_username }}\"\n    cluster_name: \"{{ cluster_name }}\"\n  delegate_to: localhost\n\n- name: \"Gather DRS group info about all clusters in given datacenter\"\n  register: cluster_drs_group_info\n  community.vmware.vmware_drs_group_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    password: \"{{ vcenter_password }}\"\n    username: \"{{ vcenter_username }}\"\n    datacenter: \"{{ datacenter }}\"\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_drs_group_manager": {
    "doc": {
      "description": "The module can be used to add VMs / Hosts to or remove them from a DRS group.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5, and 6.7.\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster": {
          "aliases": [
            "cluster_name"
          ],
          "description": "Cluster to which DRS group associated with.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "datacenter": {
          "aliases": [
            "datacenter_name"
          ],
          "description": "Name of the datacenter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "group_name": {
          "aliases": [],
          "description": "The name of the group to manage.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hosts": {
          "aliases": [],
          "description": "A List of hosts to add / remove in the group.\nRequired only if I(vms) is not set.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "If set to C(present), VMs/hosts will be added to the given DRS group.\nIf set to C(absent), VMs/hosts will be removed from the given DRS group.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vms": {
          "aliases": [],
          "description": "A List of vms to add / remove in the group.\nRequired only if I(hosts) is not set.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "PyVmomi"
      ],
      "short_description": "Manage VMs and Hosts in DRS group.",
      "version_added": "1.7.0"
    },
    "examples": "\n---\n- name: Add VMs in an existing DRS VM group\n  delegate_to: localhost\n  community.vmware.vmware_drs_group_manager:\n    hostname: \"{{ vcenter_hostname }}\"\n    password: \"{{ vcenter_password }}\"\n    username: \"{{ vcenter_username }}\"\n    cluster: DC0_C0\n    datacenter: DC0\n    group_name: TEST_VM_01\n    vms:\n      - DC0_C0_RP0_VM0\n      - DC0_C0_RP0_VM1\n    state: present\n\n- name: Add Hosts in an existing DRS Host group\n  delegate_to: localhost\n  community.vmware.vmware_drs_group_manager:\n    hostname: \"{{ vcenter_hostname }}\"\n    password: \"{{ vcenter_password }}\"\n    username: \"{{ vcenter_username }}\"\n    cluster: DC0_C0\n    datacenter: DC0\n    group_name: TEST_HOST_01\n    hosts:\n      - DC0_C0_H0\n      - DC0_C0_H1\n      - DC0_C0_H2\n    state: present\n\n- name: Remove VM from an existing DRS VM group\n  delegate_to: localhost\n  community.vmware.vmware_drs_group_manager:\n    hostname: \"{{ vcenter_hostname }}\"\n    password: \"{{ vcenter_password }}\"\n    username: \"{{ vcenter_username }}\"\n    cluster: DC0_C0\n    datacenter: DC0\n    group_name: TEST_VM_01\n    vms:\n      - DC0_C0_RP0_VM0\n    state: absent\n\n- name: Remove host from an existing DRS Host group\n  delegate_to: localhost\n  community.vmware.vmware_drs_group_manager:\n    hostname: \"{{ vcenter_hostname }}\"\n    password: \"{{ vcenter_password }}\"\n    username: \"{{ vcenter_username }}\"\n    cluster: DC0_C0\n    datacenter: DC0\n    group_name: TEST_HOST_01\n    hosts:\n      - DC0_C0_H0\n    state: absent\n\n"
  },
  "community.vmware.vmware_drs_rule_facts": {
    "doc": {
      "description": "This module can be used to gather facts about DRS VM-VM and VM-HOST rules from the given cluster.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster.\nDRS facts for the given cluster will be returned.\nThis is required parameter if C(datacenter) parameter is not provided.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "datacenter": {
          "aliases": [],
          "description": "Name of the datacenter.\nDRS facts for all the clusters from the given datacenter will be returned.\nThis is required parameter if C(cluster_name) parameter is not provided.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gathers facts about DRS rule on the given cluster"
    },
    "examples": "\n- name: Gather DRS facts about given Cluster\n  community.vmware.vmware_drs_rule_facts:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: '{{ cluster_name }}'\n  delegate_to: localhost\n  register: cluster_drs_facts\n\n- name: Gather DRS facts about all Clusters in given datacenter\n  community.vmware.vmware_drs_rule_facts:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter: '{{ datacenter_name }}'\n  delegate_to: localhost\n  register: datacenter_drs_facts\n"
  },
  "community.vmware.vmware_drs_rule_info": {
    "doc": {
      "description": "This module can be used to gather information about DRS VM-VM and VM-HOST rules from the given cluster.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster.\nDRS information for the given cluster will be returned.\nThis is required parameter if C(datacenter) parameter is not provided.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "datacenter": {
          "aliases": [],
          "description": "Name of the datacenter.\nDRS information for all the clusters from the given datacenter will be returned.\nThis is required parameter if C(cluster_name) parameter is not provided.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gathers info about DRS rule on the given cluster"
    },
    "examples": "\n- name: Gather DRS info about given Cluster\n  community.vmware.vmware_drs_rule_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: '{{ cluster_name }}'\n  delegate_to: localhost\n  register: cluster_drs_info\n\n- name: Gather DRS info about all Clusters in given datacenter\n  community.vmware.vmware_drs_rule_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter: '{{ datacenter_name }}'\n  delegate_to: localhost\n  register: datacenter_drs_info\n"
  },
  "community.vmware.vmware_dvs_host": {
    "doc": {
      "description": "Manage a host system from distributed virtual switch.",
      "has_action": false,
      "notes": "Tested on vSphere 5.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "esxi_hostname": {
          "aliases": [],
          "description": "The ESXi hostname.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "lag_uplinks": {
          "aliases": [],
          "description": "The ESXi hosts vmnics to use with specific LAGs.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "version_added": "1.12.0",
          "suboptions": {
            "lag": {
              "aliases": [],
              "description": "Name of the LAG.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "vmnics": {
              "aliases": [],
              "description": "The ESXi hosts vmnics to use with the LAG.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            }
          }
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "If the host should be present or absent attached to the vSwitch.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "switch_name": {
          "aliases": [],
          "description": "The name of the Distributed vSwitch.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vendor_specific_config": {
          "aliases": [],
          "description": "List of key, value dictionaries for the Vendor Specific Configuration.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "key": {
              "aliases": [],
              "description": "Key of setting.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "value": {
              "aliases": [],
              "description": "Value of setting.",
              "type": "str",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "vmnics": {
          "aliases": [],
          "description": "The ESXi hosts vmnics to use with the Distributed vSwitch.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "PyVmomi"
      ],
      "short_description": "Add or remove a host from distributed virtual switch"
    },
    "examples": "\n- name: Add Host to dVS\n  community.vmware.vmware_dvs_host:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n    switch_name: dvSwitch\n    vmnics:\n        - vmnic0\n        - vmnic1\n    state: present\n  delegate_to: localhost\n\n- name: Add vmnics to LAGs\n  community.vmware.vmware_dvs_host:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n    switch_name: dvSwitch\n    lag_uplinks:\n        - lag: lag1\n          vmnics:\n              - vmnic0\n              - vmnic1\n        - lag: lag2\n          vmnics:\n              - vmnic2\n              - vmnic3\n    state: present\n  delegate_to: localhost\n\n- name: Add Host to dVS/enable learnswitch (https://labs.vmware.com/flings/learnswitch)\n  community.vmware.vmware_dvs_host:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n    switch_name: dvSwitch\n    vendor_specific_config:\n        - key: com.vmware.netoverlay.layer1\n          value: learnswitch\n    vmnics:\n        - vmnic0\n        - vmnic1\n    state: present\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_dvs_portgroup": {
    "doc": {
      "description": "Create or remove a Distributed vSwitch portgroup.",
      "has_action": false,
      "notes": "Tested on vSphere 7.0\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mac_learning": {
          "aliases": [],
          "description": "Dictionary which configures MAC learning for portgroup.",
          "type": "dict",
          "required": false,
          "version_added": "1.10.0",
          "suboptions": {
            "allow_unicast_flooding": {
              "aliases": [],
              "description": "The flag to allow flooding of unlearned MAC for ingress traffic.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "enabled": {
              "aliases": [],
              "description": "The flag to indicate if source MAC address learning is allowed.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "limit": {
              "aliases": [],
              "description": "The maximum number of MAC addresses that can be learned.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "limit_policy": {
              "aliases": [],
              "description": "The default switching policy after MAC limit is exceeded.",
              "type": "str",
              "required": false,
              "choices": [
                "allow",
                "drop"
              ],
              "suboptions": {}
            }
          }
        },
        "network_policy": {
          "aliases": [],
          "description": "Dictionary which configures the different security values for portgroup.",
          "default": "{'forged_transmits': False, 'mac_changes': False, 'promiscuous': False}",
          "type": "dict",
          "required": false,
          "suboptions": {
            "forged_transmits": {
              "aliases": [],
              "description": "Indicates whether forged transmits are allowed.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "mac_changes": {
              "aliases": [],
              "description": "Indicates whether mac changes are allowed.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "promiscuous": {
              "aliases": [],
              "description": "Indicates whether promiscuous mode is allowed.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "num_ports": {
          "aliases": [],
          "description": "The number of ports the portgroup should contain.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "port_allocation": {
          "aliases": [],
          "description": "Elastic port groups automatically increase or decrease the number of ports as needed.\nOnly valid if I(port_binding) is set to C(static).\nWill be C(elastic) if not specified and I(port_binding) is set to C(static).",
          "type": "str",
          "required": false,
          "choices": [
            "elastic",
            "fixed"
          ],
          "version_added": "1.10.0",
          "suboptions": {}
        },
        "port_binding": {
          "aliases": [],
          "description": "The type of port binding determines when ports in a port group are assigned to virtual machines.\nSee VMware KB 1022312 U(https://kb.vmware.com/s/article/1022312) for more details.",
          "type": "str",
          "required": false,
          "choices": [
            "static",
            "ephemeral"
          ],
          "version_added": "1.10.0",
          "suboptions": {}
        },
        "port_policy": {
          "aliases": [],
          "description": "Dictionary which configures the advanced policy settings for the portgroup.",
          "default": "{'block_override': True, 'ipfix_override': False, 'live_port_move': False, 'network_rp_override': False, 'port_config_reset_at_disconnect': True, 'security_override': False, 'shaping_override': False, 'traffic_filter_override': False, 'uplink_teaming_override': False, 'vendor_config_override': False, 'vlan_override': False}",
          "type": "dict",
          "required": false,
          "suboptions": {
            "block_override": {
              "aliases": [],
              "description": "Indicates if the block policy can be changed per port.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "ipfix_override": {
              "aliases": [],
              "description": "Indicates if the ipfix policy can be changed per port.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "live_port_move": {
              "aliases": [],
              "description": "Indicates if a live port can be moved in or out of the portgroup.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "network_rp_override": {
              "aliases": [],
              "description": "Indicates if the network resource pool can be changed per port.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "port_config_reset_at_disconnect": {
              "aliases": [],
              "description": "Indicates if the configuration of a port is reset automatically after disconnect.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "security_override": {
              "aliases": [],
              "description": "Indicates if the security policy can be changed per port.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "shaping_override": {
              "aliases": [],
              "description": "Indicates if the shaping policy can be changed per port.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "traffic_filter_override": {
              "aliases": [],
              "description": "Indicates if the traffic filter can be changed per port.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "uplink_teaming_override": {
              "aliases": [],
              "description": "Indicates if the uplink teaming policy can be changed per port.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "vendor_config_override": {
              "aliases": [],
              "description": "Indicates if the vendor config can be changed per port.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "vlan_override": {
              "aliases": [],
              "description": "Indicates if the vlan can be changed per port.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "portgroup_name": {
          "aliases": [],
          "description": "The name of the portgroup that is to be created or deleted.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "portgroup_type": {
          "aliases": [],
          "description": "See VMware KB 1022312 regarding portgroup types.\nDeprecated. Will be removed 2021-12-01.",
          "type": "str",
          "required": false,
          "choices": [
            "earlyBinding",
            "lateBinding",
            "ephemeral"
          ],
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Determines if the portgroup should be present or not.",
          "type": "str",
          "required": true,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "switch_name": {
          "aliases": [],
          "description": "The name of the distributed vSwitch the port group should be created on.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "teaming_policy": {
          "aliases": [],
          "description": "Dictionary which configures the different teaming values for portgroup.",
          "default": "{'load_balance_policy': 'loadbalance_srcid', 'notify_switches': True, 'rolling_order': False}",
          "type": "dict",
          "required": false,
          "suboptions": {
            "active_uplinks": {
              "aliases": [],
              "description": "List of active uplinks used for load balancing.",
              "type": "list",
              "required": false,
              "elements": "str",
              "version_added": "1.10.0",
              "suboptions": {}
            },
            "inbound_policy": {
              "aliases": [],
              "description": "Indicate whether or not the teaming policy is applied to inbound frames as well.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "load_balance_policy": {
              "aliases": [],
              "description": "Network adapter teaming policy.\nC(loadbalance_loadbased) is available from version 2.6 and onwards.",
              "default": "loadbalance_srcid",
              "type": "str",
              "required": false,
              "choices": [
                "loadbalance_ip",
                "loadbalance_srcmac",
                "loadbalance_srcid",
                "loadbalance_loadbased",
                "failover_explicit"
              ],
              "suboptions": {}
            },
            "notify_switches": {
              "aliases": [],
              "description": "Indicate whether or not to notify the physical switch if a link fails.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "rolling_order": {
              "aliases": [],
              "description": "Indicate whether or not to use a rolling policy when restoring links.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "standby_uplinks": {
              "aliases": [],
              "description": "List of standby uplinks used for failover.",
              "type": "list",
              "required": false,
              "elements": "str",
              "version_added": "1.10.0",
              "suboptions": {}
            }
          }
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vlan_id": {
          "aliases": [],
          "description": "The VLAN ID that should be configured with the portgroup, use 0 for no VLAN.\nIf C(vlan_trunk) is configured to be I(true), this can be a combination of multiple ranges and numbers, example: 1-200, 205, 400-4094.\nThe valid C(vlan_id) range is from 0 to 4094. Overlapping ranges are allowed.\nIf C(vlan_private) is configured to be I(true), the corresponding private VLAN should already be configured in the distributed vSwitch.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "vlan_private": {
          "aliases": [],
          "description": "Indicates whether this is for a private VLAN or not.\nMutually exclusive with C(vlan_trunk) parameter.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vlan_trunk": {
          "aliases": [],
          "description": "Indicates whether this is a VLAN trunk or not.\nMutually exclusive with C(vlan_private) parameter.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Create or remove a Distributed vSwitch portgroup."
    },
    "examples": "\n- name: Create vlan portgroup\n  community.vmware.vmware_dvs_portgroup:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    portgroup_name: vlan-123-portrgoup\n    switch_name: dvSwitch\n    vlan_id: 123\n    num_ports: 120\n    port_binding: static\n    state: present\n  delegate_to: localhost\n\n- name: Create vlan trunk portgroup\n  community.vmware.vmware_dvs_portgroup:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    portgroup_name: vlan-trunk-portrgoup\n    switch_name: dvSwitch\n    vlan_id: 1-1000, 1005, 1100-1200\n    vlan_trunk: True\n    num_ports: 120\n    port_binding: static\n    state: present\n  delegate_to: localhost\n\n- name: Create private vlan portgroup\n  vmware_dvs_portgroup:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    portgroup_name: private-vlan-portrgoup\n    switch_name: dvSwitch\n    vlan_id: 1001\n    vlan_private: True\n    num_ports: 120\n    port_binding: static\n    state: present\n  delegate_to: localhost\n\n- name: Create no-vlan portgroup\n  community.vmware.vmware_dvs_portgroup:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    portgroup_name: no-vlan-portrgoup\n    switch_name: dvSwitch\n    vlan_id: 0\n    num_ports: 120\n    port_binding: static\n    state: present\n  delegate_to: localhost\n\n- name: Create vlan portgroup with all security and port policies\n  community.vmware.vmware_dvs_portgroup:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    portgroup_name: vlan-123-portrgoup\n    switch_name: dvSwitch\n    vlan_id: 123\n    num_ports: 120\n    port_binding: static\n    state: present\n    network_policy:\n      promiscuous: true\n      forged_transmits: true\n      mac_changes: true\n    port_policy:\n      block_override: true\n      ipfix_override: true\n      live_port_move: true\n      network_rp_override: true\n      port_config_reset_at_disconnect: true\n      security_override: true\n      shaping_override: true\n      traffic_filter_override: true\n      uplink_teaming_override: true\n      vendor_config_override: true\n      vlan_override: true\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_dvs_portgroup_facts": {
    "doc": {
      "description": "This module can be used to gather facts about DVS portgroup configurations.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "datacenter": {
          "aliases": [],
          "description": "Name of the datacenter.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "dvswitch": {
          "aliases": [],
          "description": "Name of a dvswitch to look for.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "show_network_policy": {
          "aliases": [],
          "description": "Show or hide network policies of DVS portgroup.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "show_port_policy": {
          "aliases": [],
          "description": "Show or hide port policies of DVS portgroup.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "show_teaming_policy": {
          "aliases": [],
          "description": "Show or hide teaming policies of DVS portgroup.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "show_vlan_info": {
          "aliases": [],
          "description": "Show or hide vlan information of the DVS portgroup.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gathers facts DVS portgroup configurations"
    },
    "examples": "\n- name: Get facts about DVPG\n  community.vmware.vmware_dvs_portgroup_facts:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n  register: dvpg_facts\n- name: Get number of ports for portgroup 'dvpg_001' in 'dvs_001'\n  debug:\n    msg: \"{{ item.num_ports }}\"\n  with_items:\n    - \"{{ dvpg_facts.dvs_portgroup_facts['dvs_001'] | json_query(query) }}\"\n  vars:\n    query: \"[?portgroup_name=='dvpg_001']\"\n"
  },
  "community.vmware.vmware_dvs_portgroup_find": {
    "doc": {
      "description": "Find portgroup(s) based on different criteria such as distributed vSwitch, VLAN id or a string in the name.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "dvswitch": {
          "aliases": [],
          "description": "Name of a distributed vSwitch to look for.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "string to check inside the name of the portgroup.\nBasic containment check using python C(in) operation.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "show_uplink": {
          "aliases": [],
          "description": "Show or hide uplink portgroups.\nOnly relevant when C(vlanid) is supplied.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vlanid": {
          "aliases": [],
          "description": "VLAN id can be any number between 1 and 4094.\nThis search criteria will looks into VLAN ranges to find possible matches.",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "PyVmomi"
      ],
      "short_description": "Find portgroup(s) in a VMware environment"
    },
    "examples": "\n- name: Get all portgroups in dvswitch vDS\n  community.vmware.vmware_dvs_portgroup_find:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    dvswitch: 'vDS'\n  delegate_to: localhost\n\n- name: Confirm if vlan 15 is present\n  community.vmware.vmware_dvs_portgroup_find:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    vlanid: '15'\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_dvs_portgroup_info": {
    "doc": {
      "description": "This module can be used to gather information about DVS portgroup configurations.",
      "has_action": false,
      "notes": "Tested on vSphere 7.0\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "datacenter": {
          "aliases": [],
          "description": "Name of the datacenter.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "dvswitch": {
          "aliases": [],
          "description": "Name of a dvswitch to look for.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "show_mac_learning": {
          "aliases": [],
          "description": "Show or hide MAC learning information of the DVS portgroup.",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.10.0",
          "suboptions": {}
        },
        "show_network_policy": {
          "aliases": [],
          "description": "Show or hide network policies of DVS portgroup.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "show_port_policy": {
          "aliases": [],
          "description": "Show or hide port policies of DVS portgroup.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "show_teaming_policy": {
          "aliases": [],
          "description": "Show or hide teaming policies of DVS portgroup.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "show_uplinks": {
          "aliases": [],
          "description": "Show or hide uplinks of DVS portgroup.",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.10.0",
          "suboptions": {}
        },
        "show_vlan_info": {
          "aliases": [],
          "description": "Show or hide vlan information of the DVS portgroup.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gathers info DVS portgroup configurations"
    },
    "examples": "\n- name: Get info about DVPG\n  community.vmware.vmware_dvs_portgroup_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n  register: dvpg_info\n\n- name: Get number of ports for portgroup 'dvpg_001' in 'dvs_001'\n  debug:\n    msg: \"{{ item.num_ports }}\"\n  with_items:\n    - \"{{ dvpg_info.dvs_portgroup_info['dvs_001'] | json_query(query) }}\"\n  vars:\n    query: \"[?portgroup_name=='dvpg_001']\"\n"
  },
  "community.vmware.vmware_dvswitch": {
    "doc": {
      "description": "This module can be used to create, remove a Distributed Switch.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5, 6.7 and 7.0\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "contact": {
          "aliases": [],
          "description": "Dictionary which configures administrator contact name and description for the Distributed Switch.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "description": {
              "aliases": [],
              "description": "Description or other details.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Administrator name.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "datacenter_name": {
          "aliases": [
            "datacenter"
          ],
          "description": "The name of the datacenter that will contain the Distributed Switch.\nThis parameter is optional, if C(folder) is provided.\nMutually exclusive with C(folder) parameter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of the Distributed Switch.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "discovery_operation": {
          "aliases": [],
          "description": "Select the discovery operation.\nRequired parameter for C(state) both C(present) and C(absent), before Ansible 2.6 version.\nRequired only if C(state) is set to C(present), for Ansible 2.6 and onwards.",
          "default": "listen",
          "type": "str",
          "required": false,
          "choices": [
            "both",
            "advertise",
            "listen"
          ],
          "suboptions": {}
        },
        "discovery_proto": {
          "aliases": [
            "discovery_protocol"
          ],
          "description": "Link discovery protocol between Cisco and Link Layer discovery.\nRequired parameter for C(state) both C(present) and C(absent), before Ansible 2.6 version.\nRequired only if C(state) is set to C(present), for Ansible 2.6 and onwards.\nC(cdp): Use Cisco Discovery Protocol (CDP).\nC(lldp): Use Link Layer Discovery Protocol (LLDP).\nC(disabled): Do not use a discovery protocol.",
          "default": "cdp",
          "type": "str",
          "required": false,
          "choices": [
            "cdp",
            "lldp",
            "disabled"
          ],
          "suboptions": {}
        },
        "folder": {
          "aliases": [],
          "description": "Destination folder, absolute path to place dvswitch in.\nThe folder should include the datacenter.\nThis parameter is case sensitive.\nThis parameter is optional, if C(datacenter) is provided.\nExamples:\n   folder: /datacenter1/network\n   folder: datacenter1/network\n   folder: /datacenter1/network/folder1\n   folder: datacenter1/network/folder1\n   folder: /folder1/datacenter1/network\n   folder: folder1/datacenter1/network\n   folder: /folder1/datacenter1/network/folder2",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "health_check": {
          "aliases": [],
          "description": "Dictionary which configures Health Check for the Distributed Switch.",
          "default": "{'teaming_failover': False, 'teaming_failover_interval': 0, 'vlan_mtu': False, 'vlan_mtu_interval': 0}",
          "type": "dict",
          "required": false,
          "suboptions": {
            "teaming_failover": {
              "aliases": [],
              "description": "Teaming and failover health check.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "teaming_failover_interval": {
              "aliases": [],
              "description": "Teaming and failover health check interval (minutes).\nThe default value is 1 in the vSphere Client if the Teaming and failover health check is enabled.",
              "default": "0",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "vlan_mtu": {
              "aliases": [],
              "description": "VLAN and MTU health check.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "vlan_mtu_interval": {
              "aliases": [],
              "description": "VLAN and MTU health check interval (minutes).\nThe default value is 1 in the vSphere Client if the VLAN and MTU health check is enabled.",
              "default": "0",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mtu": {
          "aliases": [],
          "description": "The switch maximum transmission unit.\nRequired parameter for C(state) both C(present) and C(absent), before Ansible 2.6 version.\nRequired only if C(state) is set to C(present), for Ansible 2.6 and onwards.\nAccepts value between 1280 to 9000 (both inclusive).",
          "default": "1500",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "multicast_filtering_mode": {
          "aliases": [],
          "description": "The multicast filtering mode.\nC(basic) mode: multicast traffic for virtual machines is forwarded according to the destination MAC address of the multicast group.\nC(snooping) mode: the Distributed Switch provides IGMP and MLD snooping according to RFC 4541.",
          "default": "basic",
          "type": "str",
          "required": false,
          "choices": [
            "basic",
            "snooping"
          ],
          "suboptions": {}
        },
        "network_policy": {
          "aliases": [],
          "description": "Dictionary which configures the different default security values for portgroups.\nIf set, these options are inherited by the portgroups of the DVS.",
          "type": "dict",
          "required": false,
          "version_added": "1.11.0",
          "suboptions": {
            "forged_transmits": {
              "aliases": [],
              "description": "Indicates whether forged transmits are allowed.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "mac_changes": {
              "aliases": [],
              "description": "Indicates whether mac changes are allowed.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "promiscuous": {
              "aliases": [],
              "description": "Indicates whether promiscuous mode is allowed.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "If set to C(present) and the Distributed Switch does not exist, the Distributed Switch will be created.\nIf set to C(absent) and the Distributed Switch exists, the Distributed Switch will be deleted.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "switch_name": {
          "aliases": [
            "switch",
            "dvswitch"
          ],
          "description": "The name of the distribute vSwitch to create or remove.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "switch_version": {
          "aliases": [
            "version"
          ],
          "description": "The version of the Distributed Switch to create.\nThe version must match the version of the ESXi hosts you want to connect.\nThe version of the vCenter server is used if not specified.\nRequired only if C(state) is set to C(present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uplink_prefix": {
          "aliases": [],
          "description": "The prefix used for the naming of the uplinks.\nOnly valid if the Distributed Switch will be created. Not used if the Distributed Switch is already present.\nUplinks are created as Uplink 1, Uplink 2, etc. pp. by default.",
          "default": "Uplink ",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uplink_quantity": {
          "aliases": [],
          "description": "Quantity of uplink per ESXi host added to the Distributed Switch.\nThe uplink quantity can be increased or decreased, but a decrease will only be successfull if the uplink isn't used by a portgroup.\nRequired parameter for C(state) both C(present) and C(absent), before Ansible 2.6 version.\nRequired only if C(state) is set to C(present), for Ansible 2.6 and onwards.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Create or remove a Distributed Switch"
    },
    "examples": "\n- name: Create dvSwitch\n  community.vmware.vmware_dvswitch:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter: '{{ datacenter }}'\n    switch: dvSwitch\n    version: 6.0.0\n    mtu: 9000\n    uplink_quantity: 2\n    discovery_protocol: lldp\n    discovery_operation: both\n    state: present\n  delegate_to: localhost\n\n- name: Create dvSwitch with all options\n  community.vmware.vmware_dvswitch:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter: '{{ datacenter }}'\n    switch: dvSwitch\n    version: 6.5.0\n    mtu: 9000\n    uplink_quantity: 2\n    uplink_prefix: 'Uplink_'\n    discovery_protocol: cdp\n    discovery_operation: both\n    multicast_filtering_mode: snooping\n    health_check:\n      vlan_mtu: true\n      vlan_mtu_interval: 1\n      teaming_failover: true\n      teaming_failover_interval: 1\n    state: present\n  delegate_to: localhost\n\n- name: Delete dvSwitch\n  community.vmware.vmware_dvswitch:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter: '{{ datacenter }}'\n    switch: dvSwitch\n    state: absent\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_dvswitch_info": {
    "doc": {
      "description": "This module can be used to gather information about dvswitch configurations.",
      "has_action": false,
      "notes": "All modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "folder": {
          "aliases": [],
          "description": "Specify a folder location of dvswitch to gather information from.\nExamples:\n   folder: /datacenter1/network\n   folder: datacenter1/network\n   folder: /datacenter1/network/folder1\n   folder: datacenter1/network/folder1\n   folder: /folder1/datacenter1/network\n   folder: folder1/datacenter1/network\n   folder: /folder1/datacenter1/network/folder2",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "properties": {
          "aliases": [],
          "description": "Specify the properties to retrieve.\nIf not specified, all properties are retrieved (deeply).\nResults are returned in a structure identical to the vsphere API.\nExample:\n   properties: [\n      \"summary.name\",\n      \"summary.numPorts\",\n      \"config.maxMtu\",\n      \"overallStatus\"\n   ]\nOnly valid when C(schema) is C(vsphere).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "schema": {
          "aliases": [],
          "description": "Specify the output schema desired.\nThe 'summary' output schema is the legacy output from the module\nThe 'vsphere' output schema is the vSphere API class definition which requires pyvmomi>6.7.1",
          "default": "summary",
          "type": "str",
          "required": false,
          "choices": [
            "summary",
            "vsphere"
          ],
          "suboptions": {}
        },
        "switch_name": {
          "aliases": [
            "switch",
            "dvswitch"
          ],
          "description": "Name of a dvswitch to look for.\nIf C(switch_name) not specified gather all dvswitch information.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "PyVmomi"
      ],
      "short_description": "Gathers info dvswitch configurations"
    },
    "examples": "\n- name: Gather all registered dvswitch\n  community.vmware.vmware_dvswitch_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n  delegate_to: localhost\n  register: dvswitch_info\n\n- name: Gather info about specific dvswitch\n  community.vmware.vmware_dvswitch_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    switch_name: DVSwitch01\n  delegate_to: localhost\n  register: dvswitch_info\n\n- name: Gather info from folder about specific dvswitch\n  community.vmware.vmware_dvswitch_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    folder: /datacenter1/network/F01\n    switch_name: DVSwitch02\n  delegate_to: localhost\n  register: dvswitch_info\n\n- name: Gather some info from a dvswitch using the vSphere API output schema\n  community.vmware.vmware_dvswitch_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    schema: vsphere\n    properties:\n      - summary.name\n      - summary.numPorts\n      - config.maxMtu\n      - overallStatus\n    switch_name: DVSwitch01\n  register: dvswitch_info\n"
  },
  "community.vmware.vmware_dvswitch_lacp": {
    "doc": {
      "description": "This module can be used to configure Link Aggregation Control Protocol (LACP) support mode and Link Aggregation Groups (LAGs).",
      "has_action": false,
      "notes": "Tested on vSphere 6.7\nYou need to run the task two times if you want to remove all LAGs and change the support mode to 'basic'\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "link_aggregation_groups": {
          "aliases": [],
          "description": "Can only be used if C(lacp_support) is set to C(enhanced).",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "load_balancing_mode": {
              "aliases": [],
              "description": "Load balancing algorithm.\nValid values are as follows\n- srcTcpUdpPort: Source TCP/UDP port number.\n- srcDestIpTcpUdpPortVlan: Source and destination IP, source and destination TCP/UDP port number and VLAN.\n- srcIpVlan: Source IP and VLAN.\n- srcDestTcpUdpPort: Source and destination TCP/UDP port number.\n- srcMac: Source MAC address.\n- destIp: Destination IP.\n- destMac: Destination MAC address.\n- vlan: VLAN only.\n- srcDestIp: Source and Destination IP.\n- srcIpTcpUdpPortVlan: Source IP, TCP/UDP port number and VLAN.\n- srcDestIpTcpUdpPort: Source and destination IP and TCP/UDP port number.\n- srcDestMac: Source and destination MAC address.\n- destIpTcpUdpPort: Destination IP and TCP/UDP port number.\n- srcPortId: Source Virtual Port Id.\n- srcIp: Source IP.\n- srcIpTcpUdpPort: Source IP and TCP/UDP port number.\n- destIpTcpUdpPortVlan: Destination IP, TCP/UDP port number and VLAN.\n- destTcpUdpPort: Destination TCP/UDP port number.\n- destIpVlan: Destination IP and VLAN.\n- srcDestIpVlan: Source and destination IP and VLAN.\nPlease see examples for more information.",
              "default": "srcDestIpTcpUdpPortVlan",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "mode": {
              "aliases": [],
              "description": "The negotiating state of the uplinks/ports.",
              "type": "str",
              "required": false,
              "choices": [
                "active",
                "passive"
              ],
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Name of the LAG.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "uplink_number": {
              "aliases": [],
              "description": "Number of uplinks.\nCan 1 to 30.",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "support_mode": {
          "aliases": [],
          "description": "The LACP support mode.\nC(basic): One Link Aggregation Control Protocol group in the switch (singleLag).\nC(enhanced): Multiple Link Aggregation Control Protocol groups in the switch (multipleLag).",
          "default": "basic",
          "type": "str",
          "required": false,
          "choices": [
            "basic",
            "enhanced"
          ],
          "suboptions": {}
        },
        "switch": {
          "aliases": [
            "dvswitch"
          ],
          "description": "The name of the Distributed Switch to manage.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Manage LACP configuration on a Distributed Switch"
    },
    "examples": "\n- name: Enable enhanced mode on a Distributed Switch\n  community.vmware.vmware_dvswitch_lacp:\n    hostname: '{{ inventory_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    switch: dvSwitch\n    support_mode: enhanced\n    validate_certs: \"{{ validate_vcenter_certs }}\"\n  delegate_to: localhost\n  loop_control:\n    label: \"{{ item.name }}\"\n  with_items: \"{{ vcenter_distributed_switches }}\"\n\n- name: Enable enhanced mode and create two LAGs on a Distributed Switch\n  community.vmware.vmware_dvswitch_lacp:\n    hostname: '{{ inventory_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    switch: dvSwitch\n    support_mode: enhanced\n    link_aggregation_groups:\n        - name: lag1\n          uplink_number: 2\n          mode: active\n          load_balancing_mode: srcDestIpTcpUdpPortVlan\n        - name: lag2\n          uplink_number: 2\n          mode: passive\n          load_balancing_mode: srcDestIp\n    validate_certs: \"{{ validate_vcenter_certs }}\"\n  delegate_to: localhost\n  loop_control:\n    label: \"{{ item.name }}\"\n  with_items: \"{{ vcenter_distributed_switches }}\"\n"
  },
  "community.vmware.vmware_dvswitch_nioc": {
    "doc": {
      "description": "This module can be used to manage distributed switch Network IO Control configurations.",
      "has_action": false,
      "notes": "Tested on vSphere 6.7\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "resources": {
          "aliases": [],
          "description": "List of dicts containing.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "limit": {
              "aliases": [],
              "description": "The maximum allowed usage for a traffic class belonging to this resource pool per host physical NIC.",
              "default": "-1",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Resource name.",
              "type": "str",
              "required": true,
              "choices": [
                "faultTolerance",
                "hbr",
                "iSCSI",
                "management",
                "nfs",
                "vdp",
                "virtualMachine",
                "vmotion",
                "vsan"
              ],
              "suboptions": {}
            },
            "reservation": {
              "aliases": [],
              "description": "Ignored if NIOC version is set to version2\nAmount of bandwidth resource that is guaranteed available to the host infrastructure traffic class.\nIf the utilization is less than the reservation, the extra bandwidth is used for other host infrastructure traffic class types.\nReservation is not allowed to exceed the value of limit, if limit is set.\nUnit is Mbits/sec.\nIgnored unless version is \"version3\".\nAmount of bandwidth resource that is guaranteed available to the host infrastructure traffic class.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "shares": {
              "aliases": [],
              "description": "The number of shares allocated.\nIgnored unless C(shares_level) is \"custom\".",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "shares_level": {
              "aliases": [],
              "description": "The allocation level\nThe level is a simplified view of shares.\nLevels map to a pre-determined set of numeric values for shares.",
              "type": "str",
              "required": false,
              "choices": [
                "low",
                "normal",
                "high",
                "custom"
              ],
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Enable or disable NIOC on the distributed switch.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "switch": {
          "aliases": [
            "dvswitch"
          ],
          "description": "The name of the distributed switch.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "version": {
          "aliases": [],
          "description": "Network IO control version.",
          "type": "str",
          "required": false,
          "choices": [
            "version2",
            "version3"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Manage distributed switch Network IO Control"
    },
    "examples": "\n- name: Enable NIOC\n  community.vmware.vmware_dvswitch_nioc:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    switch: dvSwitch\n    version: version3\n    resources:\n        - name: vmotion\n          limit: -1\n          reservation: 128\n          shares_level: normal\n        - name: vsan\n          limit: -1\n          shares_level: custom\n          shares: 99\n          reservation: 256\n    state: present\n  delegate_to: localhost\n\n- name: Disable NIOC\n  community.vmware.vmware_dvswitch_nioc:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    switch: dvSwitch\n    state: absent\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_dvswitch_pvlans": {
    "doc": {
      "description": "This module can be used to configure Private VLANs (PVLANs) on a Distributed Switch.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5 and 6.7\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "primary_pvlans": {
          "aliases": [],
          "description": "A list of VLAN IDs that should be configured as Primary PVLANs.\nIf C(primary_pvlans) isn't specified, all PVLANs will be deleted if present.\nEach member of the list requires primary_pvlan_id (int) set.\nThe secondary promiscuous PVLAN will be created automatically.\nIf C(secondary_pvlans) isn't specified, the primary PVLANs and each secondary promiscuous PVLAN will be created.\nPlease see examples for more information.",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "secondary_pvlans": {
          "aliases": [],
          "description": "A list of VLAN IDs that should be configured as Secondary PVLANs.\nC(primary_pvlans) need to be specified to create any Secondary PVLAN.\nIf C(primary_pvlans) isn't specified, all PVLANs will be deleted if present.\nEach member of the list requires primary_pvlan_id (int), secondary_pvlan_id (int), and pvlan_type (str) to be set.\nThe type of the secondary PVLAN can be isolated or community. The secondary promiscuous PVLAN will be created automatically.\nPlease see examples for more information.",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "switch": {
          "aliases": [
            "dvswitch"
          ],
          "description": "The name of the Distributed Switch.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Manage Private VLAN configuration of a Distributed Switch"
    },
    "examples": "\n- name: Create PVLANs on a Distributed Switch\n  community.vmware.vmware_dvswitch_pvlans:\n    hostname: '{{ inventory_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    switch: dvSwitch\n    primary_pvlans:\n      - primary_pvlan_id: 1\n      - primary_pvlan_id: 4\n    secondary_pvlans:\n      - primary_pvlan_id: 1\n        secondary_pvlan_id: 2\n        pvlan_type: isolated\n      - primary_pvlan_id: 1\n        secondary_pvlan_id: 3\n        pvlan_type: community\n      - primary_pvlan_id: 4\n        secondary_pvlan_id: 5\n        pvlan_type: community\n  delegate_to: localhost\n\n- name: Create primary PVLAN and secondary promiscuous PVLAN on a Distributed Switch\n  community.vmware.vmware_dvswitch_pvlans:\n    hostname: '{{ inventory_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    switch: dvSwitch\n    primary_pvlans:\n      - primary_pvlan_id: 1\n  delegate_to: localhost\n\n- name: Remove all PVLANs from a Distributed Switch\n  community.vmware.vmware_dvswitch_pvlans:\n    hostname: '{{ inventory_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    switch: dvSwitch\n    primary_pvlans: []\n    secondary_pvlans: []\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_dvswitch_uplink_pg": {
    "doc": {
      "description": "This module can be used to configure the uplink portgroup of a Distributed Switch.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5 and 6.7\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "advanced": {
          "aliases": [
            "port_policy"
          ],
          "description": "Dictionary which configures the advanced policy settings for the uplink portgroup.",
          "default": "{'block_override': True, 'netflow_override': False, 'port_config_reset_at_disconnect': True, 'traffic_filter_override': False, 'vendor_config_override': False, 'vlan_override': False}",
          "type": "dict",
          "required": false,
          "suboptions": {
            "block_override": {
              "aliases": [],
              "description": "Indicates if the block policy can be changed per port.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "netflow_override": {
              "aliases": [],
              "description": "Indicates if the NetFlow policy can be changed per port.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "port_config_reset_at_disconnect": {
              "aliases": [],
              "description": "Indicates if the configuration of a port is reset automatically after disconnect.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "traffic_filter_override": {
              "aliases": [],
              "description": "Indicates if the traffic filter can be changed per port.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "vendor_config_override": {
              "aliases": [],
              "description": "Indicates if the vendor config can be changed per port.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "vlan_override": {
              "aliases": [],
              "description": "Indicates if the vlan can be changed per port.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "block_all_ports": {
          "aliases": [],
          "description": "Indicates if all ports are blocked on the uplink portgroup.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "The description of the uplink portgroup.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "lacp": {
          "aliases": [],
          "description": "Dictionary which configures the LACP settings for the uplink portgroup.\nThe options are only used if the LACP support mode is set to 'basic'.",
          "default": "{'mode': 'passive', 'status': 'disabled'}",
          "type": "dict",
          "required": false,
          "suboptions": {
            "mode": {
              "aliases": [],
              "description": "The negotiating state of the uplinks/ports.",
              "default": "passive",
              "type": "str",
              "required": false,
              "choices": [
                "active",
                "passive"
              ],
              "suboptions": {}
            },
            "status": {
              "aliases": [],
              "description": "Indicates if LACP is enabled.",
              "default": "disabled",
              "type": "str",
              "required": false,
              "choices": [
                "enabled",
                "disabled"
              ],
              "suboptions": {}
            }
          }
        },
        "name": {
          "aliases": [],
          "description": "The name of the uplink portgroup.\nThe current name will be used if not specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "netflow_enabled": {
          "aliases": [],
          "description": "Indicates if NetFlow is enabled on the uplink portgroup.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "switch": {
          "aliases": [
            "dvswitch"
          ],
          "description": "The name of the Distributed Switch.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vlan_trunk_range": {
          "aliases": [],
          "description": "The VLAN trunk range that should be configured with the uplink portgroup.\nThis can be a combination of multiple ranges and numbers, example: [ 2-3967, 4049-4092 ].",
          "default": "['0-4094']",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Manage uplink portproup configuration of a Distributed Switch"
    },
    "examples": "\n- name: Configure Uplink portgroup\n  community.vmware.vmware_dvswitch_uplink_pg:\n    hostname: '{{ inventory_hostname }}'\n    username: '{{ vcsa_username }}'\n    password: '{{ vcsa_password }}'\n    switch: dvSwitch\n    name: dvSwitch-DVUplinks\n    advanced:\n      port_config_reset_at_disconnect: True\n      block_override: True\n      vendor_config_override: False\n      vlan_override: False\n      netflow_override: False\n      traffic_filter_override: False\n    vlan_trunk_range:\n      - '0-4094'\n    netflow_enabled: False\n    block_all_ports: False\n  delegate_to: localhost\n\n- name: Enabled LACP on Uplink portgroup\n  community.vmware.vmware_dvswitch_uplink_pg:\n    hostname: '{{ inventory_hostname }}'\n    username: '{{ vcsa_username }}'\n    password: '{{ vcsa_password }}'\n    switch: dvSwitch\n    lacp:\n      status: enabled\n      mode: active\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_evc_mode": {
    "doc": {
      "description": "This module can be used to enable/disable EVC mode on vCenter.",
      "has_action": false,
      "notes": "Tested on vSphere 6.7\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [
            "cluster"
          ],
          "description": "The name of the cluster to enable or disable EVC mode on.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "datacenter_name": {
          "aliases": [
            "datacenter"
          ],
          "description": "The name of the datacenter the cluster belongs to that you want to enable or disable EVC mode on.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "evc_mode": {
          "aliases": [],
          "description": "Required for C(state=present).\nThe EVC mode to enable or disable on the cluster. (intel-broadwell, intel-nehalem, intel-merom, etc.).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Add or remove EVC mode.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Enable/Disable EVC mode on vCenter"
    },
    "examples": "\n    - name: Enable EVC Mode\n      community.vmware.vmware_evc_mode:\n         hostname: \"{{ groups['vcsa'][0] }}\"\n         username: \"{{ vcenter_username }}\"\n         password: \"{{ site_password }}\"\n         datacenter_name: \"{{ datacenter_name }}\"\n         cluster_name: \"{{ cluster_name }}\"\n         evc_mode: \"intel-broadwell\"\n         state: present\n      delegate_to: localhost\n      register: enable_evc\n\n    - name: Disable EVC Mode\n      community.vmware.vmware_evc_mode:\n         hostname: \"{{ groups['vcsa'][0] }}\"\n         username: \"{{ vcenter_username }}\"\n         password: \"{{ site_password }}\"\n         datacenter_name: \"{{ datacenter_name }}\"\n         cluster_name: \"{{ cluster_name }}\"\n         state: absent\n      delegate_to: localhost\n      register: disable_evc\n"
  },
  "community.vmware.vmware_export_ovf": {
    "doc": {
      "description": "This module can be used to export a VMware virtual machine to OVF template from vCenter server or ESXi host.\n",
      "has_action": false,
      "notes": "All modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "datacenter": {
          "aliases": [],
          "description": "Datacenter name of the virtual machine to export.\nThis parameter is case sensitive.",
          "default": "ha-datacenter",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "download_timeout": {
          "aliases": [],
          "description": "The user defined timeout in second of exporting file.\nIf the vmdk file is too large, you can increase the value.",
          "default": "30",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "export_dir": {
          "aliases": [],
          "description": "Absolute path to place the exported files on the server running this task, must have write permission.\nIf folder not exist will create it, also create a folder under this path named with VM name.",
          "type": "path",
          "required": true,
          "suboptions": {}
        },
        "export_with_images": {
          "aliases": [],
          "description": "Export an ISO image of the media mounted on the CD/DVD Drive within the virtual machine.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "folder": {
          "aliases": [],
          "description": "Destination folder, absolute path to find the specified guest.\nThe folder should include the datacenter. ESX datacenter is ha-datacenter.\nThis parameter is case sensitive.\nIf multiple machines are found with same name, this parameter is used to identify\nExamples:\n   folder: /ha-datacenter/vm\n   folder: ha-datacenter/vm\n   folder: /datacenter1/vm\n   folder: datacenter1/vm\n   folder: /datacenter1/vm/folder1\n   folder: datacenter1/vm/folder1\n   folder: /folder1/datacenter1/vm\n   folder: folder1/datacenter1/vm\n   folder: /folder1/datacenter1/vm/folder2",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "moid": {
          "aliases": [],
          "description": "Managed Object ID of the instance to manage if known, this is a unique identifier only within a single vCenter instance.\nThis is required if C(name) or C(uuid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the virtual machine to export.\nThis is a required parameter, if parameter C(uuid) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "Uuid of the virtual machine to export.\nThis is a required parameter, if parameter C(name) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Exports a VMware virtual machine to an OVF file, device files and a manifest file"
    },
    "examples": "\n- community.vmware.vmware_export_ovf:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    name: '{{ vm_name }}'\n    export_with_images: true\n    export_dir: /path/to/ovf_template/\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_first_class_disk": {
    "doc": {
      "description": "This module can be used to manage (create, delete, resize) VMware vSphere First Class Disks.",
      "has_action": false,
      "notes": "Tested on vSphere 7.0\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "datacenter_name": {
          "aliases": [],
          "description": "The name of the datacenter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "datastore_name": {
          "aliases": [],
          "description": "Name of datastore or datastore cluster to be used for the disk.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "disk_name": {
          "aliases": [],
          "description": "The name of the disk.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "size": {
          "aliases": [],
          "description": "Disk storage size, an integer plus a unit.\nThere is no space allowed in between size number and unit.\nAllowed units are MB, GB and TB.\nExamples:\n   size: 2048MB\n   size: 10GB\n   size: 1TB",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "If the disk should be present or absent.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Manage VMware vSphere First Class Disks",
      "version_added": "1.7.0"
    },
    "examples": "\n- name: Create Disk\n  community.vmware.vmware_first_class_disk:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datastore_name: '{{ datastore_name }}'\n    disk_name: '1GBDisk'\n    size: '1GB'\n    state: present\n  delegate_to: localhost\n\n- name: Delete Disk\n  community.vmware.vmware_first_class_disk:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datastore_name: '{{ datastore_name }}'\n    disk_name: 'FirstClassDisk'\n    state: absent\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_folder_info": {
    "doc": {
      "description": "The module can be used to gather a hierarchical view of the folders that exist within a datacenter",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nC(flat_folder_info) added in VMware collection 1.4.0.\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "datacenter": {
          "aliases": [
            "datacenter_name"
          ],
          "description": "Name of the datacenter.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Provides information about folders in a datacenter"
    },
    "examples": "\n- name: Provide information about vCenter folders\n  community.vmware.vmware_folder_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter: datacenter_name\n  delegate_to: localhost\n  register: vcenter_folder_info\n\n- name: Get information about folders\n  community.vmware.vmware_folder_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter: 'Asia-Datacenter1'\n  register: r\n\n- name: Set Managed object ID for the given folder\n  ansible.builtin.set_fact:\n    folder_mo_id: \"{{ (r.flat_folder_info | selectattr('path', 'equalto', '/Asia-Datacenter1/vm/tier1/tier2') | map(attribute='moid'))[0] }}\"\n"
  },
  "community.vmware.vmware_guest": {
    "doc": {
      "description": "This module can be used to create new virtual machines from templates or other virtual machines, manage power state of virtual machine such as power on, power off, suspend, shutdown, reboot, restart etc., modify various virtual machine components like network, disk, customization etc., rename a virtual machine and remove a virtual machine with associated components.\n",
      "has_action": false,
      "notes": "Please make sure that the user used for M(community.vmware.vmware_guest) has the correct level of privileges.\nFor example, following is the list of minimum privileges required by users to create virtual machines.\n   DataStore > Allocate Space\n   Virtual Machine > Configuration > Add New Disk\n   Virtual Machine > Configuration > Add or Remove Device\n   Virtual Machine > Inventory > Create New\n   Network > Assign Network\n   Resource > Assign Virtual Machine to Resource Pool\nModule may require additional privileges as well, which may be required for gathering facts - e.g. ESXi configurations.\nTested on vSphere 5.5, 6.0, 6.5 and 6.7.\nUse SCSI disks instead of IDE when you want to expand online disks by specifying a SCSI controller.\nUses SysPrep for Windows VM (depends on 'guest_id' parameter match 'win') with PyVmomi.\nIn order to change the VM's parameters (e.g. number of CPUs), the VM must be powered off unless the hot-add support is enabled and the C(state=present) must be used to apply the changes.\nFor additional information please visit Ansible VMware community wiki - U(https://github.com/ansible/community/wiki/VMware).\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "advanced_settings": {
          "aliases": [],
          "description": "Define a list of advanced settings to be added to the VMX config.\nAn advanced settings object takes two fields C(key) and C(value).\nIncorrect key and values will be ignored.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "version_added": "1.7.0",
          "suboptions": {}
        },
        "annotation": {
          "aliases": [
            "notes"
          ],
          "description": "A note or annotation to include in the virtual machine.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cdrom": {
          "aliases": [],
          "description": "A list of CD-ROM configurations for the virtual machine. Added in version 2.9.\nProviding CD-ROM configuration as dict is deprecated and will be removed VMware collection 4.0.0. Please use a list instead.\nParameters C(controller_type), C(controller_number), C(unit_number), C(state) are added for a list of CD-ROMs configuration support.\nFor C(ide) controller, hot-add or hot-remove CD-ROM is not supported.",
          "type": "raw",
          "required": false,
          "suboptions": {
            "controller_number": {
              "aliases": [],
              "description": "For C(ide) controller, valid value is 0 or 1.\nFor C(sata) controller, valid value is 0 to 3.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "controller_type": {
              "aliases": [],
              "description": "Valid options are C(ide) and C(sata).\nDefault value is C(ide).\nWhen set to C(sata), please make sure C(unit_number) is correct and not used by SATA disks.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "iso_path": {
              "aliases": [],
              "description": "The datastore path to the ISO file to use, in the form of C([datastore1] path/to/file.iso).\nRequired if type is set C(iso).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "state": {
              "aliases": [],
              "description": "Valid value is C(present) or C(absent).\nDefault is C(present).\nIf set to C(absent), then the specified CD-ROM will be removed.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "The type of CD-ROM, valid options are C(none), C(client) or C(iso).\nWith C(none) the CD-ROM will be disconnected but present.\nThe default value is C(client).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "unit_number": {
              "aliases": [],
              "description": "For CD-ROM device attach to C(ide) controller, valid value is 0 or 1.\nFor CD-ROM device attach to C(sata) controller, valid value is 0 to 29.\nC(controller_number) and C(unit_number) are mandatory attributes.",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "cluster": {
          "aliases": [],
          "description": "The cluster name where the virtual machine will run.\nThis is a required parameter, if C(esxi_hostname) is not set.\nC(esxi_hostname) and C(cluster) are mutually exclusive parameters.\nThis parameter is case sensitive.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "convert": {
          "aliases": [],
          "description": "Specify convert disk type while cloning template or virtual machine.",
          "type": "str",
          "required": false,
          "choices": [
            "thin",
            "thick",
            "eagerzeroedthick"
          ],
          "suboptions": {}
        },
        "customization": {
          "aliases": [],
          "description": "Parameters for OS customization when cloning from the template or the virtual machine, or apply to the existing virtual machine directly.\nNot all operating systems are supported for customization with respective vCenter version, please check VMware documentation for respective OS customization.\nFor supported customization operating system matrix, (see U(http://partnerweb.vmware.com/programs/guestOS/guest-os-customization-matrix.pdf))\nAll parameters and VMware object names are case sensitive.\nLinux based OSes requires Perl package to be installed for OS customizations.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "autologon": {
              "aliases": [],
              "description": "Auto logon after virtual machine customization.\nSpecific to Windows customization.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "autologoncount": {
              "aliases": [],
              "description": "Number of autologon after reboot.\nSpecific to Windows customization.\nIgnored if C(autologon) is unset or set to C(False).\nIf unset, 1 will be used.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "dns_servers": {
              "aliases": [],
              "description": "List of DNS servers to configure.\nCommon for Linux and Windows customization.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "dns_suffix": {
              "aliases": [],
              "description": "List of domain suffixes, also known as DNS search path.\nDefault C(domain) parameter.\nCommon for Linux and Windows customization.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "domain": {
              "aliases": [],
              "description": "DNS domain name to use.\nCommon for Linux and Windows customization.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "domainadmin": {
              "aliases": [],
              "description": "User used to join in AD domain.\nRequired if C(joindomain) specified.\nSpecific to Windows customization.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "domainadminpassword": {
              "aliases": [],
              "description": "Password used to join in AD domain.\nRequired if C(joindomain) specified.\nSpecific to Windows customization.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "existing_vm": {
              "aliases": [],
              "description": "If set to C(True), do OS customization on the specified virtual machine directly.\nCommon for Linux and Windows customization.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "fullname": {
              "aliases": [],
              "description": "Server owner name.\nSpecific to Windows customization.\nIf unset, \"Administrator\" will be used as a fall-back.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "Computer hostname.\nDefault is shortened C(name) parameter.\nAllowed characters are alphanumeric (uppercase and lowercase) and minus, rest of the characters are dropped as per RFC 952.\nCommon for Linux and Windows customization.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "hwclockUTC": {
              "aliases": [],
              "description": "Specifies whether the hardware clock is in UTC or local time.\nSpecific to Linux customization.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "joindomain": {
              "aliases": [],
              "description": "AD domain to join.\nNot compatible with C(joinworkgroup).\nSpecific to Windows customization.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "joinworkgroup": {
              "aliases": [],
              "description": "Workgroup to join.\nNot compatible with C(joindomain).\nSpecific to Windows customization.\nIf unset, \"WORKGROUP\" will be used as a fall-back.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "orgname": {
              "aliases": [],
              "description": "Organisation name.\nSpecific to Windows customization.\nIf unset, \"ACME\" will be used as a fall-back.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "password": {
              "aliases": [],
              "description": "Local administrator password.\nIf not defined, the password will be set to blank (that is, no password).\nSpecific to Windows customization.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "productid": {
              "aliases": [],
              "description": "Product ID.\nSpecific to Windows customization.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "runonce": {
              "aliases": [],
              "description": "List of commands to run at first user logon.\nSpecific to Windows customization.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "timezone": {
              "aliases": [],
              "description": "Timezone.\nSee List of supported time zones for different vSphere versions in Linux/Unix.\nCommon for Linux and Windows customization.\nL(Windows, https://msdn.microsoft.com/en-us/library/ms912391.aspx).",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "customization_spec": {
          "aliases": [],
          "description": "Unique name identifying the requested customization specification.\nThis parameter is case sensitive.\nIf set, then overrides C(customization) parameter values.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "customvalues": {
          "aliases": [],
          "description": "Define a list of custom values to set on virtual machine.\nA custom value object takes two fields C(key) and C(value).\nIncorrect key and values will be ignored.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "datacenter": {
          "aliases": [],
          "description": "Destination datacenter for the deploy operation.\nThis parameter is case sensitive.",
          "default": "ha-datacenter",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "datastore": {
          "aliases": [],
          "description": "Specify datastore or datastore cluster to provision virtual machine.\nThis parameter takes precedence over C(disk.datastore) parameter.\nThis parameter can be used to override datastore or datastore cluster setting of the virtual machine when deployed from the template.\nPlease see example for more usage.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "delete_from_inventory": {
          "aliases": [],
          "description": "Whether to delete Virtual machine from inventory or delete from disk.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "disk": {
          "aliases": [],
          "description": "A list of disks to add.\nThis parameter is case sensitive.\nShrinking disks is not supported.\nRemoving existing disks of the virtual machine is not supported.\nAttributes C(controller_type), C(controller_number), C(unit_number) are used to configure multiple types of disk controllers and disks for creating or reconfiguring virtual machine. Added in Ansible 2.10.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "autoselect_datastore": {
              "aliases": [],
              "description": "Select the less used datastore.\nC(disk.datastore) and C(disk.autoselect_datastore) will not be used if C(datastore) is specified outside this C(disk) configuration.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "controller_number": {
              "aliases": [],
              "description": "Disk controller bus number.\nThe maximum number of same type controller is 4 per VM.",
              "type": "int",
              "required": false,
              "choices": [
                "0",
                "1",
                "2",
                "3"
              ],
              "suboptions": {}
            },
            "controller_type": {
              "aliases": [],
              "description": "Type of disk controller.\nC(nvme) controller type support starts on ESXi 6.5 with VM hardware version C(version) 13. Set this type on not supported ESXi or VM hardware version will lead to failure in deployment.\nWhen set to C(sata), please make sure C(unit_number) is correct and not used by SATA CDROMs.\nIf set to C(sata) type, please make sure C(controller_number) and C(unit_number) are set correctly when C(cdrom) also set to C(sata) type.",
              "type": "str",
              "required": false,
              "choices": [
                "buslogic",
                "lsilogic",
                "lsilogicsas",
                "paravirtual",
                "sata",
                "nvme"
              ],
              "suboptions": {}
            },
            "datastore": {
              "aliases": [],
              "description": "The name of datastore which will be used for the disk.\nIf C(autoselect_datastore) is set to True, will select the less used datastore whose name contains this \"disk.datastore\" string.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "disk_mode": {
              "aliases": [],
              "description": "Type of disk mode.\nAdded in Ansible 2.6.\nIf C(persistent) specified, changes are immediately and permanently written to the virtual disk. This is default.\nIf C(independent_persistent) specified, same as persistent, but not affected by snapshots.\nIf C(independent_nonpersistent) specified, changes to virtual disk are made to a redo log and discarded at power off, but not affected by snapshots.",
              "type": "str",
              "required": false,
              "choices": [
                "persistent",
                "independent_persistent",
                "independent_nonpersistent"
              ],
              "suboptions": {}
            },
            "filename": {
              "aliases": [],
              "description": "Existing disk image to be used.\nFilename must already exist on the datastore.\nSpecify filename string in C([datastore_name] path/to/file.vmdk) format. Added in Ansible 2.8.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "size": {
              "aliases": [],
              "description": "Disk storage size.\nPlease specify storage unit like [kb, mb, gb, tb].",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "size_gb": {
              "aliases": [],
              "description": "Disk storage size in gb.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "size_kb": {
              "aliases": [],
              "description": "Disk storage size in kb.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "size_mb": {
              "aliases": [],
              "description": "Disk storage size in mb.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "size_tb": {
              "aliases": [],
              "description": "Disk storage size in tb.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "Type of disk.\nIf C(thin) specified, disk type is set to thin disk.\nIf C(eagerzeroedthick) specified, disk type is set to eagerzeroedthick disk. Added Ansible 2.5.\nIf not specified, disk type is inherited from the source VM or template when cloned and thick disk, no eagerzero otherwise.",
              "type": "str",
              "required": false,
              "choices": [
                "thin",
                "thick",
                "eagerzeroedthick"
              ],
              "suboptions": {}
            },
            "unit_number": {
              "aliases": [],
              "description": "Disk Unit Number.\nValid value range from 0 to 15 for SCSI controller, except 7.\nValid value range from 0 to 14 for NVME controller.\nValid value range from 0 to 29 for SATA controller.\nC(controller_type), C(controller_number) and C(unit_number) are required when creating or reconfiguring VMs with multiple types of disk controllers and disks.\nWhen creating new VM, the first configured disk in the C(disk) list will be \"Hard Disk 1\".",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "The ESXi hostname where the virtual machine will run.\nThis is a required parameter, if C(cluster) is not set.\nC(esxi_hostname) and C(cluster) are mutually exclusive parameters.\nThis parameter is case sensitive.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "folder": {
          "aliases": [],
          "description": "Destination folder, absolute path to find an existing guest or create the new guest.\nThe folder should include the datacenter. ESXi's datacenter is ha-datacenter.\nThis parameter is case sensitive.\nIf multiple machines are found with same name, this parameter is used to identify\nExamples:\n   folder: /ha-datacenter/vm\n   folder: ha-datacenter/vm\n   folder: /datacenter1/vm\n   folder: datacenter1/vm\n   folder: /datacenter1/vm/folder1\n   folder: datacenter1/vm/folder1\n   folder: /folder1/datacenter1/vm\n   folder: folder1/datacenter1/vm\n   folder: /folder1/datacenter1/vm/folder2",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Ignore warnings and complete the actions.\nThis parameter is useful while removing virtual machine which is powered on state.\nThis module reflects the VMware vCenter API and UI workflow, as such, in some cases the `force` flag will be mandatory to perform the action to ensure you are certain the action has to be taken, no matter what the consequence. This is specifically the case for removing a powered on the virtual machine when C(state) is set to C(absent).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "guest_id": {
          "aliases": [],
          "description": "Set the guest ID.\nThis parameter is case sensitive.\nC(rhel7_64Guest) for virtual machine with RHEL7 64 bit.\nC(centos64Guest) for virtual machine with CentOS 64 bit.\nC(ubuntu64Guest) for virtual machine with Ubuntu 64 bit.\nThis field is required when creating a virtual machine, not required when creating from the template.\nValid values are referenced here: U(https://code.vmware.com/apis/358/doc/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html)\n",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hardware": {
          "aliases": [],
          "description": "Manage virtual machine's hardware attributes.\nAll parameters case sensitive.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "boot_firmware": {
              "aliases": [],
              "description": "Choose which firmware should be used to boot the virtual machine.",
              "type": "str",
              "required": false,
              "choices": [
                "bios",
                "efi"
              ],
              "suboptions": {}
            },
            "cpu_limit": {
              "aliases": [],
              "description": "The CPU utilization of a virtual machine will not exceed this limit.\nUnit is MHz.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "cpu_reservation": {
              "aliases": [],
              "description": "The amount of CPU resource that is guaranteed available to the virtual machine.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "hotadd_cpu": {
              "aliases": [],
              "description": "Allow virtual CPUs to be added while the virtual machine is running.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "hotadd_memory": {
              "aliases": [],
              "description": "Allow memory to be added while the virtual machine is running.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "hotremove_cpu": {
              "aliases": [],
              "description": "Allow virtual CPUs to be removed while the virtual machine is running.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "iommu": {
              "aliases": [],
              "description": "Flag to specify if I/O MMU is enabled for this virtual machine.",
              "type": "bool",
              "required": false,
              "version_added": "1.11.0",
              "suboptions": {}
            },
            "max_connections": {
              "aliases": [],
              "description": "Maximum number of active remote display connections for the virtual machines.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "mem_limit": {
              "aliases": [],
              "description": "The memory utilization of a virtual machine will not exceed this limit.\nUnit is MB.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "mem_reservation": {
              "aliases": [
                "memory_reservation"
              ],
              "description": "The amount of memory resource that is guaranteed available to the virtual machine.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "memory_mb": {
              "aliases": [],
              "description": "Amount of memory in MB.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "memory_reservation_lock": {
              "aliases": [],
              "description": "If set C(true), memory resource reservation for the virtual machine.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "nested_virt": {
              "aliases": [],
              "description": "Enable nested virtualization.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "num_cpu_cores_per_socket": {
              "aliases": [],
              "description": "Number of Cores Per Socket.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "num_cpus": {
              "aliases": [],
              "description": "Number of CPUs.\nC(num_cpus) must be a multiple of C(num_cpu_cores_per_socket).\nFor example, to create a VM with 2 sockets of 4 cores, specify C(num_cpus) as 8 and C(num_cpu_cores_per_socket) as 4.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "scsi": {
              "aliases": [],
              "description": "Valid values are C(buslogic), C(lsilogic), C(lsilogicsas) and C(paravirtual).\nC(paravirtual) is default.",
              "type": "str",
              "required": false,
              "choices": [
                "buslogic",
                "lsilogic",
                "lsilogicsas",
                "paravirtual"
              ],
              "suboptions": {}
            },
            "secure_boot": {
              "aliases": [],
              "description": "Whether to enable or disable (U)EFI secure boot.",
              "type": "bool",
              "required": false,
              "version_added": "1.11.0",
              "suboptions": {}
            },
            "version": {
              "aliases": [],
              "description": "The Virtual machine hardware versions.\nDefault is 10 (ESXi 5.5 and onwards).\nIf set to C(latest), the specified virtual machine will be upgraded to the most current hardware version supported on the host.\nC(latest) is added in Ansible 2.10.\nPlease check VMware documentation for correct virtual machine hardware version.\nIncorrect hardware version may lead to failure in deployment. If hardware version is already equal to the given.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "virt_based_security": {
              "aliases": [],
              "description": "Enable Virtualization Based Security feature for Windows on ESXi 6.7 and later, from hardware version 14.\nSupported Guest OS are Windows 10 64 bit, Windows Server 2016, Windows Server 2019 and later.\nThe firmware of virtual machine must be EFI and secure boot must be enabled.\nVirtualization Based Security depends on nested virtualization and Intel Virtualization Technology for Directed I/O.\nDeploy on unsupported ESXi, hardware version or firmware may lead to failure or deployed VM with unexpected configurations.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "is_template": {
          "aliases": [],
          "description": "Flag the instance as a template.\nThis will mark the given virtual machine as template.\nNote, this may need to be done in a dedicated task invocation that is not making any other changes. For example, user cannot change the state from powered-on to powered-off AND save as template in the same task.\nSee M(community.vmware.vmware_guest) source for more details.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "linked_clone": {
          "aliases": [],
          "description": "Whether to create a linked clone from the snapshot specified.\nIf specified, then C(snapshot_src) is required parameter.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the virtual machine to work with.\nVirtual machine names in vCenter are not necessarily unique, which may be problematic, see C(name_match).\nIf multiple virtual machines with same name exists, then C(folder) is required parameter to identify uniqueness of the virtual machine.\nThis parameter is required, if C(state) is set to C(poweredon), C(powered-on), C(poweredoff), C(powered-off), C(present), C(restarted), C(suspended) and virtual machine does not exists.\nThis parameter is case sensitive.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name_match": {
          "aliases": [],
          "description": "If multiple virtual machines matching the name, use the first or last found.",
          "default": "first",
          "type": "str",
          "required": false,
          "choices": [
            "first",
            "last"
          ],
          "suboptions": {}
        },
        "networks": {
          "aliases": [],
          "description": "A list of networks (in the order of the NICs).\nRemoving NICs is not allowed, while reconfiguring the virtual machine.\nAll parameters and VMware object names are case sensitive.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "connected": {
              "aliases": [],
              "description": "Indicates whether the NIC is currently connected.",
              "type": "bool",
              "required": false,
              "version_added": "1.5.0",
              "suboptions": {}
            },
            "device_type": {
              "aliases": [],
              "description": "Virtual network device.\nValid value can be one of C(e1000), C(e1000e), C(pcnet32), C(vmxnet2), C(vmxnet3), C(sriov).\nC(vmxnet3) is default.\nOptional per entry.\nUsed for virtual hardware.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "dns_servers": {
              "aliases": [],
              "description": "DNS servers for this network interface (Windows).\nOptional per entry.\nUsed for OS customization.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "domain": {
              "aliases": [],
              "description": "Domain name for this network interface (Windows).\nOptional per entry.\nUsed for OS customization.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "dvswitch_name": {
              "aliases": [],
              "description": "Name of the distributed vSwitch.\nOptional per entry.\nUsed for virtual hardware.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "gateway": {
              "aliases": [],
              "description": "Static gateway.\nOptional per entry.\nUsed for OS customization.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "ip": {
              "aliases": [],
              "description": "Static IP address. Implies C(type=static).\nOptional per entry.\nUsed for OS customization.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "mac": {
              "aliases": [],
              "description": "Customize MAC address.\nOptional per entry.\nUsed for virtual hardware.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Name of the portgroup or distributed virtual portgroup for this interface.\nRequired per entry.\nWhen specifying distributed virtual portgroup make sure given C(esxi_hostname) or C(cluster) is associated with it.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "netmask": {
              "aliases": [],
              "description": "Static netmask required for C(ip).\nOptional per entry.\nUsed for OS customization.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "start_connected": {
              "aliases": [],
              "description": "Specifies whether or not to connect the device when the virtual machine starts.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "Type of IP assignment.\nValid values are one of C(dhcp), C(static).\nC(dhcp) is default.\nOptional per entry.\nUsed for OS customization.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "vlan": {
              "aliases": [],
              "description": "VLAN number for this interface.\nRequired per entry.",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "nvdimm": {
          "aliases": [],
          "description": "Add or remove a virtual NVDIMM device to the virtual machine.\nVM virtual hardware version must be 14 or higher on vSphere 6.7 or later.\nVerify that guest OS of the virtual machine supports PMem before adding virtual NVDIMM device.\nVerify that you have the I(Datastore.Allocate) space privilege on the virtual machine.\nMake sure that the host or the cluster on which the virtual machine resides has available PMem resources.\nTo add or remove virtual NVDIMM device to the existing virtual machine, it must be in power off state.",
          "type": "dict",
          "required": false,
          "version_added": "1.13.0",
          "suboptions": {
            "label": {
              "aliases": [],
              "description": "The label of the virtual NVDIMM device to be removed or configured, e.g., \"NVDIMM 1\".\nThis parameter is required when C(state) is set to C(absent), or C(present) to reconfigure NVDIMM device size. When add a new device, please do not set C(label).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "size_mb": {
              "aliases": [],
              "description": "Virtual NVDIMM device size in MB.",
              "default": "1024",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "state": {
              "aliases": [],
              "description": "Valid value is C(present) or C(absent).\nIf set to C(absent), then the NVDIMM device with specified C(label) will be removed.",
              "type": "str",
              "required": false,
              "choices": [
                "present",
                "absent"
              ],
              "suboptions": {}
            }
          }
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "resource_pool": {
          "aliases": [],
          "description": "Use the given resource pool for virtual machine operation.\nThis parameter is case sensitive.\nResource pool should be child of the selected host parent.\nWhen not specified I(Resources) is taken as default value.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "snapshot_src": {
          "aliases": [],
          "description": "Name of the existing snapshot to use to create a clone of a virtual machine.\nThis parameter is case sensitive.\nWhile creating linked clone using C(linked_clone) parameter, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specify the state the virtual machine should be in.\nIf C(state) is set to C(present) and virtual machine exists, ensure the virtual machine configurations conforms to task arguments.\nIf C(state) is set to C(absent) and virtual machine exists, then the specified virtual machine is removed with it's associated components.\nIf C(state) is set to one of the following C(poweredon), C(powered-on), C(poweredoff), C(powered-off), C(present), C(restarted), C(suspended) and virtual machine does not exists, virtual machine is deployed with the given parameters.\nIf C(state) is set to C(poweredon) or C(powered-on) and virtual machine exists with powerstate other than powered on, then the specified virtual machine is powered on.\nIf C(state) is set to C(poweredoff) or C(powered-off) and virtual machine exists with powerstate other than powered off, then the specified virtual machine is powered off.\nIf C(state) is set to C(restarted) and virtual machine exists, then the virtual machine is restarted.\nIf C(state) is set to C(suspended) and virtual machine exists, then the virtual machine is set to suspended mode.\nIf C(state) is set to C(shutdownguest) or C(shutdown-guest) and virtual machine exists, then the virtual machine is shutdown.\nIf C(state) is set to C(rebootguest) or C(reboot-guest) and virtual machine exists, then the virtual machine is rebooted.\nPowerstate C(powered-on) and C(powered-off) is added in version 2.10.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "poweredon",
            "powered-on",
            "poweredoff",
            "powered-off",
            "present",
            "rebootguest",
            "reboot-guest",
            "restarted",
            "suspended",
            "shutdownguest",
            "shutdown-guest"
          ],
          "suboptions": {}
        },
        "state_change_timeout": {
          "aliases": [],
          "description": "If the C(state) is set to C(shutdownguest), by default the module will return immediately after sending the shutdown signal.\nIf this argument is set to a positive integer, the module will instead wait for the virtual machine to reach the poweredoff state.\nThe value sets a timeout in seconds for the module to wait for the state change.",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "template": {
          "aliases": [
            "template_src"
          ],
          "description": "Template or existing virtual machine used to create new virtual machine.\nIf this value is not set, virtual machine is created without using a template.\nIf the virtual machine already exists, this parameter will be ignored.\nThis parameter is case sensitive.\nFrom version 2.8 onwards, absolute path to virtual machine or template can be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "use_instance_uuid": {
          "aliases": [],
          "description": "Whether to use the VMware instance UUID rather than the BIOS UUID.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "UUID of the virtual machine to manage if known, this is VMware's unique identifier.\nThis is required if C(name) is not supplied.\nIf virtual machine does not exists, then this parameter is ignored.\nPlease note that a supplied UUID will be ignored on virtual machine creation, as VMware creates the UUID internally.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vapp_properties": {
          "aliases": [],
          "description": "A list of vApp properties.\nFor full list of attributes and types refer to: U(https://code.vmware.com/apis/704/vsphere/vim.vApp.PropertyInfo.html)",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "id": {
              "aliases": [],
              "description": "Property ID.\nRequired per entry.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "operation": {
              "aliases": [],
              "description": "The C(remove) attribute is required only when removing properties.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "Value type, string type by default.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "value": {
              "aliases": [],
              "description": "Property value.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "wait_for_customization": {
          "aliases": [],
          "description": "Wait until vCenter detects all guest customizations as successfully completed.\nWhen enabled, the VM will automatically be powered on.\nIf vCenter does not detect guest customization start or succeed, failed events after time C(wait_for_customization_timeout) parameter specified, warning message will be printed and task result is fail.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_for_customization_timeout": {
          "aliases": [],
          "description": "Define a timeout (in seconds) for the wait_for_customization parameter.\nBe careful when setting this value since the time guest customization took may differ among guest OSes.",
          "default": "3600",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "wait_for_ip_address": {
          "aliases": [],
          "description": "Wait until vCenter detects an IP address for the virtual machine.\nThis requires vmware-tools (vmtoolsd) to properly work after creation.\nvmware-tools needs to be installed on the given virtual machine in order to work with this parameter.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "wait_for_ip_address_timeout": {
          "aliases": [],
          "description": "Define a timeout (in seconds) for the wait_for_ip_address parameter.",
          "default": "300",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Manages virtual machines in vCenter"
    },
    "examples": "\n- name: Create a virtual machine on given ESXi hostname\n  community.vmware.vmware_guest:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    folder: /DC1/vm/\n    name: test_vm_0001\n    state: poweredon\n    guest_id: centos64Guest\n    # This is hostname of particular ESXi server on which user wants VM to be deployed\n    esxi_hostname: \"{{ esxi_hostname }}\"\n    disk:\n    - size_gb: 10\n      type: thin\n      datastore: datastore1\n    hardware:\n      memory_mb: 512\n      num_cpus: 4\n      scsi: paravirtual\n    networks:\n    - name: VM Network\n      mac: aa:bb:dd:aa:00:14\n      ip: 10.10.10.100\n      netmask: 255.255.255.0\n      device_type: vmxnet3\n    wait_for_ip_address: true\n    wait_for_ip_address_timeout: 600\n  delegate_to: localhost\n  register: deploy_vm\n\n- name: Create a virtual machine from a template\n  community.vmware.vmware_guest:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    folder: /testvms\n    name: testvm_2\n    state: poweredon\n    template: template_el7\n    disk:\n    - size_gb: 10\n      type: thin\n      datastore: g73_datastore\n    # Add another disk from an existing VMDK\n    - filename: \"[datastore1] testvms/testvm_2_1/testvm_2_1.vmdk\"\n    hardware:\n      memory_mb: 512\n      num_cpus: 6\n      num_cpu_cores_per_socket: 3\n      scsi: paravirtual\n      memory_reservation_lock: True\n      mem_limit: 8096\n      mem_reservation: 4096\n      cpu_limit: 8096\n      cpu_reservation: 4096\n      max_connections: 5\n      hotadd_cpu: True\n      hotremove_cpu: True\n      hotadd_memory: False\n      version: 12 # Hardware version of virtual machine\n      boot_firmware: \"efi\"\n    cdrom:\n        - controller_number: 0\n          unit_number: 0\n          state: present\n          type: iso\n          iso_path: \"[datastore1] livecd.iso\"\n    networks:\n    - name: VM Network\n      mac: aa:bb:dd:aa:00:14\n    wait_for_ip_address: true\n  delegate_to: localhost\n  register: deploy\n\n- name: Clone a virtual machine from Windows template and customize\n  community.vmware.vmware_guest:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: datacenter1\n    cluster: cluster\n    name: testvm-2\n    template: template_windows\n    networks:\n    - name: VM Network\n      ip: 192.168.1.100\n      netmask: 255.255.255.0\n      gateway: 192.168.1.1\n      mac: aa:bb:dd:aa:00:14\n      domain: my_domain\n      dns_servers:\n      - 192.168.1.1\n      - 192.168.1.2\n    - vlan: 1234\n      type: dhcp\n    customization:\n      autologon: true\n      dns_servers:\n      - 192.168.1.1\n      - 192.168.1.2\n      domain: my_domain\n      password: new_vm_password\n      runonce:\n      - powershell.exe -ExecutionPolicy Unrestricted -File C:\\Windows\\Temp\\ConfigureRemotingForAnsible.ps1 -ForceNewSSLCert -EnableCredSSP\n  delegate_to: localhost\n\n- name:  Clone a virtual machine from Linux template and customize\n  community.vmware.vmware_guest:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter }}\"\n    state: present\n    folder: /DC1/vm\n    template: \"{{ template }}\"\n    name: \"{{ vm_name }}\"\n    cluster: DC1_C1\n    networks:\n      - name: VM Network\n        ip: 192.168.10.11\n        netmask: 255.255.255.0\n    wait_for_ip_address: True\n    customization:\n      domain: \"{{ guest_domain }}\"\n      dns_servers:\n        - 8.9.9.9\n        - 7.8.8.9\n      dns_suffix:\n        - example.com\n        - example2.com\n  delegate_to: localhost\n\n- name: Rename a virtual machine (requires the virtual machine's uuid)\n  community.vmware.vmware_guest:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    uuid: \"{{ vm_uuid }}\"\n    name: new_name\n    state: present\n  delegate_to: localhost\n\n- name: Remove a virtual machine by uuid\n  community.vmware.vmware_guest:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    uuid: \"{{ vm_uuid }}\"\n    state: absent\n  delegate_to: localhost\n\n- name: Remove a virtual machine from inventory\n  community.vmware.vmware_guest:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    name: vm_name\n    delete_from_inventory: True\n    state: absent\n  delegate_to: localhost\n\n- name: Manipulate vApp properties\n  community.vmware.vmware_guest:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    name: vm_name\n    state: present\n    vapp_properties:\n      - id: remoteIP\n        category: Backup\n        label: Backup server IP\n        type: string\n        value: 10.10.10.1\n      - id: old_property\n        operation: remove\n  delegate_to: localhost\n\n- name: Set powerstate of a virtual machine to poweroff by using UUID\n  community.vmware.vmware_guest:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    uuid: \"{{ vm_uuid }}\"\n    state: poweredoff\n  delegate_to: localhost\n\n- name: Deploy a virtual machine in a datastore different from the datastore of the template\n  community.vmware.vmware_guest:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    name: \"{{ vm_name }}\"\n    state: present\n    template: \"{{ template_name }}\"\n    # Here datastore can be different which holds template\n    datastore: \"{{ virtual_machine_datastore }}\"\n    hardware:\n      memory_mb: 512\n      num_cpus: 2\n      scsi: paravirtual\n  delegate_to: localhost\n\n- name: Create a diskless VM\n  community.vmware.vmware_guest:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ dc1 }}\"\n    state: poweredoff\n    cluster: \"{{ ccr1 }}\"\n    name: diskless_vm\n    folder: /Asia-Datacenter1/vm\n    guest_id: centos64Guest\n    datastore: \"{{ ds1 }}\"\n    hardware:\n        memory_mb: 1024\n        num_cpus: 2\n        num_cpu_cores_per_socket: 1\n\n- name: Create a VM with multiple disks of different disk controller types\n  community.vmware.vmware_guest:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    folder: /DC1/vm/\n    name: test_vm_multi_disks\n    state: poweredoff\n    guest_id: centos64Guest\n    datastore: datastore1\n    disk:\n    - size_gb: 10\n      controller_type: 'nvme'\n      controller_number: 0\n      unit_number: 0\n    - size_gb: 10\n      controller_type: 'paravirtual'\n      controller_number: 0\n      unit_number: 1\n    - size_gb: 10\n      controller_type: 'sata'\n      controller_number: 0\n      unit_number: 2\n    hardware:\n      memory_mb: 512\n      num_cpus: 4\n      version: 14\n    networks:\n    - name: VM Network\n      device_type: vmxnet3\n  delegate_to: localhost\n  register: deploy_vm\n\n- name: Create a VM with NVDIMM device\n  community.vmware.vmware_guest:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    folder: /DC1/vm/\n    name: test_vm_nvdimm\n    state: poweredoff\n    guest_id: centos7_64Guest\n    datastore: datastore1\n    hardware:\n      memory_mb: 512\n      num_cpus: 4\n      version: 14\n    networks:\n    - name: VM Network\n      device_type: vmxnet3\n    nvdimm:\n      state: present\n      size_mb: 2048\n  delegate_to: localhost\n  register: deploy_vm\n"
  },
  "community.vmware.vmware_guest_boot_facts": {
    "doc": {
      "description": "Gather facts about boot options for the given virtual machine.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "moid": {
          "aliases": [],
          "description": "Managed Object ID of the instance to manage if known, this is a unique identifier only within a single vCenter instance.\nThis is required if C(name) or C(uuid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the VM to work with.\nThis is required if C(uuid) or C(moid) parameter is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name_match": {
          "aliases": [],
          "description": "If multiple virtual machines matching the name, use the first or last found.",
          "default": "first",
          "type": "str",
          "required": false,
          "choices": [
            "first",
            "last"
          ],
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_instance_uuid": {
          "aliases": [],
          "description": "Whether to use the VMware instance UUID rather than the BIOS UUID.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "UUID of the instance to manage if known, this is VMware's BIOS UUID by default.\nThis is required if C(name) or C(moid) parameter is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gather facts about boot options for the given virtual machine"
    },
    "examples": "\n- name: Gather facts about virtual machine's boot order and related parameters\n  community.vmware.vmware_guest_boot_facts:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    name: \"{{ vm_name }}\"\n  register: vm_boot_order_facts\n\n- name: Gather facts about virtual machine's boot order using MoID\n  community.vmware.vmware_guest_boot_facts:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    moid: \"vm-42\"\n  register: vm_moid_boot_order_facts\n"
  },
  "community.vmware.vmware_guest_boot_info": {
    "doc": {
      "description": "Gather information about boot options for the given virtual machine.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "moid": {
          "aliases": [],
          "description": "Managed Object ID of the instance to manage if known, this is a unique identifier only within a single vCenter instance.\nThis is required if C(name) or C(uuid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the VM to work with.\nThis is required if C(uuid) or C(moid) parameter is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name_match": {
          "aliases": [],
          "description": "If multiple virtual machines matching the name, use the first or last found.",
          "default": "first",
          "type": "str",
          "required": false,
          "choices": [
            "first",
            "last"
          ],
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_instance_uuid": {
          "aliases": [],
          "description": "Whether to use the VMware instance UUID rather than the BIOS UUID.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "UUID of the instance to manage if known, this is VMware's BIOS UUID by default.\nThis is required if C(name) or C(moid) parameter is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gather info about boot options for the given virtual machine"
    },
    "examples": "\n- name: Gather info about virtual machine's boot order and related parameters\n  community.vmware.vmware_guest_boot_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    name: \"{{ vm_name }}\"\n  register: vm_boot_order_info\n\n- name: Gather information about virtual machine's boot order using MoID\n  community.vmware.vmware_guest_boot_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    moid: \"vm-42\"\n  register: vm_moid_boot_order_info\n"
  },
  "community.vmware.vmware_guest_boot_manager": {
    "doc": {
      "description": "This module can be used to manage boot options for the given virtual machine.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "boot_delay": {
          "aliases": [],
          "description": "Delay in milliseconds before starting the boot sequence.",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "boot_firmware": {
          "aliases": [],
          "description": "Choose which firmware should be used to boot the virtual machine.",
          "type": "str",
          "required": false,
          "choices": [
            "bios",
            "efi"
          ],
          "suboptions": {}
        },
        "boot_order": {
          "aliases": [],
          "description": "List of the boot devices.",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "boot_retry_delay": {
          "aliases": [],
          "description": "Specify the time in milliseconds between virtual machine boot failure and subsequent attempt to boot again.\nIf set, will automatically set C(boot_retry_enabled) to C(True) as this parameter is required.",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "boot_retry_enabled": {
          "aliases": [],
          "description": "If set to C(True), the virtual machine that fails to boot, will try to boot again after C(boot_retry_delay) is expired.\nIf set to C(False), the virtual machine waits indefinitely for user intervention.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "enter_bios_setup": {
          "aliases": [],
          "description": "If set to C(True), the virtual machine automatically enters BIOS setup the next time it boots.\nThe virtual machine resets this flag, so that the machine boots proceeds normally.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "moid": {
          "aliases": [],
          "description": "Managed Object ID of the instance to manage if known, this is a unique identifier only within a single vCenter instance.\nThis is required if C(name) or C(uuid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the VM to work with.\nThis is required if C(uuid) or C(moid) parameter is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name_match": {
          "aliases": [],
          "description": "If multiple virtual machines matching the name, use the first or last found.",
          "default": "first",
          "type": "str",
          "required": false,
          "choices": [
            "first",
            "last"
          ],
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "secure_boot_enabled": {
          "aliases": [],
          "description": "Choose if EFI secure boot should be enabled.  EFI secure boot can only be enabled with boot_firmware = efi",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_instance_uuid": {
          "aliases": [],
          "description": "Whether to use the VMware instance UUID rather than the BIOS UUID.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "UUID of the instance to manage if known, this is VMware's BIOS UUID by default.\nThis is required if C(name) or C(moid) parameter is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Manage boot options for the given virtual machine"
    },
    "examples": "\n- name: Change virtual machine's boot order and related parameters\n  community.vmware.vmware_guest_boot_manager:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    name: testvm\n    boot_delay: 2000\n    enter_bios_setup: True\n    boot_retry_enabled: True\n    boot_retry_delay: 22300\n    boot_firmware: bios\n    secure_boot_enabled: False\n    boot_order:\n      - floppy\n      - cdrom\n      - ethernet\n      - disk\n  delegate_to: localhost\n  register: vm_boot_order\n\n- name: Change virtual machine's boot order using Virtual Machine MoID\n  community.vmware.vmware_guest_boot_manager:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    moid: vm-42\n    boot_delay: 2000\n    enter_bios_setup: True\n    boot_retry_enabled: True\n    boot_retry_delay: 22300\n    boot_firmware: bios\n    secure_boot_enabled: False\n    boot_order:\n      - floppy\n      - cdrom\n      - ethernet\n      - disk\n  delegate_to: localhost\n  register: vm_boot_order\n"
  },
  "community.vmware.vmware_guest_controller": {
    "doc": {
      "description": "This module can be used to add, remove disk controllers or USB controllers belonging to given virtual machine.\nAll parameters and VMware object names are case sensitive.",
      "has_action": false,
      "notes": "Tested on vSphere 6.0, 6.5 and 6.7\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "controllers": {
          "aliases": [],
          "description": "A list of disk or USB controllers to add or remove.\nTotal 4 disk controllers with the same type are allowed per VM.\nTotal 2 USB controllers are allowed per VM, 1 USB 2.0 and 1 USB 3.0 or 3.1.\nFor specific guest OS, supported controller types please refer to VMware Compatibility Guide.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "bus_sharing": {
              "aliases": [],
              "description": "Bus sharing type for SCSI controller.",
              "default": "noSharing",
              "type": "str",
              "required": false,
              "choices": [
                "noSharing",
                "physicalSharing",
                "virtualSharing"
              ],
              "version_added": "1.11.0",
              "suboptions": {}
            },
            "controller_number": {
              "aliases": [],
              "description": "Disk controller bus number. When C(state) is set to C(absent), this parameter is required.\nWhen C(type) set to C(usb2) or C(usb3), this parameter is not required.",
              "type": "int",
              "required": false,
              "choices": [
                "0",
                "1",
                "2",
                "3"
              ],
              "suboptions": {}
            },
            "state": {
              "aliases": [],
              "description": "Add new controller or remove specified existing controller.\nIf C(state) is set to C(absent), the specified controller will be removed from virtual machine when there is no disk or device attaching to it.\nIf specified controller is removed or not exist, no action will be taken only warning message.\nIf C(state) is set to C(present), new controller with specified type will be added.\nIf the number of controller with specified controller type reaches it's maximum, no action will be taken only warning message.",
              "type": "str",
              "required": true,
              "choices": [
                "present",
                "absent"
              ],
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "Type of disk or USB controller.\nFrom vSphere 6.5 and virtual machine with hardware version 13, C(nvme) controller starts to be supported.",
              "type": "str",
              "required": true,
              "choices": [
                "buslogic",
                "lsilogic",
                "lsilogicsas",
                "paravirtual",
                "sata",
                "nvme",
                "usb2",
                "usb3"
              ],
              "suboptions": {}
            }
          }
        },
        "datacenter": {
          "aliases": [],
          "description": "The datacenter name to which virtual machine belongs to.",
          "default": "ha-datacenter",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "folder": {
          "aliases": [],
          "description": "Destination folder, absolute or relative path to find an existing guest.\nThis is a required parameter, only if multiple VMs are found with same name.\nThe folder should include the datacenter. ESX's datacenter is ha-datacenter\nExamples:\n   folder: /ha-datacenter/vm\n   folder: ha-datacenter/vm\n   folder: /datacenter1/vm\n   folder: datacenter1/vm\n   folder: /datacenter1/vm/folder1\n   folder: datacenter1/vm/folder1\n   folder: /folder1/datacenter1/vm\n   folder: folder1/datacenter1/vm\n   folder: /folder1/datacenter1/vm/folder2",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "gather_disk_controller_facts": {
          "aliases": [],
          "description": "Whether to collect existing disk and USB controllers facts only.\nWhen this parameter is set to C(True), C(controllers) parameter will be ignored.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "moid": {
          "aliases": [],
          "description": "Managed Object ID of the instance to manage if known, this is a unique identifier only within a single vCenter instance.\nThis is required if C(name) or C(uuid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the virtual machine.\nThis is a required parameter, if parameter C(uuid) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sleep_time": {
          "aliases": [],
          "description": "The sleep time in seconds after VM reconfigure task completes, used when not get the updated VM controller facts after VM reconfiguration.\nThis parameter is not required. Maximum value is 600.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_instance_uuid": {
          "aliases": [],
          "description": "Whether to use the VMware instance UUID rather than the BIOS UUID.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "UUID of the instance to gather facts if known, this is VMware's unique identifier.\nThis is a required parameter, if parameter C(name) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "PyVmomi"
      ],
      "short_description": "Manage disk or USB controllers related to virtual machine in given vCenter infrastructure"
    },
    "examples": "\n- name: Add disk and USB 3.0 controllers for virtual machine located by name\n  community.vmware.vmware_guest_controller:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    name: test_VM\n    controllers:\n      - state: present\n        type: sata\n      - state: present\n        type: nvme\n      - state: present\n        type: usb3\n  delegate_to: localhost\n  register: disk_controller_facts\n\n- name: Remove disk controllers and USB 2.0 from virtual machine located by moid\n  community.vmware.vmware_guest_controller:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    moid: vm-33\n    controllers:\n      - state: absent\n        controller_number: 1\n        type: sata\n      - state: absent\n        controller_number: 0\n        type: nvme\n      - state: absent\n        type: usb2\n  delegate_to: localhost\n  register: disk_controller_facts\n"
  },
  "community.vmware.vmware_guest_cross_vc_clone": {
    "doc": {
      "description": "This module can be used for Cross-vCenter vm/template clone",
      "has_action": false,
      "notes": "All modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "destination_datastore": {
          "aliases": [],
          "description": "The name of the destination datastore or the datastore cluster.\nIf datastore cluster name is specified, we will find the Storage DRS recommended datastore in that cluster.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "destination_host": {
          "aliases": [],
          "description": "The name of the destination host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "destination_resource_pool": {
          "aliases": [],
          "description": "Destination resource pool.\nIf not provided, the destination host's parent's resource pool will be used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "destination_vcenter": {
          "aliases": [],
          "description": "The hostname or IP address of the destination VCenter.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "destination_vcenter_password": {
          "aliases": [],
          "description": "The password of the destination VCenter.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "destination_vcenter_port": {
          "aliases": [],
          "description": "The port to establish connection in the destination VCenter.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "destination_vcenter_username": {
          "aliases": [],
          "description": "The username of the destination VCenter.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "destination_vcenter_validate_certs": {
          "aliases": [],
          "description": "Parameter to indicate if certification validation needs to be done on destination VCenter.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "destination_vm_folder": {
          "aliases": [],
          "description": "Destination folder, absolute path to deploy the cloned vm.\nThis parameter is case sensitive.\nExamples:\n   folder: vm\n   folder: ha-datacenter/vm\n   folder: /datacenter1/vm",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "destination_vm_name": {
          "aliases": [],
          "description": "The name of the cloned VM.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "is_template": {
          "aliases": [],
          "description": "Specifies whether or not the new virtual machine should be marked as a template.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "1.16.0",
          "suboptions": {}
        },
        "moid": {
          "aliases": [],
          "description": "Managed Object ID of the vm/template instance to manage if known, this is a unique identifier only within a single vCenter instance.\nThis is required if C(name) or C(uuid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the virtual machine or template.\nThis is a required parameter, if parameter C(uuid) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of Virtual Machine deployed.\nIf set to C(present) and VM does not exists, then VM is created.\nIf set to C(present) and VM exists, no action is taken.\nIf set to C(poweredon) and VM does not exists, then VM is created with powered on state.\nIf set to C(poweredon) and VM exists, no action is taken.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "poweredon"
          ],
          "suboptions": {}
        },
        "use_instance_uuid": {
          "aliases": [],
          "description": "Whether to use the VMware instance UUID rather than the BIOS UUID.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "UUID of the vm/template instance to clone from, this is VMware's unique identifier.\nThis is a required parameter, if parameter C(name) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Cross-vCenter VM/template clone"
    },
    "examples": "\n# Clone template\n- name: clone a template across VC\n  community.vmware.vmware_guest_cross_vc_clone:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    name: \"test_vm1\"\n    destination_vm_name: \"cloned_vm_from_template\"\n    destination_vcenter: '{{ destination_vcenter_hostname }}'\n    destination_vcenter_username: '{{ destination_vcenter_username }}'\n    destination_vcenter_password: '{{ destination_vcenter_password }}'\n    destination_vcenter_port: '{{ destination_vcenter_port }}'\n    destination_vcenter_validate_certs: '{{ destination_vcenter_validate_certs }}'\n    destination_host: '{{ destination_esxi }}'\n    destination_datastore: '{{ destination_datastore }}'\n    destination_vm_folder: '{{ destination_vm_folder }}'\n    state: present\n  register: cross_vc_clone_from_template\n\n- name: clone a VM across VC\n  community.vmware.vmware_guest_cross_vc_clone:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: \"{{ vcenter_password }}\"\n    name: \"test_vm1\"\n    destination_vm_name: \"cloned_vm_from_vm\"\n    destination_vcenter: '{{ destination_vcenter_hostname }}'\n    destination_vcenter_username: '{{ destination_vcenter_username }}'\n    destination_vcenter_password: '{{ destination_vcenter_password }}'\n    destination_host: '{{ destination_esxi }}'\n    destination_datastore: '{{ destination_datastore }}'\n    destination_vm_folder: '{{ destination_vm_folder }}'\n    state: poweredon\n  register: cross_vc_clone_from_vm\n\n- name: check_mode support\n  community.vmware.vmware_guest_cross_vc_clone:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: \"{{ vcenter_password }}\"\n    name: \"test_vm1\"\n    destination_vm_name: \"cloned_vm_from_vm\"\n    destination_vcenter: '{{ destination_vcenter_hostname }}'\n    destination_vcenter_username: '{{ destination_vcenter_username }}'\n    destination_vcenter_password: '{{ destination_vcenter_password }}'\n    destination_host: '{{ destination_esxi }}'\n    destination_datastore: '{{ destination_datastore }}'\n    destination_vm_folder: '{{ destination_vm_folder }}'\n  check_mode: true\n"
  },
  "community.vmware.vmware_guest_custom_attribute_defs": {
    "doc": {
      "description": "This module can be used to add and remove custom attributes definitions for the given virtual machine from VMware.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "attribute_key": {
          "aliases": [],
          "description": "Name of the custom attribute definition.\nThis is required parameter, if C(state) is set to C(present) or C(absent).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Manage definition of custom attributes.\nIf set to C(present) and definition not present, then custom attribute definition is created.\nIf set to C(present) and definition is present, then no action taken.\nIf set to C(absent) and definition is present, then custom attribute definition is removed.\nIf set to C(absent) and definition is absent, then no action taken.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Manage custom attributes definitions for virtual machine from VMware"
    },
    "examples": "\n- name: Add VMware Attribute Definition\n  community.vmware.vmware_guest_custom_attribute_defs:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    state: present\n    attribute_key: custom_attr_def_1\n  delegate_to: localhost\n  register: defs\n\n- name: Remove VMware Attribute Definition\n  community.vmware.vmware_guest_custom_attribute_defs:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    state: absent\n    attribute_key: custom_attr_def_1\n  delegate_to: localhost\n  register: defs\n"
  },
  "community.vmware.vmware_guest_custom_attributes": {
    "doc": {
      "description": "This module can be used to add, remove and update custom attributes for the given virtual machine.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "attributes": {
          "aliases": [],
          "description": "A list of name and value of custom attributes that needs to be manage.\nValue of custom attribute is not required and will be ignored, if C(state) is set to C(absent).",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "Name of the attribute.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "value": {
              "aliases": [],
              "description": "Value of the attribute.",
              "default": "",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "datacenter": {
          "aliases": [],
          "description": "Datacenter name where the virtual machine is located in.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "folder": {
          "aliases": [],
          "description": "Absolute path to find an existing guest.\nThis is required parameter, if C(name) is supplied and multiple virtual machines with same name are found.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "moid": {
          "aliases": [],
          "description": "Managed Object ID of the instance to manage if known, this is a unique identifier only within a single vCenter instance.\nThis is required if C(name) or C(uuid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the virtual machine to work with.\nThis is required parameter, if C(uuid) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The action to take.\nIf set to C(present), then custom attribute is added or updated.\nIf set to C(absent), then custom attribute is removed.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "use_instance_uuid": {
          "aliases": [],
          "description": "Whether to use the VMware instance UUID rather than the BIOS UUID.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "UUID of the virtual machine to manage if known. This is VMware's unique identifier.\nThis is required parameter, if C(name) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Manage custom attributes from VMware for the given virtual machine"
    },
    "examples": "\n- name: Add virtual machine custom attributes\n  community.vmware.vmware_guest_custom_attributes:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    uuid: 421e4592-c069-924d-ce20-7e7533fab926\n    state: present\n    attributes:\n      - name: MyAttribute\n        value: MyValue\n  delegate_to: localhost\n  register: attributes\n\n- name: Add multiple virtual machine custom attributes\n  community.vmware.vmware_guest_custom_attributes:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    uuid: 421e4592-c069-924d-ce20-7e7533fab926\n    state: present\n    attributes:\n      - name: MyAttribute\n        value: MyValue\n      - name: MyAttribute2\n        value: MyValue2\n  delegate_to: localhost\n  register: attributes\n\n- name: Remove virtual machine Attribute\n  community.vmware.vmware_guest_custom_attributes:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    uuid: 421e4592-c069-924d-ce20-7e7533fab926\n    state: absent\n    attributes:\n      - name: MyAttribute\n  delegate_to: localhost\n  register: attributes\n\n- name: Remove virtual machine Attribute using Virtual Machine MoID\n  community.vmware.vmware_guest_custom_attributes:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    moid: vm-42\n    state: absent\n    attributes:\n      - name: MyAttribute\n  delegate_to: localhost\n  register: attributes\n"
  },
  "community.vmware.vmware_guest_customization_facts": {
    "doc": {
      "description": "This module can be used to gather facts about customization specifications.\nAll parameters and VMware object names are case sensitive.",
      "has_action": false,
      "notes": "Tested on vSphere 6.0 and 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "spec_name": {
          "aliases": [],
          "description": "Name of customization specification to find.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gather facts about VM customization specifications"
    },
    "examples": "\n- name: Gather facts about all customization specification\n  community.vmware.vmware_guest_customization_facts:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n  delegate_to: localhost\n  register: all_custom_spec_facts\n\n- name: Gather facts about customization specification with the given name\n  community.vmware.vmware_guest_customization_facts:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    spec_name: custom_linux_spec\n  delegate_to: localhost\n  register: custom_spec_facts\n"
  },
  "community.vmware.vmware_guest_customization_info": {
    "doc": {
      "description": "This module can be used to gather information about customization specifications.\nAll parameters and VMware object names are case sensitive.",
      "has_action": false,
      "notes": "Tested on vSphere 6.0 and 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "spec_name": {
          "aliases": [],
          "description": "Name of customization specification to find.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gather info about VM customization specifications"
    },
    "examples": "\n- name: Gather info about all customization specification\n  community.vmware.vmware_guest_customization_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n  delegate_to: localhost\n  register: all_custom_spec_info\n\n- name: Gather info about customization specification with the given name\n  community.vmware.vmware_guest_customization_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    spec_name: custom_linux_spec\n  delegate_to: localhost\n  register: custom_spec_info\n"
  },
  "community.vmware.vmware_guest_disk": {
    "doc": {
      "description": "This module can be used to add, remove and update disks belonging to given virtual machine.\nAll parameters and VMware object names are case sensitive.\nThis module is destructive in nature, please read documentation carefully before proceeding.\nBe careful while removing disk specified as this may lead to data loss.",
      "has_action": false,
      "notes": "Tested on vSphere 6.0 and 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "datacenter": {
          "aliases": [],
          "description": "The datacenter name to which virtual machine belongs to.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "disk": {
          "aliases": [],
          "description": "A list of disks to add or remove.\nThe virtual disk related information is provided using this list.\nAll values and parameters are case sensitive.",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "autoselect_datastore": {
              "aliases": [],
              "description": "Select the less used datastore. Specify only if C(datastore) is not specified.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "bus_sharing": {
              "aliases": [],
              "description": "Only functions with Paravirtual SCSI Controller.\nAllows for the sharing of the scsi bus between two virtual machines.",
              "default": "noSharing",
              "type": "str",
              "required": false,
              "choices": [
                "noSharing",
                "physicalSharing",
                "virtualSharing"
              ],
              "version_added": "1.17.0",
              "suboptions": {}
            },
            "cluster_disk": {
              "aliases": [],
              "description": "This value allows for the sharing of an RDM between two machines.\nThe primary machine holding the RDM uses the default C(False).\nThe secondary machine holding the RDM uses C(True).",
              "default": "False",
              "type": "bool",
              "required": false,
              "version_added": "1.17.0",
              "suboptions": {}
            },
            "compatibility_mode": {
              "aliases": [],
              "description": "Compatibility mode for raw devices. Required for disk type 'rdm'",
              "type": "str",
              "required": false,
              "choices": [
                "physicalMode",
                "virtualMode"
              ],
              "suboptions": {}
            },
            "controller_number": {
              "aliases": [],
              "description": "This parameter is used with C(controller_type) for specifying controller bus number.",
              "type": "int",
              "required": false,
              "choices": [
                "0",
                "1",
                "2",
                "3"
              ],
              "suboptions": {}
            },
            "controller_type": {
              "aliases": [],
              "description": "This parameter is added for managing disks attaching other types of controllers, e.g., SATA or NVMe.\nIf either C(controller_type) or C(scsi_type) is not specified, then use C(paravirtual) type.",
              "type": "str",
              "required": false,
              "choices": [
                "buslogic",
                "lsilogic",
                "lsilogicsas",
                "paravirtual",
                "sata",
                "nvme"
              ],
              "suboptions": {}
            },
            "datastore": {
              "aliases": [],
              "description": "Name of datastore or datastore cluster to be used for the disk.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "destroy": {
              "aliases": [],
              "description": "If C(state) is C(absent), make sure the disk file is deleted from the datastore. Added in version 2.10.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "disk_mode": {
              "aliases": [],
              "description": "Type of disk mode. If not specified then use C(persistent) mode for new disk.\nIf set to 'persistent' mode, changes are immediately and permanently written to the virtual disk.\nIf set to 'independent_persistent' mode, same as persistent, but not affected by snapshots.\nIf set to 'independent_nonpersistent' mode, changes to virtual disk are made to a redo log and discarded at power off, but not affected by snapshots.",
              "type": "str",
              "required": false,
              "choices": [
                "persistent",
                "independent_persistent",
                "independent_nonpersistent"
              ],
              "suboptions": {}
            },
            "filename": {
              "aliases": [],
              "description": "Existing disk image to be used. Filename must already exist on the datastore.\nSpecify filename string in C([datastore_name] path/to/file.vmdk) format. Added in version 2.10.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "iolimit": {
              "aliases": [],
              "description": "Section specifies the shares and limit for storage I/O resource.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "limit": {
                  "aliases": [],
                  "description": "Section specifies values for limit where the utilization of a virtual machine will not exceed, even if there are available resources.",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                },
                "shares": {
                  "aliases": [],
                  "description": "Specifies different types of shares user can add for the given disk.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "level": {
                      "aliases": [],
                      "description": "Specifies different level for the shares section.",
                      "type": "str",
                      "required": false,
                      "choices": [
                        "low",
                        "normal",
                        "high",
                        "custom"
                      ],
                      "suboptions": {}
                    },
                    "level_value": {
                      "aliases": [],
                      "description": "Custom value when C(level) is set as C(custom).",
                      "type": "int",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                }
              }
            },
            "rdm_path": {
              "aliases": [],
              "description": "Path of LUN for Raw Device Mapping required for disk type C(rdm).\nOnly valid if C(type) is set to C(rdm).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "scsi_controller": {
              "aliases": [],
              "description": "SCSI controller number. Only 4 SCSI controllers are allowed per VM.\nCare should be taken while specifying 'scsi_controller' is 0 and 'unit_number' as 0 as this disk may contain OS.",
              "type": "int",
              "required": false,
              "choices": [
                "0",
                "1",
                "2",
                "3"
              ],
              "suboptions": {}
            },
            "scsi_type": {
              "aliases": [],
              "description": "Type of SCSI controller. This value is required only for the first occurrence of SCSI Controller.\nThis value is ignored, if SCSI Controller is already present or C(state) is C(absent).",
              "type": "str",
              "required": false,
              "choices": [
                "buslogic",
                "lsilogic",
                "lsilogicsas",
                "paravirtual"
              ],
              "suboptions": {}
            },
            "shares": {
              "aliases": [],
              "description": "Section for iolimit section tells about what are all different types of shares user can add for disk.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "level": {
                  "aliases": [],
                  "description": "Tells about different level for the shares section.",
                  "type": "str",
                  "required": false,
                  "choices": [
                    "low",
                    "normal",
                    "high",
                    "custom"
                  ],
                  "suboptions": {}
                },
                "level_value": {
                  "aliases": [],
                  "description": "Custom value when C(level) is set as C(custom).",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "sharing": {
              "aliases": [],
              "description": "The sharing mode of the virtual disk.\nSetting sharing means that multiple virtual machines can write to the virtual disk.\nSharing can only be set if C(type) is set to C(eagerzeroedthick)or C(rdm).",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "size": {
              "aliases": [],
              "description": "Disk storage size.\nIf size specified then unit must be specified. There is no space allowed in between size number and unit.\nOnly first occurrence in disk element will be considered, even if there are multiple size* parameters available.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "size_gb": {
              "aliases": [],
              "description": "Disk storage size in gb.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "size_kb": {
              "aliases": [],
              "description": "Disk storage size in kb.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "size_mb": {
              "aliases": [],
              "description": "Disk storage size in mb.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "size_tb": {
              "aliases": [],
              "description": "Disk storage size in tb.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "state": {
              "aliases": [],
              "description": "State of disk.\nIf set to 'absent', disk will be removed permanently from virtual machine configuration and from VMware storage.\nIf set to 'present', disk will be added if not present at given Controller and Unit Number.\nor disk exists with different size, disk size is increased, reducing disk size is not allowed.",
              "default": "present",
              "type": "str",
              "required": false,
              "choices": [
                "present",
                "absent"
              ],
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "The type of disk, if not specified then use C(thick) type for new disk, no eagerzero.\nThe disk type C(rdm) is added in version 1.13.0.",
              "type": "str",
              "required": false,
              "choices": [
                "thin",
                "eagerzeroedthick",
                "thick",
                "rdm"
              ],
              "suboptions": {}
            },
            "unit_number": {
              "aliases": [],
              "description": "Disk Unit Number.\nValid value range from 0 to 15, except 7 for SCSI Controller.\nValid value range from 0 to 64, except 7 for Paravirtual SCSI Controller on Virtual Hardware version 14 or higher\nValid value range from 0 to 29 for SATA controller.\nValid value range from 0 to 14 for NVME controller.",
              "type": "int",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "folder": {
          "aliases": [],
          "description": "Destination folder, absolute or relative path to find an existing guest.\nThis is a required parameter, only if multiple VMs are found with same name.\nThe folder should include the datacenter. ESX's datacenter is ha-datacenter\nExamples:\n   folder: /ha-datacenter/vm\n   folder: ha-datacenter/vm\n   folder: /datacenter1/vm\n   folder: datacenter1/vm\n   folder: /datacenter1/vm/folder1\n   folder: datacenter1/vm/folder1\n   folder: /folder1/datacenter1/vm\n   folder: folder1/datacenter1/vm\n   folder: /folder1/datacenter1/vm/folder2",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "moid": {
          "aliases": [],
          "description": "Managed Object ID of the instance to manage if known, this is a unique identifier only within a single vCenter instance.\nThis is required if C(name) or C(uuid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the virtual machine.\nThis is a required parameter, if parameter C(uuid) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_instance_uuid": {
          "aliases": [],
          "description": "Whether to use the VMware instance UUID rather than the BIOS UUID.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "UUID of the instance to gather facts if known, this is VMware's unique identifier.\nThis is a required parameter, if parameter C(name) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Manage disks related to virtual machine in given vCenter infrastructure"
    },
    "examples": "\n- name: Add disks to virtual machine using UUID\n  community.vmware.vmware_guest_disk:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    uuid: 421e4592-c069-924d-ce20-7e7533fab926\n    disk:\n      - size_mb: 10\n        type: thin\n        datastore: datacluster0\n        state: present\n        scsi_controller: 1\n        unit_number: 1\n        scsi_type: 'paravirtual'\n        disk_mode: 'persistent'\n      - size_gb: 10\n        type: eagerzeroedthick\n        state: present\n        autoselect_datastore: True\n        scsi_controller: 2\n        scsi_type: 'buslogic'\n        unit_number: 12\n        disk_mode: 'independent_persistent'\n      - size: 10Gb\n        type: eagerzeroedthick\n        state: present\n        autoselect_datastore: True\n        scsi_controller: 2\n        scsi_type: 'buslogic'\n        unit_number: 1\n        disk_mode: 'independent_nonpersistent'\n      - filename: \"[datastore1] path/to/existing/disk.vmdk\"\n  delegate_to: localhost\n  register: disk_facts\n\n- name: Add disks with specified shares to the virtual machine\n  community.vmware.vmware_guest_disk:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    disk:\n      - size_gb: 1\n        type: thin\n        datastore: datacluster0\n        state: present\n        scsi_controller: 1\n        unit_number: 1\n        disk_mode: 'independent_persistent'\n        shares:\n          level: custom\n          level_value: 1300\n  delegate_to: localhost\n  register: test_custom_shares\n\n- name: Add physical raw device mapping to virtual machine using name\n  community.vmware.vmware_guest_disk:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    validate_certs: no\n    name: \"Test_VM\"\n    disk:\n      - type: rdm\n        state: present\n        scsi_controller: 1\n        unit_number: 5\n        rdm_path: /vmfs/devices/disks/naa.060000003b1234efb453\n        compatibility_mode: 'physicalMode'\n\n- name: Add virtual raw device mapping to virtual machine using name and virtual mode\n  community.vmware.vmware_guest_disk:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    validate_certs: no\n    name: \"Test_VM\"\n    disk:\n      - type: rdm\n        state: present\n        scsi_controller: 1\n        unit_number: 5\n        rdm_path: /vmfs/devices/disks/naa.060000003b1234efb453\n        compatibility_mode: 'virtualMode'\n        disk_mode: 'persistent'\n\n- name: Add raw device mapping to virtual machine with Physical bus sharing\n  community.vmware.vmware_guest_disk:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    validate_certs: no\n    name: \"Test_VM\"\n    disk:\n      - type: rdm\n        state: present\n        scsi_controller: 1\n        unit_number: 5\n        rdm_path: /vmfs/devices/disks/naa.060000003b1234efb453\n        compatibility_mode: 'virtualMode'\n        disk_mode: 'persistent'\n        bus_sharing: physicalSharing\n\n- name: Add raw device mapping to virtual machine with Physical bus sharing and clustered disk\n  community.vmware.vmware_guest_disk:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    validate_certs: no\n    name: \"Test_VM\"\n    disk:\n      - type: rdm\n        state: present\n        scsi_controller: 1\n        unit_number: 5\n        compatibility_mode: 'virtualMode'\n        disk_mode: 'persistent'\n        bus_sharing: physicalSharing\n        filename: \"[datastore1] path/to/rdm/disk-marker.vmdk\"\n\n- name: create new disk with custom IO limits and shares in IO Limits\n  community.vmware.vmware_guest_disk:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    disk:\n      - size_gb: 1\n        type: thin\n        datastore: datacluster0\n        state: present\n        scsi_controller: 1\n        unit_number: 1\n        disk_mode: 'independent_persistent'\n        iolimit:\n            limit: 1506\n            shares:\n              level: custom\n              level_value: 1305\n  delegate_to: localhost\n  register: test_custom_IoLimit_shares\n\n- name: Remove disks from virtual machine using name\n  community.vmware.vmware_guest_disk:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    name: VM_225\n    disk:\n      - state: absent\n        scsi_controller: 1\n        unit_number: 1\n  delegate_to: localhost\n  register: disk_facts\n\n- name: Remove disk from virtual machine using moid\n  community.vmware.vmware_guest_disk:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    moid: vm-42\n    disk:\n      - state: absent\n        scsi_controller: 1\n        unit_number: 1\n  delegate_to: localhost\n  register: disk_facts\n\n- name: Remove disk from virtual machine but keep the VMDK file on the datastore\n  community.vmware.vmware_guest_disk:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    name: VM_225\n    disk:\n      - state: absent\n        scsi_controller: 1\n        unit_number: 2\n        destroy: no\n  delegate_to: localhost\n  register: disk_facts\n\n- name: Add disks to virtual machine using UUID to SATA and NVMe controller\n  community.vmware.vmware_guest_disk:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    validate_certs: no\n    uuid: 421e4592-c069-924d-ce20-7e7533fab926\n    disk:\n      - size_mb: 256\n        type: thin\n        datastore: datacluster0\n        state: present\n        controller_type: sata\n        controller_number: 1\n        unit_number: 1\n        disk_mode: 'persistent'\n      - size_gb: 1\n        state: present\n        autoselect_datastore: True\n        controller_type: nvme\n        controller_number: 2\n        unit_number: 3\n        disk_mode: 'independent_persistent'\n  delegate_to: localhost\n  register: disk_facts\n"
  },
  "community.vmware.vmware_guest_disk_facts": {
    "doc": {
      "description": "This module can be used to gather facts about disks belonging to given virtual machine.\nAll parameters and VMware object names are case sensitive.",
      "has_action": false,
      "notes": "Tested on vSphere 6.0 and 6.5.\nDisk UUID information is added in version 2.8.\nAdditional information about guest disk backings added in version 2.8.\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "datacenter": {
          "aliases": [],
          "description": "The datacenter name to which virtual machine belongs to.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "folder": {
          "aliases": [],
          "description": "Destination folder, absolute or relative path to find an existing guest.\nThis is required parameter, only if multiple VMs are found with same name.\nThe folder should include the datacenter. ESX's datacenter is ha-datacenter\nExamples:\n   folder: /ha-datacenter/vm\n   folder: ha-datacenter/vm\n   folder: /datacenter1/vm\n   folder: datacenter1/vm\n   folder: /datacenter1/vm/folder1\n   folder: datacenter1/vm/folder1\n   folder: /folder1/datacenter1/vm\n   folder: folder1/datacenter1/vm\n   folder: /folder1/datacenter1/vm/folder2",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "moid": {
          "aliases": [],
          "description": "Managed Object ID of the instance to manage if known, this is a unique identifier only within a single vCenter instance.\nThis is required if C(name) or C(uuid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the virtual machine.\nThis is required parameter, if parameter C(uuid) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_instance_uuid": {
          "aliases": [],
          "description": "Whether to use the VMware instance UUID rather than the BIOS UUID.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "UUID of the instance to gather facts if known, this is VMware's unique identifier.\nThis is required parameter, if parameter C(name) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gather facts about disks of given virtual machine"
    },
    "examples": "\n- name: Gather disk facts from virtual machine using UUID\n  community.vmware.vmware_guest_disk_facts:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: ha-datacenter\n    uuid: 421e4592-c069-924d-ce20-7e7533fab926\n  delegate_to: localhost\n  register: disk_facts\n\n- name: Gather disk facts from virtual machine using name\n  community.vmware.vmware_guest_disk_facts:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: ha-datacenter\n    name: VM_225\n  delegate_to: localhost\n  register: disk_facts\n\n- name: Gather disk facts from virtual machine using moid\n  community.vmware.vmware_guest_disk_facts:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: ha-datacenter\n    moid: vm-42\n  delegate_to: localhost\n  register: disk_facts\n"
  },
  "community.vmware.vmware_guest_disk_info": {
    "doc": {
      "description": "This module can be used to gather information about disks belonging to given virtual machine.\nAll parameters and VMware object names are case sensitive.",
      "has_action": false,
      "notes": "Tested on vSphere 6.0 and 6.5.\nDisk UUID information is added in version 2.8.\nAdditional information about guest disk backings added in version 2.8.\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "datacenter": {
          "aliases": [],
          "description": "The datacenter name to which virtual machine belongs to.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "folder": {
          "aliases": [],
          "description": "Destination folder, absolute or relative path to find an existing guest.\nThis is required parameter, only if multiple VMs are found with same name.\nThe folder should include the datacenter. ESX's datacenter is ha-datacenter\nExamples:\n   folder: /ha-datacenter/vm\n   folder: ha-datacenter/vm\n   folder: /datacenter1/vm\n   folder: datacenter1/vm\n   folder: /datacenter1/vm/folder1\n   folder: datacenter1/vm/folder1\n   folder: /folder1/datacenter1/vm\n   folder: folder1/datacenter1/vm\n   folder: /folder1/datacenter1/vm/folder2",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "moid": {
          "aliases": [],
          "description": "Managed Object ID of the instance to manage if known, this is a unique identifier only within a single vCenter instance.\nThis is required if C(name) or C(uuid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the virtual machine.\nThis is required parameter, if parameter C(uuid) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_instance_uuid": {
          "aliases": [],
          "description": "Whether to use the VMware instance UUID rather than the BIOS UUID.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "UUID of the instance to gather information if known, this is VMware's unique identifier.\nThis is required parameter, if parameter C(name) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gather info about disks of given virtual machine"
    },
    "examples": "\n- name: Gather disk info from virtual machine using UUID\n  community.vmware.vmware_guest_disk_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: ha-datacenter\n    uuid: 421e4592-c069-924d-ce20-7e7533fab926\n  delegate_to: localhost\n  register: disk_info\n\n- name: Gather disk info from virtual machine using name\n  community.vmware.vmware_guest_disk_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: ha-datacenter\n    name: VM_225\n  delegate_to: localhost\n  register: disk_info\n\n- name: Gather disk info from virtual machine using moid\n  community.vmware.vmware_guest_disk_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: ha-datacenter\n    moid: vm-42\n  delegate_to: localhost\n  register: disk_info\n"
  },
  "community.vmware.vmware_guest_facts": {
    "doc": {
      "description": "Gather information about a single VM on a VMware ESX cluster.\nThis module was called C(vmware_guest_facts) before Ansible 2.9. The usage did not change.",
      "has_action": false,
      "notes": "Tested on vSphere 5.5, 6.7\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "datacenter": {
          "aliases": [],
          "description": "Destination datacenter for the deploy operation",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "folder": {
          "aliases": [],
          "description": "Destination folder, absolute or relative path to find an existing guest.\nThis is required if name is supplied.\nThe folder should include the datacenter. ESX's datacenter is ha-datacenter\nExamples:\n   folder: /ha-datacenter/vm\n   folder: ha-datacenter/vm\n   folder: /datacenter1/vm\n   folder: datacenter1/vm\n   folder: /datacenter1/vm/folder1\n   folder: datacenter1/vm/folder1\n   folder: /folder1/datacenter1/vm\n   folder: folder1/datacenter1/vm\n   folder: /folder1/datacenter1/vm/folder2",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "moid": {
          "aliases": [],
          "description": "Managed Object ID of the instance to manage if known, this is a unique identifier only within a single vCenter instance.\nThis is required if C(name) or C(uuid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the VM to work with\nThis is required if C(uuid) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name_match": {
          "aliases": [],
          "description": "If multiple VMs matching the name, use the first or last found",
          "default": "first",
          "type": "str",
          "required": false,
          "choices": [
            "first",
            "last"
          ],
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "properties": {
          "aliases": [],
          "description": "Specify the properties to retrieve.\nIf not specified, all properties are retrieved (deeply).\nResults are returned in a structure identical to the vsphere API.\nExample:\n   properties: [\n      \"config.hardware.memoryMB\",\n      \"config.hardware.numCPU\",\n      \"guest.disk\",\n      \"overallStatus\"\n   ]\nOnly valid when C(schema) is C(vsphere).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "schema": {
          "aliases": [],
          "description": "Specify the output schema desired.\nThe 'summary' output schema is the legacy output from the module\nThe 'vsphere' output schema is the vSphere API class definition which requires pyvmomi>6.7.1",
          "default": "summary",
          "type": "str",
          "required": false,
          "choices": [
            "summary",
            "vsphere"
          ],
          "suboptions": {}
        },
        "tag_details": {
          "aliases": [],
          "description": "If set C(True), detail information about 'tags' returned.\nWithout this flag, the 'tags' returns a list of tag names.\nWith this flag, the 'tags' returns a list of dict about tag information with additional details like category name, category id, and tag id.\nThis parameter is added to maintain backward compatability.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "1.4.0",
          "suboptions": {}
        },
        "tags": {
          "aliases": [],
          "description": "Whether to show tags or not.\nIf set C(True), shows tags information. Returns a list of tag names.\nIf set C(False), hides tags information.\nvSphere Automation SDK is required.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_instance_uuid": {
          "aliases": [],
          "description": "Whether to use the VMware instance UUID rather than the BIOS UUID.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "UUID of the instance to manage if known, this is VMware's unique identifier.\nThis is required if C(name) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gather info about a single VM"
    },
    "examples": "\n- name: Gather info from standalone ESXi server having datacenter as 'ha-datacenter'\n  community.vmware.vmware_guest_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: ha-datacenter\n    uuid: 421e4592-c069-924d-ce20-7e7533fab926\n  delegate_to: localhost\n  register: info\n\n- name: Gather some info from a guest using the vSphere API output schema\n  community.vmware.vmware_guest_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    name: \"{{ vm_name }}\"\n    schema: \"vsphere\"\n    properties: [\"config.hardware.memoryMB\", \"guest.disk\", \"overallStatus\"]\n  delegate_to: localhost\n  register: info\n\n- name: Gather some information about a guest using MoID\n  community.vmware.vmware_guest_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    moid: vm-42\n    schema: \"vsphere\"\n    properties: [\"config.hardware.memoryMB\", \"guest.disk\", \"overallStatus\"]\n  delegate_to: localhost\n  register: vm_moid_info\n\n- name: Gather Managed object ID (moid) from a guest using the vSphere API output schema for REST Calls\n  community.vmware.vmware_guest_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    name: \"{{ vm_name }}\"\n    schema: \"vsphere\"\n    properties:\n      - _moId\n  delegate_to: localhost\n  register: moid_info\n\n- name: Gather detailed information about tags and category associated with the given VM\n  community.vmware.vmware_guest_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    name: \"{{ vm_name }}\"\n    tags: True\n    tag_details: True\n  register: detailed_tag_info\n"
  },
  "community.vmware.vmware_guest_file_operation": {
    "doc": {
      "description": "Module to copy a file to a VM, fetch a file from a VM and create or delete a directory in the guest OS.",
      "has_action": false,
      "notes": "Tested on vSphere 6\nOnly the first match against vm_id is used, even if there are multiple matches\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster": {
          "aliases": [],
          "description": "The cluster hosting the virtual machine.\nIf set, it will help to speed up virtual machine search.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "copy": {
          "aliases": [],
          "description": "Copy file to vm without requiring network.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "dest": {
              "aliases": [],
              "description": "File destination, path must be exist.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "overwrite": {
              "aliases": [],
              "description": "Overwrite or not.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "src": {
              "aliases": [],
              "description": "File source absolute or relative.",
              "type": "str",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "datacenter": {
          "aliases": [],
          "description": "The datacenter hosting the virtual machine.\nIf set, it will help to speed up virtual machine search.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "directory": {
          "aliases": [],
          "description": "Create or delete a directory.\nCan be used to create temp directory inside guest using mktemp operation.\nmktemp sets variable C(dir) in the result with the name of the new directory.\nmktemp operation option is added in version 2.8.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "operation": {
              "aliases": [],
              "description": "Operation to perform.",
              "type": "str",
              "required": true,
              "choices": [
                "create",
                "delete",
                "mktemp"
              ],
              "suboptions": {}
            },
            "path": {
              "aliases": [],
              "description": "Directory path.\nRequired for C(create) or C(remove).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "prefix": {
              "aliases": [],
              "description": "Temporary directory prefix.\nRequired for C(mktemp).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "recurse": {
              "aliases": [],
              "description": "Not required.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "suffix": {
              "aliases": [],
              "description": "Temporary directory suffix.\nRequired for C(mktemp).",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "fetch": {
          "aliases": [],
          "description": "Get file from virtual machine without requiring network.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "dest": {
              "aliases": [],
              "description": "File destination on localhost, path must be exist.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "src": {
              "aliases": [],
              "description": "The file on the remote system to fetch.\nThis I(must) be a file, not a directory.",
              "type": "str",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "folder": {
          "aliases": [],
          "description": "Destination folder, absolute path to find an existing guest or create the new guest.\nThe folder should include the datacenter. ESX's datacenter is ha-datacenter\nUsed only if C(vm_id_type) is C(inventory_path).\nExamples:\n   folder: /ha-datacenter/vm\n   folder: ha-datacenter/vm\n   folder: /datacenter1/vm\n   folder: datacenter1/vm\n   folder: /datacenter1/vm/folder1\n   folder: datacenter1/vm/folder1\n   folder: /folder1/datacenter1/vm\n   folder: folder1/datacenter1/vm\n   folder: /folder1/datacenter1/vm/folder2\n   folder: vm/folder2\n   folder: folder2",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vm_id": {
          "aliases": [],
          "description": "Name of the virtual machine to work with.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "vm_id_type": {
          "aliases": [],
          "description": "The VMware identification method by which the virtual machine will be identified.",
          "default": "vm_name",
          "type": "str",
          "required": false,
          "choices": [
            "uuid",
            "instance_uuid",
            "dns_name",
            "inventory_path",
            "vm_name"
          ],
          "suboptions": {}
        },
        "vm_password": {
          "aliases": [],
          "description": "The password used to login-in to the virtual machine.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "vm_username": {
          "aliases": [],
          "description": "The user to login in to the virtual machine.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi",
        "requests"
      ],
      "short_description": "Files operation in a VMware guest operating system without network"
    },
    "examples": "\n- name: Create directory inside a vm\n  community.vmware.vmware_guest_file_operation:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    vm_id: \"{{ guest_name }}\"\n    vm_username: \"{{ guest_username }}\"\n    vm_password: \"{{ guest_userpassword }}\"\n    directory:\n      path: \"/test\"\n      operation: create\n      recurse: no\n  delegate_to: localhost\n\n- name: copy file to vm\n  community.vmware.vmware_guest_file_operation:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    vm_id: \"{{ guest_name }}\"\n    vm_username: \"{{ guest_username }}\"\n    vm_password: \"{{ guest_userpassword }}\"\n    copy:\n        src: \"files/test.zip\"\n        dest: \"/root/test.zip\"\n        overwrite: False\n  delegate_to: localhost\n\n- name: fetch file from vm\n  community.vmware.vmware_guest_file_operation:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    vm_id: \"{{ guest_name }}\"\n    vm_username: \"{{ guest_username }}\"\n    vm_password: \"{{ guest_userpassword }}\"\n    fetch:\n        src: \"/root/test.zip\"\n        dest: \"files/test.zip\"\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_guest_find": {
    "doc": {
      "description": "Find the folder path(s) for a virtual machine by name or UUID",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the VM to work with.\nThis is required if C(uuid) parameter is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_instance_uuid": {
          "aliases": [],
          "description": "Whether to use the VMware instance UUID rather than the BIOS UUID.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "UUID of the instance to manage if known, this is VMware's BIOS UUID by default.\nThis is required if C(name) parameter is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Find the folder path(s) for a virtual machine by name or UUID"
    },
    "examples": "\n- name: Find Guest's Folder using name\n  community.vmware.vmware_guest_find:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    name: testvm\n  delegate_to: localhost\n  register: vm_folder\n\n- name: Find Guest's Folder using UUID\n  community.vmware.vmware_guest_find:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    uuid: 38c4c89c-b3d7-4ae6-ae4e-43c5118eae49\n  delegate_to: localhost\n  register: vm_folder\n"
  },
  "community.vmware.vmware_guest_info": {
    "doc": {
      "description": "Gather information about a single VM on a VMware ESX cluster.\nThis module was called C(vmware_guest_facts) before Ansible 2.9. The usage did not change.",
      "has_action": false,
      "notes": "Tested on vSphere 5.5, 6.7\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "datacenter": {
          "aliases": [],
          "description": "Destination datacenter for the deploy operation",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "folder": {
          "aliases": [],
          "description": "Destination folder, absolute or relative path to find an existing guest.\nThis is required if name is supplied.\nThe folder should include the datacenter. ESX's datacenter is ha-datacenter\nExamples:\n   folder: /ha-datacenter/vm\n   folder: ha-datacenter/vm\n   folder: /datacenter1/vm\n   folder: datacenter1/vm\n   folder: /datacenter1/vm/folder1\n   folder: datacenter1/vm/folder1\n   folder: /folder1/datacenter1/vm\n   folder: folder1/datacenter1/vm\n   folder: /folder1/datacenter1/vm/folder2",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "moid": {
          "aliases": [],
          "description": "Managed Object ID of the instance to manage if known, this is a unique identifier only within a single vCenter instance.\nThis is required if C(name) or C(uuid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the VM to work with\nThis is required if C(uuid) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name_match": {
          "aliases": [],
          "description": "If multiple VMs matching the name, use the first or last found",
          "default": "first",
          "type": "str",
          "required": false,
          "choices": [
            "first",
            "last"
          ],
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "properties": {
          "aliases": [],
          "description": "Specify the properties to retrieve.\nIf not specified, all properties are retrieved (deeply).\nResults are returned in a structure identical to the vsphere API.\nExample:\n   properties: [\n      \"config.hardware.memoryMB\",\n      \"config.hardware.numCPU\",\n      \"guest.disk\",\n      \"overallStatus\"\n   ]\nOnly valid when C(schema) is C(vsphere).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "schema": {
          "aliases": [],
          "description": "Specify the output schema desired.\nThe 'summary' output schema is the legacy output from the module\nThe 'vsphere' output schema is the vSphere API class definition which requires pyvmomi>6.7.1",
          "default": "summary",
          "type": "str",
          "required": false,
          "choices": [
            "summary",
            "vsphere"
          ],
          "suboptions": {}
        },
        "tag_details": {
          "aliases": [],
          "description": "If set C(True), detail information about 'tags' returned.\nWithout this flag, the 'tags' returns a list of tag names.\nWith this flag, the 'tags' returns a list of dict about tag information with additional details like category name, category id, and tag id.\nThis parameter is added to maintain backward compatability.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "1.4.0",
          "suboptions": {}
        },
        "tags": {
          "aliases": [],
          "description": "Whether to show tags or not.\nIf set C(True), shows tags information. Returns a list of tag names.\nIf set C(False), hides tags information.\nvSphere Automation SDK is required.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "use_instance_uuid": {
          "aliases": [],
          "description": "Whether to use the VMware instance UUID rather than the BIOS UUID.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "UUID of the instance to manage if known, this is VMware's unique identifier.\nThis is required if C(name) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gather info about a single VM"
    },
    "examples": "\n- name: Gather info from standalone ESXi server having datacenter as 'ha-datacenter'\n  community.vmware.vmware_guest_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: ha-datacenter\n    uuid: 421e4592-c069-924d-ce20-7e7533fab926\n  delegate_to: localhost\n  register: info\n\n- name: Gather some info from a guest using the vSphere API output schema\n  community.vmware.vmware_guest_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    name: \"{{ vm_name }}\"\n    schema: \"vsphere\"\n    properties: [\"config.hardware.memoryMB\", \"guest.disk\", \"overallStatus\"]\n  delegate_to: localhost\n  register: info\n\n- name: Gather some information about a guest using MoID\n  community.vmware.vmware_guest_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    moid: vm-42\n    schema: \"vsphere\"\n    properties: [\"config.hardware.memoryMB\", \"guest.disk\", \"overallStatus\"]\n  delegate_to: localhost\n  register: vm_moid_info\n\n- name: Gather Managed object ID (moid) from a guest using the vSphere API output schema for REST Calls\n  community.vmware.vmware_guest_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    name: \"{{ vm_name }}\"\n    schema: \"vsphere\"\n    properties:\n      - _moId\n  delegate_to: localhost\n  register: moid_info\n\n- name: Gather detailed information about tags and category associated with the given VM\n  community.vmware.vmware_guest_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    name: \"{{ vm_name }}\"\n    tags: True\n    tag_details: True\n  register: detailed_tag_info\n"
  },
  "community.vmware.vmware_guest_instant_clone": {
    "doc": {
      "description": "This module can be used for Creating a powered-on Instant Clone of a virtual machine.\nAll variables and VMware object names are case sensitive.\nM(community.vmware.vmware_guest) module is needed for creating a VM with poweredon state which would be used as a parent VM.\nM(community.vmware.vmware_guest_powerstate) module is also needed to poweroff the instant cloned module.\nThe powered off VM would in turn be deleted by again using M(community.vmware.vmware_guest) module.\nThus M(community.vmware.vmware_guest) module is necessary for removing Instant Cloned VM when VMs being created in testing environment.\nAlso GuestOS Customization has now been added with guestinfo_vars parameter.\nThe Parent VM must have The Guest customization Engine for instant Clone to customize Guest OS.\nOnly Linux Os in Parent VM enable support for native vSphere Guest Customization for Instant Clone in vSphere 7.",
      "has_action": false,
      "notes": "All modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "datacenter": {
          "aliases": [],
          "description": "Name of the datacenter, where VM to be deployed.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "datastore": {
          "aliases": [],
          "description": "The name of the datastore or the datastore cluster.\nIf datastore cluster name is specified, module will find the Storage DRS recommended datastore in that cluster.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "folder": {
          "aliases": [],
          "description": "Destination folder, absolute path to deploy the cloned vm.\nThis parameter is case sensitive.\nExamples:\nfolder: ha-datacenter/vm\nfolder: /datacenter1/vm",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "guestinfo_vars": {
          "aliases": [],
          "description": "Provides GuestOS Customization functionality in instant cloned VM.\nA list of key value pairs that will be passed to the destination VM.\nThese pairs should be used to provide user-defined customization to differentiate the destination VM from the source VM.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "version_added": "1.11.0",
          "suboptions": {
            "dns": {
              "aliases": [],
              "description": "dns is used to set the dns in Instant Cloned Guest Operating System..",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "domain": {
              "aliases": [],
              "description": "domain is used to set A fully qualified domain name (FQDN) or complete domain name for Instant Cloned Guest operating System.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "gateway": {
              "aliases": [],
              "description": "netmask is used to set the netmask in Instant Cloned Guest Operating System.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "hostname is used to obtain the DNS(Domain Name System) name and set the Guest system's hostname.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "ipaddress": {
              "aliases": [],
              "description": "ipaddress is used to set the ipaddress in Instant Cloned Guest Operating System.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "netmask": {
              "aliases": [],
              "description": "netmask is used to set the netmask in Instant Cloned Guest Operating System.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "host": {
          "aliases": [
            "esxi_hostname"
          ],
          "description": "Name of the ESX Host in datacenter in which to place cloned VM.\nThe host has to be a member of the cluster that contains the resource pool.\nRequired with I(resource_pool) to find resource pool details. This will be used as additional information when there are resource pools with same name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "moid": {
          "aliases": [],
          "description": "Managed Object ID of the vm instance to manage if known, this is a unique identifier only within a single vCenter instance.\nThis is required if C(parent_vm) or C(uuid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [
            "vm_name"
          ],
          "description": "Name of the Cloned virtual machine.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "parent_vm": {
          "aliases": [],
          "description": "Name of the parent virtual machine.\nThis is a required parameter, if parameter C(uuid) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "resource_pool": {
          "aliases": [],
          "description": "Name of the resource pool in datacenter in which to place deployed VM.\nRequired if I(cluster) is not specified.\nFor default or non-unique resource pool names, specify I(host) and I(cluster).\nC(Resources) is the default name of resource pool.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "use_instance_uuid": {
          "aliases": [],
          "description": "Whether to use the VMware instance UUID rather than the BIOS UUID.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "UUID of the vm instance to clone from, this is VMware's unique identifier.\nThis is a required parameter, if parameter C(parent_vm) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vm_password": {
          "aliases": [],
          "description": "The password used to login-in to the virtual machine.\nOnly required when using guest customization feature.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vm_username": {
          "aliases": [],
          "description": "The user to login-in to the virtual machine.\nOnly required when using guest customization feature.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "wait_vm_tools": {
          "aliases": [],
          "description": "Whether waiting until vm tools start after rebooting an instant clone vm.",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.12.0",
          "suboptions": {}
        },
        "wait_vm_tools_timeout": {
          "aliases": [],
          "description": "Define a timeout (in seconds) for I(the wait_vm_tools) parameter.",
          "default": "300",
          "type": "int",
          "required": false,
          "version_added": "1.12.0",
          "suboptions": {}
        }
      },
      "short_description": "Instant Clone VM",
      "version_added": "1.9.0"
    },
    "examples": "\n- name: Instant Clone a VM\n  community.vmware.vmware_guest_instant_clone:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    validate_certs: False\n    folder: \"{{ f0 }}\"\n    datastore: \"{{ rw_datastore }}\"\n    datacenter: \"{{ dc1 }}\"\n    host: \"{{ esxi1 }}\"\n    name: \"{{ Clone_vm }}\"\n    parent_vm: \"{{ testvm_1 }}\"\n    resource_pool: \"{{ test_resource_001 }}\"\n  register: vm_clone\n  delegate_to: localhost\n\n- name: set state to poweroff the Cloned VM\n  community.vmware.vmware_guest_powerstate:\n    validate_certs: false\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    name: \"cloned_vm_from_vm_cluster\"\n    folder: \"{{ f0 }}\"\n    state: powered-off\n  register: poweroff_instant_clone_from_vm_when_cluster\n  delegate_to: localhost\n\n- name: Clean VM\n  community.vmware.vmware_guest:\n    validate_certs: false\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    name: \"cloned_vm_from_vm_cluster\"\n    datacenter: \"{{ dc1 }}\"\n    state: absent\n  register: delete_instant_clone_from_vm_when_cluster\n  ignore_errors: true\n  delegate_to: localhost\n\n- name: Instant Clone a VM with guest_customization\n  community.vmware.vmware_guest_instant_clone:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    vm_username: \"root\"\n    vm_password: \"SuperSecret\"\n    validate_certs: False\n    folder: \"{{ f0 }}\"\n    datastore: \"{{ rw_datastore }}\"\n    datacenter: \"{{ dc1 }}\"\n    host: \"{{ esxi1 }}\"\n    guestinfo_vars:\n      - hostname: \"{{ guestinfo.ic.hostname }}\"\n        ipaddress: \"{{ guestinfo.ic.ipaddress }}\"\n        netmask: \"{{ guestinfo.ic.netmask }}\"\n        gateway: \"{{ guestinfo.ic.gateway }}\"\n        dns: \"{{ guestinfo.ic.dns }}\"\n        domain: \"{{ guestinfo.ic.domain }}\"\n    name: \"Instant_clone_guest_customize\"\n    parent_vm: \"test_vm1\"\n    resource_pool: DC0_C0_RP1\n  register: Instant_cloned_guest_customize\n  delegate_to: localhost\n\n- name: Instant Clone a VM when skipping optional params\n  community.vmware.vmware_guest_instant_clone:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    validate_certs: False\n    name: \"{{ Clone_vm }}\"\n    parent_vm: \"{{ testvm_1 }}\"\n    datacenter: \"{{ dc1 }}\"\n    datastore: \"{{ rw_datastore }}\"\n    host: \"{{ esxi1 }}\"\n  register: VM_clone_optional_arguments\n  delegate_to: localhost\n\n- name: Instant clone in check mode\n  community.vmware.vmware_guest_instant_clone:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    validate_certs: False\n    folder: \"{{ f0 }}\"\n    datastore: \"{{ rw_datastore }}\"\n    datacenter: \"{{ dc1 }}\"\n    host: \"{{ esx1 }}\"\n    name: \"{{ Clone_vm }}\"\n    parent_vm: \"{{ testvm_2 }}\"\n    resource_pool: \"{{ test_resource_001 }}\"\n  check_mode: true\n  register: check_mode_clone\n  delegate_to: localhost\n- debug:\n    var: check_mode_clone\n\n"
  },
  "community.vmware.vmware_guest_move": {
    "doc": {
      "description": "This module can be used to move virtual machines between folders.",
      "has_action": false,
      "notes": "Tested on vSphere 5.5 and vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "datacenter": {
          "aliases": [],
          "description": "Destination datacenter for the move operation",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "dest_folder": {
          "aliases": [],
          "description": "Absolute path to move an existing guest\nThe dest_folder should include the datacenter. ESX's datacenter is ha-datacenter.\nThis parameter is case sensitive.\nExamples:\n   dest_folder: /ha-datacenter/vm\n   dest_folder: ha-datacenter/vm\n   dest_folder: /datacenter1/vm\n   dest_folder: datacenter1/vm\n   dest_folder: /datacenter1/vm/folder1\n   dest_folder: datacenter1/vm/folder1\n   dest_folder: /folder1/datacenter1/vm\n   dest_folder: folder1/datacenter1/vm\n   dest_folder: /folder1/datacenter1/vm/folder2",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "moid": {
          "aliases": [],
          "description": "Managed Object ID of the instance to manage if known, this is a unique identifier only within a single vCenter instance.\nThis is required if C(name) or C(uuid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the existing virtual machine to move.\nThis is required if C(uuid) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name_match": {
          "aliases": [],
          "description": "If multiple virtual machines matching the name, use the first or last found.",
          "default": "first",
          "type": "str",
          "required": false,
          "choices": [
            "first",
            "last"
          ],
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_instance_uuid": {
          "aliases": [],
          "description": "Whether to use the VMware instance UUID rather than the BIOS UUID.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "UUID of the virtual machine to manage if known, this is VMware's unique identifier.\nThis is required if C(name) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Moves virtual machines in vCenter"
    },
    "examples": "\n- name: Move Virtual Machine\n  community.vmware.vmware_guest_move:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: datacenter\n    name: testvm-1\n    dest_folder: \"/{{ datacenter }}/vm\"\n  delegate_to: localhost\n\n- name: Move Virtual Machine using MoID\n  community.vmware.vmware_guest_move:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: datacenter\n    moid: vm-42\n    dest_folder: \"/{{ datacenter }}/vm\"\n  delegate_to: localhost\n\n- name: Get VM UUID\n  vmware_guest_facts:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter }}\"\n    folder: \"/{{ datacenter }}/vm\"\n    name: \"{{ vm_name }}\"\n  delegate_to: localhost\n  register: vm_facts\n\n- name: Get UUID from previous task and pass it to this task\n  community.vmware.vmware_guest_move:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter }}\"\n    uuid: \"{{ vm_facts.instance.hw_product_uuid }}\"\n    dest_folder: \"/DataCenter/vm/path/to/new/folder/where/we/want\"\n  delegate_to: localhost\n  register: facts\n"
  },
  "community.vmware.vmware_guest_network": {
    "doc": {
      "description": "This module is used to add, reconfigure, remove network adapter of given virtual machine.",
      "has_action": false,
      "notes": "Tested on vSphere 6.0, 6.5 and 6.7\nFor backwards compatibility network_data is returned when using the gather_network_info and networks parameters\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster": {
          "aliases": [],
          "description": "Name of cluster where VM belongs to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "connected": {
          "aliases": [],
          "description": "If NIC should be connected to the network.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "datacenter": {
          "aliases": [],
          "description": "Datacenter the VM belongs to.",
          "default": "ha-datacenter",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "device_type": {
          "aliases": [],
          "description": "Type of virtual network device.\nValid choices are - C(e1000), C(e1000e), C(pcnet32), C(vmxnet2), C(vmxnet3) (default), C(sriov).",
          "default": "vmxnet3",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "directpath_io": {
          "aliases": [],
          "description": "Enable Universal Pass-through (UPT).\nOnly compatible with the C(vmxnet3) device type.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "The hostname of the ESXi host where the VM belongs to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "folder": {
          "aliases": [],
          "description": "Folder location of given VM, this is only required when there's multiple VM's with the same name.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Force adapter creation even if an existing adapter is attached to the same network.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "gather_network_info": {
          "aliases": [
            "gather_network_facts"
          ],
          "description": "Return information about current guest network adapters.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "guest_control": {
          "aliases": [],
          "description": "Enables guest control over whether the connectable device is connected.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "label": {
          "aliases": [],
          "description": "Alter the name of the network adapter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mac_address": {
          "aliases": [],
          "description": "MAC address of the NIC that should be altered, if a MAC address is not supplied a new nic will be created.\nRequired when I(state=absent).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "moid": {
          "aliases": [],
          "description": "Managed Object ID of the instance to manage if known, this is a unique identifier only within a single vCenter instance.\nRequired if C(uuid) or C(name) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of virtual machine\nRequired if C(uuid) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "network_name": {
          "aliases": [],
          "description": "Name of network in vSphere.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "networks": {
          "aliases": [],
          "description": "This method will be deprecated, use loops in your playbook for multiple interfaces instead.\nA list of network adapters.\nC(mac) or C(label) or C(device_type) is required to reconfigure or remove an existing network adapter.\nIf there are multiple network adapters with the same C(device_type), you should set C(label) or C(mac) to match one of them, or will apply changes on all network adapters with the C(device_type) specified.\nC(mac), C(label), C(device_type) is the order of precedence from greatest to least if all set.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "connected": {
              "aliases": [],
              "description": "Indicates that virtual network adapter connects to the associated virtual machine.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "device_type": {
              "aliases": [],
              "description": "Valid virtual network device types are C(e1000), C(e1000e), C(pcnet32), C(vmxnet2), C(vmxnet3) (default), C(sriov).\nUsed to add new network adapter, reconfigure or remove the existing network adapter with this type.\nIf C(mac) and C(label) not specified or not find network adapter by C(mac) or C(label) will use this parameter.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "directpath_io": {
              "aliases": [],
              "description": "If set, Universal Pass-Through (UPT or DirectPath I/O) will be enabled on the network adapter.\nUPT is only compatible for Vmxnet3 adapter.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "dvswitch_name": {
              "aliases": [],
              "description": "Name of the distributed vSwitch.\nThis value is required if multiple distributed portgroups exists with the same name.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "label": {
              "aliases": [],
              "description": "Label of the existing network adapter to be reconfigured or removed, e.g., \"Network adapter 1\".",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "mac": {
              "aliases": [],
              "description": "MAC address of the existing network adapter to be reconfigured or removed.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "manual_mac": {
              "aliases": [],
              "description": "Manual specified MAC address of the network adapter when creating, or reconfiguring.\nIf not specified when creating new network adapter, mac address will be generated automatically.\nWhen reconfigure MAC address, VM should be in powered off state.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "name": {
              "aliases": [],
              "description": "Name of the portgroup or distributed virtual portgroup for this interface.\nWhen specifying distributed virtual portgroup make sure given C(esxi_hostname) or C(cluster) is associated with it.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "start_connected": {
              "aliases": [],
              "description": "Indicates that virtual network adapter starts with associated virtual machine powers on.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "state": {
              "aliases": [],
              "description": "State of the network adapter.\nIf set to C(present), then will do reconfiguration for the specified network adapter.\nIf set to C(new), then will add the specified network adapter.\nIf set to C(absent), then will remove this network adapter.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "vlan": {
              "aliases": [],
              "description": "VLAN number for this interface.",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "start_connected": {
          "aliases": [],
          "description": "If NIC should be connected to network on startup.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "NIC state.\nWhen C(state=present), a nic will be added if a mac address or label does not previously exists or is unset.\nWhen C(state=absent), the I(mac_address) parameter has to be set.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "switch": {
          "aliases": [],
          "description": "Name of the (dv)switch for destination network, this is only required for dvswitches.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "use_instance_uuid": {
          "aliases": [],
          "description": "Whether to use the VMware instance UUID rather than the BIOS UUID.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "vm uuid\nRequired if C(name) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vlan_id": {
          "aliases": [],
          "description": "VLAN id associated with the network.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "wake_onlan": {
          "aliases": [],
          "description": "Enable wake on LAN.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "PyVmomi"
      ],
      "short_description": "Manage network adapters of specified virtual machine in given vCenter infrastructure",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: change network for 00:50:56:11:22:33 on vm01.domain.fake\n  community.vmware.vmware_guest_network:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    name: vm01.domain.fake\n    mac_address: 00:50:56:11:22:33\n    network_name: admin-network\n    state: present\n\n- name: add a nic on network with vlan id 2001 for 422d000d-2000-ffff-0000-b00000000000\n  community.vmware.vmware_guest_network:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    uuid: 422d000d-2000-ffff-0000-b00000000000\n    vlan_id: 2001\n\n- name: remove nic with mac 00:50:56:11:22:33 from vm01.domain.fake\n  community.vmware.vmware_guest_network:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    mac_address: 00:50:56:11:22:33\n    name: vm01.domain.fake\n    state: absent\n\n- name: add multiple nics to vm01.domain.fake\n  community.vmware.vmware_guest_network:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    name: vm01.domain.fake\n    state: present\n    vlan_id: \"{{ item.vlan_id | default(omit) }}\"\n    network_name: \"{{ item.network_name | default(omit) }}\"\n    connected: \"{{ item.connected | default(omit) }}\"\n  loop:\n    - vlan_id: 2000\n      connected: false\n    - network_name: guest-net\n      connected: true\n"
  },
  "community.vmware.vmware_guest_powerstate": {
    "doc": {
      "description": "Power on / Power off / Restart a virtual machine.",
      "has_action": false,
      "notes": "All modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "answer": {
          "aliases": [],
          "description": "A list of questions to answer, should one or more arise while waiting for the task to complete.\nSome common uses are to allow a cdrom to be changed even if locked, or to answer the question as to whether a VM was copied or moved.\nThe I(answer) can be used if I(state) is C(powered-on).",
          "type": "list",
          "required": false,
          "elements": "dict",
          "version_added": "1.11.0",
          "suboptions": {
            "question": {
              "aliases": [],
              "description": "The message id, for example C(msg.uuid.altered).",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "response": {
              "aliases": [],
              "description": "The choice key, for example C(button.uuid.copiedTheVM).",
              "type": "str",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "datacenter": {
          "aliases": [],
          "description": "The I(datacenter) where the VM you'd like to operate the power.\nThis parameter is case sensitive.",
          "default": "ha-datacenter",
          "type": "str",
          "required": false,
          "version_added": "1.13.0",
          "suboptions": {}
        },
        "folder": {
          "aliases": [],
          "description": "Destination folder, absolute or relative path to find an existing guest.\nThe folder should include the datacenter. ESX's datacenter is ha-datacenter\nExamples:\n   folder: /ha-datacenter/vm\n   folder: ha-datacenter/vm\n   folder: /datacenter1/vm\n   folder: datacenter1/vm\n   folder: /datacenter1/vm/folder1\n   folder: datacenter1/vm/folder1\n   folder: /folder1/datacenter1/vm\n   folder: folder1/datacenter1/vm\n   folder: /folder1/datacenter1/vm/folder2",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "Ignore warnings and complete the actions.\nThis parameter is useful while forcing virtual machine state.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "moid": {
          "aliases": [],
          "description": "Managed Object ID of the instance to manage if known, this is a unique identifier only within a single vCenter instance.\nThis is required if C(name) or C(uuid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the virtual machine to work with.\nVirtual machine names in vCenter are not necessarily unique, which may be problematic, see C(name_match).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name_match": {
          "aliases": [],
          "description": "If multiple virtual machines matching the name, use the first or last found.",
          "default": "first",
          "type": "str",
          "required": false,
          "choices": [
            "first",
            "last"
          ],
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "schedule_task_description": {
          "aliases": [],
          "description": "Description of schedule task.\nValid only if C(scheduled_at) is specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "schedule_task_enabled": {
          "aliases": [],
          "description": "Flag to indicate whether the scheduled task is enabled or disabled.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "schedule_task_name": {
          "aliases": [],
          "description": "Name of schedule task.\nValid only if C(scheduled_at) is specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "scheduled_at": {
          "aliases": [],
          "description": "Date and time in string format at which specified task needs to be performed.\nThe required format for date and time - 'dd/mm/yyyy hh:mm'.\nScheduling task requires vCenter server. A standalone ESXi server does not support this option.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Set the state of the virtual machine.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "powered-off",
            "powered-on",
            "reboot-guest",
            "restarted",
            "shutdown-guest",
            "suspended",
            "present"
          ],
          "suboptions": {}
        },
        "state_change_timeout": {
          "aliases": [],
          "description": "If the C(state) is set to C(shutdown-guest), by default the module will return immediately after sending the shutdown signal.\nIf this argument is set to a positive integer, the module will instead wait for the VM to reach the poweredoff state.\nThe value sets a timeout in seconds for the module to wait for the state change.",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_instance_uuid": {
          "aliases": [],
          "description": "Whether to use the VMware instance UUID rather than the BIOS UUID.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "UUID of the instance to manage if known, this is VMware's unique identifier.\nThis is required if C(name) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Manages power states of virtual machines in vCenter"
    },
    "examples": "\n- name: Set the state of a virtual machine to poweroff\n  community.vmware.vmware_guest_powerstate:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    folder: \"/{{ datacenter_name }}/vm/my_folder\"\n    name: \"{{ guest_name }}\"\n    state: powered-off\n  delegate_to: localhost\n  register: deploy\n\n- name: Set the state of a virtual machine to poweron using MoID\n  community.vmware.vmware_guest_powerstate:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    folder: \"/{{ datacenter_name }}/vm/my_folder\"\n    moid: vm-42\n    state: powered-on\n  delegate_to: localhost\n  register: deploy\n\n- name: Set the state of a virtual machine to poweroff at given scheduled time\n  community.vmware.vmware_guest_powerstate:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    folder: \"/{{ datacenter_name }}/vm/my_folder\"\n    name: \"{{ guest_name }}\"\n    state: powered-off\n    scheduled_at: \"09/01/2018 10:18\"\n    schedule_task_name: \"task_00001\"\n    schedule_task_description: \"Sample task to poweroff VM\"\n    schedule_task_enabled: True\n  delegate_to: localhost\n  register: deploy_at_schedule_datetime\n\n- name: Wait for the virtual machine to shutdown\n  community.vmware.vmware_guest_powerstate:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    name: \"{{ guest_name }}\"\n    state: shutdown-guest\n    state_change_timeout: 200\n  delegate_to: localhost\n  register: deploy\n\n- name: Automatically answer if a question locked a virtual machine\n  block:\n    - name: Power on a virtual machine without the answer param\n      vmware_guest_powerstate:\n        hostname: \"{{ esxi_hostname }}\"\n        username: \"{{ esxi_username }}\"\n        password: \"{{ esxi_password }}\"\n        validate_certs: false\n        folder: \"{{ f1 }}\"\n        name: \"{{ vm_name }}\"\n        state: powered-on\n  rescue:\n    - name: Power on a virtual machine with the answer param\n      vmware_guest_powerstate:\n        hostname: \"{{ esxi_hostname }}\"\n        username: \"{{ esxi_username }}\"\n        password: \"{{ esxi_password }}\"\n        validate_certs: false\n        folder: \"{{ f1 }}\"\n        name: \"{{ vm_name }}\"\n        answer:\n          - question: \"msg.uuid.altered\"\n            response: \"button.uuid.copiedTheVM\"\n        state: powered-on\n"
  },
  "community.vmware.vmware_guest_register_operation": {
    "doc": {
      "description": "This module can register or unregister VMs to the inventory.",
      "has_action": false,
      "notes": "All modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster": {
          "aliases": [],
          "description": "Specify a cluster name to register VM.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "datacenter": {
          "aliases": [],
          "description": "Destination datacenter for the register/unregister operation.\nThis parameter is case sensitive.",
          "default": "ha-datacenter",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "The ESXi hostname where the virtual machine will run.\nThis parameter is case sensitive.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "folder": {
          "aliases": [],
          "description": "Description folder, absolute path of the target folder.\nThe folder should include the datacenter. ESX's datacenter is ha-datacenter.\nThis parameter is case sensitive.\nExamples:\n   folder: /ha-datacenter/vm\n   folder: ha-datacenter/vm\n   folder: /datacenter1/vm\n   folder: datacenter1/vm\n   folder: /datacenter1/vm/folder1\n   folder: datacenter1/vm/folder1",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Specify VM name to be registered in the inventory.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [],
          "description": "Specify the path of vmx file.\nExamples:\n    [datastore1] vm/vm.vmx\n    [datastore1] vm/vm.vmtx",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "resource_pool": {
          "aliases": [],
          "description": "Specify a resource pool name to register VM.\nThis parameter is case sensitive.\nResource pool should be child of the selected host parent.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Specify the state the virtual machine should be in.\nif set to C(present), register VM in inventory.\nif set to C(absent), unregister VM from inventory.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "template": {
          "aliases": [],
          "description": "Whether to register VM as a template.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "UUID of the virtual machine to manage if known, this is VMware's unique identifier.\nIf virtual machine does not exists, then this parameter is ignored.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "PyVmomi"
      ],
      "short_description": "VM inventory registration operation"
    },
    "examples": "\n- name: Register VM to inventory\n  community.vmware.vmware_guest_register_operation:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter }}\"\n    folder: \"/vm\"\n    esxi_hostname: \"{{ esxi_hostname }}\"\n    name: \"{{ vm_name }}\"\n    template: false\n    path: \"[datastore1] vm/vm.vmx\"\n    state: present\n\n- name: Register VM in resource pool\n  community.vmware.vmware_guest_register_operation:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter }}\"\n    folder: \"/vm\"\n    resource_pool: \"{{ resource_pool }}\"\n    name: \"{{ vm_name }}\"\n    template: false\n    path: \"[datastore1] vm/vm.vmx\"\n    state: present\n\n- name: Register VM in Cluster\n  community.vmware.vmware_guest_register_operation:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter }}\"\n    folder: \"/vm\"\n    cluster: \"{{ cluster_name }}\"\n    name: \"{{ vm_name }}\"\n    template: false\n    path: \"[datastore1] vm/vm.vmx\"\n    state: present\n\n- name: UnRegister VM from inventory\n  community.vmware.vmware_guest_register_operation:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter }}\"\n    folder: \"/vm\"\n    name: \"{{ vm_name }}\"\n    state: absent\n"
  },
  "community.vmware.vmware_guest_screenshot": {
    "doc": {
      "description": "This module is used to take screenshot of the given virtual machine when virtual machine is powered on.\nAll parameters and VMware object names are case sensitive.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5 and 6.7\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster": {
          "aliases": [],
          "description": "The name of cluster where the virtual machine is running.\nThis is a required parameter, if C(esxi_hostname) is not set.\nC(esxi_hostname) and C(cluster) are mutually exclusive parameters.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "datacenter": {
          "aliases": [],
          "description": "The datacenter name to which virtual machine belongs to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "The ESXi hostname where the virtual machine is running.\nThis is a required parameter, if C(cluster) is not set.\nC(esxi_hostname) and C(cluster) are mutually exclusive parameters.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "folder": {
          "aliases": [],
          "description": "Destination folder, absolute or relative path to find an existing guest.\nThis is a required parameter, only if multiple VMs are found with same name.\nThe folder should include the datacenter. ESXi server's datacenter is ha-datacenter.\nExamples:\n   folder: /ha-datacenter/vm\n   folder: ha-datacenter/vm\n   folder: /datacenter1/vm\n   folder: datacenter1/vm\n   folder: /datacenter1/vm/folder1\n   folder: datacenter1/vm/folder1\n   folder: /folder1/datacenter1/vm\n   folder: folder1/datacenter1/vm\n   folder: /folder1/datacenter1/vm/folder2",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "local_path": {
          "aliases": [],
          "description": "If C(local_path) is not set, the created screenshot file will be kept in the directory of the virtual machine on ESXi host. If C(local_path) is set to a valid path on local machine, then the screenshot file will be downloaded from ESXi host to the local directory.\nIf not download screenshot file to local machine, you can open it through the returned file URL in screenshot facts manually.",
          "type": "path",
          "required": false,
          "suboptions": {}
        },
        "moid": {
          "aliases": [],
          "description": "Managed Object ID of the instance to manage if known, this is a unique identifier only within a single vCenter instance.\nThis is required if C(name) or C(uuid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the virtual machine.\nThis is a required parameter, if parameter C(uuid) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "UUID of the instance to gather facts if known, this is VMware's unique identifier.\nThis is a required parameter, if parameter C(name) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Create a screenshot of the Virtual Machine console."
    },
    "examples": "\n- name: take a screenshot of the virtual machine console\n  community.vmware.vmware_guest_screenshot:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    folder: \"{{ folder_name }}\"\n    name: \"{{ vm_name }}\"\n    local_path: \"/tmp/\"\n  delegate_to: localhost\n  register: take_screenshot\n\n- name: Take a screenshot of the virtual machine console using MoID\n  community.vmware.vmware_guest_screenshot:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    folder: \"{{ folder_name }}\"\n    moid: vm-42\n    local_path: \"/tmp/\"\n  delegate_to: localhost\n  register: take_screenshot\n"
  },
  "community.vmware.vmware_guest_sendkey": {
    "doc": {
      "description": "This module is used to send keystrokes to given virtual machine.\nAll parameters and VMware object names are case sensitive.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5 and 6.7\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster": {
          "aliases": [],
          "description": "The name of cluster where the virtual machine is running.\nThis is a required parameter, if C(esxi_hostname) is not set.\nC(esxi_hostname) and C(cluster) are mutually exclusive parameters.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "datacenter": {
          "aliases": [],
          "description": "The datacenter name to which virtual machine belongs to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "The ESXi hostname where the virtual machine is running.\nThis is a required parameter, if C(cluster) is not set.\nC(esxi_hostname) and C(cluster) are mutually exclusive parameters.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "folder": {
          "aliases": [],
          "description": "Destination folder, absolute or relative path to find an existing guest.\nThis is a required parameter, only if multiple VMs are found with same name.\nThe folder should include the datacenter. ESXi server's datacenter is ha-datacenter.\nExamples:\n   folder: /ha-datacenter/vm\n   folder: ha-datacenter/vm\n   folder: /datacenter1/vm\n   folder: datacenter1/vm\n   folder: /datacenter1/vm/folder1\n   folder: datacenter1/vm/folder1\n   folder: /folder1/datacenter1/vm\n   folder: folder1/datacenter1/vm\n   folder: /folder1/datacenter1/vm/folder2",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "keys_send": {
          "aliases": [],
          "description": "The list of the keys will be sent to the virtual machine.\nValid values are C(ENTER), C(ESC), C(BACKSPACE), C(TAB), C(SPACE), C(CAPSLOCK), C(HOME), C(DELETE), C(END), C(CTRL_ALT_DEL), C(CTRL_C) and C(F1) to C(F12), C(RIGHTARROW), C(LEFTARROW), C(DOWNARROW), C(UPARROW).\nIf both C(keys_send) and C(string_send) are specified, keys in C(keys_send) list will be sent in front of the C(string_send).\nValues C(HOME) and C(END) are added in version 1.17.0.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "moid": {
          "aliases": [],
          "description": "Managed Object ID of the instance to manage if known, this is a unique identifier only within a single vCenter instance.\nThis is required if C(name) or C(uuid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the virtual machine.\nThis is a required parameter, if parameter C(uuid) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sleep_time": {
          "aliases": [],
          "description": "Sleep time in seconds between two keys or string sent to the virtual machine.\nAPI is faster than actual key or string send to virtual machine, this parameter allow to control delay between keys and/or strings.",
          "default": "0",
          "type": "int",
          "required": false,
          "version_added": "1.4.0",
          "suboptions": {}
        },
        "string_send": {
          "aliases": [],
          "description": "The string will be sent to the virtual machine.\nThis string can contain valid special character, alphabet and digit on the keyboard.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "UUID of the instance to gather facts if known, this is VMware's unique identifier.\nThis is a required parameter, if parameter C(name) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Send USB HID codes to the Virtual Machine's keyboard."
    },
    "examples": "\n- name: Send list of keys to virtual machine\n  community.vmware.vmware_guest_sendkey:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    folder: \"{{ folder_name }}\"\n    name: \"{{ vm_name }}\"\n    keys_send:\n      - TAB\n      - TAB\n      - ENTER\n  delegate_to: localhost\n  register: keys_num_sent\n\n- name: Send list of keys to virtual machine using MoID\n  community.vmware.vmware_guest_sendkey:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    folder: \"{{ folder_name }}\"\n    moid: vm-42\n    keys_send:\n      - CTRL_ALT_DEL\n  delegate_to: localhost\n  register: ctrl_alt_del_sent\n\n- name: Send a string to virtual machine\n  community.vmware.vmware_guest_sendkey:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    folder: \"{{ folder_name }}\"\n    name: \"{{ vm_name }}\"\n    string_send: \"user_logon\"\n  delegate_to: localhost\n  register: keys_num_sent\n"
  },
  "community.vmware.vmware_guest_serial_port": {
    "doc": {
      "description": "This module can be used to manage serial ports on an existing VM",
      "has_action": false,
      "notes": "All modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "backings": {
          "aliases": [],
          "description": "A list of backings for serial ports.\nC(backing_type) (str): is required to add or reconfigure or remove an existing serial port.",
          "type": "list",
          "required": true,
          "elements": "dict",
          "suboptions": {
            "backing_type": {
              "aliases": [
                "type"
              ],
              "description": "Backing type is required for the serial ports to be added or reconfigured or removed.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "device_name": {
              "aliases": [],
              "description": "Serial device absolutely path.\nRequired when I(backing_type=device).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "direction": {
              "aliases": [],
              "description": "The direction of the connection.\nRequired when I(backing_type=network).",
              "default": "client",
              "type": "str",
              "required": false,
              "choices": [
                "client",
                "server"
              ],
              "suboptions": {}
            },
            "endpoint": {
              "aliases": [],
              "description": "When you use serial port pipe backing to connect a virtual machine to another process, you must define the endpoints.\nRequired when I(backing_type=pipe).",
              "default": "client",
              "type": "str",
              "required": false,
              "choices": [
                "client",
                "server"
              ],
              "suboptions": {}
            },
            "file_path": {
              "aliases": [],
              "description": "File path for the host file used in this backing. Fully qualified path is required, like <datastore_name>/<file_name>.\nRequired when I(backing_type=file).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "no_rx_loss": {
              "aliases": [],
              "description": "Enables optimized data transfer over the pipe.\nRequired when I(backing_type=pipe).",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "pipe_name": {
              "aliases": [],
              "description": "Pipe name for the host pipe.\nRequired when I(backing_type=pipe).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "service_uri": {
              "aliases": [],
              "description": "Identifies the local host or a system on the network, depending on the value of I(direction).\nIf you use the virtual machine as a server, the URI identifies the host on which the virtual machine runs.\nIn this case, the host name part of the URI should be empty, or it should specify the address of the local host.\nIf you use the virtual machine as a client, the URI identifies the remote system on the network.\nRequired when I(backing_type=network).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "state": {
              "aliases": [],
              "description": "C(state) is required to identify whether we are adding, modifying or removing the serial port.\nIf C(state) is set to C(present), a serial port will be added or modified.\nIf C(state) is set to C(absent), an existing serial port will be removed.\nIf an existing serial port to modify or remove, C(backing_type) and either of C(service_uri) or C(pipe_name) or C(device_name) or C(file_path) are required.",
              "default": "present",
              "type": "str",
              "required": false,
              "choices": [
                "present",
                "absent"
              ],
              "suboptions": {}
            },
            "yield_on_poll": {
              "aliases": [],
              "description": "Enables CPU yield behavior.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "moid": {
          "aliases": [],
          "description": "Managed Object ID of the instance to manage if known, this is a unique identifier only within a single vCenter instance.\nThis is required if C(name) or C(uuid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the virtual machine.\nThis is a required parameter, if parameter C(uuid) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_instance_uuid": {
          "aliases": [],
          "description": "Whether to use the VMware instance UUID rather than the BIOS UUID.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "UUID of the instance to manage the serial ports, this is VMware's unique identifier.\nThis is a required parameter, if parameter C(name) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage serial ports on an existing VM"
    },
    "examples": "\n# Create serial ports\n- name: Create multiple serial ports with Backing type - network, pipe, device and file\n  community.vmware.vmware_guest_serial_port:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    name: \"test_vm1\"\n    backings:\n    - type: 'network'\n      direction: 'client'\n      service_uri: 'tcp://6000'\n      yield_on_poll: True\n    - type: 'pipe'\n      pipe_name: 'serial_pipe'\n      endpoint: 'client'\n    - type: 'device'\n      device_name: '/dev/char/serial/uart0'\n    - type: 'file'\n      file_path: '[datastore1]/file1'\n      yield_on_poll:  True\n    register: create_multiple_ports\n\n# Modify existing serial port\n- name: Modify Network backing type\n  community.vmware.vmware_guest_serial_port:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    name: '{{ name }}'\n    backings:\n    - type: 'network'\n      state: 'present'\n      direction: 'server'\n      service_uri: 'tcp://6000'\n  delegate_to: localhost\n\n# Remove serial port\n- name: Remove pipe backing type\n  community.vmware.vmware_guest_serial_port:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    name: '{{ name }}'\n    backings:\n    - type: 'pipe'\n      state: 'absent'\n  delegate_to: localhost\n\n"
  },
  "community.vmware.vmware_guest_snapshot": {
    "doc": {
      "description": "This module can be used to create, delete and update snapshot(s) of the given virtual machine.\nAll parameters and VMware object names are case sensitive.",
      "has_action": false,
      "notes": "Tested on vSphere 5.5, 6.0 and 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "datacenter": {
          "aliases": [],
          "description": "Destination datacenter for the deploy operation.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Define an arbitrary description to attach to snapshot.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "folder": {
          "aliases": [],
          "description": "Destination folder, absolute or relative path to find an existing guest.\nThis is required parameter, if C(name) is supplied.\nThe folder should include the datacenter. ESX's datacenter is ha-datacenter.\nExamples:\n   folder: /ha-datacenter/vm\n   folder: ha-datacenter/vm\n   folder: /datacenter1/vm\n   folder: datacenter1/vm\n   folder: /datacenter1/vm/folder1\n   folder: datacenter1/vm/folder1\n   folder: /folder1/datacenter1/vm\n   folder: folder1/datacenter1/vm\n   folder: /folder1/datacenter1/vm/folder2",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "memory_dump": {
          "aliases": [],
          "description": "If set to C(true), memory dump of virtual machine is also included in snapshot.\nNote that memory snapshots take time and resources, this will take longer time to create.\nIf virtual machine does not provide capability to take memory snapshot, then this flag is set to C(false).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "moid": {
          "aliases": [],
          "description": "Managed Object ID of the instance to manage if known, this is a unique identifier only within a single vCenter instance.\nThis is required if C(name) or C(uuid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the virtual machine to work with.\nThis is required parameter, if C(uuid) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name_match": {
          "aliases": [],
          "description": "If multiple VMs matching the name, use the first or last found.",
          "default": "first",
          "type": "str",
          "required": false,
          "choices": [
            "first",
            "last"
          ],
          "suboptions": {}
        },
        "new_description": {
          "aliases": [],
          "description": "Value to change the description of an existing snapshot to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "new_snapshot_name": {
          "aliases": [],
          "description": "Value to rename the existing snapshot to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "quiesce": {
          "aliases": [],
          "description": "If set to C(true) and virtual machine is powered on, it will quiesce the file system in virtual machine.\nNote that VMware Tools are required for this flag.\nIf virtual machine is powered off or VMware Tools are not available, then this flag is set to C(false).\nIf virtual machine does not provide capability to take quiesce snapshot, then this flag is set to C(false).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "remove_children": {
          "aliases": [],
          "description": "If set to C(true) and state is set to C(absent), then entire snapshot subtree is set for removal.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "snapshot_name": {
          "aliases": [],
          "description": "Sets the snapshot name to manage.\nThis param is required only if state is not C(remove_all)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Manage snapshot(s) attached to a specific virtual machine.\nIf set to C(present) and snapshot absent, then will create a new snapshot with the given name.\nIf set to C(present) and snapshot present, then no changes are made.\nIf set to C(absent) and snapshot present, then snapshot with the given name is removed.\nIf set to C(absent) and snapshot absent, then no changes are made.\nIf set to C(revert) and snapshot present, then virtual machine state is reverted to the given snapshot.\nIf set to C(revert) and snapshot absent, then no changes are made.\nIf set to C(remove_all) and snapshot(s) present, then all snapshot(s) will be removed.\nIf set to C(remove_all) and snapshot(s) absent, then no changes are made.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "revert",
            "remove_all"
          ],
          "suboptions": {}
        },
        "use_instance_uuid": {
          "aliases": [],
          "description": "Whether to use the VMware instance UUID rather than the BIOS UUID.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "UUID of the instance to manage if known, this is VMware's BIOS UUID by default.\nThis is required if C(name) or C(moid) parameter is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Manages virtual machines snapshots in vCenter"
    },
    "examples": "\n  - name: Create a snapshot\n    community.vmware.vmware_guest_snapshot:\n      hostname: \"{{ vcenter_hostname }}\"\n      username: \"{{ vcenter_username }}\"\n      password: \"{{ vcenter_password }}\"\n      datacenter: \"{{ datacenter_name }}\"\n      folder: \"/{{ datacenter_name }}/vm/\"\n      name: \"{{ guest_name }}\"\n      state: present\n      snapshot_name: snap1\n      description: snap1_description\n    delegate_to: localhost\n\n  - name: Remove a snapshot\n    community.vmware.vmware_guest_snapshot:\n      hostname: \"{{ vcenter_hostname }}\"\n      username: \"{{ vcenter_username }}\"\n      password: \"{{ vcenter_password }}\"\n      datacenter: \"{{ datacenter_name }}\"\n      folder: \"/{{ datacenter_name }}/vm/\"\n      name: \"{{ guest_name }}\"\n      state: absent\n      snapshot_name: snap1\n    delegate_to: localhost\n\n  - name: Revert to a snapshot\n    community.vmware.vmware_guest_snapshot:\n      hostname: \"{{ vcenter_hostname }}\"\n      username: \"{{ vcenter_username }}\"\n      password: \"{{ vcenter_password }}\"\n      datacenter: \"{{ datacenter_name }}\"\n      folder: \"/{{ datacenter_name }}/vm/\"\n      name: \"{{ guest_name }}\"\n      state: revert\n      snapshot_name: snap1\n    delegate_to: localhost\n\n  - name: Remove all snapshots of a VM\n    community.vmware.vmware_guest_snapshot:\n      hostname: \"{{ vcenter_hostname }}\"\n      username: \"{{ vcenter_username }}\"\n      password: \"{{ vcenter_password }}\"\n      datacenter: \"{{ datacenter_name }}\"\n      folder: \"/{{ datacenter_name }}/vm/\"\n      name: \"{{ guest_name }}\"\n      state: remove_all\n    delegate_to: localhost\n\n  - name: Remove all snapshots of a VM using MoID\n    community.vmware.vmware_guest_snapshot:\n      hostname: \"{{ vcenter_hostname }}\"\n      username: \"{{ vcenter_username }}\"\n      password: \"{{ vcenter_password }}\"\n      datacenter: \"{{ datacenter_name }}\"\n      folder: \"/{{ datacenter_name }}/vm/\"\n      moid: vm-42\n      state: remove_all\n    delegate_to: localhost\n\n  - name: Take snapshot of a VM using quiesce and memory flag on\n    community.vmware.vmware_guest_snapshot:\n      hostname: \"{{ vcenter_hostname }}\"\n      username: \"{{ vcenter_username }}\"\n      password: \"{{ vcenter_password }}\"\n      datacenter: \"{{ datacenter_name }}\"\n      folder: \"/{{ datacenter_name }}/vm/\"\n      name: \"{{ guest_name }}\"\n      state: present\n      snapshot_name: dummy_vm_snap_0001\n      quiesce: true\n      memory_dump: true\n    delegate_to: localhost\n\n  - name: Remove a snapshot and snapshot subtree\n    community.vmware.vmware_guest_snapshot:\n      hostname: \"{{ vcenter_hostname }}\"\n      username: \"{{ vcenter_username }}\"\n      password: \"{{ vcenter_password }}\"\n      datacenter: \"{{ datacenter_name }}\"\n      folder: \"/{{ datacenter_name }}/vm/\"\n      name: \"{{ guest_name }}\"\n      state: absent\n      remove_children: true\n      snapshot_name: snap1\n    delegate_to: localhost\n\n  - name: Rename a snapshot\n    community.vmware.vmware_guest_snapshot:\n      hostname: \"{{ vcenter_hostname }}\"\n      username: \"{{ vcenter_username }}\"\n      password: \"{{ vcenter_password }}\"\n      datacenter: \"{{ datacenter_name }}\"\n      folder: \"/{{ datacenter_name }}/vm/\"\n      name: \"{{ guest_name }}\"\n      state: present\n      snapshot_name: current_snap_name\n      new_snapshot_name: im_renamed\n      new_description: \"{{ new_snapshot_description }}\"\n    delegate_to: localhost\n"
  },
  "community.vmware.vmware_guest_snapshot_facts": {
    "doc": {
      "description": "This module can be used to gather information about virtual machine's snapshots.\nThis module was called C(vmware_guest_snapshot_facts) before Ansible 2.9. The usage did not change.",
      "has_action": false,
      "notes": "Tested on vSphere 6.0 and 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "datacenter": {
          "aliases": [],
          "description": "Name of the datacenter.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "folder": {
          "aliases": [],
          "description": "Destination folder, absolute or relative path to find an existing guest.\nThis is required parameter, if C(name) is supplied.\nThe folder should include the datacenter. ESX's datacenter is ha-datacenter\nExamples:\n   folder: /ha-datacenter/vm\n   folder: ha-datacenter/vm\n   folder: /datacenter1/vm\n   folder: datacenter1/vm\n   folder: /datacenter1/vm/folder1\n   folder: datacenter1/vm/folder1\n   folder: /folder1/datacenter1/vm\n   folder: folder1/datacenter1/vm\n   folder: /folder1/datacenter1/vm/folder2",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "moid": {
          "aliases": [],
          "description": "Managed Object ID of the instance to manage if known, this is a unique identifier only within a single vCenter instance.\nThis is required if C(name) or C(uuid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the VM to work with.\nThis is required if C(uuid) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_instance_uuid": {
          "aliases": [],
          "description": "Whether to use the VMware instance UUID rather than the BIOS UUID.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "UUID of the instance to manage if known, this is VMware's BIOS UUID by default.\nThis is required if C(name) or C(moid) parameter is not supplied.\nThe C(folder) is ignored, if C(uuid) is provided.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gather info about virtual machine's snapshots in vCenter"
    },
    "examples": "\n- name: Gather snapshot information about the virtual machine in the given vCenter\n  community.vmware.vmware_guest_snapshot_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    folder: \"/{{ datacenter_name }}/vm/\"\n    name: \"{{ guest_name }}\"\n  delegate_to: localhost\n  register: snapshot_info\n\n- name: Gather snapshot information about the virtual machine using MoID\n  community.vmware.vmware_guest_snapshot_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    moid: vm-42\n  delegate_to: localhost\n  register: snapshot_info\n"
  },
  "community.vmware.vmware_guest_snapshot_info": {
    "doc": {
      "description": "This module can be used to gather information about virtual machine's snapshots.\nThis module was called C(vmware_guest_snapshot_facts) before Ansible 2.9. The usage did not change.",
      "has_action": false,
      "notes": "Tested on vSphere 6.0 and 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "datacenter": {
          "aliases": [],
          "description": "Name of the datacenter.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "folder": {
          "aliases": [],
          "description": "Destination folder, absolute or relative path to find an existing guest.\nThis is required parameter, if C(name) is supplied.\nThe folder should include the datacenter. ESX's datacenter is ha-datacenter\nExamples:\n   folder: /ha-datacenter/vm\n   folder: ha-datacenter/vm\n   folder: /datacenter1/vm\n   folder: datacenter1/vm\n   folder: /datacenter1/vm/folder1\n   folder: datacenter1/vm/folder1\n   folder: /folder1/datacenter1/vm\n   folder: folder1/datacenter1/vm\n   folder: /folder1/datacenter1/vm/folder2",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "moid": {
          "aliases": [],
          "description": "Managed Object ID of the instance to manage if known, this is a unique identifier only within a single vCenter instance.\nThis is required if C(name) or C(uuid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the VM to work with.\nThis is required if C(uuid) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_instance_uuid": {
          "aliases": [],
          "description": "Whether to use the VMware instance UUID rather than the BIOS UUID.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "UUID of the instance to manage if known, this is VMware's BIOS UUID by default.\nThis is required if C(name) or C(moid) parameter is not supplied.\nThe C(folder) is ignored, if C(uuid) is provided.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gather info about virtual machine's snapshots in vCenter"
    },
    "examples": "\n- name: Gather snapshot information about the virtual machine in the given vCenter\n  community.vmware.vmware_guest_snapshot_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    folder: \"/{{ datacenter_name }}/vm/\"\n    name: \"{{ guest_name }}\"\n  delegate_to: localhost\n  register: snapshot_info\n\n- name: Gather snapshot information about the virtual machine using MoID\n  community.vmware.vmware_guest_snapshot_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    moid: vm-42\n  delegate_to: localhost\n  register: snapshot_info\n"
  },
  "community.vmware.vmware_guest_storage_policy": {
    "doc": {
      "description": "This module can be used to enforce storage policy profiles per disk and/or VM Home on a virtual machine.",
      "has_action": false,
      "notes": "Tested on vSphere 6.0 and 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "disk": {
          "aliases": [],
          "description": "A list of disks with storage profile policies to enforce.\nAll values and parameters are case sensitive.\nAt least one of C(disk) and C(vm_home) are required parameters.",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "policy": {
              "aliases": [],
              "description": "Name of the storage profile policy to enforce for the disk.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "unit_number": {
              "aliases": [],
              "description": "Disk Unit Number.\nValid values range from 0 to 15.",
              "type": "int",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "folder": {
          "aliases": [],
          "description": "Destination folder, absolute or relative path to find an existing guest.\nThis is a required parameter if multiple VMs are found with same name.\nThe folder should include the datacenter. ESX's datacenter is ha-datacenter.\nExamples:\n   folder: /ha-datacenter/vm\n   folder: ha-datacenter/vm\n   folder: /datacenter1/vm\n   folder: datacenter1/vm\n   folder: /datacenter1/vm/folder1\n   folder: datacenter1/vm/folder1\n   folder: /folder1/datacenter1/vm\n   folder: folder1/datacenter1/vm\n   folder: /folder1/datacenter1/vm/folder2",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "moid": {
          "aliases": [],
          "description": "Managed Object ID of the instance to manage if known, this is a unique identifier only within a single vCenter instance.\nOne of C(name), C(uuid), or C(moid) are required to define the virtual machine.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the virtual machine.\nOne of C(name), C(uuid), or C(moid) are required to define the virtual machine.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "UUID of the virtual machine.\nOne of C(name), C(uuid), or C(moid) are required to define the virtual machine.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vm_home": {
          "aliases": [],
          "description": "A storage profile policy to set on VM Home.\nAll values and parameters are case sensitive.\nAt least one of C(disk) or C(vm_home) are required parameters.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "pyVmomi"
      ],
      "short_description": "Set VM Home and disk(s) storage policy profiles.",
      "version_added": "1.9.0"
    },
    "examples": "\n- name: Enforce storepol1 policy for disk 0 and 1 using UUID\n  community.vmware.vmware_guest_storage_policy:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    validate_certs: no\n    uuid: cefd316c-fc19-45f3-a539-2cd03427a78d\n    disk:\n      - unit_number: 0\n        policy: storepol1\n      - unit_number: 1\n        policy: storepol1\n  delegate_to: localhost\n  register: policy_status\n\n- name: Enforce storepol1 policy for VM Home using name\n  community.vmware.vmware_guest_storage_policy:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    validate_certs: no\n    name: hostname1\n    vm_home: storepol1\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_guest_tools_info": {
    "doc": {
      "description": "Gather information about the VMware tools installed in virtual machine.",
      "has_action": false,
      "notes": "Tested on vSphere 6.0, 6.5, 6.7\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "datacenter": {
          "aliases": [],
          "description": "The datacenter name to which virtual machine belongs to.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "folder": {
          "aliases": [],
          "description": "Destination folder, absolute or relative path to find an existing guest.\nThis is required if name is supplied.\nThe folder should include the datacenter. ESXi server's datacenter is ha-datacenter.\nExamples:\n   folder: /ha-datacenter/vm\n   folder: ha-datacenter/vm\n   folder: /datacenter1/vm\n   folder: datacenter1/vm\n   folder: /datacenter1/vm/folder1\n   folder: datacenter1/vm/folder1\n   folder: /folder1/datacenter1/vm\n   folder: folder1/datacenter1/vm\n   folder: /folder1/datacenter1/vm/folder2",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "moid": {
          "aliases": [],
          "description": "Managed Object ID of the instance to manage if known, this is a unique identifier only within a single vCenter instance.\nThis is required if C(name) or C(uuid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the VM to get VMware tools info.\nThis is required if C(uuid) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name_match": {
          "aliases": [],
          "description": "If multiple VMs matching the name, use the first or last found.",
          "default": "first",
          "type": "str",
          "required": false,
          "choices": [
            "first",
            "last"
          ],
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_instance_uuid": {
          "aliases": [],
          "description": "Whether to use the VMware instance UUID rather than the BIOS UUID.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "UUID of the instance to manage if known, this is VMware's unique identifier.\nThis is required if C(name) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "PyVmomi"
      ],
      "short_description": "Gather info about VMware tools installed in VM"
    },
    "examples": "\n- name: Gather VMware tools info installed in VM specified by uuid\n  community.vmware.vmware_guest_tools_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    uuid: 421e4592-c069-924d-ce20-7e7533fab926\n  delegate_to: localhost\n  register: vmtools_info\n\n- name: Gather VMware tools info installed in VM specified by name\n  community.vmware.vmware_guest_tools_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    name: \"{{ vm_name }}\"\n  delegate_to: localhost\n  register: vmtools_info\n"
  },
  "community.vmware.vmware_guest_tools_upgrade": {
    "doc": {
      "description": "This module upgrades the VMware Tools on Windows and Linux guests and reboots them.",
      "has_action": false,
      "notes": "In order to upgrade VMTools, please power on virtual machine before hand - either 'manually' or using module M(community.vmware.vmware_guest_powerstate).\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "datacenter": {
          "aliases": [],
          "description": "Destination datacenter where the virtual machine exists.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "folder": {
          "aliases": [],
          "description": "Destination folder, absolute or relative path to find an existing guest.\nThis is required, if C(name) is supplied.\nThe folder should include the datacenter. ESX's datacenter is ha-datacenter\nExamples:\n   folder: /ha-datacenter/vm\n   folder: ha-datacenter/vm\n   folder: /datacenter1/vm\n   folder: datacenter1/vm\n   folder: /datacenter1/vm/folder1\n   folder: datacenter1/vm/folder1\n   folder: /folder1/datacenter1/vm\n   folder: folder1/datacenter1/vm\n   folder: /folder1/datacenter1/vm/folder2",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "force_upgrade": {
          "aliases": [],
          "description": "This flag overrides the guest operating system detection and forcibly upgrade VMware tools or open-vm-tools.\nThis is useful when VMware tools is too old and unable to detect the 'guestFamily' value.\nUsing this flag may sometime give unexpected results since module will override the default\nbehaviour of 'guestFamily' detection.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "moid": {
          "aliases": [],
          "description": "Managed Object ID of the instance to manage if known, this is a unique identifier only within a single vCenter instance.\nThis is required if C(name) or C(uuid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the virtual machine to work with.\nThis is required if C(uuid) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name_match": {
          "aliases": [],
          "description": "If multiple virtual machines matching the name, use the first or last found.",
          "default": "first",
          "type": "str",
          "required": false,
          "choices": [
            "first",
            "last"
          ],
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "UUID of the instance to manage if known, this is VMware's unique identifier.\nThis is required if C(name) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Module to upgrade VMTools"
    },
    "examples": "\n- name: Get VM UUID\n  vmware_guest_facts:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter }}\"\n    folder: \"/{{datacenter}}/vm\"\n    name: \"{{ vm_name }}\"\n  delegate_to: localhost\n  register: vm_facts\n\n- name: Upgrade VMware Tools using uuid\n  community.vmware.vmware_guest_tools_upgrade:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    uuid: \"{{ vm_facts.instance.hw_product_uuid }}\"\n  delegate_to: localhost\n\n- name: Upgrade VMware Tools using MoID\n  community.vmware.vmware_guest_tools_upgrade:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    moid: vm-42\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_guest_tools_wait": {
    "doc": {
      "description": "This module can be used to wait for VMware tools to become available on the given VM and return facts.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "datacenter": {
          "aliases": [],
          "description": "Name of the datacenter.\nThe datacenter to search for a virtual machine.",
          "type": "str",
          "required": false,
          "version_added": "1.15.0",
          "suboptions": {}
        },
        "folder": {
          "aliases": [],
          "description": "Destination folder, absolute or relative path to find an existing guest.\nThis is required only, if multiple VMs with same C(name) is found.\nThe folder should include the datacenter. ESX's datacenter is C(ha-datacenter).\nExamples:\n   folder: /ha-datacenter/vm\n   folder: ha-datacenter/vm\n   folder: /datacenter1/vm\n   folder: datacenter1/vm\n   folder: /datacenter1/vm/folder1\n   folder: datacenter1/vm/folder1\n   folder: /folder1/datacenter1/vm\n   folder: folder1/datacenter1/vm\n   folder: /folder1/datacenter1/vm/folder2",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "moid": {
          "aliases": [],
          "description": "Managed Object ID of the instance to manage if known, this is a unique identifier only within a single vCenter instance.\nThis is required if C(name) or C(uuid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the VM for which to wait until the tools become available.\nThis is required if C(uuid) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name_match": {
          "aliases": [],
          "description": "If multiple VMs match the name, use the first or last found.",
          "default": "first",
          "type": "str",
          "required": false,
          "choices": [
            "first",
            "last"
          ],
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Max duration of the waiting period (seconds).",
          "default": "500",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_instance_uuid": {
          "aliases": [],
          "description": "Whether to use the VMware instance UUID rather than the BIOS UUID.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "UUID of the VM  for which to wait until the tools become available, if known. This is VMware's unique identifier.\nThis is required, if C(name) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Wait for VMware tools to become available"
    },
    "examples": "\n- name: Wait for VMware tools to become available by UUID\n  vmware_guest_facts:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter }}\"\n    folder: \"/{{datacenter}}/vm\"\n    name: \"{{ vm_name }}\"\n  delegate_to: localhost\n  register: vm_facts\n\n- name: Get UUID from previous task and pass it to this task\n  community.vmware.vmware_guest_tools_wait:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    uuid: \"{{ vm_facts.instance.hw_product_uuid }}\"\n  delegate_to: localhost\n  register: facts\n\n\n- name: Wait for VMware tools to become available by MoID\n  community.vmware.vmware_guest_tools_wait:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    moid: vm-42\n  delegate_to: localhost\n  register: facts\n\n- name: Wait for VMware tools to become available by name\n  community.vmware.vmware_guest_tools_wait:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    name: test-vm\n    folder: \"/{{datacenter}}/vm\"\n    datacenter: \"{{ datacenter }}\"\n  delegate_to: localhost\n  register: facts\n"
  },
  "community.vmware.vmware_guest_tpm": {
    "doc": {
      "description": "This module is used for adding or removing Virtual Trusted Platform Module(vTPM) device for an existing Virtual Machine. You must create a key provider on vCenter before you can add a vTPM. The ESXi hosts running in your environment must be ESXi 6.7 or later (Windows guest OS), or 7.0 Update 2 (Linux guest OS).\n",
      "has_action": false,
      "notes": "Tested on vSphere 6.7\nTested on vSphere 7.0\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "datacenter": {
          "aliases": [],
          "description": "The vCenter datacenter name used to get specified cluster or host.\nThis parameter is case sensitive.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "folder": {
          "aliases": [],
          "description": "VM folder, absolute or relative path to find an existing VM.\nThis parameter is not required, only when multiple VMs are found with the same name.\nThe folder should include the datacenter name.\nExamples:\n   folder: /datacenter1/vm\n   folder: datacenter1/vm\n   folder: /datacenter1/vm/folder1\n   folder: datacenter1/vm/folder1\n   folder: /folder1/datacenter1/vm\n   folder: folder1/datacenter1/vm\n   folder: /folder1/datacenter1/vm/folder2",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "moid": {
          "aliases": [],
          "description": "Managed Object ID of the instance to manage if known, this is a unique identifier only within a single vCenter instance.\nThis is required if C(name) or C(uuid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the virtual machine.\nThis is required if parameter C(uuid) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of vTPM device.\nIf set to 'absent', vTPM device will be removed from VM.\nIf set to 'present', vTPM device will be added if not present.\nVirtual machine should be turned off before add or remove vTPM device.\nVirtual machine should not contain snapshots before add vTPM device.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "UUID of the instance to manage if known, this is VMware's unique identifier.\nThis is required if parameter C(name) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Add or remove vTPM device for specified VM.",
      "version_added": "1.16.0"
    },
    "examples": "\n- name: Add vTPM to specified VM\n  community.vmware.vmware_guest_tpm:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter }}\"\n    name: \"Test_VM\"\n    state: present\n  delegate_to: localhost\n\n- name: Remove vTPM from specified VM\n  community.vmware.vmware_guest_tpm:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter }}\"\n    name: \"Test_VM\"\n    state: absent\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_guest_video": {
    "doc": {
      "description": "This module is used to reconfigure video card settings of given virtual machine.\nAll parameters and VMware object names are case sensitive.",
      "has_action": false,
      "notes": "Tested on vSphere 6.0, 6.5 and 6.7\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "datacenter": {
          "aliases": [],
          "description": "The datacenter name to which virtual machine belongs to.\nThis parameter is case sensitive.",
          "default": "ha-datacenter",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "display_number": {
          "aliases": [],
          "description": "The number of display. Valid value from 1 to 10. The maximum display number is 4 on vCenter 6.0, 6.5 web UI.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "enable_3D": {
          "aliases": [],
          "description": "Enable 3D for guest operating systems on which VMware supports 3D.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "folder": {
          "aliases": [],
          "description": "Destination folder, absolute or relative path to find an existing guest.\nThis is a required parameter, only if multiple VMs are found with same name.\nThe folder should include the datacenter. ESXi server's datacenter is ha-datacenter.\nExamples:\n   folder: /ha-datacenter/vm\n   folder: ha-datacenter/vm\n   folder: /datacenter1/vm\n   folder: datacenter1/vm\n   folder: /datacenter1/vm/folder1\n   folder: datacenter1/vm/folder1\n   folder: /folder1/datacenter1/vm\n   folder: folder1/datacenter1/vm\n   folder: /folder1/datacenter1/vm/folder2",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "gather_video_facts": {
          "aliases": [],
          "description": "If set to C(True), return settings of the video card, other attributes are ignored.\nIf set to C(False), will do reconfiguration and return video card settings.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "memory_3D_mb": {
          "aliases": [],
          "description": "The value of 3D Memory must be power of 2 and valid value is from 32 MB to 2048 MB.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "moid": {
          "aliases": [],
          "description": "Managed Object ID of the instance to manage if known, this is a unique identifier only within a single vCenter instance.\nThis is required if C(name) or C(uuid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the virtual machine.\nThis is a required parameter, if parameter C(uuid) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "renderer_3D": {
          "aliases": [],
          "description": "If set to C(automatic), selects the appropriate option (software or hardware) for this virtual machine automatically.\nIf set to C(software), uses normal CPU processing for 3D calculations.\nIf set to C(hardware), requires graphics hardware (GPU) for faster 3D calculations.",
          "type": "str",
          "required": false,
          "choices": [
            "automatic",
            "software",
            "hardware"
          ],
          "suboptions": {}
        },
        "use_auto_detect": {
          "aliases": [],
          "description": "If set to C(True), applies common video settings to the guest operating system, attributes C(display_number) and C(video_memory_mb) are ignored.\nIf set to C(False), the number of display and the total video memory will be reconfigured using C(display_number) and C(video_memory_mb).",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "UUID of the instance to gather facts if known, this is VMware's unique identifier.\nThis is a required parameter, if parameter C(name) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "video_memory_mb": {
          "aliases": [],
          "description": "Valid total MB of video memory range of virtual machine is from 1.172 MB to 256 MB on ESXi 6.7U1, from 1.172 MB to 128 MB on ESXi 6.7 and previous versions.\nFor specific guest OS, supported minimum and maximum video memory are different, please be careful on setting this.",
          "type": "float",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Modify video card configurations of specified virtual machine in given vCenter infrastructure"
    },
    "examples": "\n- name: Change video card settings of virtual machine\n  community.vmware.vmware_guest_video:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    name: test-vm\n    gather_video_facts: false\n    use_auto_detect: false\n    display_number: 2\n    video_memory_mb: 8.0\n    enable_3D: true\n    renderer_3D: automatic\n    memory_3D_mb: 512\n  delegate_to: localhost\n  register: video_facts\n\n- name: Change video card settings of virtual machine using MoID\n  community.vmware.vmware_guest_video:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    moid: vm-42\n    gather_video_facts: false\n    use_auto_detect: false\n    display_number: 2\n    video_memory_mb: 8.0\n    enable_3D: true\n    renderer_3D: automatic\n    memory_3D_mb: 512\n  delegate_to: localhost\n  register: video_facts\n\n- name: Gather video card settings of virtual machine\n  community.vmware.vmware_guest_video:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    name: test-vm\n    gather_video_facts: false\n  delegate_to: localhost\n  register: video_facts\n"
  },
  "community.vmware.vmware_guest_vnc": {
    "doc": {
      "description": "This module can be used to enable and disable VNC remote display on virtual machine.",
      "has_action": false,
      "notes": "All modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "datacenter": {
          "aliases": [],
          "description": "Destination datacenter for the deploy operation.\nThis parameter is case sensitive.",
          "default": "ha-datacenter",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "folder": {
          "aliases": [],
          "description": "Destination folder, absolute or relative path to find an existing guest.\nThe folder should include the datacenter. ESX's datacenter is ha-datacenter",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "moid": {
          "aliases": [],
          "description": "Managed Object ID of the instance to manage if known, this is a unique identifier only within a single vCenter instance.\nThis is required if C(name) or C(uuid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the virtual machine to work with.\nVirtual machine names in vCenter are not necessarily unique, which may be problematic, see C(name_match).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name_match": {
          "aliases": [],
          "description": "If multiple virtual machines matching the name, use the first or last found.",
          "default": "first",
          "type": "str",
          "required": false,
          "choices": [
            "first",
            "last"
          ],
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Set the state of VNC on virtual machine.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "UUID of the instance to manage if known, this is VMware's unique identifier.\nThis is required, if C(name) or C(moid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vnc_ip": {
          "aliases": [],
          "description": "Sets an IP for VNC on virtual machine.\nThis is required only when I(state) is set to present and will be ignored if I(state) is absent.",
          "default": "0.0.0.0",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vnc_password": {
          "aliases": [],
          "description": "Sets a password for VNC on virtual machine.\nThis is required only when I(state) is set to present and will be ignored if I(state) is absent.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vnc_port": {
          "aliases": [],
          "description": "The port that VNC listens on. Usually a number between 5900 and 7000 depending on your config.\nThis is required only when I(state) is set to present and will be ignored if I(state) is absent.",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Manages VNC remote display on virtual machines in vCenter"
    },
    "examples": "\n- name: Enable VNC remote display on the VM\n  community.vmware.vmware_guest_vnc:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    folder: /mydatacenter/vm\n    name: testvm1\n    vnc_port: 5990\n    vnc_password: vNc5ecr3t\n    datacenter: \"{{ datacenter_name }}\"\n    state: present\n  delegate_to: localhost\n  register: vnc_result\n\n- name: Disable VNC remote display on the VM\n  community.vmware.vmware_guest_vnc:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    uuid: 32074771-7d6b-699a-66a8-2d9cf8236fff\n    state: absent\n  delegate_to: localhost\n  register: vnc_result\n\n- name: Disable VNC remote display on the VM using MoID\n  community.vmware.vmware_guest_vnc:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    moid: vm-42\n    state: absent\n  delegate_to: localhost\n  register: vnc_result\n"
  },
  "community.vmware.vmware_host": {
    "doc": {
      "description": "This module can be used to add, reconnect, or remove an ESXi host to or from vCenter.\nThis module can also be used to move an ESXi host to a cluster or folder, or vice versa, within the same datacenter.",
      "has_action": false,
      "notes": "Tested on vSphere 5.5, 6.0, 6.5 and 6.7\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "add_connected": {
          "aliases": [],
          "description": "If set to C(True), then the host should be connected as soon as it is added.\nThis parameter is ignored if state is set to a value other than C(present).",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "cluster_name": {
          "aliases": [
            "cluster"
          ],
          "description": "Name of the cluster to add the host.\nIf C(folder) is not set, then this parameter is required.\nAliases added in version 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "datacenter_name": {
          "aliases": [
            "datacenter"
          ],
          "description": "Name of the datacenter to add the host.\nAliases added in version 2.6.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "ESXi hostname to manage.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "esxi_password": {
          "aliases": [],
          "description": "ESXi password.\nRequired for adding a host.\nOptional for reconnect.\nUnused for removing.\nNo longer a required parameter from version 2.5.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_ssl_thumbprint": {
          "aliases": [
            "ssl_thumbprint"
          ],
          "description": "Specifying the hostsystem certificate's thumbprint.\nUse following command to get hostsystem certificate's thumbprint - \n# openssl x509 -in /etc/vmware/ssl/rui.crt -fingerprint -sha1 -noout\nOnly used if C(fetch_thumbprint) isn't set to C(true).",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_username": {
          "aliases": [],
          "description": "ESXi username.\nRequired for adding a host.\nOptional for reconnect. If both C(esxi_username) and C(esxi_password) are used\nUnused for removing.\nNo longer a required parameter from version 2.5.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "fetch_ssl_thumbprint": {
          "aliases": [],
          "description": "Fetch the thumbprint of the host's SSL certificate.\nThis basically disables the host certificate verification (check if it was signed by a recognized CA).\nDisable this option if you want to allow only hosts with valid certificates to be added to vCenter.\nIf this option is set to C(false) and the certificate can't be verified, an add or reconnect will fail.\nUnused when C(esxi_ssl_thumbprint) is set.\nOptional for reconnect, but only used if C(esxi_username) and C(esxi_password) are used.\nUnused for removing.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "folder": {
          "aliases": [
            "folder_name"
          ],
          "description": "Name of the folder under which host to add.\nIf C(cluster_name) is not set, then this parameter is required.\nFor example, if there is a datacenter 'dc1' under folder called 'Site1' then, this value will be '/Site1/dc1/host'.\nHere 'host' is an invisible folder under VMware Web Client.\nAnother example, if there is a nested folder structure like '/myhosts/india/pune' under datacenter 'dc2', then C(folder) value will be '/dc2/host/myhosts/india/pune'.\nOther Examples: '/Site2/dc2/Asia-Cluster/host' or '/dc3/Asia-Cluster/host'",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "force_connection": {
          "aliases": [],
          "description": "Force the connection if the host is already being managed by another vCenter server.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "reconnect_disconnected": {
          "aliases": [],
          "description": "Reconnect disconnected hosts.\nThis is only used if C(state) is set to C(present) and if the host already exists.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "If set to C(present), add the host if host is absent.\nIf set to C(present), update the location of the host if host already exists.\nIf set to C(absent), remove the host if host is present.\nIf set to C(absent), do nothing if host already does not exists.\nIf set to C(add_or_reconnect), add the host if it's absent else reconnect it and update the location.\nIf set to C(reconnect), then reconnect the host if it's present and update the location.\nIf set to C(disconnected), disconnect the host if the host already exists.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "add_or_reconnect",
            "reconnect",
            "disconnected"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi",
        "ssl",
        "socket",
        "hashlib"
      ],
      "short_description": "Add, remove, or move an ESXi host to, from, or within vCenter"
    },
    "examples": "\n- name: Add ESXi Host to vCenter\n  community.vmware.vmware_host:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter: datacenter_name\n    cluster: cluster_name\n    esxi_hostname: '{{ esxi_hostname }}'\n    esxi_username: '{{ esxi_username }}'\n    esxi_password: '{{ esxi_password }}'\n    state: present\n  delegate_to: localhost\n\n- name: Add ESXi Host to vCenter under a specific folder\n  community.vmware.vmware_host:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter: datacenter_name\n    folder: '/Site2/Asia-Cluster/host'\n    esxi_hostname: '{{ esxi_hostname }}'\n    esxi_username: '{{ esxi_username }}'\n    esxi_password: '{{ esxi_password }}'\n    state: present\n    add_connected: True\n  delegate_to: localhost\n\n- name: Reconnect ESXi Host (with username/password set)\n  community.vmware.vmware_host:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter: datacenter_name\n    cluster: cluster_name\n    esxi_hostname: '{{ esxi_hostname }}'\n    esxi_username: '{{ esxi_username }}'\n    esxi_password: '{{ esxi_password }}'\n    state: reconnect\n  delegate_to: localhost\n\n- name: Reconnect ESXi Host (with default username/password)\n  community.vmware.vmware_host:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter: datacenter_name\n    cluster: cluster_name\n    esxi_hostname: '{{ esxi_hostname }}'\n    state: reconnect\n  delegate_to: localhost\n\n- name: Add ESXi Host with SSL Thumbprint to vCenter\n  community.vmware.vmware_host:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter: datacenter_name\n    cluster: cluster_name\n    esxi_hostname: '{{ esxi_hostname }}'\n    esxi_username: '{{ esxi_username }}'\n    esxi_password: '{{ esxi_password }}'\n    esxi_ssl_thumbprint: \"3C:A5:60:6F:7A:B7:C4:6C:48:28:3D:2F:A5:EC:A3:58:13:88:F6:DD\"\n    state: present\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_host_acceptance": {
    "doc": {
      "description": "This module can be used to manage the host acceptance level of an ESXi host.\nThe host acceptance level controls the acceptance level of each VIB on a ESXi host.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "acceptance_level": {
          "aliases": [],
          "description": "Name of acceptance level.\nIf set to C(partner), then accept only partner and VMware signed and certified VIBs.\nIf set to C(vmware_certified), then accept only VIBs that are signed and certified by VMware.\nIf set to C(vmware_accepted), then accept VIBs that have been accepted by VMware.\nIf set to C(community), then accept all VIBs, even those that are not signed.",
          "type": "str",
          "required": false,
          "choices": [
            "community",
            "partner",
            "vmware_accepted",
            "vmware_certified"
          ],
          "suboptions": {}
        },
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster.\nAcceptance level of all ESXi host system in the given cluster will be managed.\nIf C(esxi_hostname) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "ESXi hostname.\nAcceptance level of this ESXi host system will be managed.\nIf C(cluster_name) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Set or list acceptance level of the given ESXi host.\nIf set to C(list), then will return current acceptance level of given host system/s.\nIf set to C(present), then will set given acceptance level.",
          "default": "list",
          "type": "str",
          "required": false,
          "choices": [
            "list",
            "present"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Manage the host acceptance level of an ESXi host"
    },
    "examples": "\n- name: Set acceptance level to community for all ESXi Host in given Cluster\n  community.vmware.vmware_host_acceptance:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: cluster_name\n    acceptance_level: 'community'\n    state: present\n  delegate_to: localhost\n  register: cluster_acceptance_level\n\n- name: Set acceptance level to vmware_accepted for the given ESXi Host\n  community.vmware.vmware_host_acceptance:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n    acceptance_level: 'vmware_accepted'\n    state: present\n  delegate_to: localhost\n  register: host_acceptance_level\n\n- name: Get acceptance level from the given ESXi Host\n  community.vmware.vmware_host_acceptance:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n    state: list\n  delegate_to: localhost\n  register: host_acceptance_level\n"
  },
  "community.vmware.vmware_host_active_directory": {
    "doc": {
      "description": "This module can be used to join or leave an ESXi host to or from an Active Directory domain.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "ad_domain": {
          "aliases": [
            "domain",
            "domain_name"
          ],
          "description": "AD Domain to join.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ad_password": {
          "aliases": [],
          "description": "Password for AD domain join.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ad_state": {
          "aliases": [
            "state"
          ],
          "description": "Whether the ESXi host is joined to an AD domain or not.",
          "default": "absent",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "ad_user": {
          "aliases": [],
          "description": "Username for AD domain join.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster from which all host systems will be used.\nThis parameter is required if C(esxi_hostname) is not specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "Name of the host system to work with.\nThis parameter is required if C(cluster_name) is not specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Joins an ESXi host system to an Active Directory domain or leaves it"
    },
    "examples": "\n- name: Join an AD domain\n  community.vmware.vmware_host_active_directory:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n    ad_domain: example.local\n    ad_user: adjoin\n    ad_password: Password123$\n    ad_state: present\n  delegate_to: localhost\n\n- name: Leave AD domain\n  community.vmware.vmware_host_active_directory:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n    ad_state: absent\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_host_auto_start": {
    "doc": {
      "description": "In this module, can set up automatic startup and shutdown of virtual machines according to host startup or shutdown.",
      "has_action": false,
      "notes": "All modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "esxi_hostname": {
          "aliases": [],
          "description": "ESXi hostname where the VM to set auto power on or off exists.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "moid": {
          "aliases": [],
          "description": "Managed Object ID of the instance to manage if known, this is a unique identifier only within a single vCenter instance.\nThis is required if C(name) or C(uuid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "VM name to set auto power on or off.\nThis is not necessary if change only system default VM settings for autoStart config.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "power_info": {
          "aliases": [],
          "description": "Startup or shutdown settings of virtual machine.\nThis setting will override the system defaults.",
          "default": "{'start_action': 'none', 'start_delay': -1, 'start_order': -1, 'stop_action': 'systemDefault', 'stop_delay': -1, 'wait_for_heartbeat': 'systemDefault'}",
          "type": "dict",
          "required": false,
          "suboptions": {
            "start_action": {
              "aliases": [],
              "description": "Whether to start the virtual machine when the host startup.",
              "default": "none",
              "type": "str",
              "required": false,
              "choices": [
                "none",
                "powerOn"
              ],
              "suboptions": {}
            },
            "start_delay": {
              "aliases": [],
              "description": "Auto start delay in seconds of virtual machine.",
              "default": "-1",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "start_order": {
              "aliases": [],
              "description": "The autostart priority of virtual machine.\nVirtual machines with a lower number are powered on first.\nOn host shutdown, the virtual machines are shut down in reverse order, meaning those with a higher number are powered off first.",
              "default": "-1",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "stop_action": {
              "aliases": [],
              "description": "Stop action executed on the virtual machine when the system stops of virtual machine.",
              "default": "systemDefault",
              "type": "str",
              "required": false,
              "choices": [
                "none",
                "systemDefault",
                "powerOff",
                "suspend"
              ],
              "suboptions": {}
            },
            "stop_delay": {
              "aliases": [],
              "description": "Auto stop delay in seconds of virtual machine.",
              "default": "-1",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "wait_for_heartbeat": {
              "aliases": [],
              "description": "Continue power on processing when VMware Tools started.",
              "default": "systemDefault",
              "type": "str",
              "required": false,
              "choices": [
                "no",
                "yes",
                "systemDefault"
              ],
              "suboptions": {}
            }
          }
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "system_defaults": {
          "aliases": [],
          "description": "System defaults for auto-start or auto-stop config for virtual machine.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "enabled": {
              "aliases": [],
              "description": "Enable automatically start or stop of virtual machines.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "start_delay": {
              "aliases": [],
              "description": "Default auto start delay in seconds.",
              "default": "120",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "stop_action": {
              "aliases": [],
              "description": "Default stop action executed on the virtual machine when the system stops.",
              "default": "powerOff",
              "type": "str",
              "required": false,
              "choices": [
                "none",
                "guestShutdown",
                "powerOff",
                "suspend"
              ],
              "suboptions": {}
            },
            "stop_delay": {
              "aliases": [],
              "description": "Default auto stop delay in seconds.",
              "default": "120",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "wait_for_heartbeat": {
              "aliases": [],
              "description": "Continue power on processing when VMware Tools started.\nIf this parameter is enabled to powers on the next virtual machine without waiting for the delay to pass.\nHowever, the virtual machine must have VMware Tools installed.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "use_instance_uuid": {
          "aliases": [],
          "description": "Whether to use the VMware instance UUID rather than the BIOS UUID.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "uuid": {
          "aliases": [],
          "description": "VM uuid to set auto power on or off, this is VMware's unique identifier.\nThis is required if C(name) is not supplied.\nThis is not necessary if change only system default VM settings for autoStart config.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "PyVmomi"
      ],
      "short_description": "Manage the auto power ON or OFF for vm on ESXi host"
    },
    "examples": "\n---\n- name: Update for system defaults config.\n  community.vmware.vmware_host_auto_start:\n    hostname: \"{{ hostname }}\"\n    username: \"{{ username }}\"\n    password: \"{{ password }}\"\n    esxi_hostname: \"{{ esxi_hostname }}\"\n    system_defaults:\n      enabled: true\n      start_delay: 100\n      stop_action: guestShutdown\n\n- name: Update for powerInfo config of virtual machine.\n  community.vmware.vmware_host_auto_start:\n    hostname: \"{{ hostname }}\"\n    username: \"{{ username }}\"\n    password: \"{{ password }}\"\n    esxi_hostname: \"{{ esxi_hostname }}\"\n    name: \"{{ vm_name }}\"\n    power_info:\n      start_action: powerOn\n      start_delay: 10\n      start_order: 1\n      stop_action: powerOff\n      wait_for_heartbeat: true\n"
  },
  "community.vmware.vmware_host_capability_facts": {
    "doc": {
      "description": "This module can be used to gather facts about an ESXi host's capability information when ESXi hostname or Cluster name is given.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster from all host systems to be used for facts gathering.\nIf C(esxi_hostname) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "ESXi hostname to gather facts from.\nIf C(cluster_name) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gathers facts about an ESXi host's capability information"
    },
    "examples": "\n- name: Gather capability facts about all ESXi Host in given Cluster\n  community.vmware.vmware_host_capability_facts:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: cluster_name\n  delegate_to: localhost\n  register: all_cluster_hosts_facts\n\n- name: Gather capability facts about ESXi Host\n  community.vmware.vmware_host_capability_facts:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n  delegate_to: localhost\n  register: hosts_facts\n"
  },
  "community.vmware.vmware_host_capability_info": {
    "doc": {
      "description": "This module can be used to gather information about an ESXi host's capability information when ESXi hostname or Cluster name is given.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster from all host systems to be used for information gathering.\nIf C(esxi_hostname) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "ESXi hostname to gather information from.\nIf C(cluster_name) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gathers info about an ESXi host's capability information"
    },
    "examples": "\n- name: Gather capability info about all ESXi Host in given Cluster\n  community.vmware.vmware_host_capability_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: cluster_name\n  delegate_to: localhost\n  register: all_cluster_hosts_info\n\n- name: Gather capability info about ESXi Host\n  community.vmware.vmware_host_capability_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n  delegate_to: localhost\n  register: hosts_info\n"
  },
  "community.vmware.vmware_host_config_facts": {
    "doc": {
      "description": "This module can be used to gather facts about an ESXi host's advance configuration information when ESXi hostname or Cluster name is given.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster from which the ESXi host belong to.\nIf C(esxi_hostname) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "ESXi hostname to gather facts from.\nIf C(cluster_name) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gathers facts about an ESXi host's advance configuration information"
    },
    "examples": "\n- name: Gather facts about all ESXi Host in given Cluster\n  community.vmware.vmware_host_config_facts:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: cluster_name\n  delegate_to: localhost\n\n- name: Gather facts about ESXi Host\n  community.vmware.vmware_host_config_facts:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_host_config_info": {
    "doc": {
      "description": "This module can be used to gather information about an ESXi host's advance configuration information when ESXi hostname or Cluster name is given.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster from which the ESXi host belong to.\nIf C(esxi_hostname) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "ESXi hostname to gather information from.\nIf C(cluster_name) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gathers info about an ESXi host's advance configuration information"
    },
    "examples": "\n- name: Gather info about all ESXi Host in given Cluster\n  community.vmware.vmware_host_config_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: cluster_name\n  delegate_to: localhost\n\n- name: Gather info about ESXi Host\n  community.vmware.vmware_host_config_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_host_config_manager": {
    "doc": {
      "description": "This module can be used to manage advanced system settings of an ESXi host when ESXi hostname or Cluster name is given.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster.\nSettings are applied to every ESXi host in given cluster.\nIf C(esxi_hostname) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "ESXi hostname.\nSettings are applied to this ESXi host.\nIf C(cluster_name) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "options": {
          "aliases": [],
          "description": "A dictionary of advanced system settings.\nInvalid options will cause module to error.\nNote that the list of advanced options (with description and values) can be found by running `vim-cmd hostsvc/advopt/options`.",
          "default": "{}",
          "type": "dict",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Manage advanced system settings of an ESXi host"
    },
    "examples": "\n- name: Manage Log level setting for all ESXi hosts in given Cluster\n  community.vmware.vmware_host_config_manager:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: cluster_name\n    options:\n        'Config.HostAgent.log.level': 'info'\n  delegate_to: localhost\n\n- name: Manage Log level setting for an ESXi host\n  community.vmware.vmware_host_config_manager:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n    options:\n        'Config.HostAgent.log.level': 'verbose'\n  delegate_to: localhost\n\n- name: Manage multiple settings for an ESXi host\n  community.vmware.vmware_host_config_manager:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n    options:\n        'Config.HostAgent.log.level': 'verbose'\n        'Annotations.WelcomeMessage': 'Hello World'\n        'Config.HostAgent.plugins.solo.enableMob': false\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_host_custom_attributes": {
    "doc": {
      "description": "This module can be used to add, remove and update custom attributes for the given ESXi host.",
      "has_action": false,
      "notes": "Tested on vSphere 6.7\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "attributes": {
          "aliases": [],
          "description": "A list of name and value of custom attributes that needs to be manage.\nValue of custom attribute is not required and will be ignored, if C(state) is set to C(absent).",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "Name of the attribute.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "value": {
              "aliases": [],
              "description": "Value of the attribute.",
              "default": "",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "Name of the ESXi host to work with.\nThis is a required parameter",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The action to take.\nIf set to C(present), then custom attribute is added or updated.\nIf set to C(absent), then custom attribute is removed.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "PyVmomi"
      ],
      "short_description": "Manage custom attributes from VMware for the given ESXi host",
      "version_added": "1.11.0"
    },
    "examples": "\n- name: Add ESXi host custom attributes\n  community.vmware.vmware_host_custom_attributes:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    esxi_hostname: host1\n    state: present\n    attributes:\n      - name: MyAttribute\n        value: MyValue\n  delegate_to: localhost\n  register: attributes\n\n- name: Remove ESXi host Attribute\n  community.vmware.vmware_host_custom_attributes:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    esxi_hostname: host1\n    state: absent\n    attributes:\n      - name: MyAttribute\n  delegate_to: localhost\n  register: attributes\n"
  },
  "community.vmware.vmware_host_datastore": {
    "doc": {
      "description": "This module can be used to mount/umount datastore on ESXi host.\nThis module only supports NFS (NFS v3 or NFS v4.1) and VMFS datastores.\nFor VMFS datastore, available device must already be connected on ESXi host.\nAll parameters and VMware object names are case sensitive.",
      "has_action": false,
      "notes": "Tested on vSphere 6.0, 6.5 and ESXi 6.7\nNFS v4.1 tested on vSphere 6.5\nKerberos authentication with NFS v4.1 isn't implemented\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "auto_expand": {
          "aliases": [],
          "description": "Expand a datastore capacity to full if it has free capacity.\nThis parameter can't be extend using another datastore.\nA use case example in I(auto_expand), it can be used to expand a datastore capacity after increasing LUN volume.",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.13.0",
          "suboptions": {}
        },
        "datastore_name": {
          "aliases": [],
          "description": "Name of the datastore to add/remove.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "datastore_type": {
          "aliases": [],
          "description": "Type of the datastore to configure (nfs/nfs41/vmfs).",
          "type": "str",
          "required": false,
          "choices": [
            "nfs",
            "nfs41",
            "vmfs"
          ],
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "ESXi hostname to manage the datastore.\nRequired when used with a vcenter",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "nfs_path": {
          "aliases": [],
          "description": "Resource path on NFS host.\nRequired if datastore type is set to C(nfs)/C(nfs41) and state is set to C(present), else unused.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "nfs_ro": {
          "aliases": [],
          "description": "ReadOnly or ReadWrite mount.\nUnused if datastore type is not set to C(nfs)/C(nfs41) and state is not set to C(present).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "nfs_server": {
          "aliases": [],
          "description": "NFS host serving nfs datastore.\nRequired if datastore type is set to C(nfs)/C(nfs41) and state is set to C(present), else unused.\nTwo or more servers can be defined if datastore type is set to C(nfs41)",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "present: Mount datastore on host if datastore is absent else do nothing.\nabsent: Umount datastore if datastore is present else do nothing.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vmfs_device_name": {
          "aliases": [],
          "description": "Name of the device to be used as VMFS datastore.\nRequired for VMFS datastore type and state is set to C(present), else unused.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vmfs_version": {
          "aliases": [],
          "description": "VMFS version to use for datastore creation.\nUnused if datastore type is not set to C(vmfs) and state is not set to C(present).",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Manage a datastore on ESXi host"
    },
    "examples": "\n- name: Mount VMFS datastores to ESXi\n  community.vmware.vmware_host_datastore:\n      hostname: '{{ vcenter_hostname }}'\n      username: '{{ vcenter_username }}'\n      password: '{{ vcenter_password }}'\n      datastore_name: '{{ item.name }}'\n      datastore_type: '{{ item.type }}'\n      vmfs_device_name: 'naa.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'\n      vmfs_version: 6\n      esxi_hostname: '{{ inventory_hostname }}'\n      state: present\n  delegate_to: localhost\n\n- name: Mount NFS datastores to ESXi\n  community.vmware.vmware_host_datastore:\n      hostname: '{{ vcenter_hostname }}'\n      username: '{{ vcenter_username }}'\n      password: '{{ vcenter_password }}'\n      datastore_name: '{{ item.name }}'\n      datastore_type: '{{ item.type }}'\n      nfs_server: '{{ item.server }}'\n      nfs_path: '{{ item.path }}'\n      nfs_ro: no\n      esxi_hostname: '{{ inventory_hostname }}'\n      state: present\n  delegate_to: localhost\n  loop:\n      - { 'name': 'NasDS_vol01', 'server': 'nas01', 'path': '/mnt/vol01', 'type': 'nfs'}\n      - { 'name': 'NasDS_vol02', 'server': 'nas01', 'path': '/mnt/vol02', 'type': 'nfs'}\n\n- name: Mount NFS v4.1 datastores to ESXi\n  community.vmware.vmware_host_datastore:\n      hostname: '{{ vcenter_hostname }}'\n      username: '{{ vcenter_username }}'\n      password: '{{ vcenter_password }}'\n      datastore_name: '{{ item.name }}'\n      datastore_type: '{{ item.type }}'\n      nfs_server: '{{ item.server }}'\n      nfs_path: '{{ item.path }}'\n      nfs_ro: no\n      esxi_hostname: '{{ inventory_hostname }}'\n      state: present\n  delegate_to: localhost\n  loop:\n      - { 'name': 'NasDS_vol03', 'server': 'nas01,nas02', 'path': '/mnt/vol01', 'type': 'nfs41'}\n      - { 'name': 'NasDS_vol04', 'server': 'nas01,nas02', 'path': '/mnt/vol02', 'type': 'nfs41'}\n\n- name: Remove/Umount Datastores from a ESXi\n  community.vmware.vmware_host_datastore:\n      hostname: '{{ esxi_hostname }}'\n      username: '{{ esxi_username }}'\n      password: '{{ esxi_password }}'\n      datastore_name: NasDS_vol01\n      state: absent\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_host_disk_info": {
    "doc": {
      "description": "This module returns information about disks attached to given ESXi host/s\nIf I(cluster_name) is provided, then disk information about all hosts from the given cluster will be returned.\nIf I(esxi_hostname) is provided, then disk information about the given host system will be returned.",
      "has_action": false,
      "notes": "Tested on vSphere 6.7 and 7.0\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster from which the ESXi host belong to.\nIf C(esxi_hostname) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "ESXi hostname to gather information from.\nIf C(cluster_name) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gathers information about disks attached to given ESXi host/s."
    },
    "examples": "\n- name: Gather info about vmhbas of all ESXi Host in the given Cluster\n  community.vmware.vmware_host_disk_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: '{{ cluster_name }}'\n  delegate_to: localhost\n  register: cluster_host_vmhbas\n\n- name: Gather info about vmhbas of an ESXi Host\n  community.vmware.vmware_host_disk_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n  delegate_to: localhost\n  register: host_vmhbas\n"
  },
  "community.vmware.vmware_host_dns": {
    "doc": {
      "description": "This module can be used to configure DNS for the default TCP/IP stack on an ESXi host system.",
      "has_action": false,
      "notes": "This module is a replacement for the module C(vmware_dns_config)\nTested on vSphere 6.7\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster from which all host systems will be used.\nThis parameter is required if C(esxi_hostname) is not specified and you connect to a vCenter.\nCannot be used when you connect directly to an ESXi host.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "device": {
          "aliases": [],
          "description": "The VMkernel network adapter to obtain DNS settings from.\nNeeds to get its IP through DHCP, a static network configuration combined with a dynamic DNS configuration doesn't work.\nThe parameter is only required in case of C(type) is set to C(dhcp).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dns_servers": {
          "aliases": [],
          "description": "A list of DNS servers to be used.\nThe order of the DNS servers is important as they are used consecutively in order.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "domain": {
          "aliases": [],
          "description": "The domain name to be used for the ESXi host.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "Name of the host system to work with.\nThis parameter is required if C(cluster_name) is not specified and you connect to a vCenter.\nCannot be used when you connect directly to an ESXi host.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "host_name": {
          "aliases": [],
          "description": "The hostname to be used for the ESXi host.\nCannot be used when configuring a complete cluster.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "search_domains": {
          "aliases": [],
          "description": "A list of domains to be searched through by the resolver.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "type": {
          "aliases": [],
          "description": "Type of DNS assignment. Either C(dhcp) or C(static).\nA VMkernel adapter needs to be set to DHCP if C(type) is set to C(dhcp).",
          "type": "str",
          "required": true,
          "choices": [
            "dhcp",
            "static"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "verbose": {
          "aliases": [],
          "description": "Verbose output of the DNS server configuration change.\nExplains if an DNS server was added, removed, or if the DNS server sequence was changed.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Manage DNS configuration of an ESXi host system"
    },
    "examples": "\n- name: Configure DNS for an ESXi host\n  community.vmware.vmware_host_dns:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n    type: static\n    host_name: esx01\n    domain: example.local\n    dns_servers:\n      - 192.168.1.10\n      - 192.168.1.11\n    search_domains:\n      - subdomain.example.local\n      - example.local\n  delegate_to: localhost\n\n- name: Configure DNS for all ESXi hosts of a cluster\n  community.vmware.vmware_host_dns:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: '{{ cluster_name }}'\n    type: static\n    domain: example.local\n    dns_servers:\n      - 192.168.1.10\n      - 192.168.1.11\n    search_domains:\n      - subdomain.example.local\n      - example.local\n  delegate_to: localhost\n\n- name: Configure DNS via DHCP for an ESXi host\n  community.vmware.vmware_host_dns:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n    type: dhcp\n    device: vmk0\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_host_dns_facts": {
    "doc": {
      "description": "This module can be used to gather facts about an ESXi host's DNS configuration information when ESXi hostname or Cluster name is given.\nAll parameters and VMware object names are case sensitive.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster from which the ESXi host belong to.\nIf C(esxi_hostname) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "ESXi hostname to gather facts from.\nIf C(cluster_name) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gathers facts about an ESXi host's DNS configuration information"
    },
    "examples": "\n- name: Gather DNS facts about all ESXi Hosts in given Cluster\n  community.vmware.vmware_host_dns_facts:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: cluster_name\n  delegate_to: localhost\n\n- name: Gather DNS facts about ESXi Host\n  community.vmware.vmware_host_dns_facts:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_host_dns_info": {
    "doc": {
      "description": "This module can be used to gather information about an ESXi host's DNS configuration information when ESXi hostname or Cluster name is given.\nAll parameters and VMware object names are case sensitive.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster from which the ESXi host belong to.\nIf C(esxi_hostname) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "ESXi hostname to gather information from.\nIf C(cluster_name) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gathers info about an ESXi host's DNS configuration information"
    },
    "examples": "\n- name: Gather DNS info about all ESXi Hosts in given Cluster\n  community.vmware.vmware_host_dns_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: cluster_name\n  delegate_to: localhost\n\n- name: Gather DNS info about ESXi Host\n  community.vmware.vmware_host_dns_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_host_facts": {
    "doc": {
      "description": "This module can be used to gathers facts like CPU, memory, datastore, network and system etc. about ESXi host system.\nPlease specify hostname or IP address of ESXi host system as C(hostname).\nIf hostname or IP address of vCenter is provided as C(hostname) and C(esxi_hostname) is not specified, then the module will throw an error.\nVSAN facts added in 2.7 version.\nSYSTEM fact uuid added in 2.10 version.",
      "has_action": false,
      "notes": "All modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "esxi_hostname": {
          "aliases": [],
          "description": "ESXi hostname.\nHost facts about the specified ESXi server will be returned.\nBy specifying this option, you can select which ESXi hostsystem is returned if connecting to a vCenter.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "properties": {
          "aliases": [],
          "description": "Specify the properties to retrieve.\nIf not specified, all properties are retrieved (deeply).\nResults are returned in a structure identical to the vsphere API.\nExample:\n   properties: [\n      \"hardware.memorySize\",\n      \"hardware.cpuInfo.numCpuCores\",\n      \"config.product.apiVersion\",\n      \"overallStatus\"\n   ]\nOnly valid when C(schema) is C(vsphere).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "schema": {
          "aliases": [],
          "description": "Specify the output schema desired.\nThe 'summary' output schema is the legacy output from the module\nThe 'vsphere' output schema is the vSphere API class definition which requires pyvmomi>6.7.1",
          "default": "summary",
          "type": "str",
          "required": false,
          "choices": [
            "summary",
            "vsphere"
          ],
          "suboptions": {}
        },
        "show_tag": {
          "aliases": [],
          "description": "Tags related to Host are shown if set to C(True).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gathers facts about remote ESXi hostsystem"
    },
    "examples": "\n- name: Gather vmware host facts\n  community.vmware.vmware_host_facts:\n    hostname: \"{{ esxi_server }}\"\n    username: \"{{ esxi_username }}\"\n    password: \"{{ esxi_password }}\"\n  register: host_facts\n  delegate_to: localhost\n\n- name: Gather vmware host facts from vCenter\n  community.vmware.vmware_host_facts:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    esxi_hostname: \"{{ esxi_hostname }}\"\n  register: host_facts\n  delegate_to: localhost\n\n- name: Gather vmware host facts from vCenter with tag information\n  community.vmware.vmware_host_facts:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    esxi_hostname: \"{{ esxi_hostname }}\"\n    show_tag: True\n  register: host_facts_tag\n  delegate_to: localhost\n\n- name: Get VSAN Cluster UUID from host facts\n  community.vmware.vmware_host_facts:\n    hostname: \"{{ esxi_server }}\"\n    username: \"{{ esxi_username }}\"\n    password: \"{{ esxi_password }}\"\n  register: host_facts\n- set_fact:\n    cluster_uuid: \"{{ host_facts['ansible_facts']['vsan_cluster_uuid'] }}\"\n\n- name: Gather some info from a host using the vSphere API output schema\n  community.vmware.vmware_host_facts:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    esxi_hostname: \"{{ esxi_hostname }}\"\n    schema: vsphere\n    properties:\n      - hardware.memorySize\n      - hardware.cpuInfo.numCpuCores\n      - config.product.apiVersion\n      - overallStatus\n  register: host_facts\n\n- name: Gather information about powerstate and connection state\n  community.vmware.vmware_host_facts:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    esxi_hostname: \"{{ esxi_hostname }}\"\n    schema: vsphere\n    properties:\n      - runtime.connectionState\n      - runtime.powerState\n\n- name: How to retrieve Product, Version, Build, Update info for ESXi from vCenter\n  block:\n    - name: Gather product version info for ESXi from vCenter\n      community.vmware.vmware_host_facts:\n        hostname: \"{{ vcenter_hostname }}\"\n        username: \"{{ vcenter_username }}\"\n        password: \"{{ vcenter_password }}\"\n        esxi_hostname: \"{{ esxi_hostname }}\"\n        schema: vsphere\n        properties:\n          - config.product\n          - config.option\n      register: gather_host_facts_result\n\n    - name: Extract update level info from option properties\n      set_fact:\n        update_level_info: \"{{ item.value }}\"\n      loop: \"{{ gather_host_facts_result.ansible_facts.config.option }}\"\n      when:\n        - item.key == 'Misc.HostAgentUpdateLevel'\n\n    - name: The output of Product, Version, Build, Update info for ESXi\n      debug:\n        msg:\n          - \"Product : {{ gather_host_facts_result.ansible_facts.config.product.name }}\"\n          - \"Version : {{ gather_host_facts_result.ansible_facts.config.product.version }}\"\n          - \"Build   : {{ gather_host_facts_result.ansible_facts.config.product.build }}\"\n          - \"Update  : {{ update_level_info }}\"\n"
  },
  "community.vmware.vmware_host_feature_facts": {
    "doc": {
      "description": "This module can be used to gather facts about an ESXi host's feature capability information when ESXi hostname or Cluster name is given.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster from all host systems to be used for facts gathering.\nIf C(esxi_hostname) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "ESXi hostname to gather facts from.\nIf C(cluster_name) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gathers facts about an ESXi host's feature capability information"
    },
    "examples": "\n- name: Gather feature capability facts about all ESXi Hosts in given Cluster\n  community.vmware.vmware_host_feature_facts:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: cluster_name\n  delegate_to: localhost\n  register: all_cluster_hosts_facts\n\n- name: Check if ESXi is vulnerable for Speculative Store Bypass Disable (SSBD) vulnerability\n  community.vmware.vmware_host_feature_facts:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    esxi_hostname: \"{{ esxi_hostname }}\"\n  register: features_set\n- set_fact:\n    ssbd : \"{{ item.value }}\"\n  loop: \"{{ features_set.host_feature_facts[esxi_hostname] |json_query(name) }}\"\n  vars:\n    name: \"[?key=='cpuid.SSBD']\"\n- assert:\n    that:\n      - ssbd|int == 1\n  when: ssbd is defined\n"
  },
  "community.vmware.vmware_host_feature_info": {
    "doc": {
      "description": "This module can be used to gather information about an ESXi host's feature capability information when ESXi hostname or Cluster name is given.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster from all host systems to be used for information gathering.\nIf C(esxi_hostname) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "ESXi hostname to gather information from.\nIf C(cluster_name) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gathers info about an ESXi host's feature capability information"
    },
    "examples": "\n- name: Gather feature capability info about all ESXi Hosts in given Cluster\n  community.vmware.vmware_host_feature_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: '{{ cluster_name }}'\n  delegate_to: localhost\n  register: all_cluster_hosts_info\n\n- name: Check if ESXi is vulnerable for Speculative Store Bypass Disable (SSBD) vulnerability\n  community.vmware.vmware_host_feature_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    esxi_hostname: \"{{ esxi_hostname }}\"\n  register: features_set\n- set_fact:\n    ssbd : \"{{ item.value }}\"\n  loop: \"{{ features_set.host_feature_info[esxi_hostname] |json_query(name) }}\"\n  vars:\n    name: \"[?key=='cpuid.SSBD']\"\n- assert:\n    that:\n      - ssbd|int == 1\n  when: ssbd is defined\n"
  },
  "community.vmware.vmware_host_firewall_facts": {
    "doc": {
      "description": "This module can be used to gather facts about an ESXi host's firewall configuration information when ESXi hostname or Cluster name is given.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster from which the ESXi host belong to.\nIf C(esxi_hostname) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "ESXi hostname to gather facts from.\nIf C(cluster_name) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gathers facts about an ESXi host's firewall configuration information"
    },
    "examples": "\n- name: Gather firewall facts about all ESXi Host in given Cluster\n  community.vmware.vmware_host_firewall_facts:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: cluster_name\n  delegate_to: localhost\n\n- name: Gather firewall facts about ESXi Host\n  community.vmware.vmware_host_firewall_facts:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_host_firewall_info": {
    "doc": {
      "description": "This module can be used to gather information about an ESXi host's firewall configuration information when ESXi hostname or Cluster name is given.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster from which the ESXi host belong to.\nIf C(esxi_hostname) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "ESXi hostname to gather information from.\nIf C(cluster_name) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gathers info about an ESXi host's firewall configuration information"
    },
    "examples": "\n- name: Gather firewall info about all ESXi Host in given Cluster\n  community.vmware.vmware_host_firewall_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: cluster_name\n  delegate_to: localhost\n\n- name: Gather firewall info about ESXi Host\n  community.vmware.vmware_host_firewall_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_host_firewall_manager": {
    "doc": {
      "description": "This module can be used to manage firewall configurations about an ESXi host when ESXi hostname or Cluster name is given.",
      "has_action": false,
      "notes": "Tested on vSphere 6.0, vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster.\nFirewall settings are applied to every ESXi host system in given cluster.\nIf C(esxi_hostname) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "ESXi hostname.\nFirewall settings are applied to this ESXi host system.\nIf C(cluster_name) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "rules": {
          "aliases": [],
          "description": "A list of Rule set which needs to be managed.\nEach member of list is rule set name and state to be set the rule.\nBoth rule name and rule state are required parameters.\nAdditional IPs and networks can also be specified\nPlease see examples for more information.",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Manage firewall configurations about an ESXi host"
    },
    "examples": "\n- name: Enable vvold rule set for all ESXi Host in given Cluster\n  community.vmware.vmware_host_firewall_manager:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: cluster_name\n    rules:\n        - name: vvold\n          enabled: True\n          allowed_hosts:\n            all_ip: True\n  delegate_to: localhost\n\n- name: Enable vvold rule set for an ESXi Host\n  community.vmware.vmware_host_firewall_manager:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n    rules:\n        - name: vvold\n          enabled: True\n          allowed_hosts:\n            all_ip: True\n  delegate_to: localhost\n\n- name: Manage multiple rule set for an ESXi Host\n  community.vmware.vmware_host_firewall_manager:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n    rules:\n        - name: vvold\n          enabled: True\n          allowed_hosts:\n            all_ip: True\n        - name: CIMHttpServer\n          enabled: False\n  delegate_to: localhost\n\n- name: Manage IP and network based firewall permissions for ESXi\n  community.vmware.vmware_host_firewall_manager:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n    rules:\n        - name: gdbserver\n          enabled: True\n          allowed_hosts:\n            all_ip: False\n            ip_address:\n              - 192.168.20.10\n              - 192.168.20.11\n        - name: CIMHttpServer\n          enabled: True\n          allowed_hosts:\n            all_ip: False\n            ip_network:\n              - 192.168.100.0/24\n        - name: remoteSerialPort\n          enabled: True\n          allowed_hosts:\n            all_ip: False\n            ip_address:\n              - 192.168.100.11\n            ip_network:\n              - 192.168.200.0/24\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_host_hyperthreading": {
    "doc": {
      "description": "This module can be used to enable or disable Hyperthreading optimization for ESXi host systems in given vCenter infrastructure.\nIt also checks if Hyperthreading is activated/deactivated and if the host needs to be restarted.\nThe module informs the user if Hyperthreading is enabled but inactive because the processor is vulnerable to L1 Terminal Fault (L1TF).",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster from which all host systems will be used.\nThis parameter is required if C(esxi_hostname) is not specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "Name of the host system to work with.\nThis parameter is required if C(cluster_name) is not specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Enable or disable Hyperthreading.\nYou need to reboot the ESXi host if you change the configuration.\nMake sure that Hyperthreading is enabled in the BIOS. Otherwise, it will be enabled, but never activated.",
          "default": "enabled",
          "type": "str",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Enables/Disables Hyperthreading optimization for an ESXi host system"
    },
    "examples": "\n- name: Enable Hyperthreading for an host system\n  community.vmware.vmware_host_hyperthreading:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n    state: enabled\n  delegate_to: localhost\n\n- name: Disable Hyperthreading for an host system\n  community.vmware.vmware_host_hyperthreading:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n    state: disabled\n  delegate_to: localhost\n\n- name: Disable Hyperthreading for all host systems from cluster\n  community.vmware.vmware_host_hyperthreading:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: '{{ cluster_name }}'\n    state: disabled\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_host_ipv6": {
    "doc": {
      "description": "This module can be used to enable or disable IPv6 support for ESXi host systems in given vCenter infrastructure.\nIt also checks if the host needs to be restarted.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster from which all host systems will be used.\nThis is required parameter if C(esxi_hostname) is not specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "Name of the host system to work with.\nThis is required parameter if C(cluster_name) is not specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Enable or disable IPv6 support.\nYou need to reboot the ESXi host if you change the configuration.",
          "default": "enabled",
          "type": "str",
          "required": false,
          "choices": [
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Enables/Disables IPv6 support for an ESXi host system"
    },
    "examples": "\n- name: Enable IPv6 for an host system\n  community.vmware.vmware_host_ipv6:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n    state: enabled\n  delegate_to: localhost\n\n- name: Disable IPv6 for an host system\n  community.vmware.vmware_host_ipv6:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n    state: disabled\n  delegate_to: localhost\n\n- name: Disable IPv6 for all host systems from cluster\n  community.vmware.vmware_host_ipv6:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: '{{ cluster_name }}'\n    state: disabled\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_host_iscsi": {
    "doc": {
      "description": "In this module, can manage the iSCSI configuration of ESXi host",
      "has_action": false,
      "notes": "All modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "esxi_hostname": {
          "aliases": [],
          "description": "The ESXi hostname on which to change iSCSI settings.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "iscsi_config": {
          "aliases": [],
          "description": "The iSCSI configs.\nThis parameter is required if I(state=present) or I(state=absent).",
          "type": "dict",
          "required": false,
          "suboptions": {
            "alias": {
              "aliases": [],
              "description": "The new value for the alias of the adapter.",
              "default": "",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "authentication": {
              "aliases": [],
              "description": "CHAP authentication parent settings for iSCSI.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "chap_auth_enabled": {
                  "aliases": [],
                  "description": "Whether to enable CHAP authentication.",
                  "default": "False",
                  "type": "bool",
                  "required": false,
                  "suboptions": {}
                },
                "chap_authentication_type": {
                  "aliases": [],
                  "description": "The preference for CHAP or non-CHAP protocol of CHAP if CHAP is enabled.",
                  "default": "chapProhibited",
                  "type": "str",
                  "required": false,
                  "choices": [
                    "chapDiscouraged",
                    "chapPreferred",
                    "chapRequired",
                    "chapProhibited"
                  ],
                  "suboptions": {}
                },
                "chap_name": {
                  "aliases": [],
                  "description": "CHAP user name if CHAP is enabled.",
                  "default": "",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "chap_secret": {
                  "aliases": [],
                  "description": "The secret password of CHAP if CHAP is enabled.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "mutual_chap_authentication_type": {
                  "aliases": [],
                  "description": "The preference for CHAP or non-CHAP protocol of Mutual-CHAP if CHAP is enabled.",
                  "default": "chapProhibited",
                  "type": "str",
                  "required": false,
                  "choices": [
                    "chapProhibited",
                    "chapRequired"
                  ],
                  "suboptions": {}
                },
                "mutual_chap_name": {
                  "aliases": [],
                  "description": "The user name that the target needs to use to authenticate with the initiator if Mutual-CHAP is enabled.",
                  "default": "",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                },
                "mutual_chap_secret": {
                  "aliases": [],
                  "description": "The secret password of mutual CHAP if Mutual-CHAP is enabled.",
                  "type": "str",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "force": {
              "aliases": [],
              "description": "Force port bind VMkernels to be removed.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "iscsi_name": {
              "aliases": [
                "initiator_iqn"
              ],
              "description": "The name for the iSCSI HBA adapter.\nThis is iSCSI qualified name.",
              "type": "str",
              "required": false,
              "version_added": "1.7.0",
              "suboptions": {}
            },
            "port_bind": {
              "aliases": [],
              "description": "The list of the VMkernels if use port bindings.",
              "default": "[]",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "send_target": {
              "aliases": [],
              "description": "The iSCSI dynamic target settings.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "address": {
                  "aliases": [],
                  "description": "The IP address or hostname of the storage device.",
                  "type": "str",
                  "required": true,
                  "suboptions": {}
                },
                "authentication": {
                  "aliases": [],
                  "description": "CHAP authentication settings of a dynamic target for iSCSI.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "chap_auth_enabled": {
                      "aliases": [],
                      "description": "Whether to enable CHAP authentication.",
                      "default": "False",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "chap_authentication_type": {
                      "aliases": [],
                      "description": "The preference for CHAP or non-CHAP protocol of CHAP if CHAP is enabled.",
                      "default": "chapProhibited",
                      "type": "str",
                      "required": false,
                      "choices": [
                        "chapDiscouraged",
                        "chapPreferred",
                        "chapRequired",
                        "chapProhibited"
                      ],
                      "suboptions": {}
                    },
                    "chap_inherited": {
                      "aliases": [],
                      "description": "Whether or not to inherit CHAP settings from the parent settings.",
                      "default": "True",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "chap_name": {
                      "aliases": [],
                      "description": "CHAP user name if CHAP is enabled.",
                      "default": "",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "chap_secret": {
                      "aliases": [],
                      "description": "The secret password of CHAP if CHAP is enabled.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "mutual_chap_authentication_type": {
                      "aliases": [],
                      "description": "The preference for CHAP or non-CHAP protocol of Mutual-CHAP if CHAP is enabled.",
                      "default": "chapProhibited",
                      "type": "str",
                      "required": false,
                      "choices": [
                        "chapProhibited",
                        "chapRequired"
                      ],
                      "suboptions": {}
                    },
                    "mutual_chap_inherited": {
                      "aliases": [],
                      "description": "Whether or not to inherit Mutual-CHAP settings from the parent settings.",
                      "default": "True",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "mutual_chap_name": {
                      "aliases": [],
                      "description": "The user name that the target needs to use to authenticate with the initiator if Mutual-CHAP is enabled.",
                      "default": "",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "mutual_chap_secret": {
                      "aliases": [],
                      "description": "The secret password of mutual CHAP if Mutual-CHAP is enabled.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "port": {
                  "aliases": [],
                  "description": "The TCP port of the storage device.\nIf not specified, the standard default of 3260 is used.",
                  "default": "3260",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "static_target": {
              "aliases": [],
              "description": "The iSCSI static target settings.",
              "type": "dict",
              "required": false,
              "suboptions": {
                "address": {
                  "aliases": [],
                  "description": "The IP address or hostname of the storage device.",
                  "type": "str",
                  "required": true,
                  "suboptions": {}
                },
                "authentication": {
                  "aliases": [],
                  "description": "CHAP authentication settings of a static target for iSCSI.",
                  "type": "dict",
                  "required": false,
                  "suboptions": {
                    "chap_auth_enabled": {
                      "aliases": [],
                      "description": "Whether to enable CHAP authentication.",
                      "default": "False",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "chap_authentication_type": {
                      "aliases": [],
                      "description": "The preference for CHAP or non-CHAP protocol of CHAP if CHAP is enabled.",
                      "default": "chapProhibited",
                      "type": "str",
                      "required": false,
                      "choices": [
                        "chapDiscouraged",
                        "chapPreferred",
                        "chapRequired",
                        "chapProhibited"
                      ],
                      "suboptions": {}
                    },
                    "chap_inherited": {
                      "aliases": [],
                      "description": "Whether or not to inherit CHAP settings from the parent settings.",
                      "default": "True",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "chap_name": {
                      "aliases": [],
                      "description": "CHAP user name if CHAP is enabled.",
                      "default": "",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "chap_secret": {
                      "aliases": [],
                      "description": "The secret password of CHAP if CHAP is enabled.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "mutual_chap_authentication_type": {
                      "aliases": [],
                      "description": "The preference for CHAP or non-CHAP protocol of Mutual-CHAP if CHAP is enabled.",
                      "default": "chapProhibited",
                      "type": "str",
                      "required": false,
                      "choices": [
                        "chapProhibited",
                        "chapRequired"
                      ],
                      "suboptions": {}
                    },
                    "mutual_chap_inherited": {
                      "aliases": [],
                      "description": "Whether or not to inherit Mutual-CHAP settings from the parent settings.",
                      "default": "True",
                      "type": "bool",
                      "required": false,
                      "suboptions": {}
                    },
                    "mutual_chap_name": {
                      "aliases": [],
                      "description": "The user name that the target needs to use to authenticate with the initiator if Mutual-CHAP is enabled.",
                      "default": "",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    },
                    "mutual_chap_secret": {
                      "aliases": [],
                      "description": "The secret password of mutual CHAP if Mutual-CHAP is enabled.",
                      "type": "str",
                      "required": false,
                      "suboptions": {}
                    }
                  }
                },
                "iscsi_name": {
                  "aliases": [],
                  "description": "The name of the iSCSI target to connect to.",
                  "type": "str",
                  "required": true,
                  "suboptions": {}
                },
                "port": {
                  "aliases": [],
                  "description": "The TCP port of the storage device.\nIf not specified, the standard default of 3260 is used.",
                  "default": "3260",
                  "type": "int",
                  "required": false,
                  "suboptions": {}
                }
              }
            },
            "vmhba_name": {
              "aliases": [],
              "description": "The iSCSI adapter name.",
              "type": "str",
              "required": true,
              "suboptions": {}
            }
          }
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "If set to C(present), add the iSCSI target or the bind ports if they are not existing.\nIf set to C(present), update the iSCSI settings if they already exist and occur change.\nIf set to C(absent), remove the iSCSI target or the bind ports if they are existing.\nIf set to (enabled), enable the iSCSI of ESXi if the iSCSI is disabled.\nIf set to (disabled), disable the iSCSI of ESXi if the iSCSI is enabled.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "enabled",
            "disabled"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "PyVmomi"
      ],
      "short_description": "Manage the iSCSI configuration of ESXi host"
    },
    "examples": "\n- name: Enable iSCSI of ESXi\n  community.vmware.vmware_host_iscsi:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    esxi_hostname: \"{{ esxi_hostname }}\"\n    state: enabled\n\n- name: Add a dynamic target to iSCSI config of ESXi\n  community.vmware.vmware_host_iscsi:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    esxi_hostname: \"{{ esxi_hostname }}\"\n    iscsi_config:\n      vmhba_name: vmhba65\n      send_target:\n        address: \"{{ send_target_address }}\"\n    state: present\n\n- name: Add a static target to iSCSI config of ESXi\n  community.vmware.vmware_host_iscsi:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    esxi_hostname: \"{{ esxi_hostname }}\"\n    iscsi_config:\n      vmhba_name: vmhba65\n      static_target:\n        iscsi_name: iqn.2011-08.com.xxxxxxx:as6104t-8c3e9d.target001\n        address: \"{{ send_target_address }}\"\n    state: present\n\n- name: Add VMKernels to iSCSI config of ESXi\n  community.vmware.vmware_host_iscsi:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    esxi_hostname: \"{{ esxi_hostname }}\"\n    iscsi_config:\n      vmhba_name: vmhba65\n      port_bind:\n        - vmk0\n        - vmk1\n    state: present\n\n- name: Use CHAP authentication\n  community.vmware.vmware_host_iscsi:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    esxi_hostname: \"{{ esxi_hostname }}\"\n    iscsi_config:\n      vmhba_name: vmhba65\n      authentication:\n        chap_auth_enabled: true\n        chap_authentication_type: chapPreferred\n        chap_name: chap_user_name\n        chap_secret: secret\n    state: present\n\n- name: Remove a dynamic target from iSCSI config of ESXi\n  community.vmware.vmware_host_iscsi:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    esxi_hostname: \"{{ esxi_hostname }}\"\n    iscsi_config:\n      vmhba_name: vmhba65\n      send_target:\n        address: \"{{ send_target_address }}\"\n    state: absent\n"
  },
  "community.vmware.vmware_host_iscsi_info": {
    "doc": {
      "description": "This module can be used to gather information about the iSCSI configuration of the ESXi host.",
      "has_action": false,
      "notes": "All modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "esxi_hostname": {
          "aliases": [],
          "description": "The ESXi hostname on which to gather iSCSI settings.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "PyVmomi"
      ],
      "short_description": "Gather iSCSI configuration information of ESXi host"
    },
    "examples": "\n- name: Gather iSCSI configuration information of ESXi host\n  community.vmware.vmware_host_iscsi_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    esxi_hostname: \"{{ esxi_hostname }}\"\n  register: iscsi_info\n"
  },
  "community.vmware.vmware_host_kernel_manager": {
    "doc": {
      "description": "This module can be used to manage kernel module options on ESXi hosts.\nAll connected ESXi hosts in scope will be configured when specified.\nIf a host is not connected at time of configuration, it will be marked as such in the output.\nKernel module options may require a reboot to take effect which is not covered here.\nYou can use M(ansible.builtin.reboot) or M(community.vmware.vmware_host_powerstate) module to reboot all ESXi host systems.",
      "has_action": false,
      "notes": "Tested on vSphere 6.0\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the VMware cluster to work on.\nAll ESXi hosts in this cluster will be configured.\nThis parameter is required if C(esxi_hostname) is not specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "Name of the ESXi host to work on.\nThis parameter is required if C(cluster_name) is not specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "kernel_module_name": {
          "aliases": [],
          "description": "Name of the kernel module to be configured.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "kernel_module_option": {
          "aliases": [],
          "description": "Specified configurations will be applied to the given module.\nThese values are specified in key=value pairs and separated by a space when there are multiple options.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "PyVmomi"
      ],
      "short_description": "Manage kernel module options on ESXi hosts"
    },
    "examples": "\n- name: Configure IPv6 to be off via tcpip4 kernel module\n  community.vmware.vmware_host_kernel_manager:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n    kernel_module_name: \"tcpip4\"\n    kernel_module_option: \"ipv6=0\"\n\n- name: Using cluster_name, configure vmw_psp_rr options\n  community.vmware.vmware_host_kernel_manager:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: '{{ virtual_cluster_name }}'\n    kernel_module_name: \"vmw_psp_rr\"\n    kernel_module_option: \"maxPathsPerDevice=2\"\n"
  },
  "community.vmware.vmware_host_lockdown": {
    "doc": {
      "description": "This module can be used to manage administrator permission for the local administrative account for the host when ESXi hostname is given.\nAll parameters and VMware objects values are case sensitive.\nThis module is destructive as administrator permission are managed using APIs used, please read options carefully and proceed.\nPlease specify C(hostname) as vCenter IP or hostname only, as lockdown operations are not possible from standalone ESXi server.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of cluster.\nAll host systems from given cluster used to manage lockdown.\nRequired parameter, if C(esxi_hostname) is not set.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "List of ESXi hostname to manage lockdown.\nRequired parameter, if C(cluster_name) is not set.\nSee examples for specifications.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of hosts system\nIf set to C(present), all host systems will be set in lockdown mode.\nIf host system is already in lockdown mode and set to C(present), no action will be taken.\nIf set to C(absent), all host systems will be removed from lockdown mode.\nIf host system is already out of lockdown mode and set to C(absent), no action will be taken.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Manage administrator permission for the local administrative account for the ESXi host"
    },
    "examples": "\n- name: Enter host system into lockdown mode\n  community.vmware.vmware_host_lockdown:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n    state: present\n  delegate_to: localhost\n\n- name: Exit host systems from lockdown mode\n  community.vmware.vmware_host_lockdown:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n    state: absent\n  delegate_to: localhost\n\n- name: Enter host systems into lockdown mode\n  community.vmware.vmware_host_lockdown:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname:\n        - '{{ esxi_hostname_1 }}'\n        - '{{ esxi_hostname_2 }}'\n    state: present\n  delegate_to: localhost\n\n- name: Exit host systems from lockdown mode\n  community.vmware.vmware_host_lockdown:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname:\n        - '{{ esxi_hostname_1 }}'\n        - '{{ esxi_hostname_2 }}'\n    state: absent\n  delegate_to: localhost\n\n- name: Enter all host system from cluster into lockdown mode\n  community.vmware.vmware_host_lockdown:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: '{{ cluster_name }}'\n    state: present\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_host_logbundle": {
    "doc": {
      "description": "This module can be used to fetch logbundle file from ESXi.",
      "has_action": false,
      "notes": "All modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "dest": {
          "aliases": [],
          "description": "file destination on localhost, path must be exist.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "Name of the host system to fetch the logbundle.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "manifests": {
          "aliases": [],
          "description": "Logs to include in the logbundle file.\nRefer to the id key of the M(community.vmware.vmware_host_logbundle_info) module for values that can be specified in the manifest.",
          "default": "['System:Base', 'System:CoreDumps', 'System:EsxImage', 'System:IOFilter', 'System:LoadESX', 'System:Modules', 'System:RDMA', 'System:ResourceGroups', 'System:TPM', 'System:VFlash', 'System:VMTools', 'System:VmiofPlugins', 'System:ntp', 'System:uwstats', 'Fcd:Catalog', 'VirtualMachines:CoreDumps', 'VirtualMachines:VirtualMachineStats', 'VirtualMachines:base', 'VirtualMachines:base', 'VirtualMachines:diskinfo', 'VirtualMachines:logs', 'Storage:FCoE', 'Storage:Multipathing', 'Storage:NAS', 'Storage:VSAN', 'Storage:VSANHealth', 'Storage:VSANIscsiTarget', 'Storage:VSANPerfStats', 'Storage:VSANPerfSvc', 'Storage:VSANTraces', 'Storage:VVOL', 'Storage:base', 'Storage:iodm', 'Storage:iscsi', 'FeatureStateSwitch:FeatureStateSwitch', 'Userworld:HostAgent', 'Userworld:ProcessInformation', 'Configuration:System', 'Logs:System', 'hostProfiles:SystemImageCacheHostProfile', 'hostProfiles:hostProfiles', 'FileSystem:VMFSDiskDump', 'FileSystem:base', 'ActiveDirectory:base', 'CIM:base', 'Hardware:base', 'Hardware:usb', 'Installer:base', 'Network:base', 'Network:dvs', 'Network:lacp', 'Network:nscd', 'Network:tcpip', 'IntegrityChecks:md5sums']",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "performance_data": {
          "aliases": [],
          "description": "Gather performance data for ESXi.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "duration": {
              "aliases": [],
              "description": "Duration for which performance data is gathered.",
              "default": "300",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "interval": {
              "aliases": [],
              "description": "Interval for which performance data is gathered.",
              "default": "5",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "PyVmomi"
      ],
      "short_description": "Fetch logbundle file from ESXi"
    },
    "examples": "\n- name: fetch logbundle file from ESXi\n  community.vmware.vmware_host_logbundle:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    esxi_hostname: \"{{ esxi_hostname }}\"\n    dest: ./esxi-log.tgz\n\n- name: fetch logbundle file from ESXi with manifests\n  community.vmware.vmware_host_logbundle:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    esxi_hostname: \"{{ esxi_hostname }}\"\n    dest: ./esxi-log.tgz\n    manifests:\n      - System:Base\n      - VirtualMachines:VirtualMachineStats\n"
  },
  "community.vmware.vmware_host_logbundle_info": {
    "doc": {
      "description": "This module can be used to gather manifest information for logbundle from ESXi.",
      "has_action": false,
      "notes": "All modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "esxi_hostname": {
          "aliases": [],
          "description": "Name of the host system to fetch the manifests for logbundle.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "PyVmomi"
      ],
      "short_description": "Gathers manifest info for logbundle"
    },
    "examples": "\n- name: fetch the manifests for logbundle from ESXi\n  community.vmware.vmware_host_logbundle_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    esxi_hostname: \"{{ esxi_hostname }}\"\n  register: fetch_manifests_result\n"
  },
  "community.vmware.vmware_host_ntp": {
    "doc": {
      "description": "This module can be used to configure, add or remove NTP servers from an ESXi host.\nIf C(state) is not given, the NTP servers will be configured in the exact sequence.\nUser can specify an ESXi hostname or Cluster name. In case of cluster name, all ESXi hosts are updated.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster from which all host systems will be used.\nThis parameter is required if C(esxi_hostname) is not specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "Name of the host system to work with.\nThis parameter is required if C(cluster_name) is not specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ntp_servers": {
          "aliases": [],
          "description": "IP or FQDN of NTP server(s).\nThis accepts a list of NTP servers. For multiple servers, please look at the examples.",
          "type": "list",
          "required": true,
          "elements": "str",
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "present: Add NTP server(s), if specified server(s) are absent else do nothing.\nabsent: Remove NTP server(s), if specified server(s) are present else do nothing.\nSpecified NTP server(s) will be configured if C(state) isn't specified.",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "verbose": {
          "aliases": [],
          "description": "Verbose output of the configuration change.\nExplains if an NTP server was added, removed, or if the NTP server sequence was changed.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Manage NTP server configuration of an ESXi host"
    },
    "examples": "\n- name: Configure NTP servers for an ESXi Host\n  community.vmware.vmware_host_ntp:\n    hostname: vcenter01.example.local\n    username: administrator@vsphere.local\n    password: SuperSecretPassword\n    esxi_hostname: esx01.example.local\n    ntp_servers:\n        - 0.pool.ntp.org\n        - 1.pool.ntp.org\n  delegate_to: localhost\n\n- name: Set NTP servers for all ESXi Host in given Cluster\n  community.vmware.vmware_host_ntp:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: '{{ cluster_name }}'\n    state: present\n    ntp_servers:\n        - 0.pool.ntp.org\n        - 1.pool.ntp.org\n  delegate_to: localhost\n\n- name: Set NTP servers for an ESXi Host\n  community.vmware.vmware_host_ntp:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n    state: present\n    ntp_servers:\n        - 0.pool.ntp.org\n        - 1.pool.ntp.org\n  delegate_to: localhost\n\n- name: Remove NTP servers for an ESXi Host\n  community.vmware.vmware_host_ntp:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n    state: absent\n    ntp_servers:\n        - bad.server.ntp.org\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_host_ntp_facts": {
    "doc": {
      "description": "This module can be used to gather facts about NTP configurations on an ESXi host.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster.\nNTP config facts about each ESXi server will be returned for the given cluster.\nIf C(esxi_hostname) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "ESXi hostname.\nNTP config facts about this ESXi server will be returned.\nIf C(cluster_name) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gathers facts about NTP configuration on an ESXi host"
    },
    "examples": "\n- name: Gather NTP facts about all ESXi Host in the given Cluster\n  community.vmware.vmware_host_ntp_facts:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: cluster_name\n  delegate_to: localhost\n  register: cluster_host_ntp\n\n- name: Gather NTP facts about ESXi Host\n  community.vmware.vmware_host_ntp_facts:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n  delegate_to: localhost\n  register: host_ntp\n"
  },
  "community.vmware.vmware_host_ntp_info": {
    "doc": {
      "description": "This module can be used to gather information about NTP configurations on an ESXi host.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster.\nNTP config information about each ESXi server will be returned for the given cluster.\nIf C(esxi_hostname) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "ESXi hostname.\nNTP config information about this ESXi server will be returned.\nIf C(cluster_name) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gathers info about NTP configuration on an ESXi host"
    },
    "examples": "\n- name: Gather NTP info about all ESXi Host in the given Cluster\n  community.vmware.vmware_host_ntp_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: cluster_name\n  delegate_to: localhost\n  register: cluster_host_ntp\n\n- name: Gather NTP info about ESXi Host\n  community.vmware.vmware_host_ntp_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n  delegate_to: localhost\n  register: host_ntp\n"
  },
  "community.vmware.vmware_host_package_facts": {
    "doc": {
      "description": "This module can be used to gather facts about available packages and their status on an ESXi host.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster.\nPackage facts about each ESXi server will be returned for given cluster.\nIf C(esxi_hostname) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "ESXi hostname.\nPackage facts about this ESXi server will be returned.\nIf C(cluster_name) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gathers facts about available packages on an ESXi host"
    },
    "examples": "\n- name: Gather facts about all ESXi Host in given Cluster\n  community.vmware.vmware_host_package_facts:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: cluster_name\n  delegate_to: localhost\n  register: cluster_host_packages\n\n- name: Gather facts about ESXi Host\n  community.vmware.vmware_host_package_facts:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n  delegate_to: localhost\n  register: host_packages\n"
  },
  "community.vmware.vmware_host_package_info": {
    "doc": {
      "description": "This module can be used to gather information about available packages and their status on an ESXi host.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster.\nPackage information about each ESXi server will be returned for given cluster.\nIf C(esxi_hostname) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "ESXi hostname.\nPackage information about this ESXi server will be returned.\nIf C(cluster_name) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gathers info about available packages on an ESXi host"
    },
    "examples": "\n- name: Gather info about all ESXi Host in given Cluster\n  community.vmware.vmware_host_package_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: cluster_name\n  delegate_to: localhost\n  register: cluster_host_packages\n\n- name: Gather info about ESXi Host\n  community.vmware.vmware_host_package_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n  delegate_to: localhost\n  register: host_packages\n"
  },
  "community.vmware.vmware_host_passthrough": {
    "doc": {
      "description": "This module can be managed PCI device passthrough settings on host.",
      "has_action": false,
      "notes": "Supports C(check_mode).\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster": {
          "aliases": [
            "cluster_name"
          ],
          "description": "Name of the cluster from which all host systems will be used.\nThis parameter is required if C(esxi_hostname) is not specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "devices": {
          "aliases": [],
          "description": "List of PCI device name.",
          "type": "list",
          "required": true,
          "elements": "dict",
          "suboptions": {
            "device_name": {
              "aliases": [
                "name"
              ],
              "description": "Name of PCI device to enable passthrough.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "Name of the host system to work with.\nThis parameter is required if C(cluster_name) is not specified.\nUser can specify specific host from the cluster.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "If I(state=present), passthrough of PCI device will be enabled.\nIf I(state=absent), passthrough of PCI device will be disabled.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 3.6",
        "PyVmomi"
      ],
      "short_description": "Manage PCI device passthrough settings on host",
      "version_added": "1.11.0"
    },
    "examples": "\n- name: Enable PCI device passthrough against the whole ESXi in a cluster\n  community.vmware.vmware_host_passthrough:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    validate_certs: false\n    cluster: \"{{ ccr1 }}\"\n    devices:\n      - device_name: \"Dual Band Wireless AC 3165\"\n    state: present\n\n- name: Enable PCI device passthrough against one ESXi\n  community.vmware.vmware_host_passthrough:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    validate_certs: false\n    esxi_hostname: \"{{ esxi1 }}\"\n    devices:\n      - device_name: \"Dual Band Wireless AC 3165\"\n    state: present\n\n- name: Disable PCI device passthrough against the whole ESXi in a cluster\n  community.vmware.vmware_host_passthrough:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    validate_certs: false\n    cluster: \"{{ ccr1 }}\"\n    devices:\n      - device_name: \"Dual Band Wireless AC 3165\"\n    state: absent\n"
  },
  "community.vmware.vmware_host_powermgmt_policy": {
    "doc": {
      "description": "This module can be used to manage the Power Management Policy of ESXi host systems in given vCenter infrastructure.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster from which all host systems will be used.\nThis is required parameter if C(esxi_hostname) is not specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "Name of the host system to work with.\nThis is required parameter if C(cluster_name) is not specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "policy": {
          "aliases": [],
          "description": "Set the Power Management Policy of the host system.",
          "default": "balanced",
          "type": "str",
          "required": false,
          "choices": [
            "high-performance",
            "balanced",
            "low-power",
            "custom"
          ],
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Manages the Power Management Policy of an ESXI host system"
    },
    "examples": "\n- name: Set the Power Management Policy of a host system to high-performance\n  community.vmware.vmware_host_powermgmt_policy:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_host }}'\n    policy: high-performance\n  delegate_to: localhost\n\n- name: Set the Power Management Policy of all host systems from cluster to high-performance\n  community.vmware.vmware_host_powermgmt_policy:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: '{{ cluster_name }}'\n    policy: high-performance\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_host_powerstate": {
    "doc": {
      "description": "This module can be used to manage power states of host systems in given vCenter infrastructure.\nUser can set power state to 'power-down-to-standby', 'power-up-from-standby', 'shutdown-host' and 'reboot-host'.\nState 'reboot-host', 'shutdown-host' and 'power-down-to-standby' are not supported by all the host systems.",
      "has_action": false,
      "notes": "All modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster from which all host systems will be used.\nThis is required parameter if C(esxi_hostname) is not specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "Name of the host system to work with.\nThis is required parameter if C(cluster_name) is not specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "force": {
          "aliases": [],
          "description": "This parameter specify if the host should be proceeding with user defined powerstate regardless of whether it is in maintenance mode.\nIf C(state) set to C(reboot-host) and C(force) as C(true), then host system is rebooted regardless of whether it is in maintenance mode.\nIf C(state) set to C(shutdown-host) and C(force) as C(true), then host system is shutdown regardless of whether it is in maintenance mode.\nIf C(state) set to C(power-down-to-standby) and C(force) to C(true), then all powered off VMs will evacuated.\nNot applicable if C(state) set to C(power-up-from-standby).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Set the state of the host system.",
          "default": "shutdown-host",
          "type": "str",
          "required": false,
          "choices": [
            "power-down-to-standby",
            "power-up-from-standby",
            "shutdown-host",
            "reboot-host"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "This parameter defines timeout for C(state) set to C(power-down-to-standby) or C(power-up-from-standby).\nIgnored if C(state) set to C(reboot-host) or C(shutdown-host).\nThis parameter is defined in seconds.",
          "default": "600",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Manages power states of host systems in vCenter"
    },
    "examples": "\n- name: Set the state of a host system to reboot\n  community.vmware.vmware_host_powerstate:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n    state: reboot-host\n  delegate_to: localhost\n  register: reboot_host\n\n- name: Set the state of a host system to power down to standby\n  community.vmware.vmware_host_powerstate:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n    state: power-down-to-standby\n  delegate_to: localhost\n  register: power_down\n\n- name: Set the state of all host systems from cluster to reboot\n  community.vmware.vmware_host_powerstate:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: '{{ cluster_name }}'\n    state: reboot-host\n  delegate_to: localhost\n  register: reboot_host\n"
  },
  "community.vmware.vmware_host_scanhba": {
    "doc": {
      "description": "This module can force a rescan of the hosts HBA subsystem which is needed when wanting to mount a new datastore.\nYou could use this before using M(community.vmware.vmware_host_datastore) to mount a new datastore to ensure your device/volume is ready.\nYou can also optionally force a Refresh of the Storage System in vCenter/ESXi Web Client.\nAll parameters and VMware object names are case sensitive.\nYou can supply an esxi_hostname or a cluster_name",
      "has_action": false,
      "notes": "Tested on vSphere 6.0\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Cluster name to Rescan the storage subsystem on (this will run the rescan task on each host in the cluster).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "ESXi hostname to Rescan the storage subsystem on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "refresh_storage": {
          "aliases": [],
          "description": "Refresh the storage system in vCenter/ESXi Web Client for each host found",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "rescan_hba": {
          "aliases": [],
          "description": "Rescan all host bus adapters for new storage devices. Rescanning all adapters can be slow.",
          "default": "True",
          "type": "bool",
          "required": false,
          "version_added": "1.17.0",
          "suboptions": {}
        },
        "rescan_vmfs": {
          "aliases": [],
          "description": "Rescan all known storage devices for new VMFS volumes.",
          "default": "False",
          "type": "bool",
          "required": false,
          "version_added": "1.17.0",
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Rescan host HBA's and optionally refresh the storage system"
    },
    "examples": "\n- name: Recan HBA's for a given ESXi host and refresh storage system objects\n  community.vmware.vmware_host_scanhba:\n      hostname: '{{ vcenter_hostname }}'\n      username: '{{ vcenter_username }}'\n      password: '{{ vcenter_password }}'\n      esxi_hostname: '{{ inventory_hostname }}'\n      refresh_storage: true\n  delegate_to: localhost\n\n- name: Rescan HBA's for a given cluster - all found hosts will be scanned\n  community.vmware.vmware_host_scanhba:\n      hostname: '{{ vcenter_hostname }}'\n      username: '{{ vcenter_username }}'\n      password: '{{ vcenter_password }}'\n      esxi_hostname: '{{ inventory_hostname }}'\n      refresh_storage: true\n  delegate_to: localhost\n\n- name: Rescan for new VMFS Volumes in a given cluster, but do not scan for new Devices - all found hosts will be scanned\n  community.vmware.vmware_host_scanhba:\n      hostname: '{{ vcenter_hostname }}'\n      username: '{{ vcenter_username }}'\n      password: '{{ vcenter_password }}'\n      esxi_hostname: '{{ inventory_hostname }}'\n      rescan_vmfs: true\n      rescan_hba: false\n  delegate_to: localhost\n\n- name: Recan HBA's for a given ESXi host and don't refresh storage system objects\n  community.vmware.vmware_host_scanhba:\n      hostname: '{{ vcenter_hostname }}'\n      username: '{{ vcenter_username }}'\n      password: '{{ vcenter_password }}'\n      esxi_hostname: '{{ inventory_hostname }}'\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_host_scsidisk_info": {
    "doc": {
      "description": "This module can be used to gather information about SCSI disk attached to the given ESXi.",
      "has_action": false,
      "notes": "All modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster from which all host systems will be used.\nSCSI disk information about each ESXi server will be returned for the given cluster.\nThis parameter is required if I(esxi_hostname) is not specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "Name of the host system to work with.\nSCSI disk information about this ESXi server will be returned.\nThis parameter is required if I(cluster_name) is not specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "Python >= 2.7",
        "PyVmomi"
      ],
      "short_description": "Gather information about SCSI disk attached to the given ESXi"
    },
    "examples": "\n- name: Gather information SCSI disk attached to the given ESXi\n  community.vmware.vmware_host_scsidisk_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n  delegate_to: localhost\n\n- name: Gather information of all host systems from the given cluster\n  community.vmware.vmware_host_scsidisk_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: '{{ cluster_name }}'\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_host_service_facts": {
    "doc": {
      "description": "This module can be used to gather facts about an ESXi host's services.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nIf source package name is not available then fact is populated as null.\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster.\nService facts about each ESXi server will be returned for given cluster.\nIf C(esxi_hostname) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "ESXi hostname.\nService facts about this ESXi server will be returned.\nIf C(cluster_name) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gathers facts about an ESXi host's services"
    },
    "examples": "\n- name: Gather facts about all ESXi Host in given Cluster\n  community.vmware.vmware_host_service_facts:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: cluster_name\n  delegate_to: localhost\n  register: cluster_host_services\n\n- name: Gather facts about ESXi Host\n  community.vmware.vmware_host_service_facts:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n  delegate_to: localhost\n  register: host_services\n"
  },
  "community.vmware.vmware_host_service_info": {
    "doc": {
      "description": "This module can be used to gather information about an ESXi host's services.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nIf source package name is not available then fact is populated as null.\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster.\nService information about each ESXi server will be returned for given cluster.\nIf C(esxi_hostname) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "ESXi hostname.\nService information about this ESXi server will be returned.\nIf C(cluster_name) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gathers info about an ESXi host's services"
    },
    "examples": "\n- name: Gather info about all ESXi Host in given Cluster\n  community.vmware.vmware_host_service_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: cluster_name\n  delegate_to: localhost\n  register: cluster_host_services\n\n- name: Gather info about ESXi Host\n  community.vmware.vmware_host_service_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n  delegate_to: localhost\n  register: host_services\n"
  },
  "community.vmware.vmware_host_service_manager": {
    "doc": {
      "description": "This module can be used to manage (start, stop, restart) services on a given ESXi host.\nIf cluster_name is provided, specified service will be managed on all ESXi host belonging to that cluster.\nIf specific esxi_hostname is provided, then specified service will be managed on given ESXi host only.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster.\nService settings are applied to every ESXi host system/s in given cluster.\nIf C(esxi_hostname) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "ESXi hostname.\nService settings are applied to this ESXi host system.\nIf C(cluster_name) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "service_name": {
          "aliases": [],
          "description": "Name of Service to be managed. This is a brief identifier for the service, for example, ntpd, vxsyslogd etc.\nThis value should be a valid ESXi service name.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "service_policy": {
          "aliases": [],
          "description": "Set of valid service policy strings.\nIf set C(on), then service should be started when the host starts up.\nIf set C(automatic), then service should run if and only if it has open firewall ports.\nIf set C(off), then Service should not be started when the host starts up.",
          "type": "str",
          "required": false,
          "choices": [
            "automatic",
            "off",
            "on"
          ],
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Desired state of service.\nState value 'start' and 'present' has same effect.\nState value 'stop' and 'absent' has same effect.\nState value C(unchanged) is added in version 1.14.0 to allow defining startup policy without defining or changing service state.",
          "default": "start",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present",
            "restart",
            "start",
            "stop",
            "unchanged"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Manage services on a given ESXi host"
    },
    "examples": "\n- name: Start ntpd service setting for all ESXi Host in given Cluster\n  community.vmware.vmware_host_service_manager:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: '{{ cluster_name }}'\n    service_name: ntpd\n    state: present\n  delegate_to: localhost\n\n- name: Start ntpd setting for an ESXi Host\n  community.vmware.vmware_host_service_manager:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n    service_name: ntpd\n    state: present\n  delegate_to: localhost\n\n- name: Start ntpd setting for an ESXi Host with Service policy\n  community.vmware.vmware_host_service_manager:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n    service_name: ntpd\n    service_policy: on\n    state: present\n  delegate_to: localhost\n\n- name: Stop ntpd setting for an ESXi Host\n  community.vmware.vmware_host_service_manager:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n    service_name: ntpd\n    state: absent\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_host_snmp": {
    "doc": {
      "description": "This module can be used to configure the embedded SNMP agent on an ESXi host.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nYou need to reset the agent (to factory defaults) if you want to clear all community strings, trap targets, or filters\nSNMP v3 configuration isn't implemented yet\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "community": {
          "aliases": [],
          "description": "List of SNMP community strings.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hw_source": {
          "aliases": [],
          "description": "Source hardware events from IPMI sensors or CIM Indications.\nThe embedded SNMP agent receives hardware events either from IPMI sensors C(sensors) or CIM indications C(indications).",
          "default": "indications",
          "type": "str",
          "required": false,
          "choices": [
            "indications",
            "sensors"
          ],
          "suboptions": {}
        },
        "log_level": {
          "aliases": [],
          "description": "Syslog logging level.",
          "default": "info",
          "type": "str",
          "required": false,
          "choices": [
            "debug",
            "info",
            "warning",
            "error"
          ],
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "send_trap": {
          "aliases": [],
          "description": "Send a test trap to validate the configuration.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "snmp_port": {
          "aliases": [],
          "description": "Port used by the SNMP agent.",
          "default": "161",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Enable, disable, or reset the SNMP agent.",
          "default": "disabled",
          "type": "str",
          "required": false,
          "choices": [
            "disabled",
            "enabled",
            "reset"
          ],
          "suboptions": {}
        },
        "sys_contact": {
          "aliases": [],
          "description": "System contact who manages the system.",
          "type": "str",
          "required": false,
          "version_added": "1.17.0",
          "suboptions": {}
        },
        "sys_location": {
          "aliases": [],
          "description": "System location.",
          "type": "str",
          "required": false,
          "version_added": "1.17.0",
          "suboptions": {}
        },
        "trap_filter": {
          "aliases": [],
          "description": "A list of trap oids for traps not to be sent by agent, e.g. [ 1.3.6.1.4.1.6876.4.1.1.0, 1.3.6.1.4.1.6876.4.1.1.1 ]\nUse value C(reset) to clear settings.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "trap_targets": {
          "aliases": [],
          "description": "A list of trap targets.\nYou need to use C(hostname), C(port), and C(community) for each trap target.",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "dict",
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Configures SNMP on an ESXi host system"
    },
    "examples": "\n- name: Enable and configure SNMP community\n  community.vmware.vmware_host_snmp:\n    hostname: '{{ esxi_hostname }}'\n    username: '{{ esxi_username }}'\n    password: '{{ esxi_password }}'\n    community: [ test ]\n    state: enabled\n  delegate_to: localhost\n\n- name: Configure SNMP traps and filters\n  community.vmware.vmware_host_snmp:\n    hostname: '{{ esxi_hostname }}'\n    username: '{{ esxi_username }}'\n    password: '{{ esxi_password }}'\n    community: [ test ]\n    trap_targets:\n      - hostname: 192.168.1.100\n        port: 162\n        community: test123\n      - hostname: 192.168.1.101\n        port: 162\n        community: test1234\n    trap_filter:\n      - 1.3.6.1.4.1.6876.4.1.1.0\n      - 1.3.6.1.4.1.6876.4.1.1.1\n    state: enabled\n  delegate_to: localhost\n\n- name: Enable and configure SNMP system contact and location\n  community.vmware.vmware_host_snmp:\n    hostname: '{{ esxi_hostname }}'\n    username: '{{ esxi_username }}'\n    password: '{{ esxi_password }}'\n    sys_contact: \"admin@testemail.com\"\n    sys_location: \"Austin, USA\"\n    state: enabled\n  delegate_to: localhost\n\n- name: Disable SNMP\n  community.vmware.vmware_host_snmp:\n    hostname: '{{ esxi_hostname }}'\n    username: '{{ esxi_username }}'\n    password: '{{ esxi_password }}'\n    state: disabled\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_host_sriov": {
    "doc": {
      "description": "This module can be used to configure, enable or disable SR-IOV functions on ESXi host.\nModule does not reboot the host after changes, but puts it in output \"rebootRequired\" state.\nUser can specify an ESXi hostname or Cluster name. In case of cluster name, all ESXi hosts are updated.",
      "has_action": false,
      "notes": "Tested on vSphere 6.0\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster from which all host systems will be used.\nThis parameter is required if C(esxi_hostname) is not specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "Name of the host system to work with.\nThis parameter is required if C(cluster_name) is not specified.\nUser can specify specific host from the cluster.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "num_virt_func": {
          "aliases": [],
          "description": "number of functions to activate on interface.\n0 means SR-IOV disabled.\nnumber greater than 0 means SR-IOV enabled.",
          "type": "int",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sriov_on": {
          "aliases": [],
          "description": "optional parameter, related to C(num_virt_func).\nSR-IOV can be enabled only if C(num_virt_func) > 0.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vmnic": {
          "aliases": [],
          "description": "Interface name, like vmnic0.",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "PyVmomi"
      ],
      "short_description": "Manage SR-IOV settings on host",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: enable SR-IOV on vmnic0 with 8 functions\n  community.vmware.vmware_host_sriov:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    esxi_hostname: \"{{ esxi1 }}\"\n    vmnic: vmnic0\n    sriov_on: true\n    num_virt_func: 8\n\n- name: enable SR-IOV on already enabled interface vmnic0\n  community.vmware.vmware_host_sriov:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    esxi_hostname: \"{{ esxi1 }}\"\n    vmnic: vmnic0\n    sriov_on: true\n    num_virt_func: 8\n\n- name: enable SR-IOV on vmnic0 with big number of functions\n  community.vmware.vmware_host_sriov:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    esxi_hostname: \"{{ esxi1 }}\"\n    vmnic: vmnic0\n    sriov_on: true\n    num_virt_func: 100\n  ignore_errors: true\n\n- name: disable SR-IOV on vmnic0\n  community.vmware.vmware_host_sriov:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    esxi_hostname: \"{{ esxi1 }}\"\n    vmnic: vmnic0\n    sriov_on: false\n    num_virt_func: 0\n"
  },
  "community.vmware.vmware_host_ssl_facts": {
    "doc": {
      "description": "This module can be used to gather facts of the SSL thumbprint information for a host.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster.\nSSL thumbprint information about all ESXi host system in the given cluster will be reported.\nIf C(esxi_hostname) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "ESXi hostname.\nSSL thumbprint information of this ESXi host system will be reported.\nIf C(cluster_name) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gather facts of ESXi host system about SSL"
    },
    "examples": "\n- name: Gather SSL thumbprint information about all ESXi Hosts in given Cluster\n  community.vmware.vmware_host_ssl_facts:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: '{{ cluster_name }}'\n  delegate_to: localhost\n  register: all_host_ssl_facts\n\n- name: Get SSL Thumbprint info about \"{{ esxi_hostname }}\"\n  community.vmware.vmware_host_ssl_facts:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    esxi_hostname: '{{ esxi_hostname }}'\n  register: ssl_facts\n- set_fact:\n    ssl_thumbprint: \"{{ ssl_facts['host_ssl_facts'][esxi_hostname]['ssl_thumbprints'][0] }}\"\n- debug:\n    msg: \"{{ ssl_thumbprint }}\"\n- name: Add ESXi Host to vCenter\n  vmware_host:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter_name: '{{ datacenter_name }}'\n    cluster_name: '{{ cluster_name }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n    esxi_username: '{{ esxi_username }}'\n    esxi_password: '{{ esxi_password }}'\n    esxi_ssl_thumbprint: '{{ ssl_thumbprint }}'\n    state: present\n"
  },
  "community.vmware.vmware_host_ssl_info": {
    "doc": {
      "description": "This module can be used to gather information of the SSL thumbprint information for a host.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster.\nSSL thumbprint information about all ESXi host system in the given cluster will be reported.\nIf C(esxi_hostname) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "ESXi hostname.\nSSL thumbprint information of this ESXi host system will be reported.\nIf C(cluster_name) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gather info of ESXi host system about SSL"
    },
    "examples": "\n- name: Gather SSL thumbprint information about all ESXi Hosts in given Cluster\n  community.vmware.vmware_host_ssl_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: '{{ cluster_name }}'\n  delegate_to: localhost\n  register: all_host_ssl_info\n\n- name: Get SSL Thumbprint info about \"{{ esxi_hostname }}\"\n  community.vmware.vmware_host_ssl_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    esxi_hostname: '{{ esxi_hostname }}'\n  register: ssl_info\n- set_fact:\n    ssl_thumbprint: \"{{ ssl_info['host_ssl_info'][esxi_hostname]['ssl_thumbprints'][0] }}\"\n- debug:\n    msg: \"{{ ssl_thumbprint }}\"\n- name: Add ESXi Host to vCenter\n  vmware_host:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter_name: '{{ datacenter_name }}'\n    cluster_name: '{{ cluster_name }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n    esxi_username: '{{ esxi_username }}'\n    esxi_password: '{{ esxi_password }}'\n    esxi_ssl_thumbprint: '{{ ssl_thumbprint }}'\n    state: present\n"
  },
  "community.vmware.vmware_host_tcpip_stacks": {
    "doc": {
      "description": "This module can be used to modify the TCP/IP stacks configuration.",
      "has_action": false,
      "notes": "All modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "default": {
          "aliases": [],
          "description": "The TCP/IP stacks configuration of the I(default).",
          "type": "dict",
          "required": false,
          "suboptions": {
            "alternate_dns": {
              "aliases": [],
              "description": "The IP address of the alternate dns server.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "congestion_algorithm": {
              "aliases": [],
              "description": "The TCP congest control algorithm.",
              "default": "newreno",
              "type": "str",
              "required": false,
              "choices": [
                "newreno",
                "cubic"
              ],
              "suboptions": {}
            },
            "domain": {
              "aliases": [],
              "description": "The domain name portion of the DNS name.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "gateway": {
              "aliases": [],
              "description": "The ipv4 gateway address.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "hostname": {
              "aliases": [],
              "description": "The host name of the ESXi host.",
              "type": "str",
              "required": true,
              "suboptions": {}
            },
            "ipv6_gateway": {
              "aliases": [],
              "description": "The ipv6 gateway address.",
              "type": "str",
              "required": false,
              "version_added": "1.11.0",
              "suboptions": {}
            },
            "max_num_connections": {
              "aliases": [],
              "description": "The maximum number of socket connection that are requested.",
              "default": "11000",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "preferred_dns": {
              "aliases": [],
              "description": "The IP address of the preferred dns server.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "search_domains": {
              "aliases": [],
              "description": "The domain in which to search for hosts, placed in order of preference.",
              "default": "[]",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            }
          }
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "Name of the ESXi host.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "provisioning": {
          "aliases": [],
          "description": "The TCP/IP stacks configuration of the I(provisioning).",
          "type": "dict",
          "required": false,
          "suboptions": {
            "congestion_algorithm": {
              "aliases": [],
              "description": "The TCP congest control algorithm.",
              "default": "newreno",
              "type": "str",
              "required": false,
              "choices": [
                "newreno",
                "cubic"
              ],
              "suboptions": {}
            },
            "gateway": {
              "aliases": [],
              "description": "The ipv4 gateway address.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "ipv6_gateway": {
              "aliases": [],
              "description": "The ipv6 gateway address.",
              "type": "str",
              "required": false,
              "version_added": "1.11.0",
              "suboptions": {}
            },
            "max_num_connections": {
              "aliases": [],
              "description": "The maximum number of socket connection that are requested.",
              "default": "11000",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vmotion": {
          "aliases": [],
          "description": "The TCP/IP stacks configuration of the I(vmotion).",
          "type": "dict",
          "required": false,
          "suboptions": {
            "congestion_algorithm": {
              "aliases": [],
              "description": "The TCP congest control algorithm.",
              "default": "newreno",
              "type": "str",
              "required": false,
              "choices": [
                "newreno",
                "cubic"
              ],
              "suboptions": {}
            },
            "gateway": {
              "aliases": [],
              "description": "The ipv4 gateway address.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "ipv6_gateway": {
              "aliases": [],
              "description": "The ipv6 gateway address.",
              "type": "str",
              "required": false,
              "version_added": "1.11.0",
              "suboptions": {}
            },
            "max_num_connections": {
              "aliases": [],
              "description": "The maximum number of socket connection that are requested.",
              "default": "11000",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "vxlan": {
          "aliases": [
            "nsx_overlay"
          ],
          "description": "The TCP/IP stacks configuration of the I(vxlan).",
          "type": "dict",
          "required": false,
          "suboptions": {
            "congestion_algorithm": {
              "aliases": [],
              "description": "The TCP congest control algorithm.",
              "default": "newreno",
              "type": "str",
              "required": false,
              "choices": [
                "newreno",
                "cubic"
              ],
              "suboptions": {}
            },
            "gateway": {
              "aliases": [],
              "description": "The ipv4 gateway address.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "ipv6_gateway": {
              "aliases": [],
              "description": "The ipv6 gateway address.",
              "type": "str",
              "required": false,
              "version_added": "1.11.0",
              "suboptions": {}
            },
            "max_num_connections": {
              "aliases": [],
              "description": "The maximum number of socket connection that are requested.",
              "default": "11000",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        }
      },
      "requirements": [
        "python >= 2.7",
        "PyVmomi"
      ],
      "short_description": "Manage the TCP/IP Stacks configuration of ESXi host",
      "version_added": "1.10.0"
    },
    "examples": "\n- name: Update the TCP/IP stack configuration of the default\n  community.vmware.vmware_host_tcpip_stacks:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    validate_certs: false\n    esxi_hostname: \"{{ esxi_hostname }}\"\n    default:\n      hostname: \"{{ esxi_hostname }}\"\n      domain: example.com\n      preferred_dns: 192.168.10.1\n      alternate_dns: 192.168.20.1\n      search_domains:\n        - hoge.com\n        - fuga.com\n      gateway: 192.168.10.1\n      congestion_algorithm: cubic\n      max_num_connections: 12000\n\n- name: Update the TCP/IP stack configuration of the provisioning\n  community.vmware.vmware_host_tcpip_stacks:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    validate_certs: false\n    esxi_hostname: \"{{ esxi_hostname }}\"\n    provisioning:\n      congestion_algorithm: newreno\n      max_num_connections: 12000\n      gateway: 10.10.10.254\n\n- name: Update the TCP/IP stack configuration of the default and provisioning\n  community.vmware.vmware_host_tcpip_stacks:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    validate_certs: false\n    esxi_hostname: \"{{ esxi_hostname }}\"\n    default:\n      hostname: \"{{ esxi_hostname }}\"\n      domain: example.com\n      preferred_dns: 192.168.10.1\n      alternate_dns: 192.168.20.1\n      search_domains:\n        - hoge.com\n        - fuga.com\n      gateway: 192.168.10.1\n      congestion_algorithm: cubic\n      max_num_connections: 12000\n    provisioning:\n      congestion_algorithm: newreno\n      max_num_connections: 12000\n      gateway: 10.10.10.254\n\n- name: Update the ipv6 gateway of the provisioning TCP/IP stack\n  community.vmware.vmware_host_tcpip_stacks:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    validate_certs: false\n    esxi_hostname: \"{{ esxi_hostname }}\"\n    provisioning:\n      ipv6_gateway: ::ffff:6440:301\n"
  },
  "community.vmware.vmware_host_vmhba_facts": {
    "doc": {
      "description": "This module can be used to gather facts about vmhbas available on the given ESXi host.\nIf C(cluster_name) is provided, then vmhba facts about all hosts from given cluster will be returned.\nIf C(esxi_hostname) is provided, then vmhba facts about given host system will be returned.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster from which all host systems will be used.\nVmhba facts about each ESXi server will be returned for the given cluster.\nThis parameter is required if C(esxi_hostname) is not specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "Name of the host system to work with.\nVmhba facts about this ESXi server will be returned.\nThis parameter is required if C(cluster_name) is not specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gathers facts about vmhbas available on the given ESXi host"
    },
    "examples": "\n- name: Gather facts about vmhbas of all ESXi Host in the given Cluster\n  community.vmware.vmware_host_vmhba_facts:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: '{{ cluster_name }}'\n  delegate_to: localhost\n  register: cluster_host_vmhbas\n\n- name: Gather facts about vmhbas of an ESXi Host\n  community.vmware.vmware_host_vmhba_facts:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n  delegate_to: localhost\n  register: host_vmhbas\n"
  },
  "community.vmware.vmware_host_vmhba_info": {
    "doc": {
      "description": "This module can be used to gather information about vmhbas available on the given ESXi host.\nIf C(cluster_name) is provided, then vmhba information about all hosts from given cluster will be returned.\nIf C(esxi_hostname) is provided, then vmhba information about given host system will be returned.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster from which all host systems will be used.\nVmhba information about each ESXi server will be returned for the given cluster.\nThis parameter is required if C(esxi_hostname) is not specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "Name of the host system to work with.\nVmhba information about this ESXi server will be returned.\nThis parameter is required if C(cluster_name) is not specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gathers info about vmhbas available on the given ESXi host"
    },
    "examples": "\n- name: Gather info about vmhbas of all ESXi Host in the given Cluster\n  community.vmware.vmware_host_vmhba_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: '{{ cluster_name }}'\n  delegate_to: localhost\n  register: cluster_host_vmhbas\n\n- name: Gather info about vmhbas of an ESXi Host\n  community.vmware.vmware_host_vmhba_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n  delegate_to: localhost\n  register: host_vmhbas\n"
  },
  "community.vmware.vmware_host_vmnic_facts": {
    "doc": {
      "description": "This module can be used to gather facts about vmnics available on the given ESXi host.\nIf C(cluster_name) is provided, then vmnic facts about all hosts from given cluster will be returned.\nIf C(esxi_hostname) is provided, then vmnic facts about given host system will be returned.\nAdditional details about vswitch and dvswitch with respective vmnic is also provided which is added in 2.7 version.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "capabilities": {
          "aliases": [],
          "description": "Gather facts about general capabilities (Auto negotiation, Wake On LAN, and Network I/O Control).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster from which all host systems will be used.\nVmnic facts about each ESXi server will be returned for the given cluster.\nThis parameter is required if C(esxi_hostname) is not specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "directpath_io": {
          "aliases": [],
          "description": "Gather facts about DirectPath I/O capabilities and configuration.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "Name of the host system to work with.\nVmnic facts about this ESXi server will be returned.\nThis parameter is required if C(cluster_name) is not specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sriov": {
          "aliases": [],
          "description": "Gather facts about SR-IOV capabilities and configuration.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gathers facts about vmnics available on the given ESXi host"
    },
    "examples": "\n- name: Gather facts about vmnics of all ESXi Host in the given Cluster\n  community.vmware.vmware_host_vmnic_facts:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: '{{ cluster_name }}'\n  delegate_to: localhost\n  register: cluster_host_vmnics\n\n- name: Gather facts about vmnics of an ESXi Host\n  community.vmware.vmware_host_vmnic_facts:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n  delegate_to: localhost\n  register: host_vmnics\n"
  },
  "community.vmware.vmware_host_vmnic_info": {
    "doc": {
      "description": "This module can be used to gather information about vmnics available on the given ESXi host.\nIf C(cluster_name) is provided, then vmnic information about all hosts from given cluster will be returned.\nIf C(esxi_hostname) is provided, then vmnic information about given host system will be returned.\nAdditional details about vswitch and dvswitch with respective vmnic is also provided which is added in 2.7 version.\nAdditional details about lldp added in 1.11.0",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "capabilities": {
          "aliases": [],
          "description": "Gather information about general capabilities (Auto negotiation, Wake On LAN, and Network I/O Control).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster from which all host systems will be used.\nVmnic information about each ESXi server will be returned for the given cluster.\nThis parameter is required if C(esxi_hostname) is not specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "directpath_io": {
          "aliases": [],
          "description": "Gather information about DirectPath I/O capabilities and configuration.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "Name of the host system to work with.\nVmnic information about this ESXi server will be returned.\nThis parameter is required if C(cluster_name) is not specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sriov": {
          "aliases": [],
          "description": "Gather information about SR-IOV capabilities and configuration.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gathers info about vmnics available on the given ESXi host"
    },
    "examples": "\n- name: Gather info about vmnics of all ESXi Host in the given Cluster\n  community.vmware.vmware_host_vmnic_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: '{{ cluster_name }}'\n  delegate_to: localhost\n  register: cluster_host_vmnics\n\n- name: Gather info about vmnics of an ESXi Host\n  community.vmware.vmware_host_vmnic_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n  delegate_to: localhost\n  register: host_vmnics\n"
  },
  "community.vmware.vmware_local_role_facts": {
    "doc": {
      "description": "This module can be used to gather facts about local role facts on an ESXi host",
      "has_action": false,
      "notes": "Tested on ESXi 6.5\nBe sure that the ESXi user used for login, has the appropriate rights to view roles\nThe module returns a list of dict in version 2.8 and above.\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gather facts about local roles on an ESXi host"
    },
    "examples": "\n- name: Gather facts about local role from an ESXi\n  community.vmware.vmware_local_role_facts:\n    hostname: '{{ esxi_hostname }}'\n    username: '{{ esxi_username }}'\n    password: '{{ esxi_password }}'\n  register: fact_details\n  delegate_to: localhost\n- name: Get Admin privileges\n  set_fact:\n    admin_priv: \"{{ fact_details.local_role_facts['Admin']['privileges'] }}\"\n- debug:\n    msg: \"{{ admin_priv }}\"\n"
  },
  "community.vmware.vmware_local_role_info": {
    "doc": {
      "description": "This module can be used to gather information about local role info on an ESXi host",
      "has_action": false,
      "notes": "Tested on ESXi 6.5\nBe sure that the ESXi user used for login, has the appropriate rights to view roles\nThe module returns a list of dict in version 2.8 and above.\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gather info about local roles on an ESXi host"
    },
    "examples": "\n- name: Gather info about local role from an ESXi\n  community.vmware.vmware_local_role_info:\n    hostname: '{{ esxi_hostname }}'\n    username: '{{ esxi_username }}'\n    password: '{{ esxi_password }}'\n  register: fact_details\n  delegate_to: localhost\n- name: Get Admin privileges\n  set_fact:\n    admin_priv: \"{{ fact_details.local_role_info | selectattr('role_name', 'equalto', 'Admin') | map(attribute='privileges') | first  }}\"\n- debug:\n    msg: \"{{ admin_priv }}\"\n"
  },
  "community.vmware.vmware_local_role_manager": {
    "doc": {
      "description": "This module can be used to manage local roles on an ESXi host.",
      "has_action": false,
      "notes": "Tested on ESXi 6.5\nBe sure that the ESXi user used for login, has the appropriate rights to create / delete / edit roles\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "action": {
          "aliases": [],
          "description": "This parameter is only valid while updating an existing role with privileges.\nC(add) will add the privileges to the existing privilege list.\nC(remove) will remove the privileges from the existing privilege list.\nC(set) will replace the privileges of the existing privileges with user defined list of privileges.",
          "default": "set",
          "type": "str",
          "required": false,
          "choices": [
            "add",
            "remove",
            "set"
          ],
          "suboptions": {}
        },
        "force_remove": {
          "aliases": [],
          "description": "If set to C(False) then prevents the role from being removed if any permissions are using it.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "local_privilege_ids": {
          "aliases": [],
          "description": "The list of privileges that role needs to have.\nPlease see U(https://docs.vmware.com/en/VMware-vSphere/6.0/com.vmware.vsphere.security.doc/GUID-ED56F3C4-77D0-49E3-88B6-B99B8B437B62.html)",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "local_role_name": {
          "aliases": [],
          "description": "The local role name to be managed.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the role.\nIf the role already exists when C(state=present), the role info is updated.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Manage local roles on an ESXi host"
    },
    "examples": "\n- name: Add local role to ESXi\n  community.vmware.vmware_local_role_manager:\n    hostname: '{{ esxi_hostname }}'\n    username: '{{ esxi_username }}'\n    password: '{{ esxi_password }}'\n    local_role_name: vmware_qa\n    state: present\n  delegate_to: localhost\n\n- name: Add local role with privileges to ESXi\n  community.vmware.vmware_local_role_manager:\n    hostname: '{{ esxi_hostname }}'\n    username: '{{ esxi_username }}'\n    password: '{{ esxi_password }}'\n    local_role_name: vmware_qa\n    local_privilege_ids: [ 'Folder.Create', 'Folder.Delete']\n    state: present\n  delegate_to: localhost\n\n- name: Remove local role from ESXi\n  community.vmware.vmware_local_role_manager:\n    hostname: '{{ esxi_hostname }}'\n    username: '{{ esxi_username }}'\n    password: '{{ esxi_password }}'\n    local_role_name: vmware_qa\n    state: absent\n  delegate_to: localhost\n\n- name: Add a privilege to an existing local role\n  community.vmware.vmware_local_role_manager:\n    hostname: '{{ esxi_hostname }}'\n    username: '{{ esxi_username }}'\n    password: '{{ esxi_password }}'\n    local_role_name: vmware_qa\n    local_privilege_ids: [ 'Folder.Create' ]\n    action: add\n  delegate_to: localhost\n\n- name: Remove a privilege to an existing local role\n  community.vmware.vmware_local_role_manager:\n    hostname: '{{ esxi_hostname }}'\n    username: '{{ esxi_username }}'\n    password: '{{ esxi_password }}'\n    local_role_name: vmware_qa\n    local_privilege_ids: [ 'Folder.Create' ]\n    action: remove\n  delegate_to: localhost\n\n- name: Set a privilege to an existing local role\n  community.vmware.vmware_local_role_manager:\n    hostname: '{{ esxi_hostname }}'\n    username: '{{ esxi_username }}'\n    password: '{{ esxi_password }}'\n    local_role_name: vmware_qa\n    local_privilege_ids: [ 'Folder.Create' ]\n    action: set\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_local_user_facts": {
    "doc": {
      "description": "This module can be used to gather facts about users present on the given ESXi host system in VMware infrastructure.\nAll variables and VMware object names are case sensitive.\nUser must hold the 'Authorization.ModifyPermissions' privilege to invoke this module.",
      "has_action": false,
      "notes": "Tested on ESXi 6.5\nThe C(full_name), C(principal), and C(user_group) properties are deprecated starting from Ansible v2.12\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gather facts about users on the given ESXi host"
    },
    "examples": "\n- name: Gather facts about all Users on given ESXi host system\n  community.vmware.vmware_local_user_facts:\n    hostname: '{{ esxi_hostname }}'\n    username: '{{ esxi_username }}'\n    password: '{{ esxi_password }}'\n  delegate_to: localhost\n  register: all_user_facts\n"
  },
  "community.vmware.vmware_local_user_info": {
    "doc": {
      "description": "This module can be used to gather information about users present on the given ESXi host system in VMware infrastructure.\nAll variables and VMware object names are case sensitive.\nUser must hold the 'Authorization.ModifyPermissions' privilege to invoke this module.",
      "has_action": false,
      "notes": "Tested on ESXi 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gather info about users on the given ESXi host"
    },
    "examples": "\n- name: Gather info about all Users on given ESXi host system\n  community.vmware.vmware_local_user_info:\n    hostname: '{{ esxi_hostname }}'\n    username: '{{ esxi_username }}'\n    password: '{{ esxi_password }}'\n  delegate_to: localhost\n  register: all_user_info\n"
  },
  "community.vmware.vmware_local_user_manager": {
    "doc": {
      "description": "Manage local users on an ESXi host",
      "has_action": false,
      "notes": "Tested on ESXi 6.0\nBe sure that the ESXi user used for login, has the appropriate rights to create / delete / edit users\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "local_user_description": {
          "aliases": [],
          "description": "Description for the user.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "local_user_name": {
          "aliases": [],
          "description": "The local user name to be changed.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "local_user_password": {
          "aliases": [],
          "description": "The password to be set.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the user. If the user already exists when C(state=present), the user info is updated",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi installed"
      ],
      "short_description": "Manage local users on an ESXi host"
    },
    "examples": "\n- name: Add local user to ESXi\n  community.vmware.vmware_local_user_manager:\n    hostname: esxi_hostname\n    username: root\n    password: vmware\n    local_user_name: foo\n    local_user_password: password\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_maintenancemode": {
    "doc": {
      "description": "This module can be used for placing a ESXi host into maintenance mode.\nSupport for VSAN compliant maintenance mode when selected.",
      "has_action": false,
      "notes": "Tested on vSphere 5.5, 6.0 and 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "esxi_hostname": {
          "aliases": [],
          "description": "Name of the host as defined in vCenter.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "evacuate": {
          "aliases": [],
          "description": "If set to C(True), evacuate all powered off VMs.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Enter or exit maintenance mode.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Specify a timeout for the operation.",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vsan": {
          "aliases": [
            "vsan_mode"
          ],
          "description": "Specify which VSAN compliant mode to enter.",
          "type": "str",
          "required": false,
          "choices": [
            "ensureObjectAccessibility",
            "evacuateAllData",
            "noAction"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Place a host into maintenance mode"
    },
    "examples": "\n- name: Enter VSAN-Compliant Maintenance Mode\n  community.vmware.vmware_maintenancemode:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    esxi_hostname: \"{{ esxi_hostname }}\"\n    vsan: ensureObjectAccessibility\n    evacuate: true\n    timeout: 3600\n    state: present\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_migrate_vmk": {
    "doc": {
      "description": "Migrate a VMK interface from VSS to VDS",
      "has_action": false,
      "notes": "Tested on vSphere 6.7\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "current_portgroup_name": {
          "aliases": [],
          "description": "Portgroup name VMK interface is currently on",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "current_switch_name": {
          "aliases": [],
          "description": "Switch VMK interface is currently on",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "device": {
          "aliases": [],
          "description": "VMK interface name",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "ESXi hostname to be managed",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "migrate_portgroup_name": {
          "aliases": [],
          "description": "Portgroup name to migrate VMK interface to",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "migrate_switch_name": {
          "aliases": [],
          "description": "Switch name to migrate VMK interface to",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Migrate a VMK interface from VSS to VDS"
    },
    "examples": "\n- name: Migrate Management vmk\n  community.vmware.vmware_migrate_vmk:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    esxi_hostname: \"{{ esxi_hostname }}\"\n    device: vmk1\n    current_switch_name: temp_vswitch\n    current_portgroup_name: esx-mgmt\n    migrate_switch_name: dvSwitch\n    migrate_portgroup_name: Management\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_object_custom_attributes_info": {
    "doc": {
      "description": "This module can be gathered custom attributes of an object.",
      "has_action": false,
      "notes": "Supports C(check_mode).\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "moid": {
          "aliases": [],
          "description": "Managed Object ID of the instance to get if known, this is a unique identifier only within a single vCenter instance.\nThis is required if C(object_name) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "object_name": {
          "aliases": [
            "name"
          ],
          "description": "Name of the object to work with.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "object_type": {
          "aliases": [],
          "description": "Type of an object to work with.",
          "type": "str",
          "required": true,
          "choices": [
            "Datacenter",
            "Cluster",
            "HostSystem",
            "ResourcePool",
            "Folder",
            "VirtualMachine",
            "DistributedVirtualSwitch",
            "DistributedVirtualPortgroup",
            "Datastore"
          ],
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 3.6",
        "PyVmomi"
      ],
      "short_description": "Gather custom attributes of an object",
      "version_added": "1.11.0"
    },
    "examples": "\n- name: Gather custom attributes of a virtual machine\n  community.vmware.vmware_object_custom_attributes_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    validate_certs: false\n    object_type: VirtualMachine\n    object_name: \"{{ object_name }}\"\n  register: vm_attributes\n\n- name: Gather custom attributes of a virtual machine with moid\n  community.vmware.vmware_object_custom_attributes_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    validate_certs: false\n    object_type: VirtualMachine\n    moid: \"{{ moid }}\"\n  register: vm_attributes\n"
  },
  "community.vmware.vmware_object_rename": {
    "doc": {
      "description": "This module can be used to rename VMware objects.\nAll variables and VMware object names are case sensitive.\nRenaming Host and Network is not supported by VMware APIs.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5",
      "options": {
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "new_name": {
          "aliases": [
            "object_new_name"
          ],
          "description": "New name for VMware object.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "object_moid": {
          "aliases": [],
          "description": "Managed object id of the VMware object to work with.\nMutually exclusive with C(object_name).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "object_name": {
          "aliases": [],
          "description": "Name of the object to work with.\nMutually exclusive with C(object_moid).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "object_type": {
          "aliases": [],
          "description": "Type of object to work with.\nValid options are Cluster, ClusterComputeResource, Datacenter, Datastore, Folder, ResourcePool, VM or VirtualMachine.",
          "type": "str",
          "required": true,
          "choices": [
            "ClusterComputeResource",
            "Cluster",
            "Datacenter",
            "Datastore",
            "Folder",
            "Network",
            "ResourcePool",
            "VM",
            "VirtualMachine"
          ],
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "The connection to protocol.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.",
          "type": "str",
          "required": false,
          "version_added": "1.12.0",
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "version_added": "1.12.0",
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid.\nSet to C(False) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "PyVmomi",
        "vSphere Automation SDK"
      ],
      "short_description": "Renames VMware objects"
    },
    "examples": "\n- name: Rename a virtual machine\n  community.vmware.vmware_object_rename:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    new_name: Fedora_31\n    object_name: Fedora_VM\n    object_type: VirtualMachine\n  delegate_to: localhost\n\n- name: Rename a virtual machine using moid\n  community.vmware.vmware_object_rename:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    new_name: Fedora_31\n    object_moid: vm-14\n    object_type: VirtualMachine\n  delegate_to: localhost\n\n- name: Rename a datacenter\n  community.vmware.vmware_object_rename:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    new_name: Asia_Datacenter\n    object_name: dc1\n    object_type: Datacenter\n  delegate_to: localhost\n\n- name: Rename a folder with moid\n  community.vmware.vmware_object_rename:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    new_name: backup\n    object_moid: group-v46\n    object_type: Folder\n  delegate_to: localhost\n\n- name: Rename a cluster with moid\n  community.vmware.vmware_object_rename:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    new_name: CCR_1\n    object_moid: domain-c33\n    object_type: Cluster\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_object_role_permission": {
    "doc": {
      "description": "This module can be used to manage object permissions on the given host.",
      "has_action": false,
      "notes": "Tested on ESXi 6.5, vSphere 6.7\nThe ESXi login user must have the appropriate rights to administer permissions.\nPermissions for a distributed switch must be defined and managed on either the datacenter or a folder containing the switch.\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "group": {
          "aliases": [],
          "description": "The group to be assigned permission.\nRequired if C(principal) is not specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "object_name": {
          "aliases": [],
          "description": "The object name to assigned permission.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "object_type": {
          "aliases": [],
          "description": "The object type being targeted.",
          "default": "Folder",
          "type": "str",
          "required": false,
          "choices": [
            "Folder",
            "VirtualMachine",
            "Datacenter",
            "ResourcePool",
            "Datastore",
            "Network",
            "HostSystem",
            "ComputeResource",
            "ClusterComputeResource",
            "DistributedVirtualSwitch"
          ],
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "principal": {
          "aliases": [],
          "description": "The user to be assigned permission.\nRequired if C(group) is not specified.\nIf specifying domain user, required separator of domain uses backslash.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "recursive": {
          "aliases": [],
          "description": "Should the permissions be recursively applied.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "role": {
          "aliases": [],
          "description": "The role to be assigned permission.\nUser can also specify role name presented in Web UI. Supported added in 1.5.0.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Indicate desired state of the object's permission.\nWhen C(state=present), the permission will be added if it doesn't already exist.\nWhen C(state=absent), the permission is removed if it exists.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "PyVmomi"
      ],
      "short_description": "Manage local roles on an ESXi host"
    },
    "examples": "\n- name: Assign user to VM folder\n  community.vmware.vmware_object_role_permission:\n    hostname: '{{ esxi_hostname }}'\n    username: '{{ esxi_username }}'\n    password: '{{ esxi_password }}'\n    role: Admin\n    principal: user_bob\n    object_name: services\n    state: present\n  delegate_to: localhost\n\n- name: Remove user from VM folder\n  community.vmware.vmware_object_role_permission:\n    hostname: '{{ esxi_hostname }}'\n    username: '{{ esxi_username }}'\n    password: '{{ esxi_password }}'\n    role: Admin\n    principal: user_bob\n    object_name: services\n    state: absent\n  delegate_to: localhost\n\n- name: Assign finance group to VM folder\n  community.vmware.vmware_object_role_permission:\n    hostname: '{{ esxi_hostname }}'\n    username: '{{ esxi_username }}'\n    password: '{{ esxi_password }}'\n    role: Limited Users\n    group: finance\n    object_name: Accounts\n    state: present\n  delegate_to: localhost\n\n- name: Assign view_user Read Only permission at root folder\n  community.vmware.vmware_object_role_permission:\n    hostname: '{{ esxi_hostname }}'\n    username: '{{ esxi_username }}'\n    password: '{{ esxi_password }}'\n    role: ReadOnly\n    principal: view_user\n    object_name: rootFolder\n    state: present\n  delegate_to: localhost\n\n- name: Assign domain user to VM folder\n  community.vmware.vmware_object_role_permission:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    validate_certs: false\n    role: Admin\n    principal: \"vsphere.local\\\\domainuser\"\n    object_name: services\n    state: present\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_object_role_permission_info": {
    "doc": {
      "description": "This module can be used to gather object permissions on the given VMware object.",
      "has_action": false,
      "notes": "Tested on ESXi 6.5, vSphere 6.7\nThe ESXi login user must have the appropriate rights to administer permissions.\nSupports check mode.\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "moid": {
          "aliases": [
            "object_moid"
          ],
          "description": "Managed object ID for the given object.\nMutually exclusive with I(object_name).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "object_name": {
          "aliases": [],
          "description": "The object name to assigned permission.\nMutually exclusive with I(moid).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "object_type": {
          "aliases": [],
          "description": "The object type being targeted.",
          "default": "Folder",
          "type": "str",
          "required": false,
          "choices": [
            "Folder",
            "VirtualMachine",
            "Datacenter",
            "ResourcePool",
            "Datastore",
            "Network",
            "HostSystem",
            "ComputeResource",
            "ClusterComputeResource",
            "DistributedVirtualSwitch"
          ],
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "principal": {
          "aliases": [],
          "description": "The optional name of an entity, such as a user, assigned permissions on an object.\nIf provided, actual permissions on the specified object are returned for the principal, instead of roles.",
          "type": "str",
          "required": false,
          "version_added": "1.12.0",
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 3",
        "PyVmomi"
      ],
      "short_description": "Gather information about object's permissions",
      "version_added": "1.11.0"
    },
    "examples": "\n- name: Gather role information about Datastore\n  community.vmware.vmware_object_role_permission_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    validate_certs: false\n    object_name: ds_200\n    object_type: Datastore\n\n- name: Gather permissions on Datastore for a User\n  community.vmware.vmware_object_role_permission_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    validate_certs: false\n    principal: some.user@company.com\n    object_name: ds_200\n    object_type: Datastore\n"
  },
  "community.vmware.vmware_portgroup": {
    "doc": {
      "description": "Create a VMware Port Group on a VMware Standard Switch (vSS) for given ESXi host(s) or hosts of given cluster.",
      "has_action": false,
      "notes": "Tested on vSphere 5.5 and 6.5\nComplete configuration only tested on vSphere 6.5\nC(inbound_policy) and C(rolling_order) are removed in 2.11.\nThose two options are only used during portgroup creation. Updating is not supported with those options.\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [
            "cluster"
          ],
          "description": "Name of cluster name for host membership.\nPortgroup will be created on all hosts of the given cluster.\nThis option is required if C(hosts) is not specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hosts": {
          "aliases": [
            "esxi_hostname"
          ],
          "description": "List of name of host or hosts on which portgroup needs to be added.\nThis option is required if C(cluster_name) is not specified.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "portgroup": {
          "aliases": [
            "portgroup_name"
          ],
          "description": "Portgroup name to add.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "security": {
          "aliases": [
            "security_policy",
            "network_policy"
          ],
          "description": "Network policy specifies layer 2 security settings for a portgroup such as promiscuous mode, where guest adapter listens to all the packets, MAC address changes and forged transmits.\nDict which configures the different security values for portgroup.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "forged_transmits": {
              "aliases": [],
              "description": "Indicates whether forged transmits are allowed.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "mac_changes": {
              "aliases": [],
              "description": "Indicates whether mac changes are allowed.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "promiscuous_mode": {
              "aliases": [],
              "description": "Indicates whether promiscuous mode is allowed.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Determines if the portgroup should be present or not.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "switch": {
          "aliases": [
            "switch_name",
            "vswitch"
          ],
          "description": "vSwitch to modify.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "teaming": {
          "aliases": [
            "teaming_policy"
          ],
          "description": "Dictionary which configures the different teaming values for portgroup.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "active_adapters": {
              "aliases": [],
              "description": "List of active adapters used for load balancing.\nAll vmnics are used as active adapters if C(active_adapters) and C(standby_adapters) are not defined.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            },
            "failback": {
              "aliases": [],
              "description": "Indicate whether or not to use a failback when restoring links.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "load_balancing": {
              "aliases": [
                "load_balance_policy"
              ],
              "description": "Network adapter teaming policy.",
              "type": "str",
              "required": false,
              "choices": [
                "loadbalance_ip",
                "loadbalance_srcmac",
                "loadbalance_srcid",
                "failover_explicit",
                "None"
              ],
              "suboptions": {}
            },
            "network_failure_detection": {
              "aliases": [],
              "description": "Network failure detection.",
              "type": "str",
              "required": false,
              "choices": [
                "link_status_only",
                "beacon_probing"
              ],
              "suboptions": {}
            },
            "notify_switches": {
              "aliases": [],
              "description": "Indicate whether or not to notify the physical switch if a link fails.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "standby_adapters": {
              "aliases": [],
              "description": "List of standby adapters used for failover.\nAll vmnics are used as active adapters if C(active_adapters) and C(standby_adapters) are not defined.",
              "type": "list",
              "required": false,
              "elements": "str",
              "suboptions": {}
            }
          }
        },
        "traffic_shaping": {
          "aliases": [],
          "description": "Dictionary which configures traffic shaping for the switch.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "average_bandwidth": {
              "aliases": [],
              "description": "Average bandwidth (kbit/s).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "burst_size": {
              "aliases": [],
              "description": "Burst size (KB).",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "enabled": {
              "aliases": [],
              "description": "Status of Traffic Shaping Policy.",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "peak_bandwidth": {
              "aliases": [],
              "description": "Peak bandwidth (kbit/s).",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vlan_id": {
          "aliases": [
            "vlan"
          ],
          "description": "VLAN ID to assign to portgroup.\nSet to 0 (no VLAN tagging) by default.",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Create a VMware portgroup"
    },
    "examples": "\n- name: Add Management Network VM Portgroup\n  community.vmware.vmware_portgroup:\n    hostname: \"{{ esxi_hostname }}\"\n    username: \"{{ esxi_username }}\"\n    password: \"{{ esxi_password }}\"\n    switch: \"{{ vswitch_name }}\"\n    portgroup: \"{{ portgroup_name }}\"\n    vlan_id: \"{{ vlan_id }}\"\n  delegate_to: localhost\n\n- name: Add Portgroup with Promiscuous Mode Enabled\n  community.vmware.vmware_portgroup:\n    hostname: \"{{ esxi_hostname }}\"\n    username: \"{{ esxi_username }}\"\n    password: \"{{ esxi_password }}\"\n    switch: \"{{ vswitch_name }}\"\n    portgroup: \"{{ portgroup_name }}\"\n    security:\n        promiscuous_mode: True\n  delegate_to: localhost\n\n- name: Add Management Network VM Portgroup to specific hosts\n  community.vmware.vmware_portgroup:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    hosts: [esxi_hostname_one]\n    switch: \"{{ vswitch_name }}\"\n    portgroup: \"{{ portgroup_name }}\"\n    vlan_id: \"{{ vlan_id }}\"\n  delegate_to: localhost\n\n- name: Add Management Network VM Portgroup to all hosts in a cluster\n  community.vmware.vmware_portgroup:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    cluster_name: \"{{ cluster_name }}\"\n    switch: \"{{ vswitch_name }}\"\n    portgroup: \"{{ portgroup_name }}\"\n    vlan_id: \"{{ vlan_id }}\"\n  delegate_to: localhost\n\n- name: Remove Management Network VM Portgroup to all hosts in a cluster\n  community.vmware.vmware_portgroup:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    cluster_name: \"{{ cluster_name }}\"\n    switch: \"{{ vswitch_name }}\"\n    portgroup: \"{{ portgroup_name }}\"\n    vlan_id: \"{{ vlan_id }}\"\n    state: absent\n  delegate_to: localhost\n\n- name: Add Portgroup with all settings defined\n  community.vmware.vmware_portgroup:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    esxi_hostname: \"{{ inventory_hostname }}\"\n    switch: \"{{ vswitch_name }}\"\n    portgroup: \"{{ portgroup_name }}\"\n    vlan_id: 10\n    security:\n        promiscuous_mode: False\n        mac_changes: False\n        forged_transmits: False\n    traffic_shaping:\n        enabled: True\n        average_bandwidth: 100000\n        peak_bandwidth: 100000\n        burst_size: 102400\n    teaming:\n        load_balancing: failover_explicit\n        network_failure_detection: link_status_only\n        notify_switches: true\n        failback: true\n        active_adapters:\n            - vmnic0\n        standby_adapters:\n            - vmnic1\n  delegate_to: localhost\n  register: teaming_result\n"
  },
  "community.vmware.vmware_portgroup_facts": {
    "doc": {
      "description": "This module can be used to gather facts about an ESXi host's Port Group configuration when ESXi hostname or Cluster name is given.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nThe C(vswitch_name) property is deprecated starting from Ansible v2.12\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster.\nFacts will be returned for all hostsystem belonging to this cluster name.\nIf C(esxi_hostname) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "ESXi hostname to gather facts from.\nIf C(cluster_name) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "policies": {
          "aliases": [],
          "description": "Gather facts about Security, Traffic Shaping, as well as Teaming and failover.\nThe property C(ts) stands for Traffic Shaping and C(lb) for Load Balancing.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gathers facts about an ESXi host's Port Group configuration"
    },
    "examples": "\n- name: Gather portgroup facts about all ESXi Host in given Cluster\n  community.vmware.vmware_portgroup_facts:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: '{{ cluster_name }}'\n  delegate_to: localhost\n\n- name: Gather portgroup facts about ESXi Host system\n  community.vmware.vmware_portgroup_facts:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_portgroup_info": {
    "doc": {
      "description": "This module can be used to gather information about an ESXi host's Port Group configuration when ESXi hostname or Cluster name is given.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster.\nInfo will be returned for all hostsystem belonging to this cluster name.\nIf C(esxi_hostname) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "ESXi hostname to gather information from.\nIf C(cluster_name) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "policies": {
          "aliases": [],
          "description": "Gather information about Security, Traffic Shaping, as well as Teaming and failover.\nThe property C(ts) stands for Traffic Shaping and C(lb) for Load Balancing.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gathers info about an ESXi host's Port Group configuration"
    },
    "examples": "\n- name: Gather portgroup info about all ESXi Host in given Cluster\n  community.vmware.vmware_portgroup_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: '{{ cluster_name }}'\n  delegate_to: localhost\n\n- name: Gather portgroup info about ESXi Host system\n  community.vmware.vmware_portgroup_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_recommended_datastore": {
    "doc": {
      "description": "This module provides the recommended datastore name from a datastore cluster only if the SDRS is enabled for the specified datastore cluster",
      "has_action": false,
      "notes": "Tested on vSphere 6.7 and 7.0.2\nSupports Check mode.\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "datacenter": {
          "aliases": [],
          "description": "Name of the datacenter.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "datastore_cluster": {
          "aliases": [],
          "description": "Name of the datastore cluster.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 3",
        "PyVmomi"
      ],
      "short_description": "Returns the recommended datastore from a SDRS-enabled datastore cluster",
      "version_added": "1.11.0"
    },
    "examples": "\n- name: Get recommended datastore from a Storage DRS-enabled datastore cluster\n  community.vmware.vmware_recommended_datastore:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    validate_certs: no\n    datastore_cluster: '{{ datastore_cluster_name }}'\n    datacenter: '{{ datacenter }}'\n  register: recommended_ds\n"
  },
  "community.vmware.vmware_resource_pool": {
    "doc": {
      "description": "This module can be used to add/remove a resource pool to/from vCenter",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster": {
          "aliases": [],
          "description": "Name of the cluster to configure the resource pool.\nThis parameter is required if C(esxi_hostname) or C(parent_resource_pool) is not specified.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "cpu_allocation_shares": {
          "aliases": [],
          "description": "The number of cpu shares allocated.\nThis value is only set if I(cpu_shares) is set to C(custom).",
          "default": "4000",
          "type": "int",
          "required": false,
          "version_added": "1.4.0",
          "suboptions": {}
        },
        "cpu_expandable_reservations": {
          "aliases": [],
          "description": "In a resource pool with an expandable reservation, the reservation on a resource pool can grow beyond the specified value.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "cpu_limit": {
          "aliases": [],
          "description": "The utilization of a virtual machine/resource pool will not exceed this limit, even if there are available resources.\nThe default value -1 indicates no limit.",
          "default": "-1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "cpu_reservation": {
          "aliases": [],
          "description": "Amount of resource that is guaranteed available to the virtual machine or resource pool.",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "cpu_shares": {
          "aliases": [],
          "description": "Memory shares are used in case of resource contention.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "high",
            "custom",
            "low",
            "normal"
          ],
          "suboptions": {}
        },
        "datacenter": {
          "aliases": [],
          "description": "Name of the datacenter.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "Name of the host to configure the resource pool.\nThe host must not be member of a cluster.\nThis parameter is required if C(cluster) or C(parent_resource_pool) is not specified.",
          "type": "str",
          "required": false,
          "version_added": "1.5.0",
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mem_allocation_shares": {
          "aliases": [],
          "description": "The number of memory shares allocated.\nThis value is only set if I(mem_shares) is set to C(custom).",
          "default": "163840",
          "type": "int",
          "required": false,
          "version_added": "1.4.0",
          "suboptions": {}
        },
        "mem_expandable_reservations": {
          "aliases": [],
          "description": "In a resource pool with an expandable reservation, the reservation on a resource pool can grow beyond the specified value.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "mem_limit": {
          "aliases": [],
          "description": "The utilization of a virtual machine/resource pool will not exceed this limit, even if there are available resources.\nThe default value -1 indicates no limit.",
          "default": "-1",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "mem_reservation": {
          "aliases": [],
          "description": "Amount of resource that is guaranteed available to the virtual machine or resource pool.",
          "default": "0",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "mem_shares": {
          "aliases": [],
          "description": "Memory shares are used in case of resource contention.",
          "default": "normal",
          "type": "str",
          "required": false,
          "choices": [
            "high",
            "custom",
            "low",
            "normal"
          ],
          "suboptions": {}
        },
        "parent_resource_pool": {
          "aliases": [],
          "description": "Name of the parent resource pool.\nThis parameter is required if C(cluster) or C(esxi_hostname) is not specified.",
          "type": "str",
          "required": false,
          "version_added": "1.9.0",
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "resource_pool": {
          "aliases": [],
          "description": "Resource pool name to manage.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Add or remove the resource pool",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Add/remove resource pools to/from vCenter"
    },
    "examples": "\n- name: Add resource pool to vCenter\n  community.vmware.vmware_resource_pool:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter: '{{ datacenter_name }}'\n    cluster: '{{ cluster_name }}'\n    resource_pool: '{{ resource_pool_name }}'\n    mem_shares: normal\n    mem_limit: -1\n    mem_reservation: 0\n    mem_expandable_reservations: true\n    cpu_shares: normal\n    cpu_limit: -1\n    cpu_reservation: 0\n    cpu_expandable_reservations: true\n    state: present\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_resource_pool_facts": {
    "doc": {
      "description": "This module can be used to gather facts about all resource configuration information.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gathers facts about resource pool information"
    },
    "examples": "\n- name: Gather resource pool facts about all resource pools available\n  community.vmware.vmware_resource_pool_facts:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n  register: rp_facts\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_resource_pool_info": {
    "doc": {
      "description": "This module can be used to gather information about all resource configuration information.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gathers info about resource pool information"
    },
    "examples": "\n- name: Gather resource pool info about all resource pools available\n  community.vmware.vmware_resource_pool_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n  register: rp_info\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_tag": {
    "doc": {
      "description": "This module can be used to create / delete / update VMware tags.\nTag feature is introduced in vSphere 6 version, so this module is not supported in the earlier versions of vSphere.\nAll variables and VMware object names are case sensitive.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5",
      "options": {
        "category_id": {
          "aliases": [],
          "description": "The unique ID generated by vCenter should be used to.\nUser can get this unique ID from facts module.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "The connection to protocol.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.",
          "type": "str",
          "required": false,
          "version_added": "1.12.0",
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "version_added": "1.12.0",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of tag.\nIf set to C(present) and tag does not exists, then tag is created.\nIf set to C(present) and tag exists, then tag is updated.\nIf set to C(absent) and tag exists, then tag is deleted.\nIf set to C(absent) and tag does not exists, no action is taken.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "tag_description": {
          "aliases": [],
          "description": "The tag description.\nThis is required only if C(state) is set to C(present).\nThis parameter is ignored, when C(state) is set to C(absent).\nProcess of updating tag only allows description change.",
          "default": "",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tag_name": {
          "aliases": [],
          "description": "The name of tag to manage.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid.\nSet to C(False) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi",
        "vSphere Automation SDK"
      ],
      "short_description": "Manage VMware tags"
    },
    "examples": "\n- name: Create a tag\n  community.vmware.vmware_tag:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    category_id: 'urn:vmomi:InventoryServiceCategory:e785088d-6981-4b1c-9fb8-1100c3e1f742:GLOBAL'\n    tag_name: Sample_Tag_0002\n    tag_description: Sample Description\n    state: present\n  delegate_to: localhost\n\n- name: Update tag description\n  community.vmware.vmware_tag:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    tag_name: Sample_Tag_0002\n    tag_description: Some fancy description\n    state: present\n  delegate_to: localhost\n\n- name: Delete tag\n  community.vmware.vmware_tag:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    tag_name: Sample_Tag_0002\n    state: absent\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_tag_facts": {
    "doc": {
      "description": "This module can be used to collect information about VMware tags.\nTag feature is introduced in vSphere 6 version, so this module is not supported in the earlier versions of vSphere.\nAll variables and VMware object names are case sensitive.\nThis module was called C(vmware_tag_facts) before Ansible 2.9. The usage did not change.\nC(tag_facts) will be deprecated in Ansible 2.14, since it does not return multiple tags with same name and different category id.\nPlease use C(tag_info) instead of C(tag_facts).",
      "has_action": false,
      "notes": "Tested on vSphere 6.5",
      "options": {
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "The connection to protocol.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.",
          "type": "str",
          "required": false,
          "version_added": "1.12.0",
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "version_added": "1.12.0",
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid.\nSet to C(False) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi",
        "vSphere Automation SDK"
      ],
      "short_description": "Manage VMware tag info"
    },
    "examples": "\n- name: Get info about tag\n  community.vmware.vmware_tag_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n  delegate_to: localhost\n\n- name: Get category id from the given tag\n  community.vmware.vmware_tag_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n  delegate_to: localhost\n  register: tag_details\n- debug:\n    msg: \"{{ tag_details.tag_facts['fedora_machines']['tag_category_id'] }}\"\n\n- name: Gather tag id from the given tag\n  community.vmware.vmware_tag_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n  delegate_to: localhost\n  register: tag_results\n- set_fact:\n    tag_id: \"{{ item.tag_id }}\"\n  loop: \"{{ tag_results.tag_info|json_query(query) }}\"\n  vars:\n    query: \"[?tag_name==`tag0001`]\"\n- debug: var=tag_id\n"
  },
  "community.vmware.vmware_tag_info": {
    "doc": {
      "description": "This module can be used to collect information about VMware tags.\nTag feature is introduced in vSphere 6 version, so this module is not supported in the earlier versions of vSphere.\nAll variables and VMware object names are case sensitive.\nThis module was called C(vmware_tag_facts) before Ansible 2.9. The usage did not change.\nC(tag_facts) will be deprecated in Ansible 2.14, since it does not return multiple tags with same name and different category id.\nPlease use C(tag_info) instead of C(tag_facts).",
      "has_action": false,
      "notes": "Tested on vSphere 6.5",
      "options": {
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "The connection to protocol.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.",
          "type": "str",
          "required": false,
          "version_added": "1.12.0",
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "version_added": "1.12.0",
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid.\nSet to C(False) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi",
        "vSphere Automation SDK"
      ],
      "short_description": "Manage VMware tag info"
    },
    "examples": "\n- name: Get info about tag\n  community.vmware.vmware_tag_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n  delegate_to: localhost\n\n- name: Get category id from the given tag\n  community.vmware.vmware_tag_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n  delegate_to: localhost\n  register: tag_details\n- debug:\n    msg: \"{{ tag_details.tag_facts['fedora_machines']['tag_category_id'] }}\"\n\n- name: Gather tag id from the given tag\n  community.vmware.vmware_tag_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n  delegate_to: localhost\n  register: tag_results\n- set_fact:\n    tag_id: \"{{ item.tag_id }}\"\n  loop: \"{{ tag_results.tag_info|json_query(query) }}\"\n  vars:\n    query: \"[?tag_name==`tag0001`]\"\n- debug: var=tag_id\n"
  },
  "community.vmware.vmware_tag_manager": {
    "doc": {
      "description": "This module can be used to assign / remove VMware tags from the given VMware objects.\nTag feature is introduced in vSphere 6 version, so this module is not supported in the earlier versions of vSphere.\nAll variables and VMware object names are case sensitive.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5",
      "options": {
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "moid": {
          "aliases": [],
          "description": "Managed object ID for the given object.\nRequired if C(object_name) is not set.",
          "type": "str",
          "required": false,
          "version_added": "1.4.0",
          "suboptions": {}
        },
        "object_name": {
          "aliases": [],
          "description": "Name of the object to work with.\nFor DistributedVirtualPortgroups the format should be \"switch_name:portgroup_name\"\nRequired if C(moid) is not set.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "object_type": {
          "aliases": [],
          "description": "Type of object to work with.",
          "type": "str",
          "required": true,
          "choices": [
            "VirtualMachine",
            "Datacenter",
            "ClusterComputeResource",
            "HostSystem",
            "DistributedVirtualSwitch",
            "DistributedVirtualPortgroup",
            "Datastore",
            "DatastoreCluster",
            "ResourcePool",
            "Folder"
          ],
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "The connection to protocol.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.",
          "type": "str",
          "required": false,
          "version_added": "1.12.0",
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "version_added": "1.12.0",
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "If C(state) is set to C(add) or C(present) will add the tags to the existing tag list of the given object.\nIf C(state) is set to C(remove) or C(absent) will remove the tags from the existing tag list of the given object.\nIf C(state) is set to C(set) will replace the tags of the given objects with the user defined list of tags.",
          "default": "add",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent",
            "add",
            "remove",
            "set"
          ],
          "suboptions": {}
        },
        "tag_names": {
          "aliases": [],
          "description": "List of tag(s) to be managed.\nUser can also specify category name by specifying colon separated value. For example, \"category_name:tag_name\".\nUser can also specify tag and category as dict, when tag or category contains colon. See example for more information. Added in version 2.10.\nUser can skip category name if you have unique tag names.",
          "type": "list",
          "required": true,
          "elements": "raw",
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid.\nSet to C(False) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi",
        "vSphere Automation SDK"
      ],
      "short_description": "Manage association of VMware tags with VMware objects"
    },
    "examples": "\n- name: Add tags to a virtual machine\n  community.vmware.vmware_tag_manager:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    tag_names:\n      - Sample_Tag_0002\n      - Category_0001:Sample_Tag_0003\n    object_name: Fedora_VM\n    object_type: VirtualMachine\n    state: add\n  delegate_to: localhost\n\n- name: Specify tag and category as dict\n  community.vmware.vmware_tag_manager:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    tag_names:\n      - tag: tag_0001\n        category: cat_0001\n      - tag: tag_0002\n        category: cat_0002\n    object_name: Fedora_VM\n    object_type: VirtualMachine\n    state: add\n  delegate_to: localhost\n\n- name: Remove a tag from a virtual machine\n  community.vmware.vmware_tag_manager:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    tag_names:\n      - Sample_Tag_0002\n    object_name: Fedora_VM\n    object_type: VirtualMachine\n    state: remove\n  delegate_to: localhost\n\n- name: Add tags to a distributed virtual switch\n  community.vmware.vmware_tag_manager:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    tag_names:\n      - Sample_Tag_0003\n    object_name: Switch_0001\n    object_type: DistributedVirtualSwitch\n    state: add\n  delegate_to: localhost\n\n- name: Add tags to a distributed virtual portgroup\n  community.vmware.vmware_tag_manager:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    tag_names:\n      - Sample_Tag_0004\n    object_name: Switch_0001:Portgroup_0001\n    object_type: DistributedVirtualPortgroup\n    state: add\n  delegate_to: localhost\n\n\n- name: Get information about folders\n  community.vmware.vmware_folder_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    datacenter: 'Asia-Datacenter1'\n  delegate_to: localhost\n  register: r\n- name: Set Managed object ID for the given folder\n  ansible.builtin.set_fact:\n    folder_mo_id: \"{{ (r.flat_folder_info | selectattr('path', 'equalto', '/Asia-Datacenter1/vm/tier1/tier2') | map(attribute='moid'))[0] }}\"\n- name: Add tags to a Folder using managed object id\n  community.vmware.vmware_tag_manager:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    tag_names:\n      - Sample_Cat_0004:Sample_Tag_0004\n    object_type: Folder\n    moid: \"{{ folder_mo_id }}\"\n    state: add\n  delegate_to: localhost\n\n"
  },
  "community.vmware.vmware_target_canonical_facts": {
    "doc": {
      "description": "This module can be used to gather facts about canonical (NAA) from an ESXi host based on SCSI target ID.",
      "has_action": false,
      "notes": "All modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster.\nFacts about all SCSI devices for all host system in the given cluster is returned.\nThis parameter is required, if C(esxi_hostname) is not provided.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "Name of the ESXi host system.\nFacts about all SCSI devices for the given ESXi host system is returned.\nThis parameter is required, if C(cluster_name) is not provided.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "target_id": {
          "aliases": [],
          "description": "The target id based on order of scsi device.\nversion 2.6 onwards, this parameter is optional.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "Tested on vSphere 5.5 and 6.5",
        "PyVmomi installed"
      ],
      "short_description": "Return canonical (NAA) from an ESXi host system"
    },
    "examples": "\n- name: Get Canonical name of particular target on particular ESXi host system\n  community.vmware.vmware_target_canonical_facts:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    target_id: 7\n    esxi_hostname: esxi_hostname\n  delegate_to: localhost\n\n- name: Get Canonical name of all target on particular ESXi host system\n  community.vmware.vmware_target_canonical_facts:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n  delegate_to: localhost\n\n- name: Get Canonical name of all ESXi hostname on particular Cluster\n  community.vmware.vmware_target_canonical_facts:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: '{{ cluster_name }}'\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_target_canonical_info": {
    "doc": {
      "description": "This module can be used to gather information about canonical (NAA) from an ESXi host based on SCSI target ID.",
      "has_action": false,
      "notes": "All modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster.\nInfo about all SCSI devices for all host system in the given cluster is returned.\nThis parameter is required, if C(esxi_hostname) is not provided.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "Name of the ESXi host system.\nInfo about all SCSI devices for the given ESXi host system is returned.\nThis parameter is required, if C(cluster_name) is not provided.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "target_id": {
          "aliases": [],
          "description": "The target id based on order of scsi device.\nversion 2.6 onwards, this parameter is optional.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "Tested on vSphere 5.5 and 6.5",
        "PyVmomi installed"
      ],
      "short_description": "Return canonical (NAA) from an ESXi host system"
    },
    "examples": "\n- name: Get Canonical name of particular target on particular ESXi host system\n  community.vmware.vmware_target_canonical_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    target_id: 7\n    esxi_hostname: esxi_hostname\n  delegate_to: localhost\n\n- name: Get Canonical name of all target on particular ESXi host system\n  community.vmware.vmware_target_canonical_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n  delegate_to: localhost\n\n- name: Get Canonical name of all ESXi hostname on particular Cluster\n  community.vmware.vmware_target_canonical_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: '{{ cluster_name }}'\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_vc_infraprofile_info": {
    "doc": {
      "description": "Module to manage VMware vCenter infra profile configs.\nvCenter infra profile Library feature is introduced in vSphere 7.0 version, so this module is not supported in the earlier versions of vSphere.\nAll variables and VMware object names are case sensitive.",
      "has_action": false,
      "notes": "Tested on vSphere 7.0",
      "options": {
        "api": {
          "aliases": [],
          "description": "API which needs to be executed",
          "type": "str",
          "required": false,
          "choices": [
            "export",
            "import",
            "list",
            "validate"
          ],
          "suboptions": {}
        },
        "config_path": {
          "aliases": [],
          "description": "Config file path which contains infra profile config JSON data, supports both relative and absolute path.\nThis parameter is required only when C(import),C(validate) APIs are being used.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "decryption_key": {
          "aliases": [],
          "description": "decryption_key argument for while doing import profile task as of now its not taken into account form API team.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "description": {
          "aliases": [],
          "description": "Description of about encryption or decryption key.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "encryption_key": {
          "aliases": [],
          "description": "encryption_key argument for while doing import profile task as of now its not taken into account form API team.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "profiles": {
          "aliases": [],
          "description": "A list of profile names to be exported, imported, and validated.\nThis parameter is not required while running for List API, not for C(export),C(import) and C(validate).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "protocol": {
          "aliases": [],
          "description": "The connection to protocol.",
          "default": "https",
          "type": "str",
          "required": false,
          "choices": [
            "http",
            "https"
          ],
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.",
          "type": "str",
          "required": false,
          "version_added": "1.12.0",
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "version_added": "1.12.0",
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid.\nSet to C(False) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "PyVmomi",
        "vSphere Automation SDK"
      ],
      "short_description": "List and Export VMware vCenter infra profile configs.",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Get information about VC infraprofile\n  vmware_vc_infraprofile_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n  delegate_to: localhost\n\n- name: export vCenter appliance infra profile config\n  vmware_vc_infraprofile_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    api: \"export\"\n    profiles: \"ApplianceManagement\"\n  delegate_to: localhost\n\n- name: validate vCenter appliance infra profile config\n  vmware_vc_infraprofile_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    api: \"validate\"\n    profiles: \"ApplianceManagement\"\n    config_path: \"export.json\"\n\n- name: import vCenter appliance infra profile config\n  vmware_vc_infraprofile_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    api: \"import\"\n    profiles: \"ApplianceManagement\"\n    config_path: \"import.json\"\n  delegate_to: localhost\n  "
  },
  "community.vmware.vmware_vcenter_settings": {
    "doc": {
      "description": "This module can be used to configure the vCenter server general settings (except the statistics).\nThe statistics can be configured with the module C(vmware_vcenter_statistics).",
      "has_action": false,
      "notes": "Tested with vCenter Server Appliance (vCSA) 6.5 and 6.7\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "advanced_settings": {
          "aliases": [],
          "description": "A dictionary of advanced settings.",
          "default": "{}",
          "type": "dict",
          "required": false,
          "version_added": "1.11.0",
          "suboptions": {}
        },
        "database": {
          "aliases": [],
          "description": "The database settings for vCenter server.",
          "default": "{'event_cleanup': True, 'event_retention': 30, 'max_connections': 50, 'task_cleanup': True, 'task_retention': 30}",
          "type": "dict",
          "required": false,
          "suboptions": {
            "event_cleanup": {
              "aliases": [],
              "description": "Event cleanup.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "event_retention": {
              "aliases": [],
              "description": "Event retention in days.",
              "default": "30",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "max_connections": {
              "aliases": [],
              "description": "Maximum connections.",
              "default": "50",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "task_cleanup": {
              "aliases": [],
              "description": "Task cleanup.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "task_retention": {
              "aliases": [],
              "description": "Task retention in days.",
              "default": "30",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "logging_options": {
          "aliases": [],
          "description": "The level of detail that vCenter server usesfor log files.",
          "default": "info",
          "type": "str",
          "required": false,
          "choices": [
            "none",
            "error",
            "warning",
            "info",
            "verbose",
            "trivia"
          ],
          "suboptions": {}
        },
        "mail": {
          "aliases": [],
          "description": "The settings vCenter server uses to send email alerts.",
          "default": "{'sender': '', 'server': ''}",
          "type": "dict",
          "required": false,
          "suboptions": {
            "sender": {
              "aliases": [],
              "description": "Mail sender address.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "server": {
              "aliases": [],
              "description": "Mail server.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "runtime_settings": {
          "aliases": [],
          "description": "The unique runtime settings for vCenter server.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "managed_address": {
              "aliases": [],
              "description": "vCenter server managed address.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "unique_id": {
              "aliases": [],
              "description": "vCenter server unique ID.",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "vcenter_server_name": {
              "aliases": [],
              "description": "vCenter server name. Default is FQDN.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "snmp_receivers": {
          "aliases": [],
          "description": "SNMP trap destinations for vCenter server alerts.",
          "default": "{'snmp_receiver_1_community': 'public', 'snmp_receiver_1_enabled': True, 'snmp_receiver_1_port': 162, 'snmp_receiver_1_url': 'localhost', 'snmp_receiver_2_community': '', 'snmp_receiver_2_enabled': False, 'snmp_receiver_2_port': 162, 'snmp_receiver_2_url': '', 'snmp_receiver_3_community': '', 'snmp_receiver_3_enabled': False, 'snmp_receiver_3_port': 162, 'snmp_receiver_3_url': '', 'snmp_receiver_4_community': '', 'snmp_receiver_4_enabled': False, 'snmp_receiver_4_port': 162, 'snmp_receiver_4_url': ''}",
          "type": "dict",
          "required": false,
          "suboptions": {
            "snmp_receiver_1_community": {
              "aliases": [],
              "description": "Community string.",
              "default": "public",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "snmp_receiver_1_enabled": {
              "aliases": [],
              "description": "Enable receiver.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "snmp_receiver_1_port": {
              "aliases": [],
              "description": "Receiver port.",
              "default": "162",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "snmp_receiver_1_url": {
              "aliases": [],
              "description": "Primary Receiver ULR.",
              "default": "localhost",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "snmp_receiver_2_community": {
              "aliases": [],
              "description": "Community string.",
              "default": "",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "snmp_receiver_2_enabled": {
              "aliases": [],
              "description": "Enable receiver.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "snmp_receiver_2_port": {
              "aliases": [],
              "description": "Receiver port.",
              "default": "162",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "snmp_receiver_2_url": {
              "aliases": [],
              "description": "Receiver 2 ULR.",
              "default": "",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "snmp_receiver_3_community": {
              "aliases": [],
              "description": "Community string.",
              "default": "",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "snmp_receiver_3_enabled": {
              "aliases": [],
              "description": "Enable receiver.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "snmp_receiver_3_port": {
              "aliases": [],
              "description": "Receiver port.",
              "default": "162",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "snmp_receiver_3_url": {
              "aliases": [],
              "description": "Receiver 3 ULR.",
              "default": "",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "snmp_receiver_4_community": {
              "aliases": [],
              "description": "Community string.",
              "default": "",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "snmp_receiver_4_enabled": {
              "aliases": [],
              "description": "Enable receiver.",
              "default": "False",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "snmp_receiver_4_port": {
              "aliases": [],
              "description": "Receiver port.",
              "default": "162",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "snmp_receiver_4_url": {
              "aliases": [],
              "description": "Receiver 4 ULR.",
              "default": "",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "timeout_settings": {
          "aliases": [],
          "description": "The vCenter server connection timeout for normal and long operations.",
          "default": "{'long_operations': 120, 'normal_operations': 30}",
          "type": "dict",
          "required": false,
          "suboptions": {
            "long_operations": {
              "aliases": [],
              "description": "Long operation timeout.",
              "default": "120",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "normal_operations": {
              "aliases": [],
              "description": "Normal operation timeout.",
              "default": "30",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "user_directory": {
          "aliases": [],
          "description": "The user directory settings for the vCenter server installation.",
          "default": "{'query_limit': True, 'query_limit_size': 5000, 'timeout': 60, 'validation': True, 'validation_period': 1440}",
          "type": "dict",
          "required": false,
          "suboptions": {
            "query_limit": {
              "aliases": [],
              "description": "Query limit.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "query_limit_size": {
              "aliases": [],
              "description": "Query limit size.",
              "default": "5000",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "timeout": {
              "aliases": [],
              "description": "User directory timeout.",
              "default": "60",
              "type": "int",
              "required": false,
              "suboptions": {}
            },
            "validation": {
              "aliases": [],
              "description": "Mail Validation.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "validation_period": {
              "aliases": [],
              "description": "Validation period.",
              "default": "1440",
              "type": "int",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Configures general settings on a vCenter server"
    },
    "examples": "\n- name: Configure vCenter general settings\n  community.vmware.vmware_vcenter_settings:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    database:\n      max_connections: 50\n      task_cleanup: true\n      task_retention: 30\n      event_cleanup: true\n      event_retention: 30\n    runtime_settings:\n      unique_id: 1\n      managed_address: \"{{ lookup('dig', inventory_hostname) }}\"\n      vcenter_server_name: \"{{ inventory_hostname }}\"\n    user_directory:\n      timeout: 60\n      query_limit: true\n      query_limit_size: 5000\n      validation: true\n      validation_period: 1440\n    mail:\n      server: mail.example.com\n      sender: vcenter@{{ inventory_hostname }}\n    snmp_receivers:\n      snmp_receiver_1_url: localhost\n      snmp_receiver_1_enabled: true\n      snmp_receiver_1_port: 162\n      snmp_receiver_1_community: public\n    timeout_settings:\n      normal_operations: 30\n      long_operations: 120\n    logging_options: info\n  delegate_to: localhost\n\n- name: Enable Retreat Mode for cluster with MOID domain-c8 (https://kb.vmware.com/kb/80472)\n  community.vmware.vmware_vcenter_settings:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    advanced_settings:\n      'config.vcls.clusters.domain-c8.enabled': 'false'\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_vcenter_settings_info": {
    "doc": {
      "description": "This module can be used to gather information about vCenter settings.",
      "has_action": false,
      "notes": "All modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "properties": {
          "aliases": [],
          "description": "Specify the properties to retrieve.\nExample:\n   properties: [\n      \"config.workflow.port\"\n   ]\nOnly valid when C(schema) is C(vsphere).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "schema": {
          "aliases": [],
          "description": "Specify the output schema desired.\nThe 'summary' output schema is the legacy output from the module.\nThe 'vsphere' output schema is the vSphere API class definition which requires pyvmomi>6.7.1.",
          "default": "summary",
          "type": "str",
          "required": false,
          "choices": [
            "summary",
            "vsphere"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "PyVmomi"
      ],
      "short_description": "Gather info vCenter settings"
    },
    "examples": "\n- name: \"Gather info about vCenter settings\"\n  community.vmware.vmware_vcenter_settings_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n  register: vcenter_settings_info\n\n- name: \"Gather some info from vCenter using the vSphere API output schema\"\n  community.vmware.vmware_vcenter_settings_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    schema: vsphere\n    properties:\n      - config.workflow.port\n  register: vcenter_settings_info_vsphere_api\n"
  },
  "community.vmware.vmware_vcenter_statistics": {
    "doc": {
      "description": "This module can be used to configure the vCenter server statistics.\nThe remaining settings can be configured with the module C(vmware_vcenter_settings).",
      "has_action": false,
      "notes": "Tested with vCenter Server Appliance (vCSA) 6.5 and 6.7\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "interval_past_day": {
          "aliases": [],
          "description": "Settings for vCenter server past day statistic collection.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "enabled": {
              "aliases": [],
              "description": "Past day statistics collection enabled.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "interval_minutes": {
              "aliases": [],
              "description": "Interval duration in minutes.",
              "default": "5",
              "type": "int",
              "required": false,
              "choices": [
                "1",
                "2",
                "3",
                "4",
                "5"
              ],
              "suboptions": {}
            },
            "level": {
              "aliases": [],
              "description": "Statistics level.",
              "default": "1",
              "type": "int",
              "required": false,
              "choices": [
                "1",
                "2",
                "3",
                "4"
              ],
              "suboptions": {}
            },
            "save_for_days": {
              "aliases": [],
              "description": "Save for value in days.",
              "default": "1",
              "type": "int",
              "required": false,
              "choices": [
                "1",
                "2",
                "3",
                "4",
                "5"
              ],
              "suboptions": {}
            }
          }
        },
        "interval_past_month": {
          "aliases": [],
          "description": "Settings for vCenter server past month statistic collection.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "enabled": {
              "aliases": [],
              "description": "Past month statistics collection enabled.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "interval_hours": {
              "aliases": [],
              "description": "Interval duration in hours.",
              "default": "2",
              "type": "int",
              "required": false,
              "choices": [
                "2"
              ],
              "suboptions": {}
            },
            "level": {
              "aliases": [],
              "description": "Statistics level.",
              "default": "1",
              "type": "int",
              "required": false,
              "choices": [
                "1",
                "2",
                "3",
                "4"
              ],
              "suboptions": {}
            },
            "save_for_months": {
              "aliases": [],
              "description": "Save for value in months.",
              "default": "1",
              "type": "int",
              "required": false,
              "choices": [
                "1"
              ],
              "suboptions": {}
            }
          }
        },
        "interval_past_week": {
          "aliases": [],
          "description": "Settings for vCenter server past week statistic collection.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "enabled": {
              "aliases": [],
              "description": "Past week statistics collection enabled.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "interval_minutes": {
              "aliases": [],
              "description": "Interval duration in minutes.",
              "default": "30",
              "type": "int",
              "required": false,
              "choices": [
                "30"
              ],
              "suboptions": {}
            },
            "level": {
              "aliases": [],
              "description": "Statistics level.",
              "default": "1",
              "type": "int",
              "required": false,
              "choices": [
                "1",
                "2",
                "3",
                "4"
              ],
              "suboptions": {}
            },
            "save_for_weeks": {
              "aliases": [],
              "description": "Save for value in weeks.",
              "default": "1",
              "type": "int",
              "required": false,
              "choices": [
                "1"
              ],
              "suboptions": {}
            }
          }
        },
        "interval_past_year": {
          "aliases": [],
          "description": "Settings for vCenter server past month statistic collection.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "enabled": {
              "aliases": [],
              "description": "Past month statistics collection enabled.",
              "default": "True",
              "type": "bool",
              "required": false,
              "suboptions": {}
            },
            "interval_days": {
              "aliases": [],
              "description": "Interval duration in days.",
              "default": "1",
              "type": "int",
              "required": false,
              "choices": [
                "1"
              ],
              "suboptions": {}
            },
            "level": {
              "aliases": [],
              "description": "Statistics level.",
              "default": "1",
              "type": "int",
              "required": false,
              "choices": [
                "1",
                "2",
                "3",
                "4"
              ],
              "suboptions": {}
            },
            "save_for_years": {
              "aliases": [],
              "description": "Save for value in years.",
              "default": "1",
              "type": "int",
              "required": false,
              "choices": [
                "1",
                "2",
                "3",
                "4",
                "5"
              ],
              "suboptions": {}
            }
          }
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Configures statistics on a vCenter server"
    },
    "examples": "\n- name: Configure vCenter statistics\n  community.vmware.vmware_vcenter_statistics:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    interval_past_day:\n      enabled: true\n      interval_minutes: 5\n      save_for_days: 1\n      level: 1\n    interval_past_week:\n      enabled: true\n      level: 1\n    interval_past_month:\n      enabled: true\n      level: 1\n    interval_past_year:\n      enabled: true\n      save_for_years: 1\n      level: 1\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_vm_config_option": {
    "doc": {
      "description": "This module is used for getting the hardware versions supported for creation, the guest ID list supported by ESXi host for the most recent virtual hardware supported or specified hardware version, the VM recommended config options for specified guest OS ID.\n",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nTested on vSphere 6.7\nKnown issue on vSphere 7.0 (https://github.com/vmware/pyvmomi/issues/915)\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster.\nIf C(esxi_hostname) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "datacenter": {
          "aliases": [],
          "description": "The datacenter name used to get specified cluster or host.\nThis parameter is case sensitive.",
          "default": "ha-datacenter",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "ESXi hostname.\nObtain VM configure options on this ESXi host.\nIf C(cluster_name) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "get_config_options": {
          "aliases": [],
          "description": "Return the dict of VM recommended config options for guest ID specified by C(guest_id) with hardware version specified by C(hardware_version) or the default hardware version.\nWhen set to True, C(guest_id) must be set.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "get_guest_os_ids": {
          "aliases": [],
          "description": "Return the list of guest OS IDs supported on the specified entity.\nIf C(hardware_version) is set, will return the corresponding guest OS ID list supported, or will return the guest OS ID list for the default hardware version.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "get_hardware_versions": {
          "aliases": [],
          "description": "Return the list of VM hardware versions supported for creation and the default hardware version on the specified entity.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "guest_id": {
          "aliases": [],
          "description": "The guest OS ID from the returned list when C(get_guest_os_ids) is set to C(True), e.g., 'rhel8_64Guest'.\nThis parameter must be set when C(get_config_options) is set to C(True).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hardware_version": {
          "aliases": [],
          "description": "The hardware version from the returned list when C(get_hardware_versions) is set to C(True), e.g., 'vmx-19'.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi",
        "System.View privilege"
      ],
      "short_description": "Return supported guest ID list and VM recommended config option for specific guest OS",
      "version_added": "1.15.0"
    },
    "examples": "\n- name: Get supported guest ID list on given ESXi host for with default hardware version\n  community.vmware.vmware_vm_config_option:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    esxi_hostname: \"{{ esxi_hostname }}\"\n    get_guest_os_ids: True\n  delegate_to: localhost\n\n- name: Get VM recommended config option for Windows 10 guest OS on given ESXi host\n  community.vmware.vmware_vm_config_option:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    esxi_hostname: \"{{ esxi_hostname }}\"\n    get_config_options: True\n    guest_id: \"windows9_64Guest\"\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_vm_facts": {
    "doc": {
      "description": "Return basic information pertaining to a vSphere or ESXi virtual machine guest.\nCluster name as fact is added in version 2.7.\nThis module was called C(vmware_vm_facts) before Ansible 2.9. The usage did not change.",
      "has_action": false,
      "notes": "Tested on ESXi 6.7, vSphere 5.5 and vSphere 6.5\nFrom 2.8 and onwards, information are returned as list of dict instead of dict.\nFact about C(moid) added in VMware collection 1.4.0.\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "folder": {
          "aliases": [],
          "description": "Specify a folder location of VMs to gather information from.\nExamples:\n   folder: /ha-datacenter/vm\n   folder: ha-datacenter/vm\n   folder: /datacenter1/vm\n   folder: datacenter1/vm\n   folder: /datacenter1/vm/folder1\n   folder: datacenter1/vm/folder1\n   folder: /folder1/datacenter1/vm\n   folder: folder1/datacenter1/vm\n   folder: /folder1/datacenter1/vm/folder2",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "show_attribute": {
          "aliases": [],
          "description": "Attributes related to VM guest shown in information only when this is set C(true).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "show_tag": {
          "aliases": [],
          "description": "Tags related to virtual machine are shown if set to C(True).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vm_type": {
          "aliases": [],
          "description": "If set to C(vm), then information are gathered for virtual machines only.\nIf set to C(template), then information are gathered for virtual machine templates only.\nIf set to C(all), then information are gathered for all virtual machines and virtual machine templates.",
          "default": "all",
          "type": "str",
          "required": false,
          "choices": [
            "all",
            "vm",
            "template"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Return basic info pertaining to a VMware machine guest"
    },
    "examples": "\n- name: Gather all registered virtual machines\n  community.vmware.vmware_vm_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n  delegate_to: localhost\n  register: vminfo\n\n- debug:\n    var: vminfo.virtual_machines\n\n- name: Gather only registered virtual machine templates\n  community.vmware.vmware_vm_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    vm_type: template\n  delegate_to: localhost\n  register: template_info\n\n- debug:\n    var: template_info.virtual_machines\n\n- name: Gather only registered virtual machines\n  community.vmware.vmware_vm_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    vm_type: vm\n  delegate_to: localhost\n  register: vm_info\n\n- debug:\n    var: vm_info.virtual_machines\n\n- name: Get UUID from given VM Name\n  block:\n    - name: Get virtual machine info\n      community.vmware.vmware_vm_info:\n        hostname: '{{ vcenter_hostname }}'\n        username: '{{ vcenter_username }}'\n        password: '{{ vcenter_password }}'\n        folder: \"/datacenter/vm/folder\"\n      delegate_to: localhost\n      register: vm_info\n\n    - debug:\n        msg: \"{{ item.uuid }}\"\n      with_items:\n        - \"{{ vm_info.virtual_machines | json_query(query) }}\"\n      vars:\n        query: \"[?guest_name=='DC0_H0_VM0']\"\n\n- name: Get Tags from given VM Name\n  block:\n    - name: Get virtual machine info\n      community.vmware.vmware_vm_info:\n        hostname: '{{ vcenter_hostname }}'\n        username: '{{ vcenter_username }}'\n        password: '{{ vcenter_password }}'\n        folder: \"/datacenter/vm/folder\"\n      delegate_to: localhost\n      register: vm_info\n\n    - debug:\n        msg: \"{{ item.tags }}\"\n      with_items:\n        - \"{{ vm_info.virtual_machines | json_query(query) }}\"\n      vars:\n        query: \"[?guest_name=='DC0_H0_VM0']\"\n\n- name: Gather all VMs from a specific folder\n  community.vmware.vmware_vm_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    folder: \"/Asia-Datacenter1/vm/prod\"\n  delegate_to: localhost\n  register: vm_info\n"
  },
  "community.vmware.vmware_vm_host_drs_rule": {
    "doc": {
      "description": "This module can be used to create VM-Host rules in a given cluster.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5 and 6.7\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "affinity_rule": {
          "aliases": [],
          "description": "If set to C(True), the DRS rule will be an Affinity rule.\nIf set to C(False), the DRS rule will be an Anti-Affinity rule.\nEffective only if C(state) is set to C(present).",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "cluster_name": {
          "aliases": [],
          "description": "Cluster to create VM-Host rule.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "datacenter": {
          "aliases": [
            "datacenter_name"
          ],
          "description": "Datacenter to search for given cluster. If not set, we use first cluster we encounter with C(cluster_name).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "drs_rule_name": {
          "aliases": [],
          "description": "Name of rule to create or remove.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "If set to C(True), the DRS rule will be enabled.\nEffective only if C(state) is set to C(present).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "host_group_name": {
          "aliases": [],
          "description": "Name of Host group to use with rule.\nEffective only if C(state) is set to C(present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mandatory": {
          "aliases": [],
          "description": "If set to C(True), the DRS rule will be mandatory.\nEffective only if C(state) is set to C(present).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "If set to C(present) and the rule does not exist then the rule will be created.\nIf set to C(absent) and the rule exists then the rule will be deleted.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vm_group_name": {
          "aliases": [],
          "description": "Name of VM group to use with rule.\nEffective only if C(state) is set to C(present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Creates vm/host group in a given cluster"
    },
    "examples": "\n---\n- name: \"Create mandatory DRS Affinity rule for VM/Host\"\n  community.vmware.vmware_vm_host_drs_rule:\n    hostname: \"{{ vcenter_hostname }}\"\n    password: \"{{ vcenter_password }}\"\n    username: \"{{ vcenter_username }}\"\n    cluster_name: DC0_C0\n    drs_rule_name: drs_rule_host_aff_0001\n    host_group_name: DC0_C0_HOST_GR1\n    vm_group_name: DC0_C0_VM_GR1\n    mandatory: True\n    enabled: True\n    affinity_rule: True\n"
  },
  "community.vmware.vmware_vm_info": {
    "doc": {
      "description": "Return basic information pertaining to a vSphere or ESXi virtual machine guest.\nCluster name as fact is added in version 2.7.\nThis module was called C(vmware_vm_facts) before Ansible 2.9. The usage did not change.",
      "has_action": false,
      "notes": "Tested on ESXi 6.7, vSphere 5.5 and vSphere 6.5\nFrom 2.8 and onwards, information are returned as list of dict instead of dict.\nFact about C(moid) added in VMware collection 1.4.0.\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "folder": {
          "aliases": [],
          "description": "Specify a folder location of VMs to gather information from.\nExamples:\n   folder: /ha-datacenter/vm\n   folder: ha-datacenter/vm\n   folder: /datacenter1/vm\n   folder: datacenter1/vm\n   folder: /datacenter1/vm/folder1\n   folder: datacenter1/vm/folder1\n   folder: /folder1/datacenter1/vm\n   folder: folder1/datacenter1/vm\n   folder: /folder1/datacenter1/vm/folder2",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "show_attribute": {
          "aliases": [],
          "description": "Attributes related to VM guest shown in information only when this is set C(true).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "show_tag": {
          "aliases": [],
          "description": "Tags related to virtual machine are shown if set to C(True).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vm_type": {
          "aliases": [],
          "description": "If set to C(vm), then information are gathered for virtual machines only.\nIf set to C(template), then information are gathered for virtual machine templates only.\nIf set to C(all), then information are gathered for all virtual machines and virtual machine templates.",
          "default": "all",
          "type": "str",
          "required": false,
          "choices": [
            "all",
            "vm",
            "template"
          ],
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Return basic info pertaining to a VMware machine guest"
    },
    "examples": "\n- name: Gather all registered virtual machines\n  community.vmware.vmware_vm_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n  delegate_to: localhost\n  register: vminfo\n\n- debug:\n    var: vminfo.virtual_machines\n\n- name: Gather only registered virtual machine templates\n  community.vmware.vmware_vm_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    vm_type: template\n  delegate_to: localhost\n  register: template_info\n\n- debug:\n    var: template_info.virtual_machines\n\n- name: Gather only registered virtual machines\n  community.vmware.vmware_vm_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    vm_type: vm\n  delegate_to: localhost\n  register: vm_info\n\n- debug:\n    var: vm_info.virtual_machines\n\n- name: Get UUID from given VM Name\n  block:\n    - name: Get virtual machine info\n      community.vmware.vmware_vm_info:\n        hostname: '{{ vcenter_hostname }}'\n        username: '{{ vcenter_username }}'\n        password: '{{ vcenter_password }}'\n        folder: \"/datacenter/vm/folder\"\n      delegate_to: localhost\n      register: vm_info\n\n    - debug:\n        msg: \"{{ item.uuid }}\"\n      with_items:\n        - \"{{ vm_info.virtual_machines | json_query(query) }}\"\n      vars:\n        query: \"[?guest_name=='DC0_H0_VM0']\"\n\n- name: Get Tags from given VM Name\n  block:\n    - name: Get virtual machine info\n      community.vmware.vmware_vm_info:\n        hostname: '{{ vcenter_hostname }}'\n        username: '{{ vcenter_username }}'\n        password: '{{ vcenter_password }}'\n        folder: \"/datacenter/vm/folder\"\n      delegate_to: localhost\n      register: vm_info\n\n    - debug:\n        msg: \"{{ item.tags }}\"\n      with_items:\n        - \"{{ vm_info.virtual_machines | json_query(query) }}\"\n      vars:\n        query: \"[?guest_name=='DC0_H0_VM0']\"\n\n- name: Gather all VMs from a specific folder\n  community.vmware.vmware_vm_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    folder: \"/Asia-Datacenter1/vm/prod\"\n  delegate_to: localhost\n  register: vm_info\n"
  },
  "community.vmware.vmware_vm_shell": {
    "doc": {
      "description": "Module allows user to run common system administration commands in the guest operating system.",
      "has_action": false,
      "notes": "Tested on vSphere 5.5, 6.0 and 6.5.\nOnly the first match against vm_id is used, even if there are multiple matches.\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster": {
          "aliases": [],
          "description": "The cluster hosting the virtual machine.\nIf set, it will help to speed up virtual machine search.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "datacenter": {
          "aliases": [],
          "description": "The datacenter hosting the virtual machine.\nIf set, it will help to speed up virtual machine search.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "folder": {
          "aliases": [],
          "description": "Destination folder, absolute or relative path to find an existing guest or create the new guest.\nThe folder should include the datacenter. ESX's datacenter is ha-datacenter.\nExamples:\n   folder: /ha-datacenter/vm\n   folder: ha-datacenter/vm\n   folder: /datacenter1/vm\n   folder: datacenter1/vm\n   folder: /datacenter1/vm/folder1\n   folder: datacenter1/vm/folder1\n   folder: /folder1/datacenter1/vm\n   folder: folder1/datacenter1/vm\n   folder: /folder1/datacenter1/vm/folder2",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "Timeout in seconds.\nIf set to positive integers, then C(wait_for_process) will honor this parameter and will exit after this timeout.",
          "default": "3600",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vm_id": {
          "aliases": [],
          "description": "Name of the virtual machine to work with.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "vm_id_type": {
          "aliases": [],
          "description": "The VMware identification method by which the virtual machine will be identified.",
          "default": "vm_name",
          "type": "str",
          "required": false,
          "choices": [
            "uuid",
            "instance_uuid",
            "dns_name",
            "inventory_path",
            "vm_name"
          ],
          "suboptions": {}
        },
        "vm_password": {
          "aliases": [],
          "description": "The password used to login-in to the virtual machine.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "vm_shell": {
          "aliases": [],
          "description": "The absolute path to the program to start.\nOn Linux, shell is executed via bash.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "vm_shell_args": {
          "aliases": [],
          "description": "The argument to the program.\nThe characters which must be escaped to the shell also be escaped on the command line provided.",
          "default": " ",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vm_shell_cwd": {
          "aliases": [],
          "description": "The current working directory of the application from which it will be run.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vm_shell_env": {
          "aliases": [],
          "description": "Comma separated list of environment variable, specified in the guest OS notation.",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "vm_username": {
          "aliases": [],
          "description": "The user to login-in to the virtual machine.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "wait_for_process": {
          "aliases": [],
          "description": "If set to C(True), module will wait for process to complete in the given virtual machine.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Run commands in a VMware guest operating system"
    },
    "examples": "\n- name: Run command inside a virtual machine\n  community.vmware.vmware_vm_shell:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter }}\"\n    folder: \"/{{datacenter}}/vm\"\n    vm_id: \"{{ vm_name }}\"\n    vm_username: root\n    vm_password: superSecret\n    vm_shell: /bin/echo\n    vm_shell_args: \" $var >> myFile \"\n    vm_shell_env:\n      - \"PATH=/bin\"\n      - \"VAR=test\"\n    vm_shell_cwd: \"/tmp\"\n  delegate_to: localhost\n  register: shell_command_output\n\n- name: Run command inside a virtual machine with wait and timeout\n  community.vmware.vmware_vm_shell:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter }}\"\n    folder: \"/{{datacenter}}/vm\"\n    vm_id: NameOfVM\n    vm_username: root\n    vm_password: superSecret\n    vm_shell: /bin/sleep\n    vm_shell_args: 100\n    wait_for_process: True\n    timeout: 2000\n  delegate_to: localhost\n  register: shell_command_with_wait_timeout\n\n- name: Change user password in the guest machine\n  community.vmware.vmware_vm_shell:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter }}\"\n    folder: \"/{{datacenter}}/vm\"\n    vm_id: \"{{ vm_name }}\"\n    vm_username: sample\n    vm_password: old_password\n    vm_shell: \"/bin/echo\"\n    vm_shell_args: \"-e 'old_password\\nnew_password\\nnew_password' | passwd sample > /tmp/$$.txt 2>&1\"\n  delegate_to: localhost\n\n- name: Change hostname of guest machine\n  community.vmware.vmware_vm_shell:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter }}\"\n    folder: \"/{{datacenter}}/vm\"\n    vm_id: \"{{ vm_name }}\"\n    vm_username: testUser\n    vm_password: SuperSecretPassword\n    vm_shell: \"/usr/bin/hostnamectl\"\n    vm_shell_args: \"set-hostname new_hostname > /tmp/$$.txt 2>&1\"\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_vm_storage_policy": {
    "doc": {
      "description": "A vSphere storage policy defines metadata that describes storage requirements for virtual machines and storage capabilities of storage providers.\nCurrently, only tag-based storage policy creation is supported.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "description": {
          "aliases": [],
          "description": "Description of the storage policy to create or update.\nThis parameter is ignored when C(state=absent).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the storage policy to create, update, or delete.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "State of storage policy.\nIf set to C(present), the storage policy is created.\nIf set to C(absent), the storage policy is deleted.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "tag_affinity": {
          "aliases": [],
          "description": "If set to C(true), the storage policy enforces that virtual machines require the existence of a tag for datastore placement.\nIf set to C(false), the storage policy enforces that virtual machines require the absence of a tag for datastore placement.\nThis parameter is ignored when C(state=absent).",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "tag_category": {
          "aliases": [],
          "description": "Name of the pre-existing tag category to assign to the storage policy.\nThis parameter is ignored when C(state=absent).\nThis parameter is required when C(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "tag_name": {
          "aliases": [],
          "description": "Name of the pre-existing tag to assign to the storage policy.\nThis parameter is ignored when C(state=absent).\nThis parameter is required when C(state=present).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.7",
        "PyVmomi"
      ],
      "short_description": "Create vSphere storage policies",
      "version_added": "1.0.0"
    },
    "examples": "\n- name: Create or update a vSphere tag-based storage policy\n  community.vmware.vmware_vm_storage_policy:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    name: \"vSphere storage policy\"\n    description: \"vSphere storage performance policy\"\n    tag_category: \"performance_tier\"\n    tag_name: \"gold\"\n    tag_affinity: true\n    state: \"present\"\n  delegate_to: localhost\n\n- name: Remove a vSphere tag-based storage policy\n  community.vmware.vmware_vm_storage_policy:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    name: \"vSphere storage policy\"\n    state: \"absent\"\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_vm_storage_policy_info": {
    "doc": {
      "description": "Returns basic information on vSphere storage profiles.\nA vSphere storage profile defines storage policy information that describes storage requirements for virtual machines and storage capabilities of storage providers.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gather information about vSphere storage profile defined storage policy information."
    },
    "examples": "\n- name: Get SPBM info\n  community.vmware.vmware_vm_storage_policy_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n  delegate_to: localhost\n  register: profiles\n"
  },
  "community.vmware.vmware_vm_vm_drs_rule": {
    "doc": {
      "description": "This module can be used to configure VMware DRS Affinity rule for virtual machines in the given cluster.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "affinity_rule": {
          "aliases": [],
          "description": "If set to C(True), the DRS rule will be an Affinity rule.\nIf set to C(False), the DRS rule will be an Anti-Affinity rule.\nEffective only if C(state) is set to C(present).",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "cluster_name": {
          "aliases": [],
          "description": "Desired cluster name where virtual machines are present for the DRS rule.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "drs_rule_name": {
          "aliases": [],
          "description": "The name of the DRS rule to manage.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "enabled": {
          "aliases": [],
          "description": "If set to C(True), the DRS rule will be enabled.\nEffective only if C(state) is set to C(present).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mandatory": {
          "aliases": [],
          "description": "If set to C(True), the DRS rule will be mandatory.\nEffective only if C(state) is set to C(present).",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "If set to C(present), then the DRS rule is created if not present.\nIf set to C(present), then the DRS rule is already present, it updates to the given configurations.\nIf set to C(absent), then the DRS rule is deleted if present.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vms": {
          "aliases": [],
          "description": "List of virtual machines name for which DRS rule needs to be applied.\nRequired if C(state) is set to C(present).",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Configure VMware DRS Affinity rule for virtual machines in the given cluster"
    },
    "examples": "\n- name: Create DRS Affinity Rule for VM-VM\n  community.vmware.vmware_vm_vm_drs_rule:\n    hostname: \"{{ esxi_server }}\"\n    username: \"{{ esxi_username }}\"\n    password: \"{{ esxi_password }}\"\n    cluster_name: \"{{ cluster_name }}\"\n    vms:\n        - vm1\n        - vm2\n    drs_rule_name: vm1-vm2-affinity-rule-001\n    enabled: True\n    mandatory: True\n    affinity_rule: True\n  delegate_to: localhost\n\n- name: Create DRS Anti-Affinity Rule for VM-VM\n  community.vmware.vmware_vm_vm_drs_rule:\n    hostname: \"{{ esxi_server }}\"\n    username: \"{{ esxi_username }}\"\n    password: \"{{ esxi_password }}\"\n    cluster_name: \"{{ cluster_name }}\"\n    enabled: True\n    vms:\n        - vm1\n        - vm2\n    drs_rule_name: vm1-vm2-affinity-rule-001\n    mandatory: True\n    affinity_rule: False\n  delegate_to: localhost\n\n- name: Delete DRS Affinity Rule for VM-VM\n  community.vmware.vmware_vm_vm_drs_rule:\n    hostname: \"{{ esxi_server }}\"\n    username: \"{{ esxi_username }}\"\n    password: \"{{ esxi_password }}\"\n    cluster_name: \"{{ cluster_name }}\"\n    drs_rule_name: vm1-vm2-affinity-rule-001\n    state: absent\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_vm_vss_dvs_migrate": {
    "doc": {
      "description": "Migrates a virtual machine from a standard vswitch to distributed",
      "has_action": false,
      "notes": "Tested on vSphere 5.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "dvportgroup_name": {
          "aliases": [],
          "description": "Name of the portgroup to migrate to the virtual machine to",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vm_name": {
          "aliases": [],
          "description": "Name of the virtual machine to migrate to a dvSwitch",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Migrates a virtual machine from a standard vswitch to distributed"
    },
    "examples": "\n- name: Migrate VCSA to vDS\n  community.vmware.vmware_vm_vss_dvs_migrate:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    vm_name: '{{ vm_name }}'\n    dvportgroup_name: '{{ distributed_portgroup_name }}'\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_vmkernel": {
    "doc": {
      "description": "This module can be used to manage the VMKernel adapters / VMKernel network interfaces of an ESXi host.\nThe module assumes that the host is already configured with the Port Group in case of a vSphere Standard Switch (vSS).\nThe module assumes that the host is already configured with the Distributed Port Group in case of a vSphere Distributed Switch (vDS).\nThe module automatically migrates the VMKernel adapter from vSS to vDS or vice versa if present.",
      "has_action": false,
      "notes": "The option C(device) need to be used with DHCP because otherwise it's not possible to check if a VMkernel device is already present\nYou can only change from DHCP to static, and vSS to vDS, or vice versa, in one step, without creating a new device, with C(device) specified.\nYou can only create the VMKernel adapter on a vDS if authenticated to vCenter and not if authenticated to ESXi.\nTested on vSphere 5.5 and 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "device": {
          "aliases": [],
          "description": "Search VMkernel adapter by device name.\nThe parameter is required only in case of C(type) is set to C(dhcp).",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "dvswitch_name": {
          "aliases": [
            "dvswitch"
          ],
          "description": "The name of the vSphere Distributed Switch (vDS) where to add the VMKernel interface.\nRequired parameter only if C(state) is set to C(present).\nOptional parameter from version 2.8 and onwards.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "enable_ft": {
          "aliases": [],
          "description": "Enable Fault Tolerance traffic on the VMKernel adapter.\nThis option is only allowed if the default TCP/IP stack is used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "enable_mgmt": {
          "aliases": [],
          "description": "Enable Management traffic on the VMKernel adapter.\nThis option is only allowed if the default TCP/IP stack is used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "enable_provisioning": {
          "aliases": [],
          "description": "Enable Provisioning traffic on the VMKernel adapter.\nThis option is only allowed if the default TCP/IP stack is used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "enable_replication": {
          "aliases": [],
          "description": "Enable vSphere Replication traffic on the VMKernel adapter.\nThis option is only allowed if the default TCP/IP stack is used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "enable_replication_nfc": {
          "aliases": [],
          "description": "Enable vSphere Replication NFC traffic on the VMKernel adapter.\nThis option is only allowed if the default TCP/IP stack is used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "enable_vmotion": {
          "aliases": [],
          "description": "Enable vMotion traffic on the VMKernel adapter.\nThis option is only allowed if the default TCP/IP stack is used.\nYou cannot enable vMotion on an additional adapter if you already have an adapter with the vMotion TCP/IP stack configured.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "enable_vsan": {
          "aliases": [],
          "description": "Enable VSAN traffic on the VMKernel adapter.\nThis option is only allowed if the default TCP/IP stack is used.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "Name of ESXi host to which VMKernel is to be managed.\nFrom version 2.5 onwards, this parameter is required.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mtu": {
          "aliases": [],
          "description": "The MTU for the VMKernel interface.\nThe default value of 1500 is valid from version 2.5 and onwards.",
          "default": "1500",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "network": {
          "aliases": [],
          "description": "A dictionary of network details.",
          "default": "{'tcpip_stack': 'default', 'type': 'static'}",
          "type": "dict",
          "required": false,
          "suboptions": {
            "default_gateway": {
              "aliases": [],
              "description": "Default gateway (Override default gateway for this adapter).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "ip_address": {
              "aliases": [],
              "description": "Static IP address.\nRequired if C(type) is set to C(static).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "subnet_mask": {
              "aliases": [],
              "description": "Static netmask required.\nRequired if C(type) is set to C(static).",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "tcpip_stack": {
              "aliases": [],
              "description": "The TCP/IP stack for the VMKernel interface.",
              "default": "default",
              "type": "str",
              "required": false,
              "choices": [
                "default",
                "provisioning",
                "vmotion",
                "vxlan"
              ],
              "suboptions": {}
            },
            "type": {
              "aliases": [],
              "description": "Type of IP assignment.",
              "default": "static",
              "type": "str",
              "required": false,
              "choices": [
                "static",
                "dhcp"
              ],
              "suboptions": {}
            }
          }
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "portgroup_name": {
          "aliases": [
            "portgroup"
          ],
          "description": "The name of the port group for the VMKernel interface.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "If set to C(present), the VMKernel adapter will be created with the given specifications.\nIf set to C(absent), the VMKernel adapter will be removed.\nIf set to C(present) and VMKernel adapter exists, the configurations will be updated.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vswitch_name": {
          "aliases": [
            "vswitch"
          ],
          "description": "The name of the vSwitch where to add the VMKernel interface.\nRequired parameter only if C(state) is set to C(present).\nOptional parameter from version 2.5 and onwards.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Manages a VMware VMkernel Adapter of an ESXi host."
    },
    "examples": "\n-  name: Add Management vmkernel port using static network type\n   community.vmware.vmware_vmkernel:\n      hostname: '{{ esxi_hostname }}'\n      username: '{{ esxi_username }}'\n      password: '{{ esxi_password }}'\n      esxi_hostname: '{{ esxi_hostname }}'\n      vswitch_name: vSwitch0\n      portgroup_name: PG_0001\n      network:\n        type: 'static'\n        ip_address: 192.168.127.10\n        subnet_mask: 255.255.255.0\n      state: present\n      enable_mgmt: True\n   delegate_to: localhost\n\n-  name: Add Management vmkernel port using DHCP network type\n   community.vmware.vmware_vmkernel:\n      hostname: '{{ esxi_hostname }}'\n      username: '{{ esxi_username }}'\n      password: '{{ esxi_password }}'\n      esxi_hostname: '{{ esxi_hostname }}'\n      vswitch_name: vSwitch0\n      portgroup_name: PG_0002\n      state: present\n      network:\n        type: 'dhcp'\n      enable_mgmt: True\n   delegate_to: localhost\n\n-  name: Change IP allocation from static to dhcp\n   community.vmware.vmware_vmkernel:\n      hostname: '{{ esxi_hostname }}'\n      username: '{{ esxi_username }}'\n      password: '{{ esxi_password }}'\n      esxi_hostname: '{{ esxi_hostname }}'\n      vswitch_name: vSwitch0\n      portgroup_name: PG_0002\n      state: present\n      device: vmk1\n      network:\n        type: 'dhcp'\n      enable_mgmt: True\n   delegate_to: localhost\n\n-  name: Delete VMkernel port\n   community.vmware.vmware_vmkernel:\n      hostname: '{{ esxi_hostname }}'\n      username: '{{ esxi_username }}'\n      password: '{{ esxi_password }}'\n      esxi_hostname: '{{ esxi_hostname }}'\n      vswitch_name: vSwitch0\n      portgroup_name: PG_0002\n      state: absent\n   delegate_to: localhost\n\n-  name: Add Management vmkernel port to Distributed Switch\n   community.vmware.vmware_vmkernel:\n      hostname: '{{ vcenter_hostname }}'\n      username: '{{ vcenter_username }}'\n      password: '{{ vcenter_password }}'\n      esxi_hostname: '{{ esxi_hostname }}'\n      dvswitch_name: dvSwitch1\n      portgroup_name: dvPG_0001\n      network:\n        type: 'static'\n        ip_address: 192.168.127.10\n        subnet_mask: 255.255.255.0\n      state: present\n      enable_mgmt: True\n   delegate_to: localhost\n\n-  name: Add vMotion vmkernel port with vMotion TCP/IP stack\n   community.vmware.vmware_vmkernel:\n      hostname: '{{ vcenter_hostname }}'\n      username: '{{ vcenter_username }}'\n      password: '{{ vcenter_password }}'\n      esxi_hostname: '{{ esxi_hostname }}'\n      dvswitch_name: dvSwitch1\n      portgroup_name: dvPG_0001\n      network:\n        type: 'static'\n        ip_address: 192.168.127.10\n        subnet_mask: 255.255.255.0\n        tcpip_stack: vmotion\n      state: present\n   delegate_to: localhost\n"
  },
  "community.vmware.vmware_vmkernel_facts": {
    "doc": {
      "description": "This module can be used to gather VMKernel facts about an ESXi host from given ESXi hostname or cluster name.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster.\nVMKernel facts about each ESXi server will be returned for the given cluster.\nIf C(esxi_hostname) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "ESXi hostname.\nVMKernel facts about this ESXi server will be returned.\nIf C(cluster_name) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gathers VMKernel facts about an ESXi host"
    },
    "examples": "\n- name: Gather VMKernel facts about all ESXi Host in given Cluster\n  community.vmware.vmware_vmkernel_facts:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: cluster_name\n  delegate_to: localhost\n  register: cluster_host_vmks\n\n- name: Gather VMKernel facts about ESXi Host\n  community.vmware.vmware_vmkernel_facts:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n  delegate_to: localhost\n  register: host_vmks\n"
  },
  "community.vmware.vmware_vmkernel_info": {
    "doc": {
      "description": "This module can be used to gather VMKernel information about an ESXi host from given ESXi hostname or cluster name.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster.\nVMKernel information about each ESXi server will be returned for the given cluster.\nIf C(esxi_hostname) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "ESXi hostname.\nVMKernel information about this ESXi server will be returned.\nIf C(cluster_name) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gathers VMKernel info about an ESXi host"
    },
    "examples": "\n- name: Gather VMKernel info about all ESXi Host in given Cluster\n  community.vmware.vmware_vmkernel_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: cluster_name\n  delegate_to: localhost\n  register: cluster_host_vmks\n\n- name: Gather VMKernel info about ESXi Host\n  community.vmware.vmware_vmkernel_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n  delegate_to: localhost\n  register: host_vmks\n"
  },
  "community.vmware.vmware_vmkernel_ip_config": {
    "doc": {
      "description": "Configure the VMkernel IP Address",
      "has_action": false,
      "notes": "Tested on vSphere 5.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "ip_address": {
          "aliases": [],
          "description": "IP address to assign to VMkernel interface",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "subnet_mask": {
          "aliases": [],
          "description": "Subnet Mask to assign to VMkernel interface",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vmk_name": {
          "aliases": [],
          "description": "VMkernel interface name",
          "type": "str",
          "required": true,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Configure the VMkernel IP Address"
    },
    "examples": "\n# Example command from Ansible Playbook\n\n- name: Configure IP address on ESX host\n  community.vmware.vmware_vmkernel_ip_config:\n    hostname: '{{ esxi_hostname }}'\n    username: '{{ esxi_username }}'\n    password: '{{ esxi_password }}'\n    vmk_name: vmk0\n    ip_address: 10.0.0.10\n    subnet_mask: 255.255.255.0\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_vmotion": {
    "doc": {
      "description": "Using VMware vCenter, move a virtual machine using vMotion to a different host, and/or its vmdks to another datastore using storage vMotion.",
      "has_action": false,
      "notes": "Tested on vSphere 6.0\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "destination_datacenter": {
          "aliases": [],
          "description": "Name of the destination datacenter the datastore is located on.\nOptional, required only when datastores are shared across datacenters.",
          "type": "str",
          "required": false,
          "version_added": "1.11.0",
          "suboptions": {}
        },
        "destination_datastore": {
          "aliases": [
            "datastore"
          ],
          "description": "Name of the destination datastore the virtual machine's vmdk should be moved on.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "destination_host": {
          "aliases": [
            "destination"
          ],
          "description": "Name of the destination host the virtual machine should be running on.\nVersion 2.6 onwards, this parameter is not a required parameter, unlike the previous versions.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "destination_resourcepool": {
          "aliases": [
            "resource_pool"
          ],
          "description": "Name of the destination resource pool where the virtual machine should be running.\nResource pool is required if vmotion is done between hosts which are part of different clusters or datacenters.\nif not passed, resource_pool object will be retrived from host_obj parent.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "moid": {
          "aliases": [],
          "description": "Managed Object ID of the instance to manage if known, this is a unique identifier only within a single vCenter instance.\nThis is required if C(vm_name) or C(vm_uuid) is not supplied.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "use_instance_uuid": {
          "aliases": [],
          "description": "Whether to use the VMware instance UUID rather than the BIOS UUID.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "vm_name": {
          "aliases": [
            "vm"
          ],
          "description": "Name of the VM to perform a vMotion on.\nThis is required parameter, if C(vm_uuid) is not set.\nVersion 2.6 onwards, this parameter is not a required parameter, unlike the previous versions.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "vm_uuid": {
          "aliases": [
            "uuid"
          ],
          "description": "UUID of the virtual machine to perform a vMotion operation on.\nThis is a required parameter, if C(vm_name) or C(moid) is not set.",
          "type": "str",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "pyVmomi"
      ],
      "short_description": "Move a virtual machine using vMotion, and/or its vmdks using storage vMotion."
    },
    "examples": "\n- name: Perform vMotion of virtual machine\n  community.vmware.vmware_vmotion:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    vm_name: 'vm_name_as_per_vcenter'\n    destination_host: 'destination_host_as_per_vcenter'\n  delegate_to: localhost\n\n- name: Perform vMotion of virtual machine\n  community.vmware.vmware_vmotion:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    moid: vm-42\n    destination_host: 'destination_host_as_per_vcenter'\n  delegate_to: localhost\n\n- name: Perform vMotion of virtual machine to resource_pool\n  community.vmware.vmware_vmotion:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    moid: vm-42\n    destination_host: 'destination_host_as_per_vcenter'\n    destination_resourcepool: 'destination_resourcepool_as_per_vcenter'\n  delegate_to: localhost\n\n- name: Perform storage vMotion of virtual machine\n  community.vmware.vmware_vmotion:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    vm_name: 'vm_name_as_per_vcenter'\n    destination_datastore: 'destination_datastore_as_per_vcenter'\n  delegate_to: localhost\n\n- name: Perform storage vMotion and host vMotion of virtual machine\n  community.vmware.vmware_vmotion:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    vm_name: 'vm_name_as_per_vcenter'\n    destination_host: 'destination_host_as_per_vcenter'\n    destination_datastore: 'destination_datastore_as_per_vcenter'\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_vsan_cluster": {
    "doc": {
      "description": "This module can be used to configure VSAN clustering on an ESXi host",
      "has_action": false,
      "notes": "Tested on vSphere 5.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_uuid": {
          "aliases": [],
          "description": "Desired cluster UUID",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Configure VSAN clustering on an ESXi host"
    },
    "examples": "\n- name: Configure VMware VSAN Cluster\n  hosts: deploy_node\n  tags:\n    - vsan\n  tasks:\n    - name: Configure VSAN on first host\n      community.vmware.vmware_vsan_cluster:\n         hostname: \"{{ groups['esxi'][0] }}\"\n         username: \"{{ esxi_username }}\"\n         password: \"{{ site_password }}\"\n      delegate_to: localhost\n      register: vsan_cluster\n\n    - name: Configure VSAN on remaining hosts\n      community.vmware.vmware_vsan_cluster:\n         hostname: \"{{ item }}\"\n         username: \"{{ esxi_username }}\"\n         password: \"{{ site_password }}\"\n         cluster_uuid: \"{{ vsan_cluster.cluster_uuid }}\"\n      delegate_to: localhost\n      loop: \"{{ groups['esxi'][1:] }}\"\n"
  },
  "community.vmware.vmware_vsan_health_info": {
    "doc": {
      "description": "Gather information about a VMware vSAN cluster's health.",
      "has_action": false,
      "notes": "All modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the vSAN cluster.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "datacenter": {
          "aliases": [
            "datacenter_name"
          ],
          "description": "Name of the Datacenter.",
          "type": "str",
          "required": false,
          "version_added": "1.6.0",
          "suboptions": {}
        },
        "fetch_from_cache": {
          "aliases": [],
          "description": "C(True) to return the result from cache directly instead of running the full health check.",
          "default": "False",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "PyVmomi",
        "VMware vSAN Python's SDK"
      ],
      "short_description": "Gather information about a VMware vSAN cluster's health"
    },
    "examples": "\n- name: Gather health info from a vSAN's cluster\n  community.vmware.vmware_vsan_health_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    cluster_name: 'vSAN01'\n    fetch_from_cache: False\n\n- name: Gather health info from a vSAN's cluster with datacenter\n  community.vmware.vmware_vsan_health_info:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    cluster_name: 'vSAN01'\n    datacenter: 'Datacenter_01'\n    fetch_from_cache: True\n"
  },
  "community.vmware.vmware_vspan_session": {
    "doc": {
      "description": "This module can be used to create, delete or edit different kind of port mirroring sessions.",
      "has_action": false,
      "notes": "Tested on vSphere 6.7\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "description": {
          "aliases": [],
          "description": "The description for the session.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "destination_port": {
          "aliases": [],
          "description": "Destination port that received the mirrored packets.\nAlso any port designated in the value of this property can not match the source port in any of the Distributed Port Mirroring session.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "destination_vm": {
          "aliases": [],
          "description": "With this parameter it is possible, to add a NIC of a VM to a port mirroring session.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "Name of the VM.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "nic_label": {
              "aliases": [],
              "description": "Label of the network interface card to use.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "enabled": {
          "aliases": [],
          "description": "Whether the session is enabled.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "encapsulation_vlan_id": {
          "aliases": [],
          "description": "VLAN ID used to encapsulate the mirrored traffic.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mirrored_packet_length": {
          "aliases": [],
          "description": "An integer that describes how much of each frame to mirror.\nIf unset, all of the frame would be mirrored.\nSetting this property to a smaller value is useful when the consumer will look only at the headers.\nThe value cannot be less than 60.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "name": {
          "aliases": [],
          "description": "Name of the session.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "normal_traffic_allowed": {
          "aliases": [],
          "description": "Whether or not destination ports can send and receive \"normal\" traffic.\nSetting this to false will make mirror ports be used solely for mirroring and not double as normal access ports.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "sampling_rate": {
          "aliases": [],
          "description": "Sampling rate of the session.\nIf its value is n, one of every n packets is mirrored.\nValid values are between 1 to 65535.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "session_type": {
          "aliases": [],
          "description": "Select the mirroring type.\nIn C(encapsulatedRemoteMirrorSource) session, Distributed Ports can be used as source entities, and IP address can be used as destination entities.\nIn C(remoteMirrorDest) session, VLAN IDs can be used as source entities, and Distributed Ports can be used as destination entities.\nIn C(remoteMirrorSource) session, Distributed Ports can be used as source entities, and uplink ports name can be used as destination entities.\nIn C(dvPortMirror) session, Distributed Ports can be used as both source and destination entities.",
          "default": "dvPortMirror",
          "type": "str",
          "required": false,
          "choices": [
            "encapsulatedRemoteMirrorSource",
            "remoteMirrorDest",
            "remoteMirrorSource",
            "dvPortMirror"
          ],
          "suboptions": {}
        },
        "source_port_received": {
          "aliases": [],
          "description": "Source port for which received packets are mirrored.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "source_port_transmitted": {
          "aliases": [],
          "description": "Source port for which transmitted packets are mirrored.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "source_vm_received": {
          "aliases": [],
          "description": "With this parameter it is possible, to add a NIC of a VM to a port mirroring session.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "Name of the VM.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "nic_label": {
              "aliases": [],
              "description": "Label of the network interface card to use.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "source_vm_transmitted": {
          "aliases": [],
          "description": "With this parameter it is possible, to add a NIC of a VM to a port mirroring session.",
          "type": "dict",
          "required": false,
          "suboptions": {
            "name": {
              "aliases": [],
              "description": "Name of the VM.",
              "type": "str",
              "required": false,
              "suboptions": {}
            },
            "nic_label": {
              "aliases": [],
              "description": "Label of the network interface card to use.",
              "type": "str",
              "required": false,
              "suboptions": {}
            }
          }
        },
        "state": {
          "aliases": [],
          "description": "Create or remove the session.",
          "type": "str",
          "required": true,
          "choices": [
            "present",
            "absent"
          ],
          "suboptions": {}
        },
        "strip_original_vlan": {
          "aliases": [],
          "description": "Whether to strip the original VLAN tag.\nIf false, the original VLAN tag will be preserved on the mirrored traffic.\nIf C(encapsulationVlanId) has been set and this property is false, the frames will be double tagged with the original VLAN ID as the inner tag.",
          "type": "bool",
          "required": false,
          "suboptions": {}
        },
        "switch": {
          "aliases": [
            "switch_name"
          ],
          "description": "The name of the distributed vSwitch on which to add or remove the mirroring session.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python > =  2.6",
        "PyVmomi"
      ],
      "short_description": "Create or remove a Port Mirroring session."
    },
    "examples": "\n- name: Create distributed mirroring session.\n  community.vmware.vmware_vspan_session:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    switch_name: dvSwitch\n    state: present\n    name: Basic Session\n    enabled: True\n    description: \"Example description\"\n    source_port_transmitted: 817\n    source_port_received: 817\n    destination_port: 815\n  delegate_to: localhost\n\n- name: Create remote destination mirroring session.\n  community.vmware.vmware_vspan_session:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    switch_name: dvSwitch\n    state: present\n    name: Remote Session\n    enabled: True\n    description: \"Example description\"\n    source_port_received: 105\n    destination_port: 815\n    session_type: \"remoteMirrorDest\"\n  delegate_to: localhost\n\n- name: Delete remote destination mirroring session.\n  community.vmware.vmware_vspan_session:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    switch_name: dvSwitch\n    state: absent\n    name: Remote Session\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_vswitch": {
    "doc": {
      "description": "This module can be used to add, remove and update a VMware Standard Switch to an ESXi host.",
      "has_action": false,
      "notes": "Tested on vSphere 5.5 and 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "esxi_hostname": {
          "aliases": [
            "host"
          ],
          "description": "Manage the vSwitch using this ESXi host system.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "mtu": {
          "aliases": [],
          "description": "MTU to configure on vSwitch.",
          "default": "1500",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "nics": {
          "aliases": [
            "nic_name"
          ],
          "description": "A list of vmnic names or vmnic name to attach to vSwitch.\nAlias C(nics) is added in version 2.4.",
          "default": "[]",
          "type": "list",
          "required": false,
          "elements": "str",
          "suboptions": {}
        },
        "number_of_ports": {
          "aliases": [],
          "description": "Number of port to configure on vSwitch.",
          "default": "128",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "Add or remove the switch.",
          "default": "present",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "present"
          ],
          "suboptions": {}
        },
        "switch": {
          "aliases": [
            "switch_name"
          ],
          "description": "vSwitch name to add.\nAlias C(switch) is added in version 2.4.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Manage a VMware Standard Switch to an ESXi host."
    },
    "examples": "\n- name: Add a VMware vSwitch\n  community.vmware.vmware_vswitch:\n    hostname: '{{ esxi_hostname }}'\n    username: '{{ esxi_username }}'\n    password: '{{ esxi_password }}'\n    switch: vswitch_name\n    nics: vmnic_name\n    mtu: 9000\n  delegate_to: localhost\n\n- name: Add a VMware vSwitch without any physical NIC attached\n  community.vmware.vmware_vswitch:\n    hostname: '{{ esxi_hostname }}'\n    username: '{{ esxi_username }}'\n    password: '{{ esxi_password }}'\n    switch: vswitch_0001\n    mtu: 9000\n  delegate_to: localhost\n\n- name: Add a VMware vSwitch with multiple NICs\n  community.vmware.vmware_vswitch:\n    hostname: '{{ esxi_hostname }}'\n    username: '{{ esxi_username }}'\n    password: '{{ esxi_password }}'\n    switch: vmware_vswitch_0004\n    nics:\n    - vmnic1\n    - vmnic2\n    mtu: 9000\n  delegate_to: localhost\n\n- name: Add a VMware vSwitch to a specific host system\n  community.vmware.vmware_vswitch:\n    hostname: '{{ esxi_hostname }}'\n    username: '{{ esxi_username }}'\n    password: '{{ esxi_password }}'\n    esxi_hostname: DC0_H0\n    switch_name: vswitch_001\n    nic_name: vmnic0\n    mtu: 9000\n  delegate_to: localhost\n\n- name: Delete a VMware vSwitch in a specific host system\n  community.vmware.vmware_vswitch:\n    hostname: '{{ esxi_hostname }}'\n    username: '{{ esxi_username }}'\n    password: '{{ esxi_password }}'\n    esxi_hostname: DC0_H0\n    switch_name: vswitch_001\n    state: absent\n  delegate_to: localhost\n"
  },
  "community.vmware.vmware_vswitch_facts": {
    "doc": {
      "description": "This module can be used to gather facts about an ESXi host's vswitch configurations when ESXi hostname or Cluster name is given.\nThe vSphere Client shows the value for the number of ports as elastic from vSphere 5.5 and above.\nOther tools like esxcli might show the number of ports as 1536 or 5632.\nSee U(https://kb.vmware.com/s/article/2064511) for more details.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster.\nFacts about vswitch belonging to every ESXi host systems under this cluster will be returned.\nIf C(esxi_hostname) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "ESXi hostname to gather facts from.\nIf C(cluster_name) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gathers facts about an ESXi host's vswitch configurations"
    },
    "examples": "\n- name: Gather vswitch facts about all ESXi Host in given Cluster\n  community.vmware.vmware_vswitch_facts:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: '{{ cluster_name }}'\n    delegate_to: localhost\n  register: all_hosts_vswitch_facts\n\n- name: Gather vswitch facts about ESXi Host\n  community.vmware.vmware_vswitch_facts:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n    delegate_to: localhost\n  register: all_vswitch_facts\n"
  },
  "community.vmware.vmware_vswitch_info": {
    "doc": {
      "description": "This module can be used to gather information about an ESXi host's vswitch configurations when ESXi hostname or Cluster name is given.\nThe vSphere Client shows the value for the number of ports as elastic from vSphere 5.5 and above.\nOther tools like esxcli might show the number of ports as 1536 or 5632.\nSee U(https://kb.vmware.com/s/article/2064511) for more details.",
      "has_action": false,
      "notes": "Tested on vSphere 6.5\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "cluster_name": {
          "aliases": [],
          "description": "Name of the cluster.\nInfo about vswitch belonging to every ESXi host systems under this cluster will be returned.\nIf C(esxi_hostname) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "esxi_hostname": {
          "aliases": [],
          "description": "ESXi hostname to gather information from.\nIf C(cluster_name) is not given, this parameter is required.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "admin",
            "user"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "requirements": [
        "python >= 2.6",
        "PyVmomi"
      ],
      "short_description": "Gathers info about an ESXi host's vswitch configurations"
    },
    "examples": "\n- name: Gather vswitch info about all ESXi Host in given Cluster\n  community.vmware.vmware_vswitch_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: '{{ cluster_name }}'\n    delegate_to: localhost\n  register: all_hosts_vswitch_info\n\n- name: Gather vswitch info about ESXi Host\n  community.vmware.vmware_vswitch_info:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n    delegate_to: localhost\n  register: all_vswitch_info\n"
  },
  "community.vmware.vsphere_copy": {
    "doc": {
      "description": "Upload files to a VMware datastore through a vCenter REST API.",
      "has_action": false,
      "notes": "This module ought to be run from a system that can access the vCenter or the ESXi directly and has the file to transfer. It can be the normal remote target or you can change it either by using C(transport: local) or using C(delegate_to).\nTested on vSphere 5.5 and ESXi 6.7\nAll modules requires API write access and hence is not supported on a free ESXi license.",
      "options": {
        "datacenter": {
          "aliases": [],
          "description": "The datacenter on the vCenter server that holds the datastore.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "datastore": {
          "aliases": [],
          "description": "The datastore to push files to.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "hostname": {
          "aliases": [
            "host"
          ],
          "description": "The hostname or IP address of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "password": {
          "aliases": [
            "pass",
            "pwd"
          ],
          "description": "The password of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "path": {
          "aliases": [
            "dest"
          ],
          "description": "The file to push to the datastore.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "port": {
          "aliases": [],
          "description": "The port number of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "default": "443",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "proxy_host": {
          "aliases": [],
          "description": "Address of a proxy that will receive all HTTPS requests and relay them.\nThe format is a hostname or a IP.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.\nThis feature depends on a version of pyvmomi greater than v6.7.1.2018.12",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "proxy_port": {
          "aliases": [],
          "description": "Port of the HTTP proxy that will receive all HTTPS requests and relay them.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead.",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "src": {
          "aliases": [
            "name"
          ],
          "description": "The file to push to vCenter.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The timeout in seconds for the upload to the datastore.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [
            "login"
          ],
          "description": "The username of the vSphere vCenter or ESXi server.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.\nEnvironment variable support added in Ansible 2.6.",
          "type": "str",
          "required": false,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.\nIf the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.\nEnvironment variable support added in Ansible 2.6.\nIf set to C(true), please make sure Python >= 2.7.9 is installed on the given machine.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Copy a file to a VMware datastore"
    },
    "examples": "\n- name: Copy file to datastore using delegate_to\n  community.vmware.vsphere_copy:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    src: /some/local/file\n    datacenter: DC1 Someplace\n    datastore: datastore1\n    path: some/remote/file\n  delegate_to: localhost\n\n- name: Copy file to datastore when datacenter is inside folder called devel\n  community.vmware.vsphere_copy:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    src: /some/local/file\n    datacenter: devel/DC1\n    datastore: datastore1\n    path: some/remote/file\n  delegate_to: localhost\n\n- name: Copy file to datastore using other_system\n  community.vmware.vsphere_copy:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    src: /other/local/file\n    datacenter: DC2 Someplace\n    datastore: datastore2\n    path: other/remote/file\n  delegate_to: other_system\n"
  },
  "community.vmware.vsphere_file": {
    "doc": {
      "description": "Manage files on a vCenter datastore.",
      "has_action": false,
      "notes": "The vSphere folder API does not allow to remove directory objects.",
      "options": {
        "datacenter": {
          "aliases": [],
          "description": "The datacenter on the vCenter server that holds the datastore.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "datastore": {
          "aliases": [],
          "description": "The datastore on the vCenter server to push files to.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "host": {
          "aliases": [
            "hostname"
          ],
          "description": "The vCenter server on which the datastore is available.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "password": {
          "aliases": [],
          "description": "The password to authenticate on the vCenter server.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "path": {
          "aliases": [
            "dest"
          ],
          "description": "The file or directory on the datastore on the vCenter server.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "state": {
          "aliases": [],
          "description": "The state of or the action on the provided path.\nIf C(absent), the file will be removed.\nIf C(directory), the directory will be created.\nIf C(file), more information of the (existing) file will be returned.\nIf C(touch), an empty file will be created if the path does not exist.",
          "default": "file",
          "type": "str",
          "required": false,
          "choices": [
            "absent",
            "directory",
            "file",
            "touch"
          ],
          "suboptions": {}
        },
        "timeout": {
          "aliases": [],
          "description": "The timeout in seconds for the upload to the datastore.",
          "default": "10",
          "type": "int",
          "required": false,
          "suboptions": {}
        },
        "username": {
          "aliases": [],
          "description": "The user name to authenticate on the vCenter server.",
          "type": "str",
          "required": true,
          "suboptions": {}
        },
        "validate_certs": {
          "aliases": [],
          "description": "If C(false), SSL certificates will not be validated. This should only be set to C(false) when no other option exists.",
          "default": "True",
          "type": "bool",
          "required": false,
          "suboptions": {}
        }
      },
      "short_description": "Manage files on a vCenter datastore"
    },
    "examples": "\n- name: Create an empty file on a datastore\n  community.vmware.vsphere_file:\n    host: '{{ vhost }}'\n    username: '{{ vuser }}'\n    password: '{{ vpass }}'\n    datacenter: DC1 Someplace\n    datastore: datastore1\n    path: some/remote/file\n    state: touch\n  delegate_to: localhost\n\n- name: Create a directory on a datastore\n  community.vmware.vsphere_file:\n    host: '{{ vhost }}'\n    username: '{{ vuser }}'\n    password: '{{ vpass }}'\n    datacenter: DC2 Someplace\n    datastore: datastore2\n    path: other/remote/file\n    state: directory\n  delegate_to: localhost\n\n- name: Query a file on a datastore\n  community.vmware.vsphere_file:\n    host: '{{ vhost }}'\n    username: '{{ vuser }}'\n    password: '{{ vpass }}'\n    datacenter: DC1 Someplace\n    datastore: datastore1\n    path: some/remote/file\n    state: file\n  delegate_to: localhost\n  ignore_errors: true\n\n- name: Delete a file on a datastore\n  community.vmware.vsphere_file:\n    host: '{{ vhost }}'\n    username: '{{ vuser }}'\n    password: '{{ vpass }}'\n    datacenter: DC2 Someplace\n    datastore: datastore2\n    path: other/remote/file\n    state: absent\n  delegate_to: localhost\n"
  }
}